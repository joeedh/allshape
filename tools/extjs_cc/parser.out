Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    VAR_TYPE_PREC
    COMMENT
    CLOSECOM
    EMPTYLINE
    TEMPLATE
    THEN
    BNEGATE
    OPENCOM
    SLASHR
    MLSTRLIT
    ALL
    BACKSLASH
    newline
    VARIABLE

Grammar

Rule 0     S' -> statementlist
Rule 1     statementlist -> statement
Rule 2     statementlist -> statement_nonctrl
Rule 3     statementlist -> statementlist statement
Rule 4     statementlist -> statementlist statement_nonctrl
Rule 5     statementlist -> <empty>
Rule 6     push_scope -> <empty>
Rule 7     pop_scope -> <empty>
Rule 8     opt_colon_type -> COLON var_type
Rule 9     opt_colon_type -> <empty>
Rule 10    assign_statement -> assign COLON var_type
Rule 11    assign_statement -> <empty>
Rule 12    statement -> function
Rule 13    statement -> class
Rule 14    statement -> typed_class
Rule 15    statement -> if
Rule 16    statement -> else
Rule 17    statement -> while
Rule 18    statement -> with
Rule 19    statement -> dowhile
Rule 20    statement -> for
Rule 21    statement -> return SEMI
Rule 22    statement -> yield SEMI
Rule 23    statement -> break SEMI
Rule 24    statement -> continue SEMI
Rule 25    statement -> throw SEMI
Rule 26    statement -> try
Rule 27    statement -> catch
Rule 28    statement -> finally
Rule 29    statement -> switch
Rule 30    statement -> func_native SEMI
Rule 31    statement -> import_decl
Rule 32    statement -> export_decl
Rule 33    import_decl -> IMPORT import_clause from_clause SEMI
Rule 34    import_decl -> IMPORT module_spec SEMI
Rule 35    import_clause -> import_def_bind
Rule 36    import_clause -> name_space_import
Rule 37    import_clause -> named_imports
Rule 38    import_clause -> import_def_bind COMMA name_space_import
Rule 39    import_clause -> import_def_bind COMMA named_imports
Rule 40    import_def_bind -> import_bind
Rule 41    name_space_import -> TIMES ID import_bind
Rule 42    named_imports -> LBRACKET RBRACKET
Rule 43    named_imports -> LBRACKET import_list RBRACKET
Rule 44    from_clause -> FROM module_spec
Rule 45    import_list -> import_spec
Rule 46    import_list -> import_list COMMA import_spec
Rule 47    import_spec -> import_bind
Rule 48    import_spec -> ID ID import_bind
Rule 49    import_bind -> binding_ident
Rule 50    module_spec -> STRINGLIT
Rule 51    binding_ident -> ID
Rule 52    statement_nonctrl -> expr SEMI
Rule 53    statement_nonctrl -> var_decl SEMI
Rule 54    statement_nonctrl -> funcref SEMI
Rule 55    statement_nonctrl -> SEMI
Rule 56    statement_nonctrl -> if
Rule 57    statement_nonctrl -> else
Rule 58    statement_nonctrl -> for
Rule 59    statement_nonctrl -> dowhile
Rule 60    statement_nonctrl -> while
Rule 61    statement_nonctrl -> return SEMI
Rule 62    statement_nonctrl -> yield SEMI
Rule 63    statement_nonctrl -> break SEMI
Rule 64    statement_nonctrl -> continue SEMI
Rule 65    statement_nonctrl -> throw SEMI
Rule 66    statement_nonctrl -> try
Rule 67    statement_nonctrl -> catch
Rule 68    statement_nonctrl -> finally
Rule 69    statement_nonctrl -> delete SEMI
Rule 70    var_decl_or_type -> var_decl
Rule 71    var_decl_or_type -> var_type
Rule 72    templatedeflist -> var_type
Rule 73    templatedeflist -> var_type ASSIGN var_type
Rule 74    templatedeflist -> templatedeflist COMMA var_type
Rule 75    templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type
Rule 76    template -> lthan_restrict templatedeflist gthan_restrict
Rule 77    type_modifiers -> type_modifiers UNSIGNED
Rule 78    type_modifiers -> type_modifiers SIGNED
Rule 79    type_modifiers -> type_modifiers CONST
Rule 80    type_modifiers -> GLOBAL
Rule 81    type_modifiers -> VAR
Rule 82    type_modifiers -> STATIC
Rule 83    left_id -> id
Rule 84    id_opt -> id
Rule 85    id_opt -> <empty>
Rule 86    template_ref -> lthan_restrict simple_templatedeflist gthan_restrict
Rule 87    template_ref_validate -> lthan_restrict simple_templatedeflist gthan_restrict
Rule 88    template_validate -> template
Rule 89    template_validate -> template_ref_validate
Rule 90    lthan_restrict -> TLTHAN
Rule 91    gthan_restrict -> TGTHAN
Rule 92    id_1 -> id
Rule 93    var_decl_no_list -> var_type
Rule 94    var_decl_no_list -> type_modifiers var_decl_no_list
Rule 95    var_decl_no_list -> var_decl_no_list ASSIGN expr
Rule 96    var_decl -> type_modifiers var_type
Rule 97    var_decl -> var_decl ASSIGN expr
Rule 98    var_decl -> var_decl COMMA id
Rule 99    var_decl -> var_decl COMMA id ASSIGN expr
Rule 100   ident_arr -> id
Rule 101   ident_arr -> ident_arr LSBRACKET NUMBER RSBRACKET
Rule 102   var_decl_with_arr -> type_modifiers var_type ident_arr
Rule 103   var_decl_with_arr -> var_decl_with_arr ASSIGN expr
Rule 104   var_decl_with_arr -> var_decl_with_arr COMMA ident_arr
Rule 105   var_decl_with_arr -> var_decl_with_arr COMMA ident_arr ASSIGN expr
Rule 106   id_var_type -> id
Rule 107   id_var_decl -> id
Rule 108   empty -> empty
Rule 109   empty -> <empty>
Rule 110   var_type -> var_type id_var_type
Rule 111   var_type -> id_var_type
Rule 112   var_type -> INT
Rule 113   var_type -> SHORT
Rule 114   var_type -> FLOAT
Rule 115   var_type -> DOUBLE
Rule 116   var_type -> CHAR
Rule 117   var_type -> BYTE
Rule 118   var_type -> INFERRED
Rule 119   var_type -> var_type template_ref
Rule 120   typeof_opt -> TYPEOF
Rule 121   typeof_opt -> <empty>
Rule 122   simple_templatedeflist -> typeof_opt var_type
Rule 123   simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type
Rule 124   simple_var_decl -> VAR id
Rule 125   simple_var_decl -> id
Rule 126   cmplx_assign -> ASSIGNPLUS
Rule 127   cmplx_assign -> ASSIGNMINUS
Rule 128   cmplx_assign -> ASSIGNDIVIDE
Rule 129   cmplx_assign -> ASSIGNTIMES
Rule 130   cmplx_assign -> ASSIGNBOR
Rule 131   cmplx_assign -> ASSIGNBAND
Rule 132   cmplx_assign -> ASSIGNBXOR
Rule 133   cmplx_assign -> ASSIGNLSHIFT
Rule 134   cmplx_assign -> ASSIGNRSHIFT
Rule 135   cmplx_assign -> ASSIGNRRSHIFT
Rule 136   cmplx_assign -> ASSIGNLLSHIFT
Rule 137   cmplx_assign -> ASSIGN
Rule 138   throw -> THROW expr
Rule 139   assign -> expr cmplx_assign expr
Rule 140   assign -> assign cmplx_assign expr
Rule 141   assign -> expr
Rule 142   exprlist -> expr
Rule 143   exprlist -> exprlist COMMA expr
Rule 144   typed_class -> TYPED CLASS id template_opt typed_class_tail
Rule 145   typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET
Rule 146   typed_class_body_opt -> typed_class_list
Rule 147   typed_class_body_opt -> <empty>
Rule 148   typed_class_list -> typed_class_element
Rule 149   typed_class_list -> typed_class_list typed_class_element
Rule 150   typed_class_element -> class_element
Rule 151   typed_class_element -> var_decl_with_arr SEMI
Rule 152   typed_inherit_opt -> EXTENDS id
Rule 153   typed_inherit_opt -> <empty>
Rule 154   class -> CLASS id template_opt class_tail
Rule 155   exprclass -> CLASS id_opt class_tail
Rule 156   class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET
Rule 157   class_parent_id -> var_type
Rule 158   class_parent_id -> class_parent_id DOT var_type
Rule 159   class_list -> class_parent_id
Rule 160   class_list -> class_list COMMA class_parent_id
Rule 161   class_heritage -> EXTENDS class_list
Rule 162   class_heritage_opt -> class_heritage
Rule 163   class_heritage_opt -> <empty>
Rule 164   class_body_opt -> class_element_list
Rule 165   class_body_opt -> <empty>
Rule 166   class_element_list -> class_element
Rule 167   class_element_list -> class_element_list class_element
Rule 168   class_element -> STATIC method_def
Rule 169   class_element -> method_def
Rule 170   class_element -> class_property SEMI
Rule 171   id_right -> id
Rule 172   method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
Rule 173   getset_id -> id
Rule 174   getset_id -> NUMBER
Rule 175   method_def -> method
Rule 176   method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
Rule 177   method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
Rule 178   var_element -> id
Rule 179   var_element -> INT
Rule 180   var_element -> SHORT
Rule 181   var_element -> FLOAT
Rule 182   var_element -> DOUBLE
Rule 183   var_element -> CHAR
Rule 184   var_element -> BYTE
Rule 185   var_element -> id template_ref
Rule 186   var_type2 -> var_element
Rule 187   class_property -> var_type2 id
Rule 188   class_property -> class_property ASSIGN expr
Rule 189   class_property -> class_property COMMA id
Rule 190   class_property -> class_property COMMA id ASSIGN expr
Rule 191   setter_param_list -> var_type_opt id
Rule 192   setter_param_list -> var_type
Rule 193   template_ref_opt -> template_ref
Rule 194   template_ref_opt -> <empty>
Rule 195   func_call -> template_ref_opt LPAREN exprlist RPAREN
Rule 196   func_call -> template_ref_opt LPAREN RPAREN
Rule 197   funcdeflist -> var_decl_no_list
Rule 198   funcdeflist -> funcdeflist COMMA var_decl_no_list
Rule 199   funcdeflist -> <empty>
Rule 200   template_opt -> template
Rule 201   template_opt -> <empty>
Rule 202   func_type_opt -> COLON var_type_opt
Rule 203   func_type_opt -> <empty>
Rule 204   funcref -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
Rule 205   func_native -> NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
Rule 206   function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
Rule 207   lbracket_restrict -> LBRACKET
Rule 208   rbracket_restrict -> RBRACKET
Rule 209   var_type_opt -> var_type
Rule 210   var_type_opt -> <empty>
Rule 211   colon_opt -> COLON
Rule 212   colon_opt -> <empty>
Rule 213   func_name_opt -> ID
Rule 214   func_name_opt -> <empty>
Rule 215   exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
Rule 216   exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
Rule 217   array_literal -> LSBRACKET exprlist RSBRACKET
Rule 218   array_literal -> LSBRACKET RSBRACKET
Rule 219   id_str_or_num -> id
Rule 220   id_str_or_num -> NUMBER
Rule 221   id_str_or_num -> STRINGLIT
Rule 222   typeof -> TYPEOF expr
Rule 223   obj_lit_list -> id_str_or_num COLON expr
Rule 224   obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON expr
Rule 225   obj_lit_list -> obj_lit_list COMMA
Rule 226   obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict
Rule 227   obj_literal -> lbracket_restrict rbracket_restrict
Rule 228   delete -> DELETE expr
Rule 229   new -> NEW expr
Rule 230   inc -> expr INC
Rule 231   inc -> INC expr
Rule 232   dec -> expr DEC
Rule 233   dec -> DEC expr
Rule 234   not -> NOT expr
Rule 235   bitinv -> BITINV expr
Rule 236   strlit -> STRINGLIT
Rule 237   lparen_restrict -> LPAREN
Rule 238   rparen_restrict -> RPAREN
Rule 239   lsbracket_restrict -> LSBRACKET
Rule 240   rsbracket_restrict -> RSBRACKET
Rule 241   expr -> NUMBER
Rule 242   expr -> strlit
Rule 243   expr -> id
Rule 244   expr -> id template_ref
Rule 245   expr -> template_ref
Rule 246   expr -> array_literal
Rule 247   expr -> exprfunction
Rule 248   expr -> obj_literal
Rule 249   expr -> expr cmplx_assign expr
Rule 250   expr -> expr cmplx_assign expr COLON var_type SEMI
Rule 251   expr -> expr RSHIFT expr
Rule 252   expr -> expr LSHIFT expr
Rule 253   expr -> expr LLSHIFT expr
Rule 254   expr -> expr RRSHIFT expr
Rule 255   expr -> expr COND_DOT expr
Rule 256   expr -> expr DOT expr
Rule 257   expr -> expr LAND expr
Rule 258   expr -> expr LOR expr
Rule 259   expr -> expr BOR expr
Rule 260   expr -> expr INSTANCEOF expr
Rule 261   expr -> expr BXOR expr
Rule 262   expr -> expr BAND expr
Rule 263   expr -> expr EQUAL expr
Rule 264   expr -> expr EQUAL_STRICT expr
Rule 265   expr -> expr NOTEQUAL_STRICT expr
Rule 266   expr -> expr GTHAN expr
Rule 267   expr -> expr GTHANEQ expr
Rule 268   expr -> expr LTHAN expr
Rule 269   expr -> expr MOD expr
Rule 270   expr -> expr LTHANEQ expr
Rule 271   expr -> expr NOTEQUAL expr
Rule 272   expr -> expr PLUS expr
Rule 273   expr -> expr MINUS expr
Rule 274   expr -> expr DIVIDE expr
Rule 275   expr -> expr TIMES expr
Rule 276   expr -> expr IN expr
Rule 277   expr -> lparen_restrict expr rparen_restrict
Rule 278   expr -> expr func_call
Rule 279   expr -> expr lsbracket_restrict expr rsbracket_restrict
Rule 280   expr -> expr QEST expr COLON expr
Rule 281   expr -> expr_uminus
Rule 282   expr -> not
Rule 283   expr -> bitinv
Rule 284   expr -> new
Rule 285   expr -> inc
Rule 286   expr -> dec
Rule 287   expr -> typeof
Rule 288   expr -> re_lit
Rule 289   expr -> expr COMMA expr
Rule 290   expr_uminus -> MINUS expr
Rule 291   paren_expr -> LPAREN expr RPAREN
Rule 292   paren_expr -> LPAREN RPAREN
Rule 293   assign_opt -> assign
Rule 294   assign_opt -> <empty>
Rule 295   expr_opt -> expr
Rule 296   expr_opt -> <empty>
Rule 297   re_lit -> REGEXPR
Rule 298   for_var_decl -> id
Rule 299   for_var_decl -> id ASSIGN expr
Rule 300   for_var_decl -> var_decl
Rule 301   in_or_of -> IN
Rule 302   in_or_of -> OF
Rule 303   for_decl -> for_var_decl SEMI expr_opt SEMI expr_opt
Rule 304   for_decl -> for_var_decl in_or_of expr
Rule 305   for -> FOR LPAREN for_decl RPAREN statement_nonctrl
Rule 306   for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
Rule 307   ctrl_statement -> statement_nonctrl
Rule 308   ctrl_statement -> LBRACKET statementlist_opt RBRACKET
Rule 309   ctrl_statement -> SEMI
Rule 310   dowhile -> DO ctrl_statement WHILE paren_expr
Rule 311   while -> WHILE paren_expr statement_nonctrl
Rule 312   while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET
Rule 313   default_case -> DEFAULT COLON statementlist
Rule 314   statementlist_opt -> statementlist
Rule 315   statementlist_opt -> <empty>
Rule 316   case_clause -> CASE expr COLON statementlist_opt
Rule 317   case_clauses -> case_clause
Rule 318   case_clauses -> case_clauses case_clause
Rule 319   case_clauses_opt -> case_clauses
Rule 320   case_clauses_opt -> <empty>
Rule 321   case_block -> case_clauses
Rule 322   case_block -> case_clauses_opt default_case case_clauses_opt
Rule 323   switch -> SWITCH paren_expr LBRACKET case_block RBRACKET
Rule 324   with -> WITH paren_expr ctrl_statement
Rule 325   if -> IF paren_expr ctrl_statement
Rule 326   try -> TRY statement_nonctrl
Rule 327   try -> TRY LBRACKET statementlist RBRACKET
Rule 328   try -> TRY LBRACKET RBRACKET
Rule 329   finally -> FINALLY LBRACKET statementlist_opt RBRACKET
Rule 330   export_decl -> EXPORT TIMES from_clause SEMI
Rule 331   export_decl -> EXPORT export_clause from_clause SEMI
Rule 332   export_decl -> EXPORT export_clause SEMI
Rule 333   export_decl -> EXPORT var_decl SEMI
Rule 334   export_decl -> EXPORT function
Rule 335   export_decl -> EXPORT class
Rule 336   export_decl -> EXPORT DEFAULT function
Rule 337   export_decl -> EXPORT DEFAULT class
Rule 338   export_decl -> EXPORT DEFAULT assign
Rule 339   export_clause -> LBRACKET RBRACKET
Rule 340   export_clause -> LBRACKET exports_list RBRACKET
Rule 341   export_clause -> LBRACKET exports_list COMMA RBRACKET
Rule 342   exports_list -> export_spec
Rule 343   exports_list -> exports_list COMMA export_spec
Rule 344   export_spec -> ID
Rule 345   export_spec -> ID ID ID
Rule 346   catch -> CATCH paren_expr statement_nonctrl
Rule 347   catch -> CATCH paren_expr LBRACKET statementlist RBRACKET
Rule 348   else -> ELSE ctrl_statement
Rule 349   break -> BREAK
Rule 350   continue -> CONTINUE
Rule 351   return -> RETURN expr
Rule 352   return -> RETURN
Rule 353   yield -> YIELD expr
Rule 354   yield -> YIELD
Rule 355   id -> ID
Rule 356   id -> GET
Rule 357   id -> SET

Terminals, with rules where they appear

ALL                  : 
ASSIGN               : 73 75 95 97 99 103 105 137 188 190 299
ASSIGNBAND           : 131
ASSIGNBOR            : 130
ASSIGNBXOR           : 132
ASSIGNDIVIDE         : 128
ASSIGNLLSHIFT        : 136
ASSIGNLSHIFT         : 133
ASSIGNMINUS          : 127
ASSIGNPLUS           : 126
ASSIGNRRSHIFT        : 135
ASSIGNRSHIFT         : 134
ASSIGNTIMES          : 129
BACKSLASH            : 
BAND                 : 262
BITINV               : 235
BNEGATE              : 
BOR                  : 259
BREAK                : 349
BXOR                 : 261
BYTE                 : 117 184
CASE                 : 316
CATCH                : 346 347
CHAR                 : 116 183
CLASS                : 144 154 155
CLOSECOM             : 
COLON                : 8 10 202 211 223 224 250 280 313 316
COMMA                : 38 39 46 74 75 98 99 104 105 123 143 160 189 190 198 224 225 289 341 343
COMMENT              : 
COND_DOT             : 255
CONST                : 79
CONTINUE             : 350
DEC                  : 232 233
DEFAULT              : 313 336 337 338
DELETE               : 228
DIVIDE               : 274
DO                   : 310
DOT                  : 158 256
DOUBLE               : 115 182
ELSE                 : 348
EMPTYLINE            : 
EQUAL                : 263
EQUAL_STRICT         : 264
EXPORT               : 330 331 332 333 334 335 336 337 338
EXTENDS              : 152 161
FINALLY              : 329
FLOAT                : 114 181
FOR                  : 305 306
FROM                 : 44
FUNCTION             : 204 205 206 215 216
GET                  : 176 356
GLOBAL               : 80
GTHAN                : 266
GTHANEQ              : 267
ID                   : 41 48 48 51 213 344 345 345 345 355
IF                   : 325
IMPORT               : 33 34
IN                   : 276 301
INC                  : 230 231
INFERRED             : 118
INSTANCEOF           : 260
INT                  : 112 179
LAND                 : 257
LBRACKET             : 42 43 145 156 172 176 177 206 207 306 308 312 323 327 328 329 339 340 341 347
LLSHIFT              : 253
LOR                  : 258
LPAREN               : 172 176 177 195 196 204 205 206 215 216 237 291 292 305 306
LSBRACKET            : 101 217 218 239
LSHIFT               : 252
LTHAN                : 268
LTHANEQ              : 270
MINUS                : 273 290
MLSTRLIT             : 
MOD                  : 269
NATIVE               : 205
NEW                  : 229
NOT                  : 234
NOTEQUAL             : 271
NOTEQUAL_STRICT      : 265
NUMBER               : 101 174 220 241
OF                   : 302
OPENCOM              : 
PLUS                 : 272
QEST                 : 280
RBRACKET             : 42 43 145 156 172 176 177 206 208 306 308 312 323 327 328 329 339 340 341 347
REGEXPR              : 297
RETURN               : 351 352
RPAREN               : 172 176 177 195 196 204 205 206 215 216 238 291 292 305 306
RRSHIFT              : 254
RSBRACKET            : 101 217 218 240
RSHIFT               : 251
SEMI                 : 21 22 23 24 25 30 33 34 52 53 54 55 61 62 63 64 65 69 151 170 250 303 303 309 330 331 332 333
SET                  : 177 357
SHORT                : 113 180
SIGNED               : 78
SLASHR               : 
STATIC               : 82 168
STRINGLIT            : 50 221 236
SWITCH               : 323
TEMPLATE             : 
TGTHAN               : 91
THEN                 : 
THROW                : 138
TIMES                : 41 275 330
TLTHAN               : 90
TRY                  : 326 327 328
TYPED                : 144
TYPEOF               : 120 222
UNSIGNED             : 77
VAR                  : 81 124
VARIABLE             : 
VAR_TYPE_PREC        : 
WHILE                : 310 311 312
WITH                 : 324
YIELD                : 353 354
error                : 
newline              : 

Nonterminals, with rules where they appear

array_literal        : 246
assign               : 10 140 293 338
assign_opt           : 
assign_statement     : 
binding_ident        : 49
bitinv               : 283
break                : 23 63
case_block           : 323
case_clause          : 317 318
case_clauses         : 318 319 321
case_clauses_opt     : 322 322
catch                : 27 67
class                : 13 335 337
class_body_opt       : 156
class_element        : 150 166 167
class_element_list   : 164 167
class_heritage       : 162
class_heritage_opt   : 156
class_list           : 160 161
class_parent_id      : 158 159 160
class_property       : 170 188 189 190
class_tail           : 154 155
cmplx_assign         : 139 140 249 250
colon_opt            : 215 216
continue             : 24 64
ctrl_statement       : 310 324 325 348
dec                  : 286
default_case         : 322
delete               : 69
dowhile              : 19 59
else                 : 16 57
empty                : 108
export_clause        : 331 332
export_decl          : 32
export_spec          : 342 343
exports_list         : 340 341 343
expr                 : 52 95 97 99 103 105 138 139 139 140 141 142 143 188 190 222 223 224 228 229 230 231 232 233 234 235 249 249 250 250 251 251 252 252 253 253 254 254 255 255 256 256 257 257 258 258 259 259 260 260 261 261 262 262 263 263 264 264 265 265 266 266 267 267 268 268 269 269 270 270 271 271 272 272 273 273 274 274 275 275 276 276 277 278 279 279 280 280 280 289 289 290 291 295 299 304 316 351 353
expr_opt             : 303 303
expr_uminus          : 281
exprclass            : 
exprfunction         : 247
exprlist             : 143 195 217
finally              : 28 68
for                  : 20 58
for_decl             : 305 306
for_var_decl         : 303 304
from_clause          : 33 330 331
func_call            : 278
func_name_opt        : 215 216
func_native          : 30
func_type_opt        : 172 176 177 204 205 206
funcdeflist          : 172 198 204 205 206 215
funcref              : 54
function             : 12 334 336
getset_id            : 176 177
gthan_restrict       : 76 86 87
id                   : 83 84 92 98 99 100 106 107 124 125 144 152 154 171 173 178 185 187 189 190 191 204 205 206 219 243 244 298 299
id_1                 : 
id_opt               : 155
id_right             : 172
id_str_or_num        : 223 224
id_var_decl          : 
id_var_type          : 110 111
ident_arr            : 101 102 104 105
if                   : 15 56
import_bind          : 40 41 47 48
import_clause        : 33
import_decl          : 31
import_def_bind      : 35 38 39
import_list          : 43 46
import_spec          : 45 46
in_or_of             : 304
inc                  : 285
lbracket_restrict    : 215 216 226 227
left_id              : 
lparen_restrict      : 277
lsbracket_restrict   : 279
lthan_restrict       : 76 86 87
method               : 175
method_def           : 168 169
module_spec          : 34 44
name_space_import    : 36 38
named_imports        : 37 39
new                  : 284
not                  : 282
obj_lit_list         : 224 225 226
obj_literal          : 248
opt_colon_type       : 
paren_expr           : 310 311 312 323 324 325 346 347
pop_scope            : 
push_scope           : 204 205 206 215 216 226
rbracket_restrict    : 215 216 226 227
re_lit               : 288
return               : 21 61
rparen_restrict      : 277
rsbracket_restrict   : 279
setter_param_list    : 177
simple_templatedeflist : 86 87 123
simple_var_decl      : 
statement            : 1 3
statement_nonctrl    : 2 4 305 307 311 326 346
statementlist        : 3 4 313 314 327 347 0
statementlist_opt    : 172 176 177 206 215 216 306 308 312 316 329
strlit               : 242
switch               : 29
template             : 88 200
template_opt         : 144 154 204 205 206 215 216
template_ref         : 119 185 193 244 245
template_ref_opt     : 195 196
template_ref_validate : 89
template_validate    : 
templatedeflist      : 74 75 76
throw                : 25 65
try                  : 26 66
type_modifiers       : 77 78 79 94 96 102
typed_class          : 14
typed_class_body_opt : 145
typed_class_element  : 148 149
typed_class_list     : 146 149
typed_class_tail     : 144
typed_inherit_opt    : 145
typeof               : 287
typeof_opt           : 122 123
var_decl             : 53 70 97 98 99 300 333
var_decl_no_list     : 94 95 197 198
var_decl_or_type     : 
var_decl_with_arr    : 103 104 105 151
var_element          : 186
var_type             : 8 10 71 72 73 73 74 75 75 93 96 102 110 119 122 123 157 158 192 209 250
var_type2            : 187
var_type_opt         : 191 202 215 216
while                : 17 60
with                 : 18
yield                : 22 62

Parsing method: LALR

state 0

    (0) S' -> . statementlist
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    $end            reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    try                            shift and go to state 42
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 87

state 1

    (28) statement -> finally .
    (68) statement_nonctrl -> finally .

  ! reduce/reduce conflict for SEMI resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for CLASS resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for TYPED resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for IF resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for ELSE resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for WHILE resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for WITH resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for DO resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for FOR resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for RETURN resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for YIELD resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for BREAK resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for THROW resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for TRY resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for CATCH resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for FINALLY resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for SWITCH resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for NATIVE resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for IMPORT resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for EXPORT resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for NUMBER resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for DELETE resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for ID resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for GET resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for SET resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for LPAREN resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for MINUS resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for NOT resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for BITINV resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for NEW resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for INC resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for DEC resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for VAR resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for STATIC resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for CASE resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 28 (statement -> finally .)
  ! reduce/reduce conflict for $end resolved using rule 28 (statement -> finally .)
    SEMI            reduce using rule 28 (statement -> finally .)
    FUNCTION        reduce using rule 28 (statement -> finally .)
    CLASS           reduce using rule 28 (statement -> finally .)
    TYPED           reduce using rule 28 (statement -> finally .)
    IF              reduce using rule 28 (statement -> finally .)
    ELSE            reduce using rule 28 (statement -> finally .)
    WHILE           reduce using rule 28 (statement -> finally .)
    WITH            reduce using rule 28 (statement -> finally .)
    DO              reduce using rule 28 (statement -> finally .)
    FOR             reduce using rule 28 (statement -> finally .)
    RETURN          reduce using rule 28 (statement -> finally .)
    YIELD           reduce using rule 28 (statement -> finally .)
    BREAK           reduce using rule 28 (statement -> finally .)
    CONTINUE        reduce using rule 28 (statement -> finally .)
    THROW           reduce using rule 28 (statement -> finally .)
    TRY             reduce using rule 28 (statement -> finally .)
    CATCH           reduce using rule 28 (statement -> finally .)
    FINALLY         reduce using rule 28 (statement -> finally .)
    SWITCH          reduce using rule 28 (statement -> finally .)
    NATIVE          reduce using rule 28 (statement -> finally .)
    IMPORT          reduce using rule 28 (statement -> finally .)
    EXPORT          reduce using rule 28 (statement -> finally .)
    NUMBER          reduce using rule 28 (statement -> finally .)
    DELETE          reduce using rule 28 (statement -> finally .)
    STRINGLIT       reduce using rule 28 (statement -> finally .)
    ID              reduce using rule 28 (statement -> finally .)
    GET             reduce using rule 28 (statement -> finally .)
    SET             reduce using rule 28 (statement -> finally .)
    LSBRACKET       reduce using rule 28 (statement -> finally .)
    LPAREN          reduce using rule 28 (statement -> finally .)
    MINUS           reduce using rule 28 (statement -> finally .)
    NOT             reduce using rule 28 (statement -> finally .)
    BITINV          reduce using rule 28 (statement -> finally .)
    NEW             reduce using rule 28 (statement -> finally .)
    INC             reduce using rule 28 (statement -> finally .)
    DEC             reduce using rule 28 (statement -> finally .)
    TYPEOF          reduce using rule 28 (statement -> finally .)
    REGEXPR         reduce using rule 28 (statement -> finally .)
    GLOBAL          reduce using rule 28 (statement -> finally .)
    VAR             reduce using rule 28 (statement -> finally .)
    STATIC          reduce using rule 28 (statement -> finally .)
    TLTHAN          reduce using rule 28 (statement -> finally .)
    LBRACKET        reduce using rule 28 (statement -> finally .)
    CASE            reduce using rule 28 (statement -> finally .)
    RBRACKET        reduce using rule 28 (statement -> finally .)
    DEFAULT         reduce using rule 28 (statement -> finally .)
    $end            reduce using rule 28 (statement -> finally .)

  ! SEMI            [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! FUNCTION        [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! CLASS           [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! TYPED           [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! IF              [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! ELSE            [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! WHILE           [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! WITH            [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! DO              [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! FOR             [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! RETURN          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! YIELD           [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! BREAK           [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! CONTINUE        [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! THROW           [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! TRY             [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! CATCH           [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! FINALLY         [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! SWITCH          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! NATIVE          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! IMPORT          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! EXPORT          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! NUMBER          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! DELETE          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! STRINGLIT       [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! ID              [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! GET             [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! SET             [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! LSBRACKET       [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! LPAREN          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! MINUS           [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! NOT             [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! BITINV          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! NEW             [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! INC             [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! DEC             [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! TYPEOF          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! REGEXPR         [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! GLOBAL          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! VAR             [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! STATIC          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! TLTHAN          [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! LBRACKET        [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! CASE            [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! RBRACKET        [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! DEFAULT         [ reduce using rule 68 (statement_nonctrl -> finally .) ]
  ! $end            [ reduce using rule 68 (statement_nonctrl -> finally .) ]


state 2

    (52) statement_nonctrl -> expr . SEMI
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    SEMI            shift and go to state 90
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 3

    (243) expr -> id .
    (244) expr -> id . template_ref
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for TLTHAN resolved as shift
    COLON           reduce using rule 243 (expr -> id .)
    RSHIFT          reduce using rule 243 (expr -> id .)
    LSHIFT          reduce using rule 243 (expr -> id .)
    LLSHIFT         reduce using rule 243 (expr -> id .)
    RRSHIFT         reduce using rule 243 (expr -> id .)
    COND_DOT        reduce using rule 243 (expr -> id .)
    DOT             reduce using rule 243 (expr -> id .)
    LAND            reduce using rule 243 (expr -> id .)
    LOR             reduce using rule 243 (expr -> id .)
    BOR             reduce using rule 243 (expr -> id .)
    INSTANCEOF      reduce using rule 243 (expr -> id .)
    BXOR            reduce using rule 243 (expr -> id .)
    BAND            reduce using rule 243 (expr -> id .)
    EQUAL           reduce using rule 243 (expr -> id .)
    EQUAL_STRICT    reduce using rule 243 (expr -> id .)
    NOTEQUAL_STRICT reduce using rule 243 (expr -> id .)
    GTHAN           reduce using rule 243 (expr -> id .)
    GTHANEQ         reduce using rule 243 (expr -> id .)
    LTHAN           reduce using rule 243 (expr -> id .)
    MOD             reduce using rule 243 (expr -> id .)
    LTHANEQ         reduce using rule 243 (expr -> id .)
    NOTEQUAL        reduce using rule 243 (expr -> id .)
    PLUS            reduce using rule 243 (expr -> id .)
    MINUS           reduce using rule 243 (expr -> id .)
    DIVIDE          reduce using rule 243 (expr -> id .)
    TIMES           reduce using rule 243 (expr -> id .)
    IN              reduce using rule 243 (expr -> id .)
    QEST            reduce using rule 243 (expr -> id .)
    COMMA           reduce using rule 243 (expr -> id .)
    INC             reduce using rule 243 (expr -> id .)
    DEC             reduce using rule 243 (expr -> id .)
    ASSIGNPLUS      reduce using rule 243 (expr -> id .)
    ASSIGNMINUS     reduce using rule 243 (expr -> id .)
    ASSIGNDIVIDE    reduce using rule 243 (expr -> id .)
    ASSIGNTIMES     reduce using rule 243 (expr -> id .)
    ASSIGNBOR       reduce using rule 243 (expr -> id .)
    ASSIGNBAND      reduce using rule 243 (expr -> id .)
    ASSIGNBXOR      reduce using rule 243 (expr -> id .)
    ASSIGNLSHIFT    reduce using rule 243 (expr -> id .)
    ASSIGNRSHIFT    reduce using rule 243 (expr -> id .)
    ASSIGNRRSHIFT   reduce using rule 243 (expr -> id .)
    ASSIGNLLSHIFT   reduce using rule 243 (expr -> id .)
    ASSIGN          reduce using rule 243 (expr -> id .)
    LSBRACKET       reduce using rule 243 (expr -> id .)
    LPAREN          reduce using rule 243 (expr -> id .)
    SEMI            reduce using rule 243 (expr -> id .)
    RPAREN          reduce using rule 243 (expr -> id .)
    RSBRACKET       reduce using rule 243 (expr -> id .)
    FUNCTION        reduce using rule 243 (expr -> id .)
    CLASS           reduce using rule 243 (expr -> id .)
    TYPED           reduce using rule 243 (expr -> id .)
    IF              reduce using rule 243 (expr -> id .)
    ELSE            reduce using rule 243 (expr -> id .)
    WHILE           reduce using rule 243 (expr -> id .)
    WITH            reduce using rule 243 (expr -> id .)
    DO              reduce using rule 243 (expr -> id .)
    FOR             reduce using rule 243 (expr -> id .)
    RETURN          reduce using rule 243 (expr -> id .)
    YIELD           reduce using rule 243 (expr -> id .)
    BREAK           reduce using rule 243 (expr -> id .)
    CONTINUE        reduce using rule 243 (expr -> id .)
    THROW           reduce using rule 243 (expr -> id .)
    TRY             reduce using rule 243 (expr -> id .)
    CATCH           reduce using rule 243 (expr -> id .)
    FINALLY         reduce using rule 243 (expr -> id .)
    SWITCH          reduce using rule 243 (expr -> id .)
    NATIVE          reduce using rule 243 (expr -> id .)
    IMPORT          reduce using rule 243 (expr -> id .)
    EXPORT          reduce using rule 243 (expr -> id .)
    NUMBER          reduce using rule 243 (expr -> id .)
    DELETE          reduce using rule 243 (expr -> id .)
    STRINGLIT       reduce using rule 243 (expr -> id .)
    ID              reduce using rule 243 (expr -> id .)
    GET             reduce using rule 243 (expr -> id .)
    SET             reduce using rule 243 (expr -> id .)
    NOT             reduce using rule 243 (expr -> id .)
    BITINV          reduce using rule 243 (expr -> id .)
    NEW             reduce using rule 243 (expr -> id .)
    TYPEOF          reduce using rule 243 (expr -> id .)
    REGEXPR         reduce using rule 243 (expr -> id .)
    GLOBAL          reduce using rule 243 (expr -> id .)
    VAR             reduce using rule 243 (expr -> id .)
    STATIC          reduce using rule 243 (expr -> id .)
    LBRACKET        reduce using rule 243 (expr -> id .)
    $end            reduce using rule 243 (expr -> id .)
    RBRACKET        reduce using rule 243 (expr -> id .)
    CASE            reduce using rule 243 (expr -> id .)
    DEFAULT         reduce using rule 243 (expr -> id .)
    OF              reduce using rule 243 (expr -> id .)
    TLTHAN          shift and go to state 21

  ! TLTHAN          [ reduce using rule 243 (expr -> id .) ]

    template_ref                   shift and go to state 139
    lthan_restrict                 shift and go to state 11

state 4

    (12) statement -> function .

    SEMI            reduce using rule 12 (statement -> function .)
    FUNCTION        reduce using rule 12 (statement -> function .)
    CLASS           reduce using rule 12 (statement -> function .)
    TYPED           reduce using rule 12 (statement -> function .)
    IF              reduce using rule 12 (statement -> function .)
    ELSE            reduce using rule 12 (statement -> function .)
    WHILE           reduce using rule 12 (statement -> function .)
    WITH            reduce using rule 12 (statement -> function .)
    DO              reduce using rule 12 (statement -> function .)
    FOR             reduce using rule 12 (statement -> function .)
    RETURN          reduce using rule 12 (statement -> function .)
    YIELD           reduce using rule 12 (statement -> function .)
    BREAK           reduce using rule 12 (statement -> function .)
    CONTINUE        reduce using rule 12 (statement -> function .)
    THROW           reduce using rule 12 (statement -> function .)
    TRY             reduce using rule 12 (statement -> function .)
    CATCH           reduce using rule 12 (statement -> function .)
    FINALLY         reduce using rule 12 (statement -> function .)
    SWITCH          reduce using rule 12 (statement -> function .)
    NATIVE          reduce using rule 12 (statement -> function .)
    IMPORT          reduce using rule 12 (statement -> function .)
    EXPORT          reduce using rule 12 (statement -> function .)
    NUMBER          reduce using rule 12 (statement -> function .)
    DELETE          reduce using rule 12 (statement -> function .)
    STRINGLIT       reduce using rule 12 (statement -> function .)
    ID              reduce using rule 12 (statement -> function .)
    GET             reduce using rule 12 (statement -> function .)
    SET             reduce using rule 12 (statement -> function .)
    LSBRACKET       reduce using rule 12 (statement -> function .)
    LPAREN          reduce using rule 12 (statement -> function .)
    MINUS           reduce using rule 12 (statement -> function .)
    NOT             reduce using rule 12 (statement -> function .)
    BITINV          reduce using rule 12 (statement -> function .)
    NEW             reduce using rule 12 (statement -> function .)
    INC             reduce using rule 12 (statement -> function .)
    DEC             reduce using rule 12 (statement -> function .)
    TYPEOF          reduce using rule 12 (statement -> function .)
    REGEXPR         reduce using rule 12 (statement -> function .)
    GLOBAL          reduce using rule 12 (statement -> function .)
    VAR             reduce using rule 12 (statement -> function .)
    STATIC          reduce using rule 12 (statement -> function .)
    TLTHAN          reduce using rule 12 (statement -> function .)
    LBRACKET        reduce using rule 12 (statement -> function .)
    CASE            reduce using rule 12 (statement -> function .)
    RBRACKET        reduce using rule 12 (statement -> function .)
    DEFAULT         reduce using rule 12 (statement -> function .)
    $end            reduce using rule 12 (statement -> function .)


state 5

    (29) statement -> switch .

    SEMI            reduce using rule 29 (statement -> switch .)
    FUNCTION        reduce using rule 29 (statement -> switch .)
    CLASS           reduce using rule 29 (statement -> switch .)
    TYPED           reduce using rule 29 (statement -> switch .)
    IF              reduce using rule 29 (statement -> switch .)
    ELSE            reduce using rule 29 (statement -> switch .)
    WHILE           reduce using rule 29 (statement -> switch .)
    WITH            reduce using rule 29 (statement -> switch .)
    DO              reduce using rule 29 (statement -> switch .)
    FOR             reduce using rule 29 (statement -> switch .)
    RETURN          reduce using rule 29 (statement -> switch .)
    YIELD           reduce using rule 29 (statement -> switch .)
    BREAK           reduce using rule 29 (statement -> switch .)
    CONTINUE        reduce using rule 29 (statement -> switch .)
    THROW           reduce using rule 29 (statement -> switch .)
    TRY             reduce using rule 29 (statement -> switch .)
    CATCH           reduce using rule 29 (statement -> switch .)
    FINALLY         reduce using rule 29 (statement -> switch .)
    SWITCH          reduce using rule 29 (statement -> switch .)
    NATIVE          reduce using rule 29 (statement -> switch .)
    IMPORT          reduce using rule 29 (statement -> switch .)
    EXPORT          reduce using rule 29 (statement -> switch .)
    NUMBER          reduce using rule 29 (statement -> switch .)
    DELETE          reduce using rule 29 (statement -> switch .)
    STRINGLIT       reduce using rule 29 (statement -> switch .)
    ID              reduce using rule 29 (statement -> switch .)
    GET             reduce using rule 29 (statement -> switch .)
    SET             reduce using rule 29 (statement -> switch .)
    LSBRACKET       reduce using rule 29 (statement -> switch .)
    LPAREN          reduce using rule 29 (statement -> switch .)
    MINUS           reduce using rule 29 (statement -> switch .)
    NOT             reduce using rule 29 (statement -> switch .)
    BITINV          reduce using rule 29 (statement -> switch .)
    NEW             reduce using rule 29 (statement -> switch .)
    INC             reduce using rule 29 (statement -> switch .)
    DEC             reduce using rule 29 (statement -> switch .)
    TYPEOF          reduce using rule 29 (statement -> switch .)
    REGEXPR         reduce using rule 29 (statement -> switch .)
    GLOBAL          reduce using rule 29 (statement -> switch .)
    VAR             reduce using rule 29 (statement -> switch .)
    STATIC          reduce using rule 29 (statement -> switch .)
    TLTHAN          reduce using rule 29 (statement -> switch .)
    LBRACKET        reduce using rule 29 (statement -> switch .)
    CASE            reduce using rule 29 (statement -> switch .)
    RBRACKET        reduce using rule 29 (statement -> switch .)
    DEFAULT         reduce using rule 29 (statement -> switch .)
    $end            reduce using rule 29 (statement -> switch .)


state 6

    (20) statement -> for .
    (58) statement_nonctrl -> for .

  ! reduce/reduce conflict for SEMI resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for CLASS resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for TYPED resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for IF resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for WITH resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for DO resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for RETURN resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for YIELD resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for BREAK resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for THROW resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for TRY resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for CATCH resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for FINALLY resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for SWITCH resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for NATIVE resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for IMPORT resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for EXPORT resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for NUMBER resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for DELETE resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for ID resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for GET resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for SET resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for LPAREN resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for MINUS resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for NOT resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for BITINV resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for NEW resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for INC resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for DEC resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for VAR resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for STATIC resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for CASE resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 20 (statement -> for .)
  ! reduce/reduce conflict for $end resolved using rule 20 (statement -> for .)
    SEMI            reduce using rule 20 (statement -> for .)
    FUNCTION        reduce using rule 20 (statement -> for .)
    CLASS           reduce using rule 20 (statement -> for .)
    TYPED           reduce using rule 20 (statement -> for .)
    IF              reduce using rule 20 (statement -> for .)
    ELSE            reduce using rule 20 (statement -> for .)
    WHILE           reduce using rule 20 (statement -> for .)
    WITH            reduce using rule 20 (statement -> for .)
    DO              reduce using rule 20 (statement -> for .)
    FOR             reduce using rule 20 (statement -> for .)
    RETURN          reduce using rule 20 (statement -> for .)
    YIELD           reduce using rule 20 (statement -> for .)
    BREAK           reduce using rule 20 (statement -> for .)
    CONTINUE        reduce using rule 20 (statement -> for .)
    THROW           reduce using rule 20 (statement -> for .)
    TRY             reduce using rule 20 (statement -> for .)
    CATCH           reduce using rule 20 (statement -> for .)
    FINALLY         reduce using rule 20 (statement -> for .)
    SWITCH          reduce using rule 20 (statement -> for .)
    NATIVE          reduce using rule 20 (statement -> for .)
    IMPORT          reduce using rule 20 (statement -> for .)
    EXPORT          reduce using rule 20 (statement -> for .)
    NUMBER          reduce using rule 20 (statement -> for .)
    DELETE          reduce using rule 20 (statement -> for .)
    STRINGLIT       reduce using rule 20 (statement -> for .)
    ID              reduce using rule 20 (statement -> for .)
    GET             reduce using rule 20 (statement -> for .)
    SET             reduce using rule 20 (statement -> for .)
    LSBRACKET       reduce using rule 20 (statement -> for .)
    LPAREN          reduce using rule 20 (statement -> for .)
    MINUS           reduce using rule 20 (statement -> for .)
    NOT             reduce using rule 20 (statement -> for .)
    BITINV          reduce using rule 20 (statement -> for .)
    NEW             reduce using rule 20 (statement -> for .)
    INC             reduce using rule 20 (statement -> for .)
    DEC             reduce using rule 20 (statement -> for .)
    TYPEOF          reduce using rule 20 (statement -> for .)
    REGEXPR         reduce using rule 20 (statement -> for .)
    GLOBAL          reduce using rule 20 (statement -> for .)
    VAR             reduce using rule 20 (statement -> for .)
    STATIC          reduce using rule 20 (statement -> for .)
    TLTHAN          reduce using rule 20 (statement -> for .)
    LBRACKET        reduce using rule 20 (statement -> for .)
    CASE            reduce using rule 20 (statement -> for .)
    RBRACKET        reduce using rule 20 (statement -> for .)
    DEFAULT         reduce using rule 20 (statement -> for .)
    $end            reduce using rule 20 (statement -> for .)

  ! SEMI            [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! FUNCTION        [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! CLASS           [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! TYPED           [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! IF              [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! ELSE            [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! WHILE           [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! WITH            [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! DO              [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! FOR             [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! RETURN          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! YIELD           [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! BREAK           [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! CONTINUE        [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! THROW           [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! TRY             [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! CATCH           [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! FINALLY         [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! SWITCH          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! NATIVE          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! IMPORT          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! EXPORT          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! NUMBER          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! DELETE          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! STRINGLIT       [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! ID              [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! GET             [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! SET             [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! LSBRACKET       [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! LPAREN          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! MINUS           [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! NOT             [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! BITINV          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! NEW             [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! INC             [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! DEC             [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! TYPEOF          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! REGEXPR         [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! GLOBAL          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! VAR             [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! STATIC          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! TLTHAN          [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! LBRACKET        [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! CASE            [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! RBRACKET        [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! DEFAULT         [ reduce using rule 58 (statement_nonctrl -> for .) ]
  ! $end            [ reduce using rule 58 (statement_nonctrl -> for .) ]


state 7

    (348) else -> ELSE . ctrl_statement
    (307) ctrl_statement -> . statement_nonctrl
    (308) ctrl_statement -> . LBRACKET statementlist_opt RBRACKET
    (309) ctrl_statement -> . SEMI
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 147
    SEMI            shift and go to state 151
    NUMBER          shift and go to state 29
    FUNCTION        shift and go to state 150
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    FOR             shift and go to state 68
    DO              shift and go to state 41
    WHILE           shift and go to state 73
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21

    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 2
    delete                         shift and go to state 51
    yield                          shift and go to state 152
    for                            shift and go to state 141
    else                           shift and go to state 157
    re_lit                         shift and go to state 8
    return                         shift and go to state 142
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 153
    while                          shift and go to state 143
    type_modifiers                 shift and go to state 53
    not                            shift and go to state 15
    dec                            shift and go to state 66
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 144
    new                            shift and go to state 48
    catch                          shift and go to state 155
    funcref                        shift and go to state 24
    throw                          shift and go to state 145
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    break                          shift and go to state 156
    finally                        shift and go to state 146
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 140
    bitinv                         shift and go to state 32
    ctrl_statement                 shift and go to state 148
    continue                       shift and go to state 149
    strlit                         shift and go to state 79
    var_decl                       shift and go to state 37
    typeof                         shift and go to state 81
    try                            shift and go to state 154
    inc                            shift and go to state 86

state 8

    (288) expr -> re_lit .

    COLON           reduce using rule 288 (expr -> re_lit .)
    RSHIFT          reduce using rule 288 (expr -> re_lit .)
    LSHIFT          reduce using rule 288 (expr -> re_lit .)
    LLSHIFT         reduce using rule 288 (expr -> re_lit .)
    RRSHIFT         reduce using rule 288 (expr -> re_lit .)
    COND_DOT        reduce using rule 288 (expr -> re_lit .)
    DOT             reduce using rule 288 (expr -> re_lit .)
    LAND            reduce using rule 288 (expr -> re_lit .)
    LOR             reduce using rule 288 (expr -> re_lit .)
    BOR             reduce using rule 288 (expr -> re_lit .)
    INSTANCEOF      reduce using rule 288 (expr -> re_lit .)
    BXOR            reduce using rule 288 (expr -> re_lit .)
    BAND            reduce using rule 288 (expr -> re_lit .)
    EQUAL           reduce using rule 288 (expr -> re_lit .)
    EQUAL_STRICT    reduce using rule 288 (expr -> re_lit .)
    NOTEQUAL_STRICT reduce using rule 288 (expr -> re_lit .)
    GTHAN           reduce using rule 288 (expr -> re_lit .)
    GTHANEQ         reduce using rule 288 (expr -> re_lit .)
    LTHAN           reduce using rule 288 (expr -> re_lit .)
    MOD             reduce using rule 288 (expr -> re_lit .)
    LTHANEQ         reduce using rule 288 (expr -> re_lit .)
    NOTEQUAL        reduce using rule 288 (expr -> re_lit .)
    PLUS            reduce using rule 288 (expr -> re_lit .)
    MINUS           reduce using rule 288 (expr -> re_lit .)
    DIVIDE          reduce using rule 288 (expr -> re_lit .)
    TIMES           reduce using rule 288 (expr -> re_lit .)
    IN              reduce using rule 288 (expr -> re_lit .)
    QEST            reduce using rule 288 (expr -> re_lit .)
    COMMA           reduce using rule 288 (expr -> re_lit .)
    INC             reduce using rule 288 (expr -> re_lit .)
    DEC             reduce using rule 288 (expr -> re_lit .)
    ASSIGNPLUS      reduce using rule 288 (expr -> re_lit .)
    ASSIGNMINUS     reduce using rule 288 (expr -> re_lit .)
    ASSIGNDIVIDE    reduce using rule 288 (expr -> re_lit .)
    ASSIGNTIMES     reduce using rule 288 (expr -> re_lit .)
    ASSIGNBOR       reduce using rule 288 (expr -> re_lit .)
    ASSIGNBAND      reduce using rule 288 (expr -> re_lit .)
    ASSIGNBXOR      reduce using rule 288 (expr -> re_lit .)
    ASSIGNLSHIFT    reduce using rule 288 (expr -> re_lit .)
    ASSIGNRSHIFT    reduce using rule 288 (expr -> re_lit .)
    ASSIGNRRSHIFT   reduce using rule 288 (expr -> re_lit .)
    ASSIGNLLSHIFT   reduce using rule 288 (expr -> re_lit .)
    ASSIGN          reduce using rule 288 (expr -> re_lit .)
    LSBRACKET       reduce using rule 288 (expr -> re_lit .)
    TLTHAN          reduce using rule 288 (expr -> re_lit .)
    LPAREN          reduce using rule 288 (expr -> re_lit .)
    SEMI            reduce using rule 288 (expr -> re_lit .)
    RPAREN          reduce using rule 288 (expr -> re_lit .)
    RSBRACKET       reduce using rule 288 (expr -> re_lit .)
    FUNCTION        reduce using rule 288 (expr -> re_lit .)
    CLASS           reduce using rule 288 (expr -> re_lit .)
    TYPED           reduce using rule 288 (expr -> re_lit .)
    IF              reduce using rule 288 (expr -> re_lit .)
    ELSE            reduce using rule 288 (expr -> re_lit .)
    WHILE           reduce using rule 288 (expr -> re_lit .)
    WITH            reduce using rule 288 (expr -> re_lit .)
    DO              reduce using rule 288 (expr -> re_lit .)
    FOR             reduce using rule 288 (expr -> re_lit .)
    RETURN          reduce using rule 288 (expr -> re_lit .)
    YIELD           reduce using rule 288 (expr -> re_lit .)
    BREAK           reduce using rule 288 (expr -> re_lit .)
    CONTINUE        reduce using rule 288 (expr -> re_lit .)
    THROW           reduce using rule 288 (expr -> re_lit .)
    TRY             reduce using rule 288 (expr -> re_lit .)
    CATCH           reduce using rule 288 (expr -> re_lit .)
    FINALLY         reduce using rule 288 (expr -> re_lit .)
    SWITCH          reduce using rule 288 (expr -> re_lit .)
    NATIVE          reduce using rule 288 (expr -> re_lit .)
    IMPORT          reduce using rule 288 (expr -> re_lit .)
    EXPORT          reduce using rule 288 (expr -> re_lit .)
    NUMBER          reduce using rule 288 (expr -> re_lit .)
    DELETE          reduce using rule 288 (expr -> re_lit .)
    STRINGLIT       reduce using rule 288 (expr -> re_lit .)
    ID              reduce using rule 288 (expr -> re_lit .)
    GET             reduce using rule 288 (expr -> re_lit .)
    SET             reduce using rule 288 (expr -> re_lit .)
    NOT             reduce using rule 288 (expr -> re_lit .)
    BITINV          reduce using rule 288 (expr -> re_lit .)
    NEW             reduce using rule 288 (expr -> re_lit .)
    TYPEOF          reduce using rule 288 (expr -> re_lit .)
    REGEXPR         reduce using rule 288 (expr -> re_lit .)
    GLOBAL          reduce using rule 288 (expr -> re_lit .)
    VAR             reduce using rule 288 (expr -> re_lit .)
    STATIC          reduce using rule 288 (expr -> re_lit .)
    LBRACKET        reduce using rule 288 (expr -> re_lit .)
    $end            reduce using rule 288 (expr -> re_lit .)
    RBRACKET        reduce using rule 288 (expr -> re_lit .)
    CASE            reduce using rule 288 (expr -> re_lit .)
    DEFAULT         reduce using rule 288 (expr -> re_lit .)
    OF              reduce using rule 288 (expr -> re_lit .)


state 9

    (297) re_lit -> REGEXPR .

    RSHIFT          reduce using rule 297 (re_lit -> REGEXPR .)
    LSHIFT          reduce using rule 297 (re_lit -> REGEXPR .)
    LLSHIFT         reduce using rule 297 (re_lit -> REGEXPR .)
    RRSHIFT         reduce using rule 297 (re_lit -> REGEXPR .)
    COND_DOT        reduce using rule 297 (re_lit -> REGEXPR .)
    DOT             reduce using rule 297 (re_lit -> REGEXPR .)
    LAND            reduce using rule 297 (re_lit -> REGEXPR .)
    LOR             reduce using rule 297 (re_lit -> REGEXPR .)
    BOR             reduce using rule 297 (re_lit -> REGEXPR .)
    INSTANCEOF      reduce using rule 297 (re_lit -> REGEXPR .)
    BXOR            reduce using rule 297 (re_lit -> REGEXPR .)
    BAND            reduce using rule 297 (re_lit -> REGEXPR .)
    EQUAL           reduce using rule 297 (re_lit -> REGEXPR .)
    EQUAL_STRICT    reduce using rule 297 (re_lit -> REGEXPR .)
    NOTEQUAL_STRICT reduce using rule 297 (re_lit -> REGEXPR .)
    GTHAN           reduce using rule 297 (re_lit -> REGEXPR .)
    GTHANEQ         reduce using rule 297 (re_lit -> REGEXPR .)
    LTHAN           reduce using rule 297 (re_lit -> REGEXPR .)
    MOD             reduce using rule 297 (re_lit -> REGEXPR .)
    LTHANEQ         reduce using rule 297 (re_lit -> REGEXPR .)
    NOTEQUAL        reduce using rule 297 (re_lit -> REGEXPR .)
    PLUS            reduce using rule 297 (re_lit -> REGEXPR .)
    MINUS           reduce using rule 297 (re_lit -> REGEXPR .)
    DIVIDE          reduce using rule 297 (re_lit -> REGEXPR .)
    TIMES           reduce using rule 297 (re_lit -> REGEXPR .)
    IN              reduce using rule 297 (re_lit -> REGEXPR .)
    QEST            reduce using rule 297 (re_lit -> REGEXPR .)
    COMMA           reduce using rule 297 (re_lit -> REGEXPR .)
    INC             reduce using rule 297 (re_lit -> REGEXPR .)
    DEC             reduce using rule 297 (re_lit -> REGEXPR .)
    ASSIGNPLUS      reduce using rule 297 (re_lit -> REGEXPR .)
    ASSIGNMINUS     reduce using rule 297 (re_lit -> REGEXPR .)
    ASSIGNDIVIDE    reduce using rule 297 (re_lit -> REGEXPR .)
    ASSIGNTIMES     reduce using rule 297 (re_lit -> REGEXPR .)
    ASSIGNBOR       reduce using rule 297 (re_lit -> REGEXPR .)
    ASSIGNBAND      reduce using rule 297 (re_lit -> REGEXPR .)
    ASSIGNBXOR      reduce using rule 297 (re_lit -> REGEXPR .)
    ASSIGNLSHIFT    reduce using rule 297 (re_lit -> REGEXPR .)
    ASSIGNRSHIFT    reduce using rule 297 (re_lit -> REGEXPR .)
    ASSIGNRRSHIFT   reduce using rule 297 (re_lit -> REGEXPR .)
    ASSIGNLLSHIFT   reduce using rule 297 (re_lit -> REGEXPR .)
    ASSIGN          reduce using rule 297 (re_lit -> REGEXPR .)
    LSBRACKET       reduce using rule 297 (re_lit -> REGEXPR .)
    TLTHAN          reduce using rule 297 (re_lit -> REGEXPR .)
    LPAREN          reduce using rule 297 (re_lit -> REGEXPR .)
    SEMI            reduce using rule 297 (re_lit -> REGEXPR .)
    RPAREN          reduce using rule 297 (re_lit -> REGEXPR .)
    RSBRACKET       reduce using rule 297 (re_lit -> REGEXPR .)
    COLON           reduce using rule 297 (re_lit -> REGEXPR .)
    FUNCTION        reduce using rule 297 (re_lit -> REGEXPR .)
    CLASS           reduce using rule 297 (re_lit -> REGEXPR .)
    TYPED           reduce using rule 297 (re_lit -> REGEXPR .)
    IF              reduce using rule 297 (re_lit -> REGEXPR .)
    ELSE            reduce using rule 297 (re_lit -> REGEXPR .)
    WHILE           reduce using rule 297 (re_lit -> REGEXPR .)
    WITH            reduce using rule 297 (re_lit -> REGEXPR .)
    DO              reduce using rule 297 (re_lit -> REGEXPR .)
    FOR             reduce using rule 297 (re_lit -> REGEXPR .)
    RETURN          reduce using rule 297 (re_lit -> REGEXPR .)
    YIELD           reduce using rule 297 (re_lit -> REGEXPR .)
    BREAK           reduce using rule 297 (re_lit -> REGEXPR .)
    CONTINUE        reduce using rule 297 (re_lit -> REGEXPR .)
    THROW           reduce using rule 297 (re_lit -> REGEXPR .)
    TRY             reduce using rule 297 (re_lit -> REGEXPR .)
    CATCH           reduce using rule 297 (re_lit -> REGEXPR .)
    FINALLY         reduce using rule 297 (re_lit -> REGEXPR .)
    SWITCH          reduce using rule 297 (re_lit -> REGEXPR .)
    NATIVE          reduce using rule 297 (re_lit -> REGEXPR .)
    IMPORT          reduce using rule 297 (re_lit -> REGEXPR .)
    EXPORT          reduce using rule 297 (re_lit -> REGEXPR .)
    NUMBER          reduce using rule 297 (re_lit -> REGEXPR .)
    DELETE          reduce using rule 297 (re_lit -> REGEXPR .)
    STRINGLIT       reduce using rule 297 (re_lit -> REGEXPR .)
    ID              reduce using rule 297 (re_lit -> REGEXPR .)
    GET             reduce using rule 297 (re_lit -> REGEXPR .)
    SET             reduce using rule 297 (re_lit -> REGEXPR .)
    NOT             reduce using rule 297 (re_lit -> REGEXPR .)
    BITINV          reduce using rule 297 (re_lit -> REGEXPR .)
    NEW             reduce using rule 297 (re_lit -> REGEXPR .)
    TYPEOF          reduce using rule 297 (re_lit -> REGEXPR .)
    REGEXPR         reduce using rule 297 (re_lit -> REGEXPR .)
    GLOBAL          reduce using rule 297 (re_lit -> REGEXPR .)
    VAR             reduce using rule 297 (re_lit -> REGEXPR .)
    STATIC          reduce using rule 297 (re_lit -> REGEXPR .)
    LBRACKET        reduce using rule 297 (re_lit -> REGEXPR .)
    $end            reduce using rule 297 (re_lit -> REGEXPR .)
    RBRACKET        reduce using rule 297 (re_lit -> REGEXPR .)
    CASE            reduce using rule 297 (re_lit -> REGEXPR .)
    DEFAULT         reduce using rule 297 (re_lit -> REGEXPR .)
    OF              reduce using rule 297 (re_lit -> REGEXPR .)


state 10

    (228) delete -> DELETE . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 158
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 11

    (86) template_ref -> lthan_restrict . simple_templatedeflist gthan_restrict
    (122) simple_templatedeflist -> . typeof_opt var_type
    (123) simple_templatedeflist -> . simple_templatedeflist COMMA typeof_opt var_type
    (120) typeof_opt -> . TYPEOF
    (121) typeof_opt -> .

    TYPEOF          shift and go to state 160
    INT             reduce using rule 121 (typeof_opt -> .)
    SHORT           reduce using rule 121 (typeof_opt -> .)
    FLOAT           reduce using rule 121 (typeof_opt -> .)
    DOUBLE          reduce using rule 121 (typeof_opt -> .)
    CHAR            reduce using rule 121 (typeof_opt -> .)
    BYTE            reduce using rule 121 (typeof_opt -> .)
    INFERRED        reduce using rule 121 (typeof_opt -> .)
    ID              reduce using rule 121 (typeof_opt -> .)
    GET             reduce using rule 121 (typeof_opt -> .)
    SET             reduce using rule 121 (typeof_opt -> .)

    typeof_opt                     shift and go to state 162
    simple_templatedeflist         shift and go to state 161

state 12

    (30) statement -> func_native . SEMI

    SEMI            shift and go to state 163


state 13

    (245) expr -> template_ref .

    COLON           reduce using rule 245 (expr -> template_ref .)
    RSHIFT          reduce using rule 245 (expr -> template_ref .)
    LSHIFT          reduce using rule 245 (expr -> template_ref .)
    LLSHIFT         reduce using rule 245 (expr -> template_ref .)
    RRSHIFT         reduce using rule 245 (expr -> template_ref .)
    COND_DOT        reduce using rule 245 (expr -> template_ref .)
    DOT             reduce using rule 245 (expr -> template_ref .)
    LAND            reduce using rule 245 (expr -> template_ref .)
    LOR             reduce using rule 245 (expr -> template_ref .)
    BOR             reduce using rule 245 (expr -> template_ref .)
    INSTANCEOF      reduce using rule 245 (expr -> template_ref .)
    BXOR            reduce using rule 245 (expr -> template_ref .)
    BAND            reduce using rule 245 (expr -> template_ref .)
    EQUAL           reduce using rule 245 (expr -> template_ref .)
    EQUAL_STRICT    reduce using rule 245 (expr -> template_ref .)
    NOTEQUAL_STRICT reduce using rule 245 (expr -> template_ref .)
    GTHAN           reduce using rule 245 (expr -> template_ref .)
    GTHANEQ         reduce using rule 245 (expr -> template_ref .)
    LTHAN           reduce using rule 245 (expr -> template_ref .)
    MOD             reduce using rule 245 (expr -> template_ref .)
    LTHANEQ         reduce using rule 245 (expr -> template_ref .)
    NOTEQUAL        reduce using rule 245 (expr -> template_ref .)
    PLUS            reduce using rule 245 (expr -> template_ref .)
    MINUS           reduce using rule 245 (expr -> template_ref .)
    DIVIDE          reduce using rule 245 (expr -> template_ref .)
    TIMES           reduce using rule 245 (expr -> template_ref .)
    IN              reduce using rule 245 (expr -> template_ref .)
    QEST            reduce using rule 245 (expr -> template_ref .)
    COMMA           reduce using rule 245 (expr -> template_ref .)
    INC             reduce using rule 245 (expr -> template_ref .)
    DEC             reduce using rule 245 (expr -> template_ref .)
    ASSIGNPLUS      reduce using rule 245 (expr -> template_ref .)
    ASSIGNMINUS     reduce using rule 245 (expr -> template_ref .)
    ASSIGNDIVIDE    reduce using rule 245 (expr -> template_ref .)
    ASSIGNTIMES     reduce using rule 245 (expr -> template_ref .)
    ASSIGNBOR       reduce using rule 245 (expr -> template_ref .)
    ASSIGNBAND      reduce using rule 245 (expr -> template_ref .)
    ASSIGNBXOR      reduce using rule 245 (expr -> template_ref .)
    ASSIGNLSHIFT    reduce using rule 245 (expr -> template_ref .)
    ASSIGNRSHIFT    reduce using rule 245 (expr -> template_ref .)
    ASSIGNRRSHIFT   reduce using rule 245 (expr -> template_ref .)
    ASSIGNLLSHIFT   reduce using rule 245 (expr -> template_ref .)
    ASSIGN          reduce using rule 245 (expr -> template_ref .)
    LSBRACKET       reduce using rule 245 (expr -> template_ref .)
    TLTHAN          reduce using rule 245 (expr -> template_ref .)
    LPAREN          reduce using rule 245 (expr -> template_ref .)
    SEMI            reduce using rule 245 (expr -> template_ref .)
    RPAREN          reduce using rule 245 (expr -> template_ref .)
    RSBRACKET       reduce using rule 245 (expr -> template_ref .)
    FUNCTION        reduce using rule 245 (expr -> template_ref .)
    CLASS           reduce using rule 245 (expr -> template_ref .)
    TYPED           reduce using rule 245 (expr -> template_ref .)
    IF              reduce using rule 245 (expr -> template_ref .)
    ELSE            reduce using rule 245 (expr -> template_ref .)
    WHILE           reduce using rule 245 (expr -> template_ref .)
    WITH            reduce using rule 245 (expr -> template_ref .)
    DO              reduce using rule 245 (expr -> template_ref .)
    FOR             reduce using rule 245 (expr -> template_ref .)
    RETURN          reduce using rule 245 (expr -> template_ref .)
    YIELD           reduce using rule 245 (expr -> template_ref .)
    BREAK           reduce using rule 245 (expr -> template_ref .)
    CONTINUE        reduce using rule 245 (expr -> template_ref .)
    THROW           reduce using rule 245 (expr -> template_ref .)
    TRY             reduce using rule 245 (expr -> template_ref .)
    CATCH           reduce using rule 245 (expr -> template_ref .)
    FINALLY         reduce using rule 245 (expr -> template_ref .)
    SWITCH          reduce using rule 245 (expr -> template_ref .)
    NATIVE          reduce using rule 245 (expr -> template_ref .)
    IMPORT          reduce using rule 245 (expr -> template_ref .)
    EXPORT          reduce using rule 245 (expr -> template_ref .)
    NUMBER          reduce using rule 245 (expr -> template_ref .)
    DELETE          reduce using rule 245 (expr -> template_ref .)
    STRINGLIT       reduce using rule 245 (expr -> template_ref .)
    ID              reduce using rule 245 (expr -> template_ref .)
    GET             reduce using rule 245 (expr -> template_ref .)
    SET             reduce using rule 245 (expr -> template_ref .)
    NOT             reduce using rule 245 (expr -> template_ref .)
    BITINV          reduce using rule 245 (expr -> template_ref .)
    NEW             reduce using rule 245 (expr -> template_ref .)
    TYPEOF          reduce using rule 245 (expr -> template_ref .)
    REGEXPR         reduce using rule 245 (expr -> template_ref .)
    GLOBAL          reduce using rule 245 (expr -> template_ref .)
    VAR             reduce using rule 245 (expr -> template_ref .)
    STATIC          reduce using rule 245 (expr -> template_ref .)
    LBRACKET        reduce using rule 245 (expr -> template_ref .)
    $end            reduce using rule 245 (expr -> template_ref .)
    RBRACKET        reduce using rule 245 (expr -> template_ref .)
    CASE            reduce using rule 245 (expr -> template_ref .)
    DEFAULT         reduce using rule 245 (expr -> template_ref .)
    OF              reduce using rule 245 (expr -> template_ref .)


state 14

    (353) yield -> YIELD . expr
    (354) yield -> YIELD .
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    SEMI            reduce using rule 354 (yield -> YIELD .)
    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 164
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 15

    (282) expr -> not .

    COLON           reduce using rule 282 (expr -> not .)
    RSHIFT          reduce using rule 282 (expr -> not .)
    LSHIFT          reduce using rule 282 (expr -> not .)
    LLSHIFT         reduce using rule 282 (expr -> not .)
    RRSHIFT         reduce using rule 282 (expr -> not .)
    COND_DOT        reduce using rule 282 (expr -> not .)
    DOT             reduce using rule 282 (expr -> not .)
    LAND            reduce using rule 282 (expr -> not .)
    LOR             reduce using rule 282 (expr -> not .)
    BOR             reduce using rule 282 (expr -> not .)
    INSTANCEOF      reduce using rule 282 (expr -> not .)
    BXOR            reduce using rule 282 (expr -> not .)
    BAND            reduce using rule 282 (expr -> not .)
    EQUAL           reduce using rule 282 (expr -> not .)
    EQUAL_STRICT    reduce using rule 282 (expr -> not .)
    NOTEQUAL_STRICT reduce using rule 282 (expr -> not .)
    GTHAN           reduce using rule 282 (expr -> not .)
    GTHANEQ         reduce using rule 282 (expr -> not .)
    LTHAN           reduce using rule 282 (expr -> not .)
    MOD             reduce using rule 282 (expr -> not .)
    LTHANEQ         reduce using rule 282 (expr -> not .)
    NOTEQUAL        reduce using rule 282 (expr -> not .)
    PLUS            reduce using rule 282 (expr -> not .)
    MINUS           reduce using rule 282 (expr -> not .)
    DIVIDE          reduce using rule 282 (expr -> not .)
    TIMES           reduce using rule 282 (expr -> not .)
    IN              reduce using rule 282 (expr -> not .)
    QEST            reduce using rule 282 (expr -> not .)
    COMMA           reduce using rule 282 (expr -> not .)
    INC             reduce using rule 282 (expr -> not .)
    DEC             reduce using rule 282 (expr -> not .)
    ASSIGNPLUS      reduce using rule 282 (expr -> not .)
    ASSIGNMINUS     reduce using rule 282 (expr -> not .)
    ASSIGNDIVIDE    reduce using rule 282 (expr -> not .)
    ASSIGNTIMES     reduce using rule 282 (expr -> not .)
    ASSIGNBOR       reduce using rule 282 (expr -> not .)
    ASSIGNBAND      reduce using rule 282 (expr -> not .)
    ASSIGNBXOR      reduce using rule 282 (expr -> not .)
    ASSIGNLSHIFT    reduce using rule 282 (expr -> not .)
    ASSIGNRSHIFT    reduce using rule 282 (expr -> not .)
    ASSIGNRRSHIFT   reduce using rule 282 (expr -> not .)
    ASSIGNLLSHIFT   reduce using rule 282 (expr -> not .)
    ASSIGN          reduce using rule 282 (expr -> not .)
    LSBRACKET       reduce using rule 282 (expr -> not .)
    TLTHAN          reduce using rule 282 (expr -> not .)
    LPAREN          reduce using rule 282 (expr -> not .)
    SEMI            reduce using rule 282 (expr -> not .)
    RPAREN          reduce using rule 282 (expr -> not .)
    RSBRACKET       reduce using rule 282 (expr -> not .)
    FUNCTION        reduce using rule 282 (expr -> not .)
    CLASS           reduce using rule 282 (expr -> not .)
    TYPED           reduce using rule 282 (expr -> not .)
    IF              reduce using rule 282 (expr -> not .)
    ELSE            reduce using rule 282 (expr -> not .)
    WHILE           reduce using rule 282 (expr -> not .)
    WITH            reduce using rule 282 (expr -> not .)
    DO              reduce using rule 282 (expr -> not .)
    FOR             reduce using rule 282 (expr -> not .)
    RETURN          reduce using rule 282 (expr -> not .)
    YIELD           reduce using rule 282 (expr -> not .)
    BREAK           reduce using rule 282 (expr -> not .)
    CONTINUE        reduce using rule 282 (expr -> not .)
    THROW           reduce using rule 282 (expr -> not .)
    TRY             reduce using rule 282 (expr -> not .)
    CATCH           reduce using rule 282 (expr -> not .)
    FINALLY         reduce using rule 282 (expr -> not .)
    SWITCH          reduce using rule 282 (expr -> not .)
    NATIVE          reduce using rule 282 (expr -> not .)
    IMPORT          reduce using rule 282 (expr -> not .)
    EXPORT          reduce using rule 282 (expr -> not .)
    NUMBER          reduce using rule 282 (expr -> not .)
    DELETE          reduce using rule 282 (expr -> not .)
    STRINGLIT       reduce using rule 282 (expr -> not .)
    ID              reduce using rule 282 (expr -> not .)
    GET             reduce using rule 282 (expr -> not .)
    SET             reduce using rule 282 (expr -> not .)
    NOT             reduce using rule 282 (expr -> not .)
    BITINV          reduce using rule 282 (expr -> not .)
    NEW             reduce using rule 282 (expr -> not .)
    TYPEOF          reduce using rule 282 (expr -> not .)
    REGEXPR         reduce using rule 282 (expr -> not .)
    GLOBAL          reduce using rule 282 (expr -> not .)
    VAR             reduce using rule 282 (expr -> not .)
    STATIC          reduce using rule 282 (expr -> not .)
    LBRACKET        reduce using rule 282 (expr -> not .)
    $end            reduce using rule 282 (expr -> not .)
    RBRACKET        reduce using rule 282 (expr -> not .)
    CASE            reduce using rule 282 (expr -> not .)
    DEFAULT         reduce using rule 282 (expr -> not .)
    OF              reduce using rule 282 (expr -> not .)


state 16

    (277) expr -> lparen_restrict . expr rparen_restrict
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 165
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 17

    (82) type_modifiers -> STATIC .

    UNSIGNED        reduce using rule 82 (type_modifiers -> STATIC .)
    SIGNED          reduce using rule 82 (type_modifiers -> STATIC .)
    CONST           reduce using rule 82 (type_modifiers -> STATIC .)
    INT             reduce using rule 82 (type_modifiers -> STATIC .)
    SHORT           reduce using rule 82 (type_modifiers -> STATIC .)
    FLOAT           reduce using rule 82 (type_modifiers -> STATIC .)
    DOUBLE          reduce using rule 82 (type_modifiers -> STATIC .)
    CHAR            reduce using rule 82 (type_modifiers -> STATIC .)
    BYTE            reduce using rule 82 (type_modifiers -> STATIC .)
    INFERRED        reduce using rule 82 (type_modifiers -> STATIC .)
    ID              reduce using rule 82 (type_modifiers -> STATIC .)
    GET             reduce using rule 82 (type_modifiers -> STATIC .)
    SET             reduce using rule 82 (type_modifiers -> STATIC .)
    GLOBAL          reduce using rule 82 (type_modifiers -> STATIC .)
    VAR             reduce using rule 82 (type_modifiers -> STATIC .)
    STATIC          reduce using rule 82 (type_modifiers -> STATIC .)


state 18

    (19) statement -> dowhile .
    (59) statement_nonctrl -> dowhile .

  ! reduce/reduce conflict for SEMI resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for CLASS resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for TYPED resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for IF resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for ELSE resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for WITH resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for DO resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for RETURN resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for YIELD resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for BREAK resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for THROW resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for TRY resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for CATCH resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for FINALLY resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for SWITCH resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for NATIVE resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for IMPORT resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for EXPORT resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for NUMBER resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for DELETE resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for ID resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for GET resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for SET resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for LPAREN resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for MINUS resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for NOT resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for BITINV resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for NEW resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for INC resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for DEC resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for VAR resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for STATIC resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for CASE resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 19 (statement -> dowhile .)
  ! reduce/reduce conflict for $end resolved using rule 19 (statement -> dowhile .)
    SEMI            reduce using rule 19 (statement -> dowhile .)
    FUNCTION        reduce using rule 19 (statement -> dowhile .)
    CLASS           reduce using rule 19 (statement -> dowhile .)
    TYPED           reduce using rule 19 (statement -> dowhile .)
    IF              reduce using rule 19 (statement -> dowhile .)
    ELSE            reduce using rule 19 (statement -> dowhile .)
    WHILE           reduce using rule 19 (statement -> dowhile .)
    WITH            reduce using rule 19 (statement -> dowhile .)
    DO              reduce using rule 19 (statement -> dowhile .)
    FOR             reduce using rule 19 (statement -> dowhile .)
    RETURN          reduce using rule 19 (statement -> dowhile .)
    YIELD           reduce using rule 19 (statement -> dowhile .)
    BREAK           reduce using rule 19 (statement -> dowhile .)
    CONTINUE        reduce using rule 19 (statement -> dowhile .)
    THROW           reduce using rule 19 (statement -> dowhile .)
    TRY             reduce using rule 19 (statement -> dowhile .)
    CATCH           reduce using rule 19 (statement -> dowhile .)
    FINALLY         reduce using rule 19 (statement -> dowhile .)
    SWITCH          reduce using rule 19 (statement -> dowhile .)
    NATIVE          reduce using rule 19 (statement -> dowhile .)
    IMPORT          reduce using rule 19 (statement -> dowhile .)
    EXPORT          reduce using rule 19 (statement -> dowhile .)
    NUMBER          reduce using rule 19 (statement -> dowhile .)
    DELETE          reduce using rule 19 (statement -> dowhile .)
    STRINGLIT       reduce using rule 19 (statement -> dowhile .)
    ID              reduce using rule 19 (statement -> dowhile .)
    GET             reduce using rule 19 (statement -> dowhile .)
    SET             reduce using rule 19 (statement -> dowhile .)
    LSBRACKET       reduce using rule 19 (statement -> dowhile .)
    LPAREN          reduce using rule 19 (statement -> dowhile .)
    MINUS           reduce using rule 19 (statement -> dowhile .)
    NOT             reduce using rule 19 (statement -> dowhile .)
    BITINV          reduce using rule 19 (statement -> dowhile .)
    NEW             reduce using rule 19 (statement -> dowhile .)
    INC             reduce using rule 19 (statement -> dowhile .)
    DEC             reduce using rule 19 (statement -> dowhile .)
    TYPEOF          reduce using rule 19 (statement -> dowhile .)
    REGEXPR         reduce using rule 19 (statement -> dowhile .)
    GLOBAL          reduce using rule 19 (statement -> dowhile .)
    VAR             reduce using rule 19 (statement -> dowhile .)
    STATIC          reduce using rule 19 (statement -> dowhile .)
    TLTHAN          reduce using rule 19 (statement -> dowhile .)
    LBRACKET        reduce using rule 19 (statement -> dowhile .)
    CASE            reduce using rule 19 (statement -> dowhile .)
    RBRACKET        reduce using rule 19 (statement -> dowhile .)
    DEFAULT         reduce using rule 19 (statement -> dowhile .)
    $end            reduce using rule 19 (statement -> dowhile .)

  ! SEMI            [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! FUNCTION        [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! CLASS           [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! TYPED           [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! IF              [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! ELSE            [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! WHILE           [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! WITH            [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! DO              [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! FOR             [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! RETURN          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! YIELD           [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! BREAK           [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! CONTINUE        [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! THROW           [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! TRY             [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! CATCH           [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! FINALLY         [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! SWITCH          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! NATIVE          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! IMPORT          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! EXPORT          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! NUMBER          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! DELETE          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! STRINGLIT       [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! ID              [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! GET             [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! SET             [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! LSBRACKET       [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! LPAREN          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! MINUS           [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! NOT             [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! BITINV          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! NEW             [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! INC             [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! DEC             [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! TYPEOF          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! REGEXPR         [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! GLOBAL          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! VAR             [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! STATIC          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! TLTHAN          [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! LBRACKET        [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! CASE            [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! RBRACKET        [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! DEFAULT         [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]
  ! $end            [ reduce using rule 59 (statement_nonctrl -> dowhile .) ]


state 19

    (235) bitinv -> BITINV . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 166
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 20

    (154) class -> CLASS . id template_opt class_tail
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 167

state 21

    (90) lthan_restrict -> TLTHAN .

    TYPEOF          reduce using rule 90 (lthan_restrict -> TLTHAN .)
    INT             reduce using rule 90 (lthan_restrict -> TLTHAN .)
    SHORT           reduce using rule 90 (lthan_restrict -> TLTHAN .)
    FLOAT           reduce using rule 90 (lthan_restrict -> TLTHAN .)
    DOUBLE          reduce using rule 90 (lthan_restrict -> TLTHAN .)
    CHAR            reduce using rule 90 (lthan_restrict -> TLTHAN .)
    BYTE            reduce using rule 90 (lthan_restrict -> TLTHAN .)
    INFERRED        reduce using rule 90 (lthan_restrict -> TLTHAN .)
    ID              reduce using rule 90 (lthan_restrict -> TLTHAN .)
    GET             reduce using rule 90 (lthan_restrict -> TLTHAN .)
    SET             reduce using rule 90 (lthan_restrict -> TLTHAN .)


state 22

    (17) statement -> while .
    (60) statement_nonctrl -> while .

  ! reduce/reduce conflict for SEMI resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for CLASS resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for TYPED resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for IF resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for WITH resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for DO resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for FOR resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for RETURN resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for YIELD resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for THROW resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for TRY resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for CATCH resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for FINALLY resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for SWITCH resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for NATIVE resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for IMPORT resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for EXPORT resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for NUMBER resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for DELETE resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for ID resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for GET resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for SET resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for LPAREN resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for NOT resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for BITINV resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for NEW resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for INC resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for DEC resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for VAR resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for STATIC resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for CASE resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 17 (statement -> while .)
  ! reduce/reduce conflict for $end resolved using rule 17 (statement -> while .)
    SEMI            reduce using rule 17 (statement -> while .)
    FUNCTION        reduce using rule 17 (statement -> while .)
    CLASS           reduce using rule 17 (statement -> while .)
    TYPED           reduce using rule 17 (statement -> while .)
    IF              reduce using rule 17 (statement -> while .)
    ELSE            reduce using rule 17 (statement -> while .)
    WHILE           reduce using rule 17 (statement -> while .)
    WITH            reduce using rule 17 (statement -> while .)
    DO              reduce using rule 17 (statement -> while .)
    FOR             reduce using rule 17 (statement -> while .)
    RETURN          reduce using rule 17 (statement -> while .)
    YIELD           reduce using rule 17 (statement -> while .)
    BREAK           reduce using rule 17 (statement -> while .)
    CONTINUE        reduce using rule 17 (statement -> while .)
    THROW           reduce using rule 17 (statement -> while .)
    TRY             reduce using rule 17 (statement -> while .)
    CATCH           reduce using rule 17 (statement -> while .)
    FINALLY         reduce using rule 17 (statement -> while .)
    SWITCH          reduce using rule 17 (statement -> while .)
    NATIVE          reduce using rule 17 (statement -> while .)
    IMPORT          reduce using rule 17 (statement -> while .)
    EXPORT          reduce using rule 17 (statement -> while .)
    NUMBER          reduce using rule 17 (statement -> while .)
    DELETE          reduce using rule 17 (statement -> while .)
    STRINGLIT       reduce using rule 17 (statement -> while .)
    ID              reduce using rule 17 (statement -> while .)
    GET             reduce using rule 17 (statement -> while .)
    SET             reduce using rule 17 (statement -> while .)
    LSBRACKET       reduce using rule 17 (statement -> while .)
    LPAREN          reduce using rule 17 (statement -> while .)
    MINUS           reduce using rule 17 (statement -> while .)
    NOT             reduce using rule 17 (statement -> while .)
    BITINV          reduce using rule 17 (statement -> while .)
    NEW             reduce using rule 17 (statement -> while .)
    INC             reduce using rule 17 (statement -> while .)
    DEC             reduce using rule 17 (statement -> while .)
    TYPEOF          reduce using rule 17 (statement -> while .)
    REGEXPR         reduce using rule 17 (statement -> while .)
    GLOBAL          reduce using rule 17 (statement -> while .)
    VAR             reduce using rule 17 (statement -> while .)
    STATIC          reduce using rule 17 (statement -> while .)
    TLTHAN          reduce using rule 17 (statement -> while .)
    LBRACKET        reduce using rule 17 (statement -> while .)
    CASE            reduce using rule 17 (statement -> while .)
    RBRACKET        reduce using rule 17 (statement -> while .)
    DEFAULT         reduce using rule 17 (statement -> while .)
    $end            reduce using rule 17 (statement -> while .)

  ! SEMI            [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! FUNCTION        [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! CLASS           [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! TYPED           [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! IF              [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! ELSE            [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! WHILE           [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! WITH            [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! DO              [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! FOR             [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! RETURN          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! YIELD           [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! BREAK           [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! CONTINUE        [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! THROW           [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! TRY             [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! CATCH           [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! FINALLY         [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! SWITCH          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! NATIVE          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! IMPORT          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! EXPORT          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! NUMBER          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! DELETE          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! STRINGLIT       [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! ID              [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! GET             [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! SET             [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! LSBRACKET       [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! LPAREN          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! MINUS           [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! NOT             [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! BITINV          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! NEW             [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! INC             [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! DEC             [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! TYPEOF          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! REGEXPR         [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! GLOBAL          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! VAR             [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! STATIC          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! TLTHAN          [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! LBRACKET        [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! CASE            [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! RBRACKET        [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! DEFAULT         [ reduce using rule 60 (statement_nonctrl -> while .) ]
  ! $end            [ reduce using rule 60 (statement_nonctrl -> while .) ]


state 23

    (27) statement -> catch .
    (67) statement_nonctrl -> catch .

  ! reduce/reduce conflict for SEMI resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for CLASS resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for TYPED resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for IF resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for ELSE resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for WHILE resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for WITH resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for DO resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for FOR resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for RETURN resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for YIELD resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for BREAK resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for THROW resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for TRY resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for CATCH resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for FINALLY resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for SWITCH resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for NATIVE resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for IMPORT resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for EXPORT resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for NUMBER resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for DELETE resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for ID resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for GET resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for SET resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for LPAREN resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for MINUS resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for NOT resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for BITINV resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for NEW resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for INC resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for DEC resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for VAR resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for STATIC resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for CASE resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 27 (statement -> catch .)
  ! reduce/reduce conflict for $end resolved using rule 27 (statement -> catch .)
    SEMI            reduce using rule 27 (statement -> catch .)
    FUNCTION        reduce using rule 27 (statement -> catch .)
    CLASS           reduce using rule 27 (statement -> catch .)
    TYPED           reduce using rule 27 (statement -> catch .)
    IF              reduce using rule 27 (statement -> catch .)
    ELSE            reduce using rule 27 (statement -> catch .)
    WHILE           reduce using rule 27 (statement -> catch .)
    WITH            reduce using rule 27 (statement -> catch .)
    DO              reduce using rule 27 (statement -> catch .)
    FOR             reduce using rule 27 (statement -> catch .)
    RETURN          reduce using rule 27 (statement -> catch .)
    YIELD           reduce using rule 27 (statement -> catch .)
    BREAK           reduce using rule 27 (statement -> catch .)
    CONTINUE        reduce using rule 27 (statement -> catch .)
    THROW           reduce using rule 27 (statement -> catch .)
    TRY             reduce using rule 27 (statement -> catch .)
    CATCH           reduce using rule 27 (statement -> catch .)
    FINALLY         reduce using rule 27 (statement -> catch .)
    SWITCH          reduce using rule 27 (statement -> catch .)
    NATIVE          reduce using rule 27 (statement -> catch .)
    IMPORT          reduce using rule 27 (statement -> catch .)
    EXPORT          reduce using rule 27 (statement -> catch .)
    NUMBER          reduce using rule 27 (statement -> catch .)
    DELETE          reduce using rule 27 (statement -> catch .)
    STRINGLIT       reduce using rule 27 (statement -> catch .)
    ID              reduce using rule 27 (statement -> catch .)
    GET             reduce using rule 27 (statement -> catch .)
    SET             reduce using rule 27 (statement -> catch .)
    LSBRACKET       reduce using rule 27 (statement -> catch .)
    LPAREN          reduce using rule 27 (statement -> catch .)
    MINUS           reduce using rule 27 (statement -> catch .)
    NOT             reduce using rule 27 (statement -> catch .)
    BITINV          reduce using rule 27 (statement -> catch .)
    NEW             reduce using rule 27 (statement -> catch .)
    INC             reduce using rule 27 (statement -> catch .)
    DEC             reduce using rule 27 (statement -> catch .)
    TYPEOF          reduce using rule 27 (statement -> catch .)
    REGEXPR         reduce using rule 27 (statement -> catch .)
    GLOBAL          reduce using rule 27 (statement -> catch .)
    VAR             reduce using rule 27 (statement -> catch .)
    STATIC          reduce using rule 27 (statement -> catch .)
    TLTHAN          reduce using rule 27 (statement -> catch .)
    LBRACKET        reduce using rule 27 (statement -> catch .)
    CASE            reduce using rule 27 (statement -> catch .)
    RBRACKET        reduce using rule 27 (statement -> catch .)
    DEFAULT         reduce using rule 27 (statement -> catch .)
    $end            reduce using rule 27 (statement -> catch .)

  ! SEMI            [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! FUNCTION        [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! CLASS           [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! TYPED           [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! IF              [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! ELSE            [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! WHILE           [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! WITH            [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! DO              [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! FOR             [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! RETURN          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! YIELD           [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! BREAK           [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! CONTINUE        [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! THROW           [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! TRY             [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! CATCH           [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! FINALLY         [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! SWITCH          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! NATIVE          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! IMPORT          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! EXPORT          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! NUMBER          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! DELETE          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! STRINGLIT       [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! ID              [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! GET             [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! SET             [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! LSBRACKET       [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! LPAREN          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! MINUS           [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! NOT             [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! BITINV          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! NEW             [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! INC             [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! DEC             [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! TYPEOF          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! REGEXPR         [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! GLOBAL          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! VAR             [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! STATIC          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! TLTHAN          [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! LBRACKET        [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! CASE            [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! RBRACKET        [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! DEFAULT         [ reduce using rule 67 (statement_nonctrl -> catch .) ]
  ! $end            [ reduce using rule 67 (statement_nonctrl -> catch .) ]


state 24

    (54) statement_nonctrl -> funcref . SEMI

    SEMI            shift and go to state 168


state 25

    (247) expr -> exprfunction .

    COLON           reduce using rule 247 (expr -> exprfunction .)
    RSHIFT          reduce using rule 247 (expr -> exprfunction .)
    LSHIFT          reduce using rule 247 (expr -> exprfunction .)
    LLSHIFT         reduce using rule 247 (expr -> exprfunction .)
    RRSHIFT         reduce using rule 247 (expr -> exprfunction .)
    COND_DOT        reduce using rule 247 (expr -> exprfunction .)
    DOT             reduce using rule 247 (expr -> exprfunction .)
    LAND            reduce using rule 247 (expr -> exprfunction .)
    LOR             reduce using rule 247 (expr -> exprfunction .)
    BOR             reduce using rule 247 (expr -> exprfunction .)
    INSTANCEOF      reduce using rule 247 (expr -> exprfunction .)
    BXOR            reduce using rule 247 (expr -> exprfunction .)
    BAND            reduce using rule 247 (expr -> exprfunction .)
    EQUAL           reduce using rule 247 (expr -> exprfunction .)
    EQUAL_STRICT    reduce using rule 247 (expr -> exprfunction .)
    NOTEQUAL_STRICT reduce using rule 247 (expr -> exprfunction .)
    GTHAN           reduce using rule 247 (expr -> exprfunction .)
    GTHANEQ         reduce using rule 247 (expr -> exprfunction .)
    LTHAN           reduce using rule 247 (expr -> exprfunction .)
    MOD             reduce using rule 247 (expr -> exprfunction .)
    LTHANEQ         reduce using rule 247 (expr -> exprfunction .)
    NOTEQUAL        reduce using rule 247 (expr -> exprfunction .)
    PLUS            reduce using rule 247 (expr -> exprfunction .)
    MINUS           reduce using rule 247 (expr -> exprfunction .)
    DIVIDE          reduce using rule 247 (expr -> exprfunction .)
    TIMES           reduce using rule 247 (expr -> exprfunction .)
    IN              reduce using rule 247 (expr -> exprfunction .)
    QEST            reduce using rule 247 (expr -> exprfunction .)
    COMMA           reduce using rule 247 (expr -> exprfunction .)
    INC             reduce using rule 247 (expr -> exprfunction .)
    DEC             reduce using rule 247 (expr -> exprfunction .)
    ASSIGNPLUS      reduce using rule 247 (expr -> exprfunction .)
    ASSIGNMINUS     reduce using rule 247 (expr -> exprfunction .)
    ASSIGNDIVIDE    reduce using rule 247 (expr -> exprfunction .)
    ASSIGNTIMES     reduce using rule 247 (expr -> exprfunction .)
    ASSIGNBOR       reduce using rule 247 (expr -> exprfunction .)
    ASSIGNBAND      reduce using rule 247 (expr -> exprfunction .)
    ASSIGNBXOR      reduce using rule 247 (expr -> exprfunction .)
    ASSIGNLSHIFT    reduce using rule 247 (expr -> exprfunction .)
    ASSIGNRSHIFT    reduce using rule 247 (expr -> exprfunction .)
    ASSIGNRRSHIFT   reduce using rule 247 (expr -> exprfunction .)
    ASSIGNLLSHIFT   reduce using rule 247 (expr -> exprfunction .)
    ASSIGN          reduce using rule 247 (expr -> exprfunction .)
    LSBRACKET       reduce using rule 247 (expr -> exprfunction .)
    TLTHAN          reduce using rule 247 (expr -> exprfunction .)
    LPAREN          reduce using rule 247 (expr -> exprfunction .)
    SEMI            reduce using rule 247 (expr -> exprfunction .)
    RPAREN          reduce using rule 247 (expr -> exprfunction .)
    RSBRACKET       reduce using rule 247 (expr -> exprfunction .)
    FUNCTION        reduce using rule 247 (expr -> exprfunction .)
    CLASS           reduce using rule 247 (expr -> exprfunction .)
    TYPED           reduce using rule 247 (expr -> exprfunction .)
    IF              reduce using rule 247 (expr -> exprfunction .)
    ELSE            reduce using rule 247 (expr -> exprfunction .)
    WHILE           reduce using rule 247 (expr -> exprfunction .)
    WITH            reduce using rule 247 (expr -> exprfunction .)
    DO              reduce using rule 247 (expr -> exprfunction .)
    FOR             reduce using rule 247 (expr -> exprfunction .)
    RETURN          reduce using rule 247 (expr -> exprfunction .)
    YIELD           reduce using rule 247 (expr -> exprfunction .)
    BREAK           reduce using rule 247 (expr -> exprfunction .)
    CONTINUE        reduce using rule 247 (expr -> exprfunction .)
    THROW           reduce using rule 247 (expr -> exprfunction .)
    TRY             reduce using rule 247 (expr -> exprfunction .)
    CATCH           reduce using rule 247 (expr -> exprfunction .)
    FINALLY         reduce using rule 247 (expr -> exprfunction .)
    SWITCH          reduce using rule 247 (expr -> exprfunction .)
    NATIVE          reduce using rule 247 (expr -> exprfunction .)
    IMPORT          reduce using rule 247 (expr -> exprfunction .)
    EXPORT          reduce using rule 247 (expr -> exprfunction .)
    NUMBER          reduce using rule 247 (expr -> exprfunction .)
    DELETE          reduce using rule 247 (expr -> exprfunction .)
    STRINGLIT       reduce using rule 247 (expr -> exprfunction .)
    ID              reduce using rule 247 (expr -> exprfunction .)
    GET             reduce using rule 247 (expr -> exprfunction .)
    SET             reduce using rule 247 (expr -> exprfunction .)
    NOT             reduce using rule 247 (expr -> exprfunction .)
    BITINV          reduce using rule 247 (expr -> exprfunction .)
    NEW             reduce using rule 247 (expr -> exprfunction .)
    TYPEOF          reduce using rule 247 (expr -> exprfunction .)
    REGEXPR         reduce using rule 247 (expr -> exprfunction .)
    GLOBAL          reduce using rule 247 (expr -> exprfunction .)
    VAR             reduce using rule 247 (expr -> exprfunction .)
    STATIC          reduce using rule 247 (expr -> exprfunction .)
    LBRACKET        reduce using rule 247 (expr -> exprfunction .)
    $end            reduce using rule 247 (expr -> exprfunction .)
    RBRACKET        reduce using rule 247 (expr -> exprfunction .)
    CASE            reduce using rule 247 (expr -> exprfunction .)
    DEFAULT         reduce using rule 247 (expr -> exprfunction .)
    OF              reduce using rule 247 (expr -> exprfunction .)


state 26

    (23) statement -> break . SEMI
    (63) statement_nonctrl -> break . SEMI

    SEMI            shift and go to state 169


state 27

    (357) id -> SET .

    TLTHAN          reduce using rule 357 (id -> SET .)
    RSHIFT          reduce using rule 357 (id -> SET .)
    LSHIFT          reduce using rule 357 (id -> SET .)
    LLSHIFT         reduce using rule 357 (id -> SET .)
    RRSHIFT         reduce using rule 357 (id -> SET .)
    COND_DOT        reduce using rule 357 (id -> SET .)
    DOT             reduce using rule 357 (id -> SET .)
    LAND            reduce using rule 357 (id -> SET .)
    LOR             reduce using rule 357 (id -> SET .)
    BOR             reduce using rule 357 (id -> SET .)
    INSTANCEOF      reduce using rule 357 (id -> SET .)
    BXOR            reduce using rule 357 (id -> SET .)
    BAND            reduce using rule 357 (id -> SET .)
    EQUAL           reduce using rule 357 (id -> SET .)
    EQUAL_STRICT    reduce using rule 357 (id -> SET .)
    NOTEQUAL_STRICT reduce using rule 357 (id -> SET .)
    GTHAN           reduce using rule 357 (id -> SET .)
    GTHANEQ         reduce using rule 357 (id -> SET .)
    LTHAN           reduce using rule 357 (id -> SET .)
    MOD             reduce using rule 357 (id -> SET .)
    LTHANEQ         reduce using rule 357 (id -> SET .)
    NOTEQUAL        reduce using rule 357 (id -> SET .)
    PLUS            reduce using rule 357 (id -> SET .)
    MINUS           reduce using rule 357 (id -> SET .)
    DIVIDE          reduce using rule 357 (id -> SET .)
    TIMES           reduce using rule 357 (id -> SET .)
    IN              reduce using rule 357 (id -> SET .)
    QEST            reduce using rule 357 (id -> SET .)
    COMMA           reduce using rule 357 (id -> SET .)
    INC             reduce using rule 357 (id -> SET .)
    DEC             reduce using rule 357 (id -> SET .)
    RSBRACKET       reduce using rule 357 (id -> SET .)
    ASSIGNPLUS      reduce using rule 357 (id -> SET .)
    ASSIGNMINUS     reduce using rule 357 (id -> SET .)
    ASSIGNDIVIDE    reduce using rule 357 (id -> SET .)
    ASSIGNTIMES     reduce using rule 357 (id -> SET .)
    ASSIGNBOR       reduce using rule 357 (id -> SET .)
    ASSIGNBAND      reduce using rule 357 (id -> SET .)
    ASSIGNBXOR      reduce using rule 357 (id -> SET .)
    ASSIGNLSHIFT    reduce using rule 357 (id -> SET .)
    ASSIGNRSHIFT    reduce using rule 357 (id -> SET .)
    ASSIGNRRSHIFT   reduce using rule 357 (id -> SET .)
    ASSIGNLLSHIFT   reduce using rule 357 (id -> SET .)
    ASSIGN          reduce using rule 357 (id -> SET .)
    LSBRACKET       reduce using rule 357 (id -> SET .)
    LPAREN          reduce using rule 357 (id -> SET .)
    ID              reduce using rule 357 (id -> SET .)
    GET             reduce using rule 357 (id -> SET .)
    SET             reduce using rule 357 (id -> SET .)
    SEMI            reduce using rule 357 (id -> SET .)
    OF              reduce using rule 357 (id -> SET .)
    RPAREN          reduce using rule 357 (id -> SET .)
    COLON           reduce using rule 357 (id -> SET .)
    FUNCTION        reduce using rule 357 (id -> SET .)
    CLASS           reduce using rule 357 (id -> SET .)
    TYPED           reduce using rule 357 (id -> SET .)
    IF              reduce using rule 357 (id -> SET .)
    ELSE            reduce using rule 357 (id -> SET .)
    WHILE           reduce using rule 357 (id -> SET .)
    WITH            reduce using rule 357 (id -> SET .)
    DO              reduce using rule 357 (id -> SET .)
    FOR             reduce using rule 357 (id -> SET .)
    RETURN          reduce using rule 357 (id -> SET .)
    YIELD           reduce using rule 357 (id -> SET .)
    BREAK           reduce using rule 357 (id -> SET .)
    CONTINUE        reduce using rule 357 (id -> SET .)
    THROW           reduce using rule 357 (id -> SET .)
    TRY             reduce using rule 357 (id -> SET .)
    CATCH           reduce using rule 357 (id -> SET .)
    FINALLY         reduce using rule 357 (id -> SET .)
    SWITCH          reduce using rule 357 (id -> SET .)
    NATIVE          reduce using rule 357 (id -> SET .)
    IMPORT          reduce using rule 357 (id -> SET .)
    EXPORT          reduce using rule 357 (id -> SET .)
    NUMBER          reduce using rule 357 (id -> SET .)
    DELETE          reduce using rule 357 (id -> SET .)
    STRINGLIT       reduce using rule 357 (id -> SET .)
    NOT             reduce using rule 357 (id -> SET .)
    BITINV          reduce using rule 357 (id -> SET .)
    NEW             reduce using rule 357 (id -> SET .)
    TYPEOF          reduce using rule 357 (id -> SET .)
    REGEXPR         reduce using rule 357 (id -> SET .)
    GLOBAL          reduce using rule 357 (id -> SET .)
    VAR             reduce using rule 357 (id -> SET .)
    STATIC          reduce using rule 357 (id -> SET .)
    LBRACKET        reduce using rule 357 (id -> SET .)
    $end            reduce using rule 357 (id -> SET .)
    RBRACKET        reduce using rule 357 (id -> SET .)
    CASE            reduce using rule 357 (id -> SET .)
    DEFAULT         reduce using rule 357 (id -> SET .)
    EXTENDS         reduce using rule 357 (id -> SET .)
    TGTHAN          reduce using rule 357 (id -> SET .)


state 28

    (323) switch -> SWITCH . paren_expr LBRACKET case_block RBRACKET
    (291) paren_expr -> . LPAREN expr RPAREN
    (292) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 170

    paren_expr                     shift and go to state 171

state 29

    (241) expr -> NUMBER .

    COLON           reduce using rule 241 (expr -> NUMBER .)
    RSHIFT          reduce using rule 241 (expr -> NUMBER .)
    LSHIFT          reduce using rule 241 (expr -> NUMBER .)
    LLSHIFT         reduce using rule 241 (expr -> NUMBER .)
    RRSHIFT         reduce using rule 241 (expr -> NUMBER .)
    COND_DOT        reduce using rule 241 (expr -> NUMBER .)
    DOT             reduce using rule 241 (expr -> NUMBER .)
    LAND            reduce using rule 241 (expr -> NUMBER .)
    LOR             reduce using rule 241 (expr -> NUMBER .)
    BOR             reduce using rule 241 (expr -> NUMBER .)
    INSTANCEOF      reduce using rule 241 (expr -> NUMBER .)
    BXOR            reduce using rule 241 (expr -> NUMBER .)
    BAND            reduce using rule 241 (expr -> NUMBER .)
    EQUAL           reduce using rule 241 (expr -> NUMBER .)
    EQUAL_STRICT    reduce using rule 241 (expr -> NUMBER .)
    NOTEQUAL_STRICT reduce using rule 241 (expr -> NUMBER .)
    GTHAN           reduce using rule 241 (expr -> NUMBER .)
    GTHANEQ         reduce using rule 241 (expr -> NUMBER .)
    LTHAN           reduce using rule 241 (expr -> NUMBER .)
    MOD             reduce using rule 241 (expr -> NUMBER .)
    LTHANEQ         reduce using rule 241 (expr -> NUMBER .)
    NOTEQUAL        reduce using rule 241 (expr -> NUMBER .)
    PLUS            reduce using rule 241 (expr -> NUMBER .)
    MINUS           reduce using rule 241 (expr -> NUMBER .)
    DIVIDE          reduce using rule 241 (expr -> NUMBER .)
    TIMES           reduce using rule 241 (expr -> NUMBER .)
    IN              reduce using rule 241 (expr -> NUMBER .)
    QEST            reduce using rule 241 (expr -> NUMBER .)
    COMMA           reduce using rule 241 (expr -> NUMBER .)
    INC             reduce using rule 241 (expr -> NUMBER .)
    DEC             reduce using rule 241 (expr -> NUMBER .)
    ASSIGNPLUS      reduce using rule 241 (expr -> NUMBER .)
    ASSIGNMINUS     reduce using rule 241 (expr -> NUMBER .)
    ASSIGNDIVIDE    reduce using rule 241 (expr -> NUMBER .)
    ASSIGNTIMES     reduce using rule 241 (expr -> NUMBER .)
    ASSIGNBOR       reduce using rule 241 (expr -> NUMBER .)
    ASSIGNBAND      reduce using rule 241 (expr -> NUMBER .)
    ASSIGNBXOR      reduce using rule 241 (expr -> NUMBER .)
    ASSIGNLSHIFT    reduce using rule 241 (expr -> NUMBER .)
    ASSIGNRSHIFT    reduce using rule 241 (expr -> NUMBER .)
    ASSIGNRRSHIFT   reduce using rule 241 (expr -> NUMBER .)
    ASSIGNLLSHIFT   reduce using rule 241 (expr -> NUMBER .)
    ASSIGN          reduce using rule 241 (expr -> NUMBER .)
    LSBRACKET       reduce using rule 241 (expr -> NUMBER .)
    TLTHAN          reduce using rule 241 (expr -> NUMBER .)
    LPAREN          reduce using rule 241 (expr -> NUMBER .)
    SEMI            reduce using rule 241 (expr -> NUMBER .)
    RPAREN          reduce using rule 241 (expr -> NUMBER .)
    RSBRACKET       reduce using rule 241 (expr -> NUMBER .)
    FUNCTION        reduce using rule 241 (expr -> NUMBER .)
    CLASS           reduce using rule 241 (expr -> NUMBER .)
    TYPED           reduce using rule 241 (expr -> NUMBER .)
    IF              reduce using rule 241 (expr -> NUMBER .)
    ELSE            reduce using rule 241 (expr -> NUMBER .)
    WHILE           reduce using rule 241 (expr -> NUMBER .)
    WITH            reduce using rule 241 (expr -> NUMBER .)
    DO              reduce using rule 241 (expr -> NUMBER .)
    FOR             reduce using rule 241 (expr -> NUMBER .)
    RETURN          reduce using rule 241 (expr -> NUMBER .)
    YIELD           reduce using rule 241 (expr -> NUMBER .)
    BREAK           reduce using rule 241 (expr -> NUMBER .)
    CONTINUE        reduce using rule 241 (expr -> NUMBER .)
    THROW           reduce using rule 241 (expr -> NUMBER .)
    TRY             reduce using rule 241 (expr -> NUMBER .)
    CATCH           reduce using rule 241 (expr -> NUMBER .)
    FINALLY         reduce using rule 241 (expr -> NUMBER .)
    SWITCH          reduce using rule 241 (expr -> NUMBER .)
    NATIVE          reduce using rule 241 (expr -> NUMBER .)
    IMPORT          reduce using rule 241 (expr -> NUMBER .)
    EXPORT          reduce using rule 241 (expr -> NUMBER .)
    NUMBER          reduce using rule 241 (expr -> NUMBER .)
    DELETE          reduce using rule 241 (expr -> NUMBER .)
    STRINGLIT       reduce using rule 241 (expr -> NUMBER .)
    ID              reduce using rule 241 (expr -> NUMBER .)
    GET             reduce using rule 241 (expr -> NUMBER .)
    SET             reduce using rule 241 (expr -> NUMBER .)
    NOT             reduce using rule 241 (expr -> NUMBER .)
    BITINV          reduce using rule 241 (expr -> NUMBER .)
    NEW             reduce using rule 241 (expr -> NUMBER .)
    TYPEOF          reduce using rule 241 (expr -> NUMBER .)
    REGEXPR         reduce using rule 241 (expr -> NUMBER .)
    GLOBAL          reduce using rule 241 (expr -> NUMBER .)
    VAR             reduce using rule 241 (expr -> NUMBER .)
    STATIC          reduce using rule 241 (expr -> NUMBER .)
    LBRACKET        reduce using rule 241 (expr -> NUMBER .)
    $end            reduce using rule 241 (expr -> NUMBER .)
    RBRACKET        reduce using rule 241 (expr -> NUMBER .)
    CASE            reduce using rule 241 (expr -> NUMBER .)
    DEFAULT         reduce using rule 241 (expr -> NUMBER .)
    OF              reduce using rule 241 (expr -> NUMBER .)


state 30

    (248) expr -> obj_literal .

    COLON           reduce using rule 248 (expr -> obj_literal .)
    RSHIFT          reduce using rule 248 (expr -> obj_literal .)
    LSHIFT          reduce using rule 248 (expr -> obj_literal .)
    LLSHIFT         reduce using rule 248 (expr -> obj_literal .)
    RRSHIFT         reduce using rule 248 (expr -> obj_literal .)
    COND_DOT        reduce using rule 248 (expr -> obj_literal .)
    DOT             reduce using rule 248 (expr -> obj_literal .)
    LAND            reduce using rule 248 (expr -> obj_literal .)
    LOR             reduce using rule 248 (expr -> obj_literal .)
    BOR             reduce using rule 248 (expr -> obj_literal .)
    INSTANCEOF      reduce using rule 248 (expr -> obj_literal .)
    BXOR            reduce using rule 248 (expr -> obj_literal .)
    BAND            reduce using rule 248 (expr -> obj_literal .)
    EQUAL           reduce using rule 248 (expr -> obj_literal .)
    EQUAL_STRICT    reduce using rule 248 (expr -> obj_literal .)
    NOTEQUAL_STRICT reduce using rule 248 (expr -> obj_literal .)
    GTHAN           reduce using rule 248 (expr -> obj_literal .)
    GTHANEQ         reduce using rule 248 (expr -> obj_literal .)
    LTHAN           reduce using rule 248 (expr -> obj_literal .)
    MOD             reduce using rule 248 (expr -> obj_literal .)
    LTHANEQ         reduce using rule 248 (expr -> obj_literal .)
    NOTEQUAL        reduce using rule 248 (expr -> obj_literal .)
    PLUS            reduce using rule 248 (expr -> obj_literal .)
    MINUS           reduce using rule 248 (expr -> obj_literal .)
    DIVIDE          reduce using rule 248 (expr -> obj_literal .)
    TIMES           reduce using rule 248 (expr -> obj_literal .)
    IN              reduce using rule 248 (expr -> obj_literal .)
    QEST            reduce using rule 248 (expr -> obj_literal .)
    COMMA           reduce using rule 248 (expr -> obj_literal .)
    INC             reduce using rule 248 (expr -> obj_literal .)
    DEC             reduce using rule 248 (expr -> obj_literal .)
    ASSIGNPLUS      reduce using rule 248 (expr -> obj_literal .)
    ASSIGNMINUS     reduce using rule 248 (expr -> obj_literal .)
    ASSIGNDIVIDE    reduce using rule 248 (expr -> obj_literal .)
    ASSIGNTIMES     reduce using rule 248 (expr -> obj_literal .)
    ASSIGNBOR       reduce using rule 248 (expr -> obj_literal .)
    ASSIGNBAND      reduce using rule 248 (expr -> obj_literal .)
    ASSIGNBXOR      reduce using rule 248 (expr -> obj_literal .)
    ASSIGNLSHIFT    reduce using rule 248 (expr -> obj_literal .)
    ASSIGNRSHIFT    reduce using rule 248 (expr -> obj_literal .)
    ASSIGNRRSHIFT   reduce using rule 248 (expr -> obj_literal .)
    ASSIGNLLSHIFT   reduce using rule 248 (expr -> obj_literal .)
    ASSIGN          reduce using rule 248 (expr -> obj_literal .)
    LSBRACKET       reduce using rule 248 (expr -> obj_literal .)
    TLTHAN          reduce using rule 248 (expr -> obj_literal .)
    LPAREN          reduce using rule 248 (expr -> obj_literal .)
    SEMI            reduce using rule 248 (expr -> obj_literal .)
    RPAREN          reduce using rule 248 (expr -> obj_literal .)
    RSBRACKET       reduce using rule 248 (expr -> obj_literal .)
    FUNCTION        reduce using rule 248 (expr -> obj_literal .)
    CLASS           reduce using rule 248 (expr -> obj_literal .)
    TYPED           reduce using rule 248 (expr -> obj_literal .)
    IF              reduce using rule 248 (expr -> obj_literal .)
    ELSE            reduce using rule 248 (expr -> obj_literal .)
    WHILE           reduce using rule 248 (expr -> obj_literal .)
    WITH            reduce using rule 248 (expr -> obj_literal .)
    DO              reduce using rule 248 (expr -> obj_literal .)
    FOR             reduce using rule 248 (expr -> obj_literal .)
    RETURN          reduce using rule 248 (expr -> obj_literal .)
    YIELD           reduce using rule 248 (expr -> obj_literal .)
    BREAK           reduce using rule 248 (expr -> obj_literal .)
    CONTINUE        reduce using rule 248 (expr -> obj_literal .)
    THROW           reduce using rule 248 (expr -> obj_literal .)
    TRY             reduce using rule 248 (expr -> obj_literal .)
    CATCH           reduce using rule 248 (expr -> obj_literal .)
    FINALLY         reduce using rule 248 (expr -> obj_literal .)
    SWITCH          reduce using rule 248 (expr -> obj_literal .)
    NATIVE          reduce using rule 248 (expr -> obj_literal .)
    IMPORT          reduce using rule 248 (expr -> obj_literal .)
    EXPORT          reduce using rule 248 (expr -> obj_literal .)
    NUMBER          reduce using rule 248 (expr -> obj_literal .)
    DELETE          reduce using rule 248 (expr -> obj_literal .)
    STRINGLIT       reduce using rule 248 (expr -> obj_literal .)
    ID              reduce using rule 248 (expr -> obj_literal .)
    GET             reduce using rule 248 (expr -> obj_literal .)
    SET             reduce using rule 248 (expr -> obj_literal .)
    NOT             reduce using rule 248 (expr -> obj_literal .)
    BITINV          reduce using rule 248 (expr -> obj_literal .)
    NEW             reduce using rule 248 (expr -> obj_literal .)
    TYPEOF          reduce using rule 248 (expr -> obj_literal .)
    REGEXPR         reduce using rule 248 (expr -> obj_literal .)
    GLOBAL          reduce using rule 248 (expr -> obj_literal .)
    VAR             reduce using rule 248 (expr -> obj_literal .)
    STATIC          reduce using rule 248 (expr -> obj_literal .)
    LBRACKET        reduce using rule 248 (expr -> obj_literal .)
    $end            reduce using rule 248 (expr -> obj_literal .)
    RBRACKET        reduce using rule 248 (expr -> obj_literal .)
    CASE            reduce using rule 248 (expr -> obj_literal .)
    DEFAULT         reduce using rule 248 (expr -> obj_literal .)
    OF              reduce using rule 248 (expr -> obj_literal .)


state 31

    (31) statement -> import_decl .

    SEMI            reduce using rule 31 (statement -> import_decl .)
    FUNCTION        reduce using rule 31 (statement -> import_decl .)
    CLASS           reduce using rule 31 (statement -> import_decl .)
    TYPED           reduce using rule 31 (statement -> import_decl .)
    IF              reduce using rule 31 (statement -> import_decl .)
    ELSE            reduce using rule 31 (statement -> import_decl .)
    WHILE           reduce using rule 31 (statement -> import_decl .)
    WITH            reduce using rule 31 (statement -> import_decl .)
    DO              reduce using rule 31 (statement -> import_decl .)
    FOR             reduce using rule 31 (statement -> import_decl .)
    RETURN          reduce using rule 31 (statement -> import_decl .)
    YIELD           reduce using rule 31 (statement -> import_decl .)
    BREAK           reduce using rule 31 (statement -> import_decl .)
    CONTINUE        reduce using rule 31 (statement -> import_decl .)
    THROW           reduce using rule 31 (statement -> import_decl .)
    TRY             reduce using rule 31 (statement -> import_decl .)
    CATCH           reduce using rule 31 (statement -> import_decl .)
    FINALLY         reduce using rule 31 (statement -> import_decl .)
    SWITCH          reduce using rule 31 (statement -> import_decl .)
    NATIVE          reduce using rule 31 (statement -> import_decl .)
    IMPORT          reduce using rule 31 (statement -> import_decl .)
    EXPORT          reduce using rule 31 (statement -> import_decl .)
    NUMBER          reduce using rule 31 (statement -> import_decl .)
    DELETE          reduce using rule 31 (statement -> import_decl .)
    STRINGLIT       reduce using rule 31 (statement -> import_decl .)
    ID              reduce using rule 31 (statement -> import_decl .)
    GET             reduce using rule 31 (statement -> import_decl .)
    SET             reduce using rule 31 (statement -> import_decl .)
    LSBRACKET       reduce using rule 31 (statement -> import_decl .)
    LPAREN          reduce using rule 31 (statement -> import_decl .)
    MINUS           reduce using rule 31 (statement -> import_decl .)
    NOT             reduce using rule 31 (statement -> import_decl .)
    BITINV          reduce using rule 31 (statement -> import_decl .)
    NEW             reduce using rule 31 (statement -> import_decl .)
    INC             reduce using rule 31 (statement -> import_decl .)
    DEC             reduce using rule 31 (statement -> import_decl .)
    TYPEOF          reduce using rule 31 (statement -> import_decl .)
    REGEXPR         reduce using rule 31 (statement -> import_decl .)
    GLOBAL          reduce using rule 31 (statement -> import_decl .)
    VAR             reduce using rule 31 (statement -> import_decl .)
    STATIC          reduce using rule 31 (statement -> import_decl .)
    TLTHAN          reduce using rule 31 (statement -> import_decl .)
    LBRACKET        reduce using rule 31 (statement -> import_decl .)
    CASE            reduce using rule 31 (statement -> import_decl .)
    RBRACKET        reduce using rule 31 (statement -> import_decl .)
    DEFAULT         reduce using rule 31 (statement -> import_decl .)
    $end            reduce using rule 31 (statement -> import_decl .)


state 32

    (283) expr -> bitinv .

    COLON           reduce using rule 283 (expr -> bitinv .)
    RSHIFT          reduce using rule 283 (expr -> bitinv .)
    LSHIFT          reduce using rule 283 (expr -> bitinv .)
    LLSHIFT         reduce using rule 283 (expr -> bitinv .)
    RRSHIFT         reduce using rule 283 (expr -> bitinv .)
    COND_DOT        reduce using rule 283 (expr -> bitinv .)
    DOT             reduce using rule 283 (expr -> bitinv .)
    LAND            reduce using rule 283 (expr -> bitinv .)
    LOR             reduce using rule 283 (expr -> bitinv .)
    BOR             reduce using rule 283 (expr -> bitinv .)
    INSTANCEOF      reduce using rule 283 (expr -> bitinv .)
    BXOR            reduce using rule 283 (expr -> bitinv .)
    BAND            reduce using rule 283 (expr -> bitinv .)
    EQUAL           reduce using rule 283 (expr -> bitinv .)
    EQUAL_STRICT    reduce using rule 283 (expr -> bitinv .)
    NOTEQUAL_STRICT reduce using rule 283 (expr -> bitinv .)
    GTHAN           reduce using rule 283 (expr -> bitinv .)
    GTHANEQ         reduce using rule 283 (expr -> bitinv .)
    LTHAN           reduce using rule 283 (expr -> bitinv .)
    MOD             reduce using rule 283 (expr -> bitinv .)
    LTHANEQ         reduce using rule 283 (expr -> bitinv .)
    NOTEQUAL        reduce using rule 283 (expr -> bitinv .)
    PLUS            reduce using rule 283 (expr -> bitinv .)
    MINUS           reduce using rule 283 (expr -> bitinv .)
    DIVIDE          reduce using rule 283 (expr -> bitinv .)
    TIMES           reduce using rule 283 (expr -> bitinv .)
    IN              reduce using rule 283 (expr -> bitinv .)
    QEST            reduce using rule 283 (expr -> bitinv .)
    COMMA           reduce using rule 283 (expr -> bitinv .)
    INC             reduce using rule 283 (expr -> bitinv .)
    DEC             reduce using rule 283 (expr -> bitinv .)
    ASSIGNPLUS      reduce using rule 283 (expr -> bitinv .)
    ASSIGNMINUS     reduce using rule 283 (expr -> bitinv .)
    ASSIGNDIVIDE    reduce using rule 283 (expr -> bitinv .)
    ASSIGNTIMES     reduce using rule 283 (expr -> bitinv .)
    ASSIGNBOR       reduce using rule 283 (expr -> bitinv .)
    ASSIGNBAND      reduce using rule 283 (expr -> bitinv .)
    ASSIGNBXOR      reduce using rule 283 (expr -> bitinv .)
    ASSIGNLSHIFT    reduce using rule 283 (expr -> bitinv .)
    ASSIGNRSHIFT    reduce using rule 283 (expr -> bitinv .)
    ASSIGNRRSHIFT   reduce using rule 283 (expr -> bitinv .)
    ASSIGNLLSHIFT   reduce using rule 283 (expr -> bitinv .)
    ASSIGN          reduce using rule 283 (expr -> bitinv .)
    LSBRACKET       reduce using rule 283 (expr -> bitinv .)
    TLTHAN          reduce using rule 283 (expr -> bitinv .)
    LPAREN          reduce using rule 283 (expr -> bitinv .)
    SEMI            reduce using rule 283 (expr -> bitinv .)
    RPAREN          reduce using rule 283 (expr -> bitinv .)
    RSBRACKET       reduce using rule 283 (expr -> bitinv .)
    FUNCTION        reduce using rule 283 (expr -> bitinv .)
    CLASS           reduce using rule 283 (expr -> bitinv .)
    TYPED           reduce using rule 283 (expr -> bitinv .)
    IF              reduce using rule 283 (expr -> bitinv .)
    ELSE            reduce using rule 283 (expr -> bitinv .)
    WHILE           reduce using rule 283 (expr -> bitinv .)
    WITH            reduce using rule 283 (expr -> bitinv .)
    DO              reduce using rule 283 (expr -> bitinv .)
    FOR             reduce using rule 283 (expr -> bitinv .)
    RETURN          reduce using rule 283 (expr -> bitinv .)
    YIELD           reduce using rule 283 (expr -> bitinv .)
    BREAK           reduce using rule 283 (expr -> bitinv .)
    CONTINUE        reduce using rule 283 (expr -> bitinv .)
    THROW           reduce using rule 283 (expr -> bitinv .)
    TRY             reduce using rule 283 (expr -> bitinv .)
    CATCH           reduce using rule 283 (expr -> bitinv .)
    FINALLY         reduce using rule 283 (expr -> bitinv .)
    SWITCH          reduce using rule 283 (expr -> bitinv .)
    NATIVE          reduce using rule 283 (expr -> bitinv .)
    IMPORT          reduce using rule 283 (expr -> bitinv .)
    EXPORT          reduce using rule 283 (expr -> bitinv .)
    NUMBER          reduce using rule 283 (expr -> bitinv .)
    DELETE          reduce using rule 283 (expr -> bitinv .)
    STRINGLIT       reduce using rule 283 (expr -> bitinv .)
    ID              reduce using rule 283 (expr -> bitinv .)
    GET             reduce using rule 283 (expr -> bitinv .)
    SET             reduce using rule 283 (expr -> bitinv .)
    NOT             reduce using rule 283 (expr -> bitinv .)
    BITINV          reduce using rule 283 (expr -> bitinv .)
    NEW             reduce using rule 283 (expr -> bitinv .)
    TYPEOF          reduce using rule 283 (expr -> bitinv .)
    REGEXPR         reduce using rule 283 (expr -> bitinv .)
    GLOBAL          reduce using rule 283 (expr -> bitinv .)
    VAR             reduce using rule 283 (expr -> bitinv .)
    STATIC          reduce using rule 283 (expr -> bitinv .)
    LBRACKET        reduce using rule 283 (expr -> bitinv .)
    $end            reduce using rule 283 (expr -> bitinv .)
    RBRACKET        reduce using rule 283 (expr -> bitinv .)
    CASE            reduce using rule 283 (expr -> bitinv .)
    DEFAULT         reduce using rule 283 (expr -> bitinv .)
    OF              reduce using rule 283 (expr -> bitinv .)


state 33

    (207) lbracket_restrict -> LBRACKET .

    RBRACKET        reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    NUMBER          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    STRINGLIT       reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    ID              reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    GET             reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    SET             reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    SEMI            reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    FUNCTION        reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    CLASS           reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    TYPED           reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    IF              reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    ELSE            reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    WHILE           reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    WITH            reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    DO              reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    FOR             reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    RETURN          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    YIELD           reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    BREAK           reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    CONTINUE        reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    THROW           reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    TRY             reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    CATCH           reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    FINALLY         reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    SWITCH          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    NATIVE          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    IMPORT          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    EXPORT          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    DELETE          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    LSBRACKET       reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    LPAREN          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    MINUS           reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    NOT             reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    BITINV          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    NEW             reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    INC             reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    DEC             reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    TYPEOF          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    REGEXPR         reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    GLOBAL          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    VAR             reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    STATIC          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    TLTHAN          reduce using rule 207 (lbracket_restrict -> LBRACKET .)
    LBRACKET        reduce using rule 207 (lbracket_restrict -> LBRACKET .)


state 34

    (24) statement -> continue . SEMI
    (64) statement_nonctrl -> continue . SEMI

    SEMI            shift and go to state 172


state 35

    (330) export_decl -> EXPORT . TIMES from_clause SEMI
    (331) export_decl -> EXPORT . export_clause from_clause SEMI
    (332) export_decl -> EXPORT . export_clause SEMI
    (333) export_decl -> EXPORT . var_decl SEMI
    (334) export_decl -> EXPORT . function
    (335) export_decl -> EXPORT . class
    (336) export_decl -> EXPORT . DEFAULT function
    (337) export_decl -> EXPORT . DEFAULT class
    (338) export_decl -> EXPORT . DEFAULT assign
    (339) export_clause -> . LBRACKET RBRACKET
    (340) export_clause -> . LBRACKET exports_list RBRACKET
    (341) export_clause -> . LBRACKET exports_list COMMA RBRACKET
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC

    TIMES           shift and go to state 178
    DEFAULT         shift and go to state 175
    LBRACKET        shift and go to state 176
    FUNCTION        shift and go to state 180
    CLASS           shift and go to state 20
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17

    export_clause                  shift and go to state 173
    var_decl                       shift and go to state 179
    type_modifiers                 shift and go to state 53
    function                       shift and go to state 174
    class                          shift and go to state 177

state 36

    (33) import_decl -> IMPORT . import_clause from_clause SEMI
    (34) import_decl -> IMPORT . module_spec SEMI
    (35) import_clause -> . import_def_bind
    (36) import_clause -> . name_space_import
    (37) import_clause -> . named_imports
    (38) import_clause -> . import_def_bind COMMA name_space_import
    (39) import_clause -> . import_def_bind COMMA named_imports
    (50) module_spec -> . STRINGLIT
    (40) import_def_bind -> . import_bind
    (41) name_space_import -> . TIMES ID import_bind
    (42) named_imports -> . LBRACKET RBRACKET
    (43) named_imports -> . LBRACKET import_list RBRACKET
    (49) import_bind -> . binding_ident
    (51) binding_ident -> . ID

    STRINGLIT       shift and go to state 190
    TIMES           shift and go to state 184
    LBRACKET        shift and go to state 183
    ID              shift and go to state 185

    import_clause                  shift and go to state 181
    binding_ident                  shift and go to state 187
    module_spec                    shift and go to state 182
    named_imports                  shift and go to state 188
    import_bind                    shift and go to state 189
    import_def_bind                shift and go to state 191
    name_space_import              shift and go to state 186

state 37

    (53) statement_nonctrl -> var_decl . SEMI
    (97) var_decl -> var_decl . ASSIGN expr
    (98) var_decl -> var_decl . COMMA id
    (99) var_decl -> var_decl . COMMA id ASSIGN expr

    SEMI            shift and go to state 193
    ASSIGN          shift and go to state 194
    COMMA           shift and go to state 192


state 38

    (355) id -> ID .

    TLTHAN          reduce using rule 355 (id -> ID .)
    RSHIFT          reduce using rule 355 (id -> ID .)
    LSHIFT          reduce using rule 355 (id -> ID .)
    LLSHIFT         reduce using rule 355 (id -> ID .)
    RRSHIFT         reduce using rule 355 (id -> ID .)
    COND_DOT        reduce using rule 355 (id -> ID .)
    DOT             reduce using rule 355 (id -> ID .)
    LAND            reduce using rule 355 (id -> ID .)
    LOR             reduce using rule 355 (id -> ID .)
    BOR             reduce using rule 355 (id -> ID .)
    INSTANCEOF      reduce using rule 355 (id -> ID .)
    BXOR            reduce using rule 355 (id -> ID .)
    BAND            reduce using rule 355 (id -> ID .)
    EQUAL           reduce using rule 355 (id -> ID .)
    EQUAL_STRICT    reduce using rule 355 (id -> ID .)
    NOTEQUAL_STRICT reduce using rule 355 (id -> ID .)
    GTHAN           reduce using rule 355 (id -> ID .)
    GTHANEQ         reduce using rule 355 (id -> ID .)
    LTHAN           reduce using rule 355 (id -> ID .)
    MOD             reduce using rule 355 (id -> ID .)
    LTHANEQ         reduce using rule 355 (id -> ID .)
    NOTEQUAL        reduce using rule 355 (id -> ID .)
    PLUS            reduce using rule 355 (id -> ID .)
    MINUS           reduce using rule 355 (id -> ID .)
    DIVIDE          reduce using rule 355 (id -> ID .)
    TIMES           reduce using rule 355 (id -> ID .)
    IN              reduce using rule 355 (id -> ID .)
    QEST            reduce using rule 355 (id -> ID .)
    COMMA           reduce using rule 355 (id -> ID .)
    INC             reduce using rule 355 (id -> ID .)
    DEC             reduce using rule 355 (id -> ID .)
    RSBRACKET       reduce using rule 355 (id -> ID .)
    ASSIGNPLUS      reduce using rule 355 (id -> ID .)
    ASSIGNMINUS     reduce using rule 355 (id -> ID .)
    ASSIGNDIVIDE    reduce using rule 355 (id -> ID .)
    ASSIGNTIMES     reduce using rule 355 (id -> ID .)
    ASSIGNBOR       reduce using rule 355 (id -> ID .)
    ASSIGNBAND      reduce using rule 355 (id -> ID .)
    ASSIGNBXOR      reduce using rule 355 (id -> ID .)
    ASSIGNLSHIFT    reduce using rule 355 (id -> ID .)
    ASSIGNRSHIFT    reduce using rule 355 (id -> ID .)
    ASSIGNRRSHIFT   reduce using rule 355 (id -> ID .)
    ASSIGNLLSHIFT   reduce using rule 355 (id -> ID .)
    ASSIGN          reduce using rule 355 (id -> ID .)
    LSBRACKET       reduce using rule 355 (id -> ID .)
    LPAREN          reduce using rule 355 (id -> ID .)
    ID              reduce using rule 355 (id -> ID .)
    GET             reduce using rule 355 (id -> ID .)
    SET             reduce using rule 355 (id -> ID .)
    SEMI            reduce using rule 355 (id -> ID .)
    OF              reduce using rule 355 (id -> ID .)
    RPAREN          reduce using rule 355 (id -> ID .)
    COLON           reduce using rule 355 (id -> ID .)
    FUNCTION        reduce using rule 355 (id -> ID .)
    CLASS           reduce using rule 355 (id -> ID .)
    TYPED           reduce using rule 355 (id -> ID .)
    IF              reduce using rule 355 (id -> ID .)
    ELSE            reduce using rule 355 (id -> ID .)
    WHILE           reduce using rule 355 (id -> ID .)
    WITH            reduce using rule 355 (id -> ID .)
    DO              reduce using rule 355 (id -> ID .)
    FOR             reduce using rule 355 (id -> ID .)
    RETURN          reduce using rule 355 (id -> ID .)
    YIELD           reduce using rule 355 (id -> ID .)
    BREAK           reduce using rule 355 (id -> ID .)
    CONTINUE        reduce using rule 355 (id -> ID .)
    THROW           reduce using rule 355 (id -> ID .)
    TRY             reduce using rule 355 (id -> ID .)
    CATCH           reduce using rule 355 (id -> ID .)
    FINALLY         reduce using rule 355 (id -> ID .)
    SWITCH          reduce using rule 355 (id -> ID .)
    NATIVE          reduce using rule 355 (id -> ID .)
    IMPORT          reduce using rule 355 (id -> ID .)
    EXPORT          reduce using rule 355 (id -> ID .)
    NUMBER          reduce using rule 355 (id -> ID .)
    DELETE          reduce using rule 355 (id -> ID .)
    STRINGLIT       reduce using rule 355 (id -> ID .)
    NOT             reduce using rule 355 (id -> ID .)
    BITINV          reduce using rule 355 (id -> ID .)
    NEW             reduce using rule 355 (id -> ID .)
    TYPEOF          reduce using rule 355 (id -> ID .)
    REGEXPR         reduce using rule 355 (id -> ID .)
    GLOBAL          reduce using rule 355 (id -> ID .)
    VAR             reduce using rule 355 (id -> ID .)
    STATIC          reduce using rule 355 (id -> ID .)
    LBRACKET        reduce using rule 355 (id -> ID .)
    $end            reduce using rule 355 (id -> ID .)
    RBRACKET        reduce using rule 355 (id -> ID .)
    CASE            reduce using rule 355 (id -> ID .)
    DEFAULT         reduce using rule 355 (id -> ID .)
    EXTENDS         reduce using rule 355 (id -> ID .)
    TGTHAN          reduce using rule 355 (id -> ID .)


state 39

    (346) catch -> CATCH . paren_expr statement_nonctrl
    (347) catch -> CATCH . paren_expr LBRACKET statementlist RBRACKET
    (291) paren_expr -> . LPAREN expr RPAREN
    (292) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 170

    paren_expr                     shift and go to state 195

state 40

    (222) typeof -> TYPEOF . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 196
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 41

    (310) dowhile -> DO . ctrl_statement WHILE paren_expr
    (307) ctrl_statement -> . statement_nonctrl
    (308) ctrl_statement -> . LBRACKET statementlist_opt RBRACKET
    (309) ctrl_statement -> . SEMI
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 147
    SEMI            shift and go to state 151
    NUMBER          shift and go to state 29
    FUNCTION        shift and go to state 150
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    FOR             shift and go to state 68
    DO              shift and go to state 41
    WHILE           shift and go to state 73
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    delete                         shift and go to state 51
    yield                          shift and go to state 152
    for                            shift and go to state 141
    else                           shift and go to state 157
    re_lit                         shift and go to state 8
    return                         shift and go to state 142
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 153
    template_ref                   shift and go to state 13
    type_modifiers                 shift and go to state 53
    not                            shift and go to state 15
    dec                            shift and go to state 66
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 144
    new                            shift and go to state 48
    while                          shift and go to state 143
    catch                          shift and go to state 155
    funcref                        shift and go to state 24
    throw                          shift and go to state 145
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    break                          shift and go to state 156
    finally                        shift and go to state 146
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 140
    bitinv                         shift and go to state 32
    ctrl_statement                 shift and go to state 197
    continue                       shift and go to state 149
    strlit                         shift and go to state 79
    var_decl                       shift and go to state 37
    typeof                         shift and go to state 81
    try                            shift and go to state 154
    inc                            shift and go to state 86

state 42

    (26) statement -> try .
    (66) statement_nonctrl -> try .

  ! reduce/reduce conflict for SEMI resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for CLASS resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for TYPED resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for IF resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for ELSE resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for WHILE resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for WITH resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for DO resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for FOR resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for RETURN resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for YIELD resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for BREAK resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for THROW resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for TRY resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for CATCH resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for FINALLY resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for SWITCH resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for NATIVE resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for IMPORT resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for EXPORT resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for NUMBER resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for DELETE resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for ID resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for GET resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for SET resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for LPAREN resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for MINUS resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for NOT resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for BITINV resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for NEW resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for INC resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for DEC resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for VAR resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for STATIC resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for CASE resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 26 (statement -> try .)
  ! reduce/reduce conflict for $end resolved using rule 26 (statement -> try .)
    SEMI            reduce using rule 26 (statement -> try .)
    FUNCTION        reduce using rule 26 (statement -> try .)
    CLASS           reduce using rule 26 (statement -> try .)
    TYPED           reduce using rule 26 (statement -> try .)
    IF              reduce using rule 26 (statement -> try .)
    ELSE            reduce using rule 26 (statement -> try .)
    WHILE           reduce using rule 26 (statement -> try .)
    WITH            reduce using rule 26 (statement -> try .)
    DO              reduce using rule 26 (statement -> try .)
    FOR             reduce using rule 26 (statement -> try .)
    RETURN          reduce using rule 26 (statement -> try .)
    YIELD           reduce using rule 26 (statement -> try .)
    BREAK           reduce using rule 26 (statement -> try .)
    CONTINUE        reduce using rule 26 (statement -> try .)
    THROW           reduce using rule 26 (statement -> try .)
    TRY             reduce using rule 26 (statement -> try .)
    CATCH           reduce using rule 26 (statement -> try .)
    FINALLY         reduce using rule 26 (statement -> try .)
    SWITCH          reduce using rule 26 (statement -> try .)
    NATIVE          reduce using rule 26 (statement -> try .)
    IMPORT          reduce using rule 26 (statement -> try .)
    EXPORT          reduce using rule 26 (statement -> try .)
    NUMBER          reduce using rule 26 (statement -> try .)
    DELETE          reduce using rule 26 (statement -> try .)
    STRINGLIT       reduce using rule 26 (statement -> try .)
    ID              reduce using rule 26 (statement -> try .)
    GET             reduce using rule 26 (statement -> try .)
    SET             reduce using rule 26 (statement -> try .)
    LSBRACKET       reduce using rule 26 (statement -> try .)
    LPAREN          reduce using rule 26 (statement -> try .)
    MINUS           reduce using rule 26 (statement -> try .)
    NOT             reduce using rule 26 (statement -> try .)
    BITINV          reduce using rule 26 (statement -> try .)
    NEW             reduce using rule 26 (statement -> try .)
    INC             reduce using rule 26 (statement -> try .)
    DEC             reduce using rule 26 (statement -> try .)
    TYPEOF          reduce using rule 26 (statement -> try .)
    REGEXPR         reduce using rule 26 (statement -> try .)
    GLOBAL          reduce using rule 26 (statement -> try .)
    VAR             reduce using rule 26 (statement -> try .)
    STATIC          reduce using rule 26 (statement -> try .)
    TLTHAN          reduce using rule 26 (statement -> try .)
    LBRACKET        reduce using rule 26 (statement -> try .)
    CASE            reduce using rule 26 (statement -> try .)
    RBRACKET        reduce using rule 26 (statement -> try .)
    DEFAULT         reduce using rule 26 (statement -> try .)
    $end            reduce using rule 26 (statement -> try .)

  ! SEMI            [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! FUNCTION        [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! CLASS           [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! TYPED           [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! IF              [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! ELSE            [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! WHILE           [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! WITH            [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! DO              [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! FOR             [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! RETURN          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! YIELD           [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! BREAK           [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! CONTINUE        [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! THROW           [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! TRY             [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! CATCH           [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! FINALLY         [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! SWITCH          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! NATIVE          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! IMPORT          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! EXPORT          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! NUMBER          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! DELETE          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! STRINGLIT       [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! ID              [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! GET             [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! SET             [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! LSBRACKET       [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! LPAREN          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! MINUS           [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! NOT             [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! BITINV          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! NEW             [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! INC             [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! DEC             [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! TYPEOF          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! REGEXPR         [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! GLOBAL          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! VAR             [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! STATIC          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! TLTHAN          [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! LBRACKET        [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! CASE            [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! RBRACKET        [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! DEFAULT         [ reduce using rule 66 (statement_nonctrl -> try .) ]
  ! $end            [ reduce using rule 66 (statement_nonctrl -> try .) ]


state 43

    (233) dec -> DEC . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 198
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 44

    (55) statement_nonctrl -> SEMI .

    SEMI            reduce using rule 55 (statement_nonctrl -> SEMI .)
    FUNCTION        reduce using rule 55 (statement_nonctrl -> SEMI .)
    CLASS           reduce using rule 55 (statement_nonctrl -> SEMI .)
    TYPED           reduce using rule 55 (statement_nonctrl -> SEMI .)
    IF              reduce using rule 55 (statement_nonctrl -> SEMI .)
    ELSE            reduce using rule 55 (statement_nonctrl -> SEMI .)
    WHILE           reduce using rule 55 (statement_nonctrl -> SEMI .)
    WITH            reduce using rule 55 (statement_nonctrl -> SEMI .)
    DO              reduce using rule 55 (statement_nonctrl -> SEMI .)
    FOR             reduce using rule 55 (statement_nonctrl -> SEMI .)
    RETURN          reduce using rule 55 (statement_nonctrl -> SEMI .)
    YIELD           reduce using rule 55 (statement_nonctrl -> SEMI .)
    BREAK           reduce using rule 55 (statement_nonctrl -> SEMI .)
    CONTINUE        reduce using rule 55 (statement_nonctrl -> SEMI .)
    THROW           reduce using rule 55 (statement_nonctrl -> SEMI .)
    TRY             reduce using rule 55 (statement_nonctrl -> SEMI .)
    CATCH           reduce using rule 55 (statement_nonctrl -> SEMI .)
    FINALLY         reduce using rule 55 (statement_nonctrl -> SEMI .)
    SWITCH          reduce using rule 55 (statement_nonctrl -> SEMI .)
    NATIVE          reduce using rule 55 (statement_nonctrl -> SEMI .)
    IMPORT          reduce using rule 55 (statement_nonctrl -> SEMI .)
    EXPORT          reduce using rule 55 (statement_nonctrl -> SEMI .)
    NUMBER          reduce using rule 55 (statement_nonctrl -> SEMI .)
    DELETE          reduce using rule 55 (statement_nonctrl -> SEMI .)
    STRINGLIT       reduce using rule 55 (statement_nonctrl -> SEMI .)
    ID              reduce using rule 55 (statement_nonctrl -> SEMI .)
    GET             reduce using rule 55 (statement_nonctrl -> SEMI .)
    SET             reduce using rule 55 (statement_nonctrl -> SEMI .)
    LSBRACKET       reduce using rule 55 (statement_nonctrl -> SEMI .)
    LPAREN          reduce using rule 55 (statement_nonctrl -> SEMI .)
    MINUS           reduce using rule 55 (statement_nonctrl -> SEMI .)
    NOT             reduce using rule 55 (statement_nonctrl -> SEMI .)
    BITINV          reduce using rule 55 (statement_nonctrl -> SEMI .)
    NEW             reduce using rule 55 (statement_nonctrl -> SEMI .)
    INC             reduce using rule 55 (statement_nonctrl -> SEMI .)
    DEC             reduce using rule 55 (statement_nonctrl -> SEMI .)
    TYPEOF          reduce using rule 55 (statement_nonctrl -> SEMI .)
    REGEXPR         reduce using rule 55 (statement_nonctrl -> SEMI .)
    GLOBAL          reduce using rule 55 (statement_nonctrl -> SEMI .)
    VAR             reduce using rule 55 (statement_nonctrl -> SEMI .)
    STATIC          reduce using rule 55 (statement_nonctrl -> SEMI .)
    TLTHAN          reduce using rule 55 (statement_nonctrl -> SEMI .)
    LBRACKET        reduce using rule 55 (statement_nonctrl -> SEMI .)
    $end            reduce using rule 55 (statement_nonctrl -> SEMI .)
    RBRACKET        reduce using rule 55 (statement_nonctrl -> SEMI .)
    CASE            reduce using rule 55 (statement_nonctrl -> SEMI .)
    DEFAULT         reduce using rule 55 (statement_nonctrl -> SEMI .)


state 45

    (80) type_modifiers -> GLOBAL .

    UNSIGNED        reduce using rule 80 (type_modifiers -> GLOBAL .)
    SIGNED          reduce using rule 80 (type_modifiers -> GLOBAL .)
    CONST           reduce using rule 80 (type_modifiers -> GLOBAL .)
    INT             reduce using rule 80 (type_modifiers -> GLOBAL .)
    SHORT           reduce using rule 80 (type_modifiers -> GLOBAL .)
    FLOAT           reduce using rule 80 (type_modifiers -> GLOBAL .)
    DOUBLE          reduce using rule 80 (type_modifiers -> GLOBAL .)
    CHAR            reduce using rule 80 (type_modifiers -> GLOBAL .)
    BYTE            reduce using rule 80 (type_modifiers -> GLOBAL .)
    INFERRED        reduce using rule 80 (type_modifiers -> GLOBAL .)
    ID              reduce using rule 80 (type_modifiers -> GLOBAL .)
    GET             reduce using rule 80 (type_modifiers -> GLOBAL .)
    SET             reduce using rule 80 (type_modifiers -> GLOBAL .)
    GLOBAL          reduce using rule 80 (type_modifiers -> GLOBAL .)
    VAR             reduce using rule 80 (type_modifiers -> GLOBAL .)
    STATIC          reduce using rule 80 (type_modifiers -> GLOBAL .)


state 46

    (246) expr -> array_literal .

    COLON           reduce using rule 246 (expr -> array_literal .)
    RSHIFT          reduce using rule 246 (expr -> array_literal .)
    LSHIFT          reduce using rule 246 (expr -> array_literal .)
    LLSHIFT         reduce using rule 246 (expr -> array_literal .)
    RRSHIFT         reduce using rule 246 (expr -> array_literal .)
    COND_DOT        reduce using rule 246 (expr -> array_literal .)
    DOT             reduce using rule 246 (expr -> array_literal .)
    LAND            reduce using rule 246 (expr -> array_literal .)
    LOR             reduce using rule 246 (expr -> array_literal .)
    BOR             reduce using rule 246 (expr -> array_literal .)
    INSTANCEOF      reduce using rule 246 (expr -> array_literal .)
    BXOR            reduce using rule 246 (expr -> array_literal .)
    BAND            reduce using rule 246 (expr -> array_literal .)
    EQUAL           reduce using rule 246 (expr -> array_literal .)
    EQUAL_STRICT    reduce using rule 246 (expr -> array_literal .)
    NOTEQUAL_STRICT reduce using rule 246 (expr -> array_literal .)
    GTHAN           reduce using rule 246 (expr -> array_literal .)
    GTHANEQ         reduce using rule 246 (expr -> array_literal .)
    LTHAN           reduce using rule 246 (expr -> array_literal .)
    MOD             reduce using rule 246 (expr -> array_literal .)
    LTHANEQ         reduce using rule 246 (expr -> array_literal .)
    NOTEQUAL        reduce using rule 246 (expr -> array_literal .)
    PLUS            reduce using rule 246 (expr -> array_literal .)
    MINUS           reduce using rule 246 (expr -> array_literal .)
    DIVIDE          reduce using rule 246 (expr -> array_literal .)
    TIMES           reduce using rule 246 (expr -> array_literal .)
    IN              reduce using rule 246 (expr -> array_literal .)
    QEST            reduce using rule 246 (expr -> array_literal .)
    COMMA           reduce using rule 246 (expr -> array_literal .)
    INC             reduce using rule 246 (expr -> array_literal .)
    DEC             reduce using rule 246 (expr -> array_literal .)
    ASSIGNPLUS      reduce using rule 246 (expr -> array_literal .)
    ASSIGNMINUS     reduce using rule 246 (expr -> array_literal .)
    ASSIGNDIVIDE    reduce using rule 246 (expr -> array_literal .)
    ASSIGNTIMES     reduce using rule 246 (expr -> array_literal .)
    ASSIGNBOR       reduce using rule 246 (expr -> array_literal .)
    ASSIGNBAND      reduce using rule 246 (expr -> array_literal .)
    ASSIGNBXOR      reduce using rule 246 (expr -> array_literal .)
    ASSIGNLSHIFT    reduce using rule 246 (expr -> array_literal .)
    ASSIGNRSHIFT    reduce using rule 246 (expr -> array_literal .)
    ASSIGNRRSHIFT   reduce using rule 246 (expr -> array_literal .)
    ASSIGNLLSHIFT   reduce using rule 246 (expr -> array_literal .)
    ASSIGN          reduce using rule 246 (expr -> array_literal .)
    LSBRACKET       reduce using rule 246 (expr -> array_literal .)
    TLTHAN          reduce using rule 246 (expr -> array_literal .)
    LPAREN          reduce using rule 246 (expr -> array_literal .)
    SEMI            reduce using rule 246 (expr -> array_literal .)
    RPAREN          reduce using rule 246 (expr -> array_literal .)
    RSBRACKET       reduce using rule 246 (expr -> array_literal .)
    FUNCTION        reduce using rule 246 (expr -> array_literal .)
    CLASS           reduce using rule 246 (expr -> array_literal .)
    TYPED           reduce using rule 246 (expr -> array_literal .)
    IF              reduce using rule 246 (expr -> array_literal .)
    ELSE            reduce using rule 246 (expr -> array_literal .)
    WHILE           reduce using rule 246 (expr -> array_literal .)
    WITH            reduce using rule 246 (expr -> array_literal .)
    DO              reduce using rule 246 (expr -> array_literal .)
    FOR             reduce using rule 246 (expr -> array_literal .)
    RETURN          reduce using rule 246 (expr -> array_literal .)
    YIELD           reduce using rule 246 (expr -> array_literal .)
    BREAK           reduce using rule 246 (expr -> array_literal .)
    CONTINUE        reduce using rule 246 (expr -> array_literal .)
    THROW           reduce using rule 246 (expr -> array_literal .)
    TRY             reduce using rule 246 (expr -> array_literal .)
    CATCH           reduce using rule 246 (expr -> array_literal .)
    FINALLY         reduce using rule 246 (expr -> array_literal .)
    SWITCH          reduce using rule 246 (expr -> array_literal .)
    NATIVE          reduce using rule 246 (expr -> array_literal .)
    IMPORT          reduce using rule 246 (expr -> array_literal .)
    EXPORT          reduce using rule 246 (expr -> array_literal .)
    NUMBER          reduce using rule 246 (expr -> array_literal .)
    DELETE          reduce using rule 246 (expr -> array_literal .)
    STRINGLIT       reduce using rule 246 (expr -> array_literal .)
    ID              reduce using rule 246 (expr -> array_literal .)
    GET             reduce using rule 246 (expr -> array_literal .)
    SET             reduce using rule 246 (expr -> array_literal .)
    NOT             reduce using rule 246 (expr -> array_literal .)
    BITINV          reduce using rule 246 (expr -> array_literal .)
    NEW             reduce using rule 246 (expr -> array_literal .)
    TYPEOF          reduce using rule 246 (expr -> array_literal .)
    REGEXPR         reduce using rule 246 (expr -> array_literal .)
    GLOBAL          reduce using rule 246 (expr -> array_literal .)
    VAR             reduce using rule 246 (expr -> array_literal .)
    STATIC          reduce using rule 246 (expr -> array_literal .)
    LBRACKET        reduce using rule 246 (expr -> array_literal .)
    $end            reduce using rule 246 (expr -> array_literal .)
    RBRACKET        reduce using rule 246 (expr -> array_literal .)
    CASE            reduce using rule 246 (expr -> array_literal .)
    DEFAULT         reduce using rule 246 (expr -> array_literal .)
    OF              reduce using rule 246 (expr -> array_literal .)


state 47

    (324) with -> WITH . paren_expr ctrl_statement
    (291) paren_expr -> . LPAREN expr RPAREN
    (292) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 170

    paren_expr                     shift and go to state 199

state 48

    (284) expr -> new .

    COLON           reduce using rule 284 (expr -> new .)
    RSHIFT          reduce using rule 284 (expr -> new .)
    LSHIFT          reduce using rule 284 (expr -> new .)
    LLSHIFT         reduce using rule 284 (expr -> new .)
    RRSHIFT         reduce using rule 284 (expr -> new .)
    COND_DOT        reduce using rule 284 (expr -> new .)
    DOT             reduce using rule 284 (expr -> new .)
    LAND            reduce using rule 284 (expr -> new .)
    LOR             reduce using rule 284 (expr -> new .)
    BOR             reduce using rule 284 (expr -> new .)
    INSTANCEOF      reduce using rule 284 (expr -> new .)
    BXOR            reduce using rule 284 (expr -> new .)
    BAND            reduce using rule 284 (expr -> new .)
    EQUAL           reduce using rule 284 (expr -> new .)
    EQUAL_STRICT    reduce using rule 284 (expr -> new .)
    NOTEQUAL_STRICT reduce using rule 284 (expr -> new .)
    GTHAN           reduce using rule 284 (expr -> new .)
    GTHANEQ         reduce using rule 284 (expr -> new .)
    LTHAN           reduce using rule 284 (expr -> new .)
    MOD             reduce using rule 284 (expr -> new .)
    LTHANEQ         reduce using rule 284 (expr -> new .)
    NOTEQUAL        reduce using rule 284 (expr -> new .)
    PLUS            reduce using rule 284 (expr -> new .)
    MINUS           reduce using rule 284 (expr -> new .)
    DIVIDE          reduce using rule 284 (expr -> new .)
    TIMES           reduce using rule 284 (expr -> new .)
    IN              reduce using rule 284 (expr -> new .)
    QEST            reduce using rule 284 (expr -> new .)
    COMMA           reduce using rule 284 (expr -> new .)
    INC             reduce using rule 284 (expr -> new .)
    DEC             reduce using rule 284 (expr -> new .)
    ASSIGNPLUS      reduce using rule 284 (expr -> new .)
    ASSIGNMINUS     reduce using rule 284 (expr -> new .)
    ASSIGNDIVIDE    reduce using rule 284 (expr -> new .)
    ASSIGNTIMES     reduce using rule 284 (expr -> new .)
    ASSIGNBOR       reduce using rule 284 (expr -> new .)
    ASSIGNBAND      reduce using rule 284 (expr -> new .)
    ASSIGNBXOR      reduce using rule 284 (expr -> new .)
    ASSIGNLSHIFT    reduce using rule 284 (expr -> new .)
    ASSIGNRSHIFT    reduce using rule 284 (expr -> new .)
    ASSIGNRRSHIFT   reduce using rule 284 (expr -> new .)
    ASSIGNLLSHIFT   reduce using rule 284 (expr -> new .)
    ASSIGN          reduce using rule 284 (expr -> new .)
    LSBRACKET       reduce using rule 284 (expr -> new .)
    TLTHAN          reduce using rule 284 (expr -> new .)
    LPAREN          reduce using rule 284 (expr -> new .)
    SEMI            reduce using rule 284 (expr -> new .)
    RPAREN          reduce using rule 284 (expr -> new .)
    RSBRACKET       reduce using rule 284 (expr -> new .)
    FUNCTION        reduce using rule 284 (expr -> new .)
    CLASS           reduce using rule 284 (expr -> new .)
    TYPED           reduce using rule 284 (expr -> new .)
    IF              reduce using rule 284 (expr -> new .)
    ELSE            reduce using rule 284 (expr -> new .)
    WHILE           reduce using rule 284 (expr -> new .)
    WITH            reduce using rule 284 (expr -> new .)
    DO              reduce using rule 284 (expr -> new .)
    FOR             reduce using rule 284 (expr -> new .)
    RETURN          reduce using rule 284 (expr -> new .)
    YIELD           reduce using rule 284 (expr -> new .)
    BREAK           reduce using rule 284 (expr -> new .)
    CONTINUE        reduce using rule 284 (expr -> new .)
    THROW           reduce using rule 284 (expr -> new .)
    TRY             reduce using rule 284 (expr -> new .)
    CATCH           reduce using rule 284 (expr -> new .)
    FINALLY         reduce using rule 284 (expr -> new .)
    SWITCH          reduce using rule 284 (expr -> new .)
    NATIVE          reduce using rule 284 (expr -> new .)
    IMPORT          reduce using rule 284 (expr -> new .)
    EXPORT          reduce using rule 284 (expr -> new .)
    NUMBER          reduce using rule 284 (expr -> new .)
    DELETE          reduce using rule 284 (expr -> new .)
    STRINGLIT       reduce using rule 284 (expr -> new .)
    ID              reduce using rule 284 (expr -> new .)
    GET             reduce using rule 284 (expr -> new .)
    SET             reduce using rule 284 (expr -> new .)
    NOT             reduce using rule 284 (expr -> new .)
    BITINV          reduce using rule 284 (expr -> new .)
    NEW             reduce using rule 284 (expr -> new .)
    TYPEOF          reduce using rule 284 (expr -> new .)
    REGEXPR         reduce using rule 284 (expr -> new .)
    GLOBAL          reduce using rule 284 (expr -> new .)
    VAR             reduce using rule 284 (expr -> new .)
    STATIC          reduce using rule 284 (expr -> new .)
    LBRACKET        reduce using rule 284 (expr -> new .)
    $end            reduce using rule 284 (expr -> new .)
    RBRACKET        reduce using rule 284 (expr -> new .)
    CASE            reduce using rule 284 (expr -> new .)
    DEFAULT         reduce using rule 284 (expr -> new .)
    OF              reduce using rule 284 (expr -> new .)


state 49

    (206) function -> FUNCTION . id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (204) funcref -> FUNCTION . id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (215) exprfunction -> FUNCTION . func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> FUNCTION . func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (213) func_name_opt -> . ID
    (214) func_name_opt -> .

    ID              shift and go to state 200
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          reduce using rule 214 (func_name_opt -> .)
    LPAREN          reduce using rule 214 (func_name_opt -> .)

    id                             shift and go to state 201
    func_name_opt                  shift and go to state 202

state 50

    (226) obj_literal -> lbracket_restrict . push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> lbracket_restrict . rbracket_restrict
    (6) push_scope -> .
    (208) rbracket_restrict -> . RBRACKET

    NUMBER          reduce using rule 6 (push_scope -> .)
    STRINGLIT       reduce using rule 6 (push_scope -> .)
    ID              reduce using rule 6 (push_scope -> .)
    GET             reduce using rule 6 (push_scope -> .)
    SET             reduce using rule 6 (push_scope -> .)
    RBRACKET        shift and go to state 204

    push_scope                     shift and go to state 203
    rbracket_restrict              shift and go to state 205

state 51

    (69) statement_nonctrl -> delete . SEMI

    SEMI            shift and go to state 206


state 52

    (22) statement -> yield . SEMI
    (62) statement_nonctrl -> yield . SEMI

    SEMI            shift and go to state 207


state 53

    (96) var_decl -> type_modifiers . var_type
    (77) type_modifiers -> type_modifiers . UNSIGNED
    (78) type_modifiers -> type_modifiers . SIGNED
    (79) type_modifiers -> type_modifiers . CONST
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    UNSIGNED        shift and go to state 217
    SIGNED          shift and go to state 218
    CONST           shift and go to state 214
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id_var_type                    shift and go to state 211
    var_type                       shift and go to state 215
    id                             shift and go to state 208

state 54

    (236) strlit -> STRINGLIT .

    RSHIFT          reduce using rule 236 (strlit -> STRINGLIT .)
    LSHIFT          reduce using rule 236 (strlit -> STRINGLIT .)
    LLSHIFT         reduce using rule 236 (strlit -> STRINGLIT .)
    RRSHIFT         reduce using rule 236 (strlit -> STRINGLIT .)
    COND_DOT        reduce using rule 236 (strlit -> STRINGLIT .)
    DOT             reduce using rule 236 (strlit -> STRINGLIT .)
    LAND            reduce using rule 236 (strlit -> STRINGLIT .)
    LOR             reduce using rule 236 (strlit -> STRINGLIT .)
    BOR             reduce using rule 236 (strlit -> STRINGLIT .)
    INSTANCEOF      reduce using rule 236 (strlit -> STRINGLIT .)
    BXOR            reduce using rule 236 (strlit -> STRINGLIT .)
    BAND            reduce using rule 236 (strlit -> STRINGLIT .)
    EQUAL           reduce using rule 236 (strlit -> STRINGLIT .)
    EQUAL_STRICT    reduce using rule 236 (strlit -> STRINGLIT .)
    NOTEQUAL_STRICT reduce using rule 236 (strlit -> STRINGLIT .)
    GTHAN           reduce using rule 236 (strlit -> STRINGLIT .)
    GTHANEQ         reduce using rule 236 (strlit -> STRINGLIT .)
    LTHAN           reduce using rule 236 (strlit -> STRINGLIT .)
    MOD             reduce using rule 236 (strlit -> STRINGLIT .)
    LTHANEQ         reduce using rule 236 (strlit -> STRINGLIT .)
    NOTEQUAL        reduce using rule 236 (strlit -> STRINGLIT .)
    PLUS            reduce using rule 236 (strlit -> STRINGLIT .)
    MINUS           reduce using rule 236 (strlit -> STRINGLIT .)
    DIVIDE          reduce using rule 236 (strlit -> STRINGLIT .)
    TIMES           reduce using rule 236 (strlit -> STRINGLIT .)
    IN              reduce using rule 236 (strlit -> STRINGLIT .)
    QEST            reduce using rule 236 (strlit -> STRINGLIT .)
    COMMA           reduce using rule 236 (strlit -> STRINGLIT .)
    INC             reduce using rule 236 (strlit -> STRINGLIT .)
    DEC             reduce using rule 236 (strlit -> STRINGLIT .)
    ASSIGNPLUS      reduce using rule 236 (strlit -> STRINGLIT .)
    ASSIGNMINUS     reduce using rule 236 (strlit -> STRINGLIT .)
    ASSIGNDIVIDE    reduce using rule 236 (strlit -> STRINGLIT .)
    ASSIGNTIMES     reduce using rule 236 (strlit -> STRINGLIT .)
    ASSIGNBOR       reduce using rule 236 (strlit -> STRINGLIT .)
    ASSIGNBAND      reduce using rule 236 (strlit -> STRINGLIT .)
    ASSIGNBXOR      reduce using rule 236 (strlit -> STRINGLIT .)
    ASSIGNLSHIFT    reduce using rule 236 (strlit -> STRINGLIT .)
    ASSIGNRSHIFT    reduce using rule 236 (strlit -> STRINGLIT .)
    ASSIGNRRSHIFT   reduce using rule 236 (strlit -> STRINGLIT .)
    ASSIGNLLSHIFT   reduce using rule 236 (strlit -> STRINGLIT .)
    ASSIGN          reduce using rule 236 (strlit -> STRINGLIT .)
    LSBRACKET       reduce using rule 236 (strlit -> STRINGLIT .)
    TLTHAN          reduce using rule 236 (strlit -> STRINGLIT .)
    LPAREN          reduce using rule 236 (strlit -> STRINGLIT .)
    SEMI            reduce using rule 236 (strlit -> STRINGLIT .)
    RBRACKET        reduce using rule 236 (strlit -> STRINGLIT .)
    RPAREN          reduce using rule 236 (strlit -> STRINGLIT .)
    RSBRACKET       reduce using rule 236 (strlit -> STRINGLIT .)
    COLON           reduce using rule 236 (strlit -> STRINGLIT .)
    FUNCTION        reduce using rule 236 (strlit -> STRINGLIT .)
    CLASS           reduce using rule 236 (strlit -> STRINGLIT .)
    TYPED           reduce using rule 236 (strlit -> STRINGLIT .)
    IF              reduce using rule 236 (strlit -> STRINGLIT .)
    ELSE            reduce using rule 236 (strlit -> STRINGLIT .)
    WHILE           reduce using rule 236 (strlit -> STRINGLIT .)
    WITH            reduce using rule 236 (strlit -> STRINGLIT .)
    DO              reduce using rule 236 (strlit -> STRINGLIT .)
    FOR             reduce using rule 236 (strlit -> STRINGLIT .)
    RETURN          reduce using rule 236 (strlit -> STRINGLIT .)
    YIELD           reduce using rule 236 (strlit -> STRINGLIT .)
    BREAK           reduce using rule 236 (strlit -> STRINGLIT .)
    CONTINUE        reduce using rule 236 (strlit -> STRINGLIT .)
    THROW           reduce using rule 236 (strlit -> STRINGLIT .)
    TRY             reduce using rule 236 (strlit -> STRINGLIT .)
    CATCH           reduce using rule 236 (strlit -> STRINGLIT .)
    FINALLY         reduce using rule 236 (strlit -> STRINGLIT .)
    SWITCH          reduce using rule 236 (strlit -> STRINGLIT .)
    NATIVE          reduce using rule 236 (strlit -> STRINGLIT .)
    IMPORT          reduce using rule 236 (strlit -> STRINGLIT .)
    EXPORT          reduce using rule 236 (strlit -> STRINGLIT .)
    NUMBER          reduce using rule 236 (strlit -> STRINGLIT .)
    DELETE          reduce using rule 236 (strlit -> STRINGLIT .)
    STRINGLIT       reduce using rule 236 (strlit -> STRINGLIT .)
    ID              reduce using rule 236 (strlit -> STRINGLIT .)
    GET             reduce using rule 236 (strlit -> STRINGLIT .)
    SET             reduce using rule 236 (strlit -> STRINGLIT .)
    NOT             reduce using rule 236 (strlit -> STRINGLIT .)
    BITINV          reduce using rule 236 (strlit -> STRINGLIT .)
    NEW             reduce using rule 236 (strlit -> STRINGLIT .)
    TYPEOF          reduce using rule 236 (strlit -> STRINGLIT .)
    REGEXPR         reduce using rule 236 (strlit -> STRINGLIT .)
    GLOBAL          reduce using rule 236 (strlit -> STRINGLIT .)
    VAR             reduce using rule 236 (strlit -> STRINGLIT .)
    STATIC          reduce using rule 236 (strlit -> STRINGLIT .)
    LBRACKET        reduce using rule 236 (strlit -> STRINGLIT .)
    $end            reduce using rule 236 (strlit -> STRINGLIT .)
    CASE            reduce using rule 236 (strlit -> STRINGLIT .)
    DEFAULT         reduce using rule 236 (strlit -> STRINGLIT .)
    OF              reduce using rule 236 (strlit -> STRINGLIT .)


state 55

    (32) statement -> export_decl .

    SEMI            reduce using rule 32 (statement -> export_decl .)
    FUNCTION        reduce using rule 32 (statement -> export_decl .)
    CLASS           reduce using rule 32 (statement -> export_decl .)
    TYPED           reduce using rule 32 (statement -> export_decl .)
    IF              reduce using rule 32 (statement -> export_decl .)
    ELSE            reduce using rule 32 (statement -> export_decl .)
    WHILE           reduce using rule 32 (statement -> export_decl .)
    WITH            reduce using rule 32 (statement -> export_decl .)
    DO              reduce using rule 32 (statement -> export_decl .)
    FOR             reduce using rule 32 (statement -> export_decl .)
    RETURN          reduce using rule 32 (statement -> export_decl .)
    YIELD           reduce using rule 32 (statement -> export_decl .)
    BREAK           reduce using rule 32 (statement -> export_decl .)
    CONTINUE        reduce using rule 32 (statement -> export_decl .)
    THROW           reduce using rule 32 (statement -> export_decl .)
    TRY             reduce using rule 32 (statement -> export_decl .)
    CATCH           reduce using rule 32 (statement -> export_decl .)
    FINALLY         reduce using rule 32 (statement -> export_decl .)
    SWITCH          reduce using rule 32 (statement -> export_decl .)
    NATIVE          reduce using rule 32 (statement -> export_decl .)
    IMPORT          reduce using rule 32 (statement -> export_decl .)
    EXPORT          reduce using rule 32 (statement -> export_decl .)
    NUMBER          reduce using rule 32 (statement -> export_decl .)
    DELETE          reduce using rule 32 (statement -> export_decl .)
    STRINGLIT       reduce using rule 32 (statement -> export_decl .)
    ID              reduce using rule 32 (statement -> export_decl .)
    GET             reduce using rule 32 (statement -> export_decl .)
    SET             reduce using rule 32 (statement -> export_decl .)
    LSBRACKET       reduce using rule 32 (statement -> export_decl .)
    LPAREN          reduce using rule 32 (statement -> export_decl .)
    MINUS           reduce using rule 32 (statement -> export_decl .)
    NOT             reduce using rule 32 (statement -> export_decl .)
    BITINV          reduce using rule 32 (statement -> export_decl .)
    NEW             reduce using rule 32 (statement -> export_decl .)
    INC             reduce using rule 32 (statement -> export_decl .)
    DEC             reduce using rule 32 (statement -> export_decl .)
    TYPEOF          reduce using rule 32 (statement -> export_decl .)
    REGEXPR         reduce using rule 32 (statement -> export_decl .)
    GLOBAL          reduce using rule 32 (statement -> export_decl .)
    VAR             reduce using rule 32 (statement -> export_decl .)
    STATIC          reduce using rule 32 (statement -> export_decl .)
    TLTHAN          reduce using rule 32 (statement -> export_decl .)
    LBRACKET        reduce using rule 32 (statement -> export_decl .)
    CASE            reduce using rule 32 (statement -> export_decl .)
    RBRACKET        reduce using rule 32 (statement -> export_decl .)
    DEFAULT         reduce using rule 32 (statement -> export_decl .)
    $end            reduce using rule 32 (statement -> export_decl .)


state 56

    (16) statement -> else .
    (57) statement_nonctrl -> else .

  ! reduce/reduce conflict for SEMI resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for CLASS resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for TYPED resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for IF resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for ELSE resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for WHILE resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for WITH resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for DO resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for YIELD resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for BREAK resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for THROW resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for TRY resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for CATCH resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for FINALLY resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for SWITCH resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for NATIVE resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for IMPORT resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for EXPORT resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for NUMBER resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for DELETE resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for ID resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for GET resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for SET resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for LPAREN resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for MINUS resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for NOT resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for BITINV resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for NEW resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for INC resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for DEC resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for VAR resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for STATIC resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for CASE resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 16 (statement -> else .)
  ! reduce/reduce conflict for $end resolved using rule 16 (statement -> else .)
    SEMI            reduce using rule 16 (statement -> else .)
    FUNCTION        reduce using rule 16 (statement -> else .)
    CLASS           reduce using rule 16 (statement -> else .)
    TYPED           reduce using rule 16 (statement -> else .)
    IF              reduce using rule 16 (statement -> else .)
    ELSE            reduce using rule 16 (statement -> else .)
    WHILE           reduce using rule 16 (statement -> else .)
    WITH            reduce using rule 16 (statement -> else .)
    DO              reduce using rule 16 (statement -> else .)
    FOR             reduce using rule 16 (statement -> else .)
    RETURN          reduce using rule 16 (statement -> else .)
    YIELD           reduce using rule 16 (statement -> else .)
    BREAK           reduce using rule 16 (statement -> else .)
    CONTINUE        reduce using rule 16 (statement -> else .)
    THROW           reduce using rule 16 (statement -> else .)
    TRY             reduce using rule 16 (statement -> else .)
    CATCH           reduce using rule 16 (statement -> else .)
    FINALLY         reduce using rule 16 (statement -> else .)
    SWITCH          reduce using rule 16 (statement -> else .)
    NATIVE          reduce using rule 16 (statement -> else .)
    IMPORT          reduce using rule 16 (statement -> else .)
    EXPORT          reduce using rule 16 (statement -> else .)
    NUMBER          reduce using rule 16 (statement -> else .)
    DELETE          reduce using rule 16 (statement -> else .)
    STRINGLIT       reduce using rule 16 (statement -> else .)
    ID              reduce using rule 16 (statement -> else .)
    GET             reduce using rule 16 (statement -> else .)
    SET             reduce using rule 16 (statement -> else .)
    LSBRACKET       reduce using rule 16 (statement -> else .)
    LPAREN          reduce using rule 16 (statement -> else .)
    MINUS           reduce using rule 16 (statement -> else .)
    NOT             reduce using rule 16 (statement -> else .)
    BITINV          reduce using rule 16 (statement -> else .)
    NEW             reduce using rule 16 (statement -> else .)
    INC             reduce using rule 16 (statement -> else .)
    DEC             reduce using rule 16 (statement -> else .)
    TYPEOF          reduce using rule 16 (statement -> else .)
    REGEXPR         reduce using rule 16 (statement -> else .)
    GLOBAL          reduce using rule 16 (statement -> else .)
    VAR             reduce using rule 16 (statement -> else .)
    STATIC          reduce using rule 16 (statement -> else .)
    TLTHAN          reduce using rule 16 (statement -> else .)
    LBRACKET        reduce using rule 16 (statement -> else .)
    CASE            reduce using rule 16 (statement -> else .)
    RBRACKET        reduce using rule 16 (statement -> else .)
    DEFAULT         reduce using rule 16 (statement -> else .)
    $end            reduce using rule 16 (statement -> else .)

  ! SEMI            [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! FUNCTION        [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! CLASS           [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! TYPED           [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! IF              [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! ELSE            [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! WHILE           [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! WITH            [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! DO              [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! FOR             [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! RETURN          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! YIELD           [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! BREAK           [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! CONTINUE        [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! THROW           [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! TRY             [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! CATCH           [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! FINALLY         [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! SWITCH          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! NATIVE          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! IMPORT          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! EXPORT          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! NUMBER          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! DELETE          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! STRINGLIT       [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! ID              [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! GET             [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! SET             [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! LSBRACKET       [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! LPAREN          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! MINUS           [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! NOT             [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! BITINV          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! NEW             [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! INC             [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! DEC             [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! TYPEOF          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! REGEXPR         [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! GLOBAL          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! VAR             [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! STATIC          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! TLTHAN          [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! LBRACKET        [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! CASE            [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! RBRACKET        [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! DEFAULT         [ reduce using rule 57 (statement_nonctrl -> else .) ]
  ! $end            [ reduce using rule 57 (statement_nonctrl -> else .) ]


state 57

    (217) array_literal -> LSBRACKET . exprlist RSBRACKET
    (218) array_literal -> LSBRACKET . RSBRACKET
    (142) exprlist -> . expr
    (143) exprlist -> . exprlist COMMA expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    RSBRACKET       shift and go to state 222
    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 221
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    exprlist                       shift and go to state 223
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 58

    (21) statement -> return . SEMI
    (61) statement_nonctrl -> return . SEMI

    SEMI            shift and go to state 224


state 59

    (356) id -> GET .

    TLTHAN          reduce using rule 356 (id -> GET .)
    RSHIFT          reduce using rule 356 (id -> GET .)
    LSHIFT          reduce using rule 356 (id -> GET .)
    LLSHIFT         reduce using rule 356 (id -> GET .)
    RRSHIFT         reduce using rule 356 (id -> GET .)
    COND_DOT        reduce using rule 356 (id -> GET .)
    DOT             reduce using rule 356 (id -> GET .)
    LAND            reduce using rule 356 (id -> GET .)
    LOR             reduce using rule 356 (id -> GET .)
    BOR             reduce using rule 356 (id -> GET .)
    INSTANCEOF      reduce using rule 356 (id -> GET .)
    BXOR            reduce using rule 356 (id -> GET .)
    BAND            reduce using rule 356 (id -> GET .)
    EQUAL           reduce using rule 356 (id -> GET .)
    EQUAL_STRICT    reduce using rule 356 (id -> GET .)
    NOTEQUAL_STRICT reduce using rule 356 (id -> GET .)
    GTHAN           reduce using rule 356 (id -> GET .)
    GTHANEQ         reduce using rule 356 (id -> GET .)
    LTHAN           reduce using rule 356 (id -> GET .)
    MOD             reduce using rule 356 (id -> GET .)
    LTHANEQ         reduce using rule 356 (id -> GET .)
    NOTEQUAL        reduce using rule 356 (id -> GET .)
    PLUS            reduce using rule 356 (id -> GET .)
    MINUS           reduce using rule 356 (id -> GET .)
    DIVIDE          reduce using rule 356 (id -> GET .)
    TIMES           reduce using rule 356 (id -> GET .)
    IN              reduce using rule 356 (id -> GET .)
    QEST            reduce using rule 356 (id -> GET .)
    COMMA           reduce using rule 356 (id -> GET .)
    INC             reduce using rule 356 (id -> GET .)
    DEC             reduce using rule 356 (id -> GET .)
    RSBRACKET       reduce using rule 356 (id -> GET .)
    ASSIGNPLUS      reduce using rule 356 (id -> GET .)
    ASSIGNMINUS     reduce using rule 356 (id -> GET .)
    ASSIGNDIVIDE    reduce using rule 356 (id -> GET .)
    ASSIGNTIMES     reduce using rule 356 (id -> GET .)
    ASSIGNBOR       reduce using rule 356 (id -> GET .)
    ASSIGNBAND      reduce using rule 356 (id -> GET .)
    ASSIGNBXOR      reduce using rule 356 (id -> GET .)
    ASSIGNLSHIFT    reduce using rule 356 (id -> GET .)
    ASSIGNRSHIFT    reduce using rule 356 (id -> GET .)
    ASSIGNRRSHIFT   reduce using rule 356 (id -> GET .)
    ASSIGNLLSHIFT   reduce using rule 356 (id -> GET .)
    ASSIGN          reduce using rule 356 (id -> GET .)
    LSBRACKET       reduce using rule 356 (id -> GET .)
    LPAREN          reduce using rule 356 (id -> GET .)
    ID              reduce using rule 356 (id -> GET .)
    GET             reduce using rule 356 (id -> GET .)
    SET             reduce using rule 356 (id -> GET .)
    SEMI            reduce using rule 356 (id -> GET .)
    OF              reduce using rule 356 (id -> GET .)
    RPAREN          reduce using rule 356 (id -> GET .)
    COLON           reduce using rule 356 (id -> GET .)
    FUNCTION        reduce using rule 356 (id -> GET .)
    CLASS           reduce using rule 356 (id -> GET .)
    TYPED           reduce using rule 356 (id -> GET .)
    IF              reduce using rule 356 (id -> GET .)
    ELSE            reduce using rule 356 (id -> GET .)
    WHILE           reduce using rule 356 (id -> GET .)
    WITH            reduce using rule 356 (id -> GET .)
    DO              reduce using rule 356 (id -> GET .)
    FOR             reduce using rule 356 (id -> GET .)
    RETURN          reduce using rule 356 (id -> GET .)
    YIELD           reduce using rule 356 (id -> GET .)
    BREAK           reduce using rule 356 (id -> GET .)
    CONTINUE        reduce using rule 356 (id -> GET .)
    THROW           reduce using rule 356 (id -> GET .)
    TRY             reduce using rule 356 (id -> GET .)
    CATCH           reduce using rule 356 (id -> GET .)
    FINALLY         reduce using rule 356 (id -> GET .)
    SWITCH          reduce using rule 356 (id -> GET .)
    NATIVE          reduce using rule 356 (id -> GET .)
    IMPORT          reduce using rule 356 (id -> GET .)
    EXPORT          reduce using rule 356 (id -> GET .)
    NUMBER          reduce using rule 356 (id -> GET .)
    DELETE          reduce using rule 356 (id -> GET .)
    STRINGLIT       reduce using rule 356 (id -> GET .)
    NOT             reduce using rule 356 (id -> GET .)
    BITINV          reduce using rule 356 (id -> GET .)
    NEW             reduce using rule 356 (id -> GET .)
    TYPEOF          reduce using rule 356 (id -> GET .)
    REGEXPR         reduce using rule 356 (id -> GET .)
    GLOBAL          reduce using rule 356 (id -> GET .)
    VAR             reduce using rule 356 (id -> GET .)
    STATIC          reduce using rule 356 (id -> GET .)
    LBRACKET        reduce using rule 356 (id -> GET .)
    $end            reduce using rule 356 (id -> GET .)
    RBRACKET        reduce using rule 356 (id -> GET .)
    CASE            reduce using rule 356 (id -> GET .)
    DEFAULT         reduce using rule 356 (id -> GET .)
    EXTENDS         reduce using rule 356 (id -> GET .)
    TGTHAN          reduce using rule 356 (id -> GET .)


state 60

    (2) statementlist -> statement_nonctrl .

    SEMI            reduce using rule 2 (statementlist -> statement_nonctrl .)
    FUNCTION        reduce using rule 2 (statementlist -> statement_nonctrl .)
    CLASS           reduce using rule 2 (statementlist -> statement_nonctrl .)
    TYPED           reduce using rule 2 (statementlist -> statement_nonctrl .)
    IF              reduce using rule 2 (statementlist -> statement_nonctrl .)
    ELSE            reduce using rule 2 (statementlist -> statement_nonctrl .)
    WHILE           reduce using rule 2 (statementlist -> statement_nonctrl .)
    WITH            reduce using rule 2 (statementlist -> statement_nonctrl .)
    DO              reduce using rule 2 (statementlist -> statement_nonctrl .)
    FOR             reduce using rule 2 (statementlist -> statement_nonctrl .)
    RETURN          reduce using rule 2 (statementlist -> statement_nonctrl .)
    YIELD           reduce using rule 2 (statementlist -> statement_nonctrl .)
    BREAK           reduce using rule 2 (statementlist -> statement_nonctrl .)
    CONTINUE        reduce using rule 2 (statementlist -> statement_nonctrl .)
    THROW           reduce using rule 2 (statementlist -> statement_nonctrl .)
    TRY             reduce using rule 2 (statementlist -> statement_nonctrl .)
    CATCH           reduce using rule 2 (statementlist -> statement_nonctrl .)
    FINALLY         reduce using rule 2 (statementlist -> statement_nonctrl .)
    SWITCH          reduce using rule 2 (statementlist -> statement_nonctrl .)
    NATIVE          reduce using rule 2 (statementlist -> statement_nonctrl .)
    IMPORT          reduce using rule 2 (statementlist -> statement_nonctrl .)
    EXPORT          reduce using rule 2 (statementlist -> statement_nonctrl .)
    NUMBER          reduce using rule 2 (statementlist -> statement_nonctrl .)
    DELETE          reduce using rule 2 (statementlist -> statement_nonctrl .)
    STRINGLIT       reduce using rule 2 (statementlist -> statement_nonctrl .)
    ID              reduce using rule 2 (statementlist -> statement_nonctrl .)
    GET             reduce using rule 2 (statementlist -> statement_nonctrl .)
    SET             reduce using rule 2 (statementlist -> statement_nonctrl .)
    LSBRACKET       reduce using rule 2 (statementlist -> statement_nonctrl .)
    LPAREN          reduce using rule 2 (statementlist -> statement_nonctrl .)
    MINUS           reduce using rule 2 (statementlist -> statement_nonctrl .)
    NOT             reduce using rule 2 (statementlist -> statement_nonctrl .)
    BITINV          reduce using rule 2 (statementlist -> statement_nonctrl .)
    NEW             reduce using rule 2 (statementlist -> statement_nonctrl .)
    INC             reduce using rule 2 (statementlist -> statement_nonctrl .)
    DEC             reduce using rule 2 (statementlist -> statement_nonctrl .)
    TYPEOF          reduce using rule 2 (statementlist -> statement_nonctrl .)
    REGEXPR         reduce using rule 2 (statementlist -> statement_nonctrl .)
    GLOBAL          reduce using rule 2 (statementlist -> statement_nonctrl .)
    VAR             reduce using rule 2 (statementlist -> statement_nonctrl .)
    STATIC          reduce using rule 2 (statementlist -> statement_nonctrl .)
    TLTHAN          reduce using rule 2 (statementlist -> statement_nonctrl .)
    LBRACKET        reduce using rule 2 (statementlist -> statement_nonctrl .)
    RBRACKET        reduce using rule 2 (statementlist -> statement_nonctrl .)
    CASE            reduce using rule 2 (statementlist -> statement_nonctrl .)
    DEFAULT         reduce using rule 2 (statementlist -> statement_nonctrl .)
    $end            reduce using rule 2 (statementlist -> statement_nonctrl .)


state 61

    (349) break -> BREAK .

    SEMI            reduce using rule 349 (break -> BREAK .)


state 62

    (329) finally -> FINALLY . LBRACKET statementlist_opt RBRACKET

    LBRACKET        shift and go to state 225


state 63

    (25) statement -> throw . SEMI
    (65) statement_nonctrl -> throw . SEMI

    SEMI            shift and go to state 226


state 64

    (144) typed_class -> TYPED . CLASS id template_opt typed_class_tail

    CLASS           shift and go to state 227


state 65

    (81) type_modifiers -> VAR .

    UNSIGNED        reduce using rule 81 (type_modifiers -> VAR .)
    SIGNED          reduce using rule 81 (type_modifiers -> VAR .)
    CONST           reduce using rule 81 (type_modifiers -> VAR .)
    INT             reduce using rule 81 (type_modifiers -> VAR .)
    SHORT           reduce using rule 81 (type_modifiers -> VAR .)
    FLOAT           reduce using rule 81 (type_modifiers -> VAR .)
    DOUBLE          reduce using rule 81 (type_modifiers -> VAR .)
    CHAR            reduce using rule 81 (type_modifiers -> VAR .)
    BYTE            reduce using rule 81 (type_modifiers -> VAR .)
    INFERRED        reduce using rule 81 (type_modifiers -> VAR .)
    ID              reduce using rule 81 (type_modifiers -> VAR .)
    GET             reduce using rule 81 (type_modifiers -> VAR .)
    SET             reduce using rule 81 (type_modifiers -> VAR .)
    GLOBAL          reduce using rule 81 (type_modifiers -> VAR .)
    VAR             reduce using rule 81 (type_modifiers -> VAR .)
    STATIC          reduce using rule 81 (type_modifiers -> VAR .)


state 66

    (286) expr -> dec .

    COLON           reduce using rule 286 (expr -> dec .)
    RSHIFT          reduce using rule 286 (expr -> dec .)
    LSHIFT          reduce using rule 286 (expr -> dec .)
    LLSHIFT         reduce using rule 286 (expr -> dec .)
    RRSHIFT         reduce using rule 286 (expr -> dec .)
    COND_DOT        reduce using rule 286 (expr -> dec .)
    DOT             reduce using rule 286 (expr -> dec .)
    LAND            reduce using rule 286 (expr -> dec .)
    LOR             reduce using rule 286 (expr -> dec .)
    BOR             reduce using rule 286 (expr -> dec .)
    INSTANCEOF      reduce using rule 286 (expr -> dec .)
    BXOR            reduce using rule 286 (expr -> dec .)
    BAND            reduce using rule 286 (expr -> dec .)
    EQUAL           reduce using rule 286 (expr -> dec .)
    EQUAL_STRICT    reduce using rule 286 (expr -> dec .)
    NOTEQUAL_STRICT reduce using rule 286 (expr -> dec .)
    GTHAN           reduce using rule 286 (expr -> dec .)
    GTHANEQ         reduce using rule 286 (expr -> dec .)
    LTHAN           reduce using rule 286 (expr -> dec .)
    MOD             reduce using rule 286 (expr -> dec .)
    LTHANEQ         reduce using rule 286 (expr -> dec .)
    NOTEQUAL        reduce using rule 286 (expr -> dec .)
    PLUS            reduce using rule 286 (expr -> dec .)
    MINUS           reduce using rule 286 (expr -> dec .)
    DIVIDE          reduce using rule 286 (expr -> dec .)
    TIMES           reduce using rule 286 (expr -> dec .)
    IN              reduce using rule 286 (expr -> dec .)
    QEST            reduce using rule 286 (expr -> dec .)
    COMMA           reduce using rule 286 (expr -> dec .)
    INC             reduce using rule 286 (expr -> dec .)
    DEC             reduce using rule 286 (expr -> dec .)
    ASSIGNPLUS      reduce using rule 286 (expr -> dec .)
    ASSIGNMINUS     reduce using rule 286 (expr -> dec .)
    ASSIGNDIVIDE    reduce using rule 286 (expr -> dec .)
    ASSIGNTIMES     reduce using rule 286 (expr -> dec .)
    ASSIGNBOR       reduce using rule 286 (expr -> dec .)
    ASSIGNBAND      reduce using rule 286 (expr -> dec .)
    ASSIGNBXOR      reduce using rule 286 (expr -> dec .)
    ASSIGNLSHIFT    reduce using rule 286 (expr -> dec .)
    ASSIGNRSHIFT    reduce using rule 286 (expr -> dec .)
    ASSIGNRRSHIFT   reduce using rule 286 (expr -> dec .)
    ASSIGNLLSHIFT   reduce using rule 286 (expr -> dec .)
    ASSIGN          reduce using rule 286 (expr -> dec .)
    LSBRACKET       reduce using rule 286 (expr -> dec .)
    TLTHAN          reduce using rule 286 (expr -> dec .)
    LPAREN          reduce using rule 286 (expr -> dec .)
    SEMI            reduce using rule 286 (expr -> dec .)
    RPAREN          reduce using rule 286 (expr -> dec .)
    RSBRACKET       reduce using rule 286 (expr -> dec .)
    FUNCTION        reduce using rule 286 (expr -> dec .)
    CLASS           reduce using rule 286 (expr -> dec .)
    TYPED           reduce using rule 286 (expr -> dec .)
    IF              reduce using rule 286 (expr -> dec .)
    ELSE            reduce using rule 286 (expr -> dec .)
    WHILE           reduce using rule 286 (expr -> dec .)
    WITH            reduce using rule 286 (expr -> dec .)
    DO              reduce using rule 286 (expr -> dec .)
    FOR             reduce using rule 286 (expr -> dec .)
    RETURN          reduce using rule 286 (expr -> dec .)
    YIELD           reduce using rule 286 (expr -> dec .)
    BREAK           reduce using rule 286 (expr -> dec .)
    CONTINUE        reduce using rule 286 (expr -> dec .)
    THROW           reduce using rule 286 (expr -> dec .)
    TRY             reduce using rule 286 (expr -> dec .)
    CATCH           reduce using rule 286 (expr -> dec .)
    FINALLY         reduce using rule 286 (expr -> dec .)
    SWITCH          reduce using rule 286 (expr -> dec .)
    NATIVE          reduce using rule 286 (expr -> dec .)
    IMPORT          reduce using rule 286 (expr -> dec .)
    EXPORT          reduce using rule 286 (expr -> dec .)
    NUMBER          reduce using rule 286 (expr -> dec .)
    DELETE          reduce using rule 286 (expr -> dec .)
    STRINGLIT       reduce using rule 286 (expr -> dec .)
    ID              reduce using rule 286 (expr -> dec .)
    GET             reduce using rule 286 (expr -> dec .)
    SET             reduce using rule 286 (expr -> dec .)
    NOT             reduce using rule 286 (expr -> dec .)
    BITINV          reduce using rule 286 (expr -> dec .)
    NEW             reduce using rule 286 (expr -> dec .)
    TYPEOF          reduce using rule 286 (expr -> dec .)
    REGEXPR         reduce using rule 286 (expr -> dec .)
    GLOBAL          reduce using rule 286 (expr -> dec .)
    VAR             reduce using rule 286 (expr -> dec .)
    STATIC          reduce using rule 286 (expr -> dec .)
    LBRACKET        reduce using rule 286 (expr -> dec .)
    $end            reduce using rule 286 (expr -> dec .)
    RBRACKET        reduce using rule 286 (expr -> dec .)
    CASE            reduce using rule 286 (expr -> dec .)
    DEFAULT         reduce using rule 286 (expr -> dec .)
    OF              reduce using rule 286 (expr -> dec .)


state 67

    (281) expr -> expr_uminus .

    COLON           reduce using rule 281 (expr -> expr_uminus .)
    RSHIFT          reduce using rule 281 (expr -> expr_uminus .)
    LSHIFT          reduce using rule 281 (expr -> expr_uminus .)
    LLSHIFT         reduce using rule 281 (expr -> expr_uminus .)
    RRSHIFT         reduce using rule 281 (expr -> expr_uminus .)
    COND_DOT        reduce using rule 281 (expr -> expr_uminus .)
    DOT             reduce using rule 281 (expr -> expr_uminus .)
    LAND            reduce using rule 281 (expr -> expr_uminus .)
    LOR             reduce using rule 281 (expr -> expr_uminus .)
    BOR             reduce using rule 281 (expr -> expr_uminus .)
    INSTANCEOF      reduce using rule 281 (expr -> expr_uminus .)
    BXOR            reduce using rule 281 (expr -> expr_uminus .)
    BAND            reduce using rule 281 (expr -> expr_uminus .)
    EQUAL           reduce using rule 281 (expr -> expr_uminus .)
    EQUAL_STRICT    reduce using rule 281 (expr -> expr_uminus .)
    NOTEQUAL_STRICT reduce using rule 281 (expr -> expr_uminus .)
    GTHAN           reduce using rule 281 (expr -> expr_uminus .)
    GTHANEQ         reduce using rule 281 (expr -> expr_uminus .)
    LTHAN           reduce using rule 281 (expr -> expr_uminus .)
    MOD             reduce using rule 281 (expr -> expr_uminus .)
    LTHANEQ         reduce using rule 281 (expr -> expr_uminus .)
    NOTEQUAL        reduce using rule 281 (expr -> expr_uminus .)
    PLUS            reduce using rule 281 (expr -> expr_uminus .)
    MINUS           reduce using rule 281 (expr -> expr_uminus .)
    DIVIDE          reduce using rule 281 (expr -> expr_uminus .)
    TIMES           reduce using rule 281 (expr -> expr_uminus .)
    IN              reduce using rule 281 (expr -> expr_uminus .)
    QEST            reduce using rule 281 (expr -> expr_uminus .)
    COMMA           reduce using rule 281 (expr -> expr_uminus .)
    INC             reduce using rule 281 (expr -> expr_uminus .)
    DEC             reduce using rule 281 (expr -> expr_uminus .)
    ASSIGNPLUS      reduce using rule 281 (expr -> expr_uminus .)
    ASSIGNMINUS     reduce using rule 281 (expr -> expr_uminus .)
    ASSIGNDIVIDE    reduce using rule 281 (expr -> expr_uminus .)
    ASSIGNTIMES     reduce using rule 281 (expr -> expr_uminus .)
    ASSIGNBOR       reduce using rule 281 (expr -> expr_uminus .)
    ASSIGNBAND      reduce using rule 281 (expr -> expr_uminus .)
    ASSIGNBXOR      reduce using rule 281 (expr -> expr_uminus .)
    ASSIGNLSHIFT    reduce using rule 281 (expr -> expr_uminus .)
    ASSIGNRSHIFT    reduce using rule 281 (expr -> expr_uminus .)
    ASSIGNRRSHIFT   reduce using rule 281 (expr -> expr_uminus .)
    ASSIGNLLSHIFT   reduce using rule 281 (expr -> expr_uminus .)
    ASSIGN          reduce using rule 281 (expr -> expr_uminus .)
    LSBRACKET       reduce using rule 281 (expr -> expr_uminus .)
    TLTHAN          reduce using rule 281 (expr -> expr_uminus .)
    LPAREN          reduce using rule 281 (expr -> expr_uminus .)
    SEMI            reduce using rule 281 (expr -> expr_uminus .)
    RPAREN          reduce using rule 281 (expr -> expr_uminus .)
    RSBRACKET       reduce using rule 281 (expr -> expr_uminus .)
    FUNCTION        reduce using rule 281 (expr -> expr_uminus .)
    CLASS           reduce using rule 281 (expr -> expr_uminus .)
    TYPED           reduce using rule 281 (expr -> expr_uminus .)
    IF              reduce using rule 281 (expr -> expr_uminus .)
    ELSE            reduce using rule 281 (expr -> expr_uminus .)
    WHILE           reduce using rule 281 (expr -> expr_uminus .)
    WITH            reduce using rule 281 (expr -> expr_uminus .)
    DO              reduce using rule 281 (expr -> expr_uminus .)
    FOR             reduce using rule 281 (expr -> expr_uminus .)
    RETURN          reduce using rule 281 (expr -> expr_uminus .)
    YIELD           reduce using rule 281 (expr -> expr_uminus .)
    BREAK           reduce using rule 281 (expr -> expr_uminus .)
    CONTINUE        reduce using rule 281 (expr -> expr_uminus .)
    THROW           reduce using rule 281 (expr -> expr_uminus .)
    TRY             reduce using rule 281 (expr -> expr_uminus .)
    CATCH           reduce using rule 281 (expr -> expr_uminus .)
    FINALLY         reduce using rule 281 (expr -> expr_uminus .)
    SWITCH          reduce using rule 281 (expr -> expr_uminus .)
    NATIVE          reduce using rule 281 (expr -> expr_uminus .)
    IMPORT          reduce using rule 281 (expr -> expr_uminus .)
    EXPORT          reduce using rule 281 (expr -> expr_uminus .)
    NUMBER          reduce using rule 281 (expr -> expr_uminus .)
    DELETE          reduce using rule 281 (expr -> expr_uminus .)
    STRINGLIT       reduce using rule 281 (expr -> expr_uminus .)
    ID              reduce using rule 281 (expr -> expr_uminus .)
    GET             reduce using rule 281 (expr -> expr_uminus .)
    SET             reduce using rule 281 (expr -> expr_uminus .)
    NOT             reduce using rule 281 (expr -> expr_uminus .)
    BITINV          reduce using rule 281 (expr -> expr_uminus .)
    NEW             reduce using rule 281 (expr -> expr_uminus .)
    TYPEOF          reduce using rule 281 (expr -> expr_uminus .)
    REGEXPR         reduce using rule 281 (expr -> expr_uminus .)
    GLOBAL          reduce using rule 281 (expr -> expr_uminus .)
    VAR             reduce using rule 281 (expr -> expr_uminus .)
    STATIC          reduce using rule 281 (expr -> expr_uminus .)
    LBRACKET        reduce using rule 281 (expr -> expr_uminus .)
    $end            reduce using rule 281 (expr -> expr_uminus .)
    RBRACKET        reduce using rule 281 (expr -> expr_uminus .)
    CASE            reduce using rule 281 (expr -> expr_uminus .)
    DEFAULT         reduce using rule 281 (expr -> expr_uminus .)
    OF              reduce using rule 281 (expr -> expr_uminus .)


state 68

    (305) for -> FOR . LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> FOR . LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET

    LPAREN          shift and go to state 228


state 69

    (290) expr_uminus -> MINUS . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 229
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 70

    (18) statement -> with .

    SEMI            reduce using rule 18 (statement -> with .)
    FUNCTION        reduce using rule 18 (statement -> with .)
    CLASS           reduce using rule 18 (statement -> with .)
    TYPED           reduce using rule 18 (statement -> with .)
    IF              reduce using rule 18 (statement -> with .)
    ELSE            reduce using rule 18 (statement -> with .)
    WHILE           reduce using rule 18 (statement -> with .)
    WITH            reduce using rule 18 (statement -> with .)
    DO              reduce using rule 18 (statement -> with .)
    FOR             reduce using rule 18 (statement -> with .)
    RETURN          reduce using rule 18 (statement -> with .)
    YIELD           reduce using rule 18 (statement -> with .)
    BREAK           reduce using rule 18 (statement -> with .)
    CONTINUE        reduce using rule 18 (statement -> with .)
    THROW           reduce using rule 18 (statement -> with .)
    TRY             reduce using rule 18 (statement -> with .)
    CATCH           reduce using rule 18 (statement -> with .)
    FINALLY         reduce using rule 18 (statement -> with .)
    SWITCH          reduce using rule 18 (statement -> with .)
    NATIVE          reduce using rule 18 (statement -> with .)
    IMPORT          reduce using rule 18 (statement -> with .)
    EXPORT          reduce using rule 18 (statement -> with .)
    NUMBER          reduce using rule 18 (statement -> with .)
    DELETE          reduce using rule 18 (statement -> with .)
    STRINGLIT       reduce using rule 18 (statement -> with .)
    ID              reduce using rule 18 (statement -> with .)
    GET             reduce using rule 18 (statement -> with .)
    SET             reduce using rule 18 (statement -> with .)
    LSBRACKET       reduce using rule 18 (statement -> with .)
    LPAREN          reduce using rule 18 (statement -> with .)
    MINUS           reduce using rule 18 (statement -> with .)
    NOT             reduce using rule 18 (statement -> with .)
    BITINV          reduce using rule 18 (statement -> with .)
    NEW             reduce using rule 18 (statement -> with .)
    INC             reduce using rule 18 (statement -> with .)
    DEC             reduce using rule 18 (statement -> with .)
    TYPEOF          reduce using rule 18 (statement -> with .)
    REGEXPR         reduce using rule 18 (statement -> with .)
    GLOBAL          reduce using rule 18 (statement -> with .)
    VAR             reduce using rule 18 (statement -> with .)
    STATIC          reduce using rule 18 (statement -> with .)
    TLTHAN          reduce using rule 18 (statement -> with .)
    LBRACKET        reduce using rule 18 (statement -> with .)
    CASE            reduce using rule 18 (statement -> with .)
    RBRACKET        reduce using rule 18 (statement -> with .)
    DEFAULT         reduce using rule 18 (statement -> with .)
    $end            reduce using rule 18 (statement -> with .)


state 71

    (205) func_native -> NATIVE . push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (6) push_scope -> .

    FUNCTION        reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 230

state 72

    (1) statementlist -> statement .

    SEMI            reduce using rule 1 (statementlist -> statement .)
    FUNCTION        reduce using rule 1 (statementlist -> statement .)
    CLASS           reduce using rule 1 (statementlist -> statement .)
    TYPED           reduce using rule 1 (statementlist -> statement .)
    IF              reduce using rule 1 (statementlist -> statement .)
    ELSE            reduce using rule 1 (statementlist -> statement .)
    WHILE           reduce using rule 1 (statementlist -> statement .)
    WITH            reduce using rule 1 (statementlist -> statement .)
    DO              reduce using rule 1 (statementlist -> statement .)
    FOR             reduce using rule 1 (statementlist -> statement .)
    RETURN          reduce using rule 1 (statementlist -> statement .)
    YIELD           reduce using rule 1 (statementlist -> statement .)
    BREAK           reduce using rule 1 (statementlist -> statement .)
    CONTINUE        reduce using rule 1 (statementlist -> statement .)
    THROW           reduce using rule 1 (statementlist -> statement .)
    TRY             reduce using rule 1 (statementlist -> statement .)
    CATCH           reduce using rule 1 (statementlist -> statement .)
    FINALLY         reduce using rule 1 (statementlist -> statement .)
    SWITCH          reduce using rule 1 (statementlist -> statement .)
    NATIVE          reduce using rule 1 (statementlist -> statement .)
    IMPORT          reduce using rule 1 (statementlist -> statement .)
    EXPORT          reduce using rule 1 (statementlist -> statement .)
    NUMBER          reduce using rule 1 (statementlist -> statement .)
    DELETE          reduce using rule 1 (statementlist -> statement .)
    STRINGLIT       reduce using rule 1 (statementlist -> statement .)
    ID              reduce using rule 1 (statementlist -> statement .)
    GET             reduce using rule 1 (statementlist -> statement .)
    SET             reduce using rule 1 (statementlist -> statement .)
    LSBRACKET       reduce using rule 1 (statementlist -> statement .)
    LPAREN          reduce using rule 1 (statementlist -> statement .)
    MINUS           reduce using rule 1 (statementlist -> statement .)
    NOT             reduce using rule 1 (statementlist -> statement .)
    BITINV          reduce using rule 1 (statementlist -> statement .)
    NEW             reduce using rule 1 (statementlist -> statement .)
    INC             reduce using rule 1 (statementlist -> statement .)
    DEC             reduce using rule 1 (statementlist -> statement .)
    TYPEOF          reduce using rule 1 (statementlist -> statement .)
    REGEXPR         reduce using rule 1 (statementlist -> statement .)
    GLOBAL          reduce using rule 1 (statementlist -> statement .)
    VAR             reduce using rule 1 (statementlist -> statement .)
    STATIC          reduce using rule 1 (statementlist -> statement .)
    TLTHAN          reduce using rule 1 (statementlist -> statement .)
    LBRACKET        reduce using rule 1 (statementlist -> statement .)
    RBRACKET        reduce using rule 1 (statementlist -> statement .)
    CASE            reduce using rule 1 (statementlist -> statement .)
    DEFAULT         reduce using rule 1 (statementlist -> statement .)
    $end            reduce using rule 1 (statementlist -> statement .)


state 73

    (311) while -> WHILE . paren_expr statement_nonctrl
    (312) while -> WHILE . paren_expr LBRACKET statementlist_opt RBRACKET
    (291) paren_expr -> . LPAREN expr RPAREN
    (292) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 170

    paren_expr                     shift and go to state 231

state 74

    (138) throw -> THROW . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 232
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 75

    (325) if -> IF . paren_expr ctrl_statement
    (291) paren_expr -> . LPAREN expr RPAREN
    (292) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 170

    paren_expr                     shift and go to state 233

state 76

    (15) statement -> if .
    (56) statement_nonctrl -> if .

  ! reduce/reduce conflict for SEMI resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for CLASS resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for TYPED resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for IF resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for WITH resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for DO resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for YIELD resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for BREAK resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for THROW resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for TRY resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for CATCH resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for FINALLY resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for SWITCH resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for NATIVE resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for IMPORT resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for EXPORT resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for DELETE resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for ID resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for GET resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for SET resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for LPAREN resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for BITINV resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for NEW resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for INC resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for DEC resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for VAR resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for STATIC resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for CASE resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for $end resolved using rule 15 (statement -> if .)
    SEMI            reduce using rule 15 (statement -> if .)
    FUNCTION        reduce using rule 15 (statement -> if .)
    CLASS           reduce using rule 15 (statement -> if .)
    TYPED           reduce using rule 15 (statement -> if .)
    IF              reduce using rule 15 (statement -> if .)
    ELSE            reduce using rule 15 (statement -> if .)
    WHILE           reduce using rule 15 (statement -> if .)
    WITH            reduce using rule 15 (statement -> if .)
    DO              reduce using rule 15 (statement -> if .)
    FOR             reduce using rule 15 (statement -> if .)
    RETURN          reduce using rule 15 (statement -> if .)
    YIELD           reduce using rule 15 (statement -> if .)
    BREAK           reduce using rule 15 (statement -> if .)
    CONTINUE        reduce using rule 15 (statement -> if .)
    THROW           reduce using rule 15 (statement -> if .)
    TRY             reduce using rule 15 (statement -> if .)
    CATCH           reduce using rule 15 (statement -> if .)
    FINALLY         reduce using rule 15 (statement -> if .)
    SWITCH          reduce using rule 15 (statement -> if .)
    NATIVE          reduce using rule 15 (statement -> if .)
    IMPORT          reduce using rule 15 (statement -> if .)
    EXPORT          reduce using rule 15 (statement -> if .)
    NUMBER          reduce using rule 15 (statement -> if .)
    DELETE          reduce using rule 15 (statement -> if .)
    STRINGLIT       reduce using rule 15 (statement -> if .)
    ID              reduce using rule 15 (statement -> if .)
    GET             reduce using rule 15 (statement -> if .)
    SET             reduce using rule 15 (statement -> if .)
    LSBRACKET       reduce using rule 15 (statement -> if .)
    LPAREN          reduce using rule 15 (statement -> if .)
    MINUS           reduce using rule 15 (statement -> if .)
    NOT             reduce using rule 15 (statement -> if .)
    BITINV          reduce using rule 15 (statement -> if .)
    NEW             reduce using rule 15 (statement -> if .)
    INC             reduce using rule 15 (statement -> if .)
    DEC             reduce using rule 15 (statement -> if .)
    TYPEOF          reduce using rule 15 (statement -> if .)
    REGEXPR         reduce using rule 15 (statement -> if .)
    GLOBAL          reduce using rule 15 (statement -> if .)
    VAR             reduce using rule 15 (statement -> if .)
    STATIC          reduce using rule 15 (statement -> if .)
    TLTHAN          reduce using rule 15 (statement -> if .)
    LBRACKET        reduce using rule 15 (statement -> if .)
    CASE            reduce using rule 15 (statement -> if .)
    RBRACKET        reduce using rule 15 (statement -> if .)
    DEFAULT         reduce using rule 15 (statement -> if .)
    $end            reduce using rule 15 (statement -> if .)

  ! SEMI            [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! FUNCTION        [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! CLASS           [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! TYPED           [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! IF              [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! ELSE            [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! WHILE           [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! WITH            [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! DO              [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! FOR             [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! RETURN          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! YIELD           [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! BREAK           [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! CONTINUE        [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! THROW           [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! TRY             [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! CATCH           [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! FINALLY         [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! SWITCH          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! NATIVE          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! IMPORT          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! EXPORT          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! NUMBER          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! DELETE          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! STRINGLIT       [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! ID              [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! GET             [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! SET             [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! LSBRACKET       [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! LPAREN          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! MINUS           [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! NOT             [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! BITINV          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! NEW             [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! INC             [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! DEC             [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! TYPEOF          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! REGEXPR         [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! GLOBAL          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! VAR             [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! STATIC          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! TLTHAN          [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! LBRACKET        [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! CASE            [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! RBRACKET        [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! DEFAULT         [ reduce using rule 56 (statement_nonctrl -> if .) ]
  ! $end            [ reduce using rule 56 (statement_nonctrl -> if .) ]


state 77

    (234) not -> NOT . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 234
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 78

    (350) continue -> CONTINUE .

    SEMI            reduce using rule 350 (continue -> CONTINUE .)


state 79

    (242) expr -> strlit .

    COLON           reduce using rule 242 (expr -> strlit .)
    RSHIFT          reduce using rule 242 (expr -> strlit .)
    LSHIFT          reduce using rule 242 (expr -> strlit .)
    LLSHIFT         reduce using rule 242 (expr -> strlit .)
    RRSHIFT         reduce using rule 242 (expr -> strlit .)
    COND_DOT        reduce using rule 242 (expr -> strlit .)
    DOT             reduce using rule 242 (expr -> strlit .)
    LAND            reduce using rule 242 (expr -> strlit .)
    LOR             reduce using rule 242 (expr -> strlit .)
    BOR             reduce using rule 242 (expr -> strlit .)
    INSTANCEOF      reduce using rule 242 (expr -> strlit .)
    BXOR            reduce using rule 242 (expr -> strlit .)
    BAND            reduce using rule 242 (expr -> strlit .)
    EQUAL           reduce using rule 242 (expr -> strlit .)
    EQUAL_STRICT    reduce using rule 242 (expr -> strlit .)
    NOTEQUAL_STRICT reduce using rule 242 (expr -> strlit .)
    GTHAN           reduce using rule 242 (expr -> strlit .)
    GTHANEQ         reduce using rule 242 (expr -> strlit .)
    LTHAN           reduce using rule 242 (expr -> strlit .)
    MOD             reduce using rule 242 (expr -> strlit .)
    LTHANEQ         reduce using rule 242 (expr -> strlit .)
    NOTEQUAL        reduce using rule 242 (expr -> strlit .)
    PLUS            reduce using rule 242 (expr -> strlit .)
    MINUS           reduce using rule 242 (expr -> strlit .)
    DIVIDE          reduce using rule 242 (expr -> strlit .)
    TIMES           reduce using rule 242 (expr -> strlit .)
    IN              reduce using rule 242 (expr -> strlit .)
    QEST            reduce using rule 242 (expr -> strlit .)
    COMMA           reduce using rule 242 (expr -> strlit .)
    INC             reduce using rule 242 (expr -> strlit .)
    DEC             reduce using rule 242 (expr -> strlit .)
    ASSIGNPLUS      reduce using rule 242 (expr -> strlit .)
    ASSIGNMINUS     reduce using rule 242 (expr -> strlit .)
    ASSIGNDIVIDE    reduce using rule 242 (expr -> strlit .)
    ASSIGNTIMES     reduce using rule 242 (expr -> strlit .)
    ASSIGNBOR       reduce using rule 242 (expr -> strlit .)
    ASSIGNBAND      reduce using rule 242 (expr -> strlit .)
    ASSIGNBXOR      reduce using rule 242 (expr -> strlit .)
    ASSIGNLSHIFT    reduce using rule 242 (expr -> strlit .)
    ASSIGNRSHIFT    reduce using rule 242 (expr -> strlit .)
    ASSIGNRRSHIFT   reduce using rule 242 (expr -> strlit .)
    ASSIGNLLSHIFT   reduce using rule 242 (expr -> strlit .)
    ASSIGN          reduce using rule 242 (expr -> strlit .)
    LSBRACKET       reduce using rule 242 (expr -> strlit .)
    TLTHAN          reduce using rule 242 (expr -> strlit .)
    LPAREN          reduce using rule 242 (expr -> strlit .)
    SEMI            reduce using rule 242 (expr -> strlit .)
    RPAREN          reduce using rule 242 (expr -> strlit .)
    RSBRACKET       reduce using rule 242 (expr -> strlit .)
    FUNCTION        reduce using rule 242 (expr -> strlit .)
    CLASS           reduce using rule 242 (expr -> strlit .)
    TYPED           reduce using rule 242 (expr -> strlit .)
    IF              reduce using rule 242 (expr -> strlit .)
    ELSE            reduce using rule 242 (expr -> strlit .)
    WHILE           reduce using rule 242 (expr -> strlit .)
    WITH            reduce using rule 242 (expr -> strlit .)
    DO              reduce using rule 242 (expr -> strlit .)
    FOR             reduce using rule 242 (expr -> strlit .)
    RETURN          reduce using rule 242 (expr -> strlit .)
    YIELD           reduce using rule 242 (expr -> strlit .)
    BREAK           reduce using rule 242 (expr -> strlit .)
    CONTINUE        reduce using rule 242 (expr -> strlit .)
    THROW           reduce using rule 242 (expr -> strlit .)
    TRY             reduce using rule 242 (expr -> strlit .)
    CATCH           reduce using rule 242 (expr -> strlit .)
    FINALLY         reduce using rule 242 (expr -> strlit .)
    SWITCH          reduce using rule 242 (expr -> strlit .)
    NATIVE          reduce using rule 242 (expr -> strlit .)
    IMPORT          reduce using rule 242 (expr -> strlit .)
    EXPORT          reduce using rule 242 (expr -> strlit .)
    NUMBER          reduce using rule 242 (expr -> strlit .)
    DELETE          reduce using rule 242 (expr -> strlit .)
    STRINGLIT       reduce using rule 242 (expr -> strlit .)
    ID              reduce using rule 242 (expr -> strlit .)
    GET             reduce using rule 242 (expr -> strlit .)
    SET             reduce using rule 242 (expr -> strlit .)
    NOT             reduce using rule 242 (expr -> strlit .)
    BITINV          reduce using rule 242 (expr -> strlit .)
    NEW             reduce using rule 242 (expr -> strlit .)
    TYPEOF          reduce using rule 242 (expr -> strlit .)
    REGEXPR         reduce using rule 242 (expr -> strlit .)
    GLOBAL          reduce using rule 242 (expr -> strlit .)
    VAR             reduce using rule 242 (expr -> strlit .)
    STATIC          reduce using rule 242 (expr -> strlit .)
    LBRACKET        reduce using rule 242 (expr -> strlit .)
    $end            reduce using rule 242 (expr -> strlit .)
    RBRACKET        reduce using rule 242 (expr -> strlit .)
    CASE            reduce using rule 242 (expr -> strlit .)
    DEFAULT         reduce using rule 242 (expr -> strlit .)
    OF              reduce using rule 242 (expr -> strlit .)


state 80

    (13) statement -> class .

    SEMI            reduce using rule 13 (statement -> class .)
    FUNCTION        reduce using rule 13 (statement -> class .)
    CLASS           reduce using rule 13 (statement -> class .)
    TYPED           reduce using rule 13 (statement -> class .)
    IF              reduce using rule 13 (statement -> class .)
    ELSE            reduce using rule 13 (statement -> class .)
    WHILE           reduce using rule 13 (statement -> class .)
    WITH            reduce using rule 13 (statement -> class .)
    DO              reduce using rule 13 (statement -> class .)
    FOR             reduce using rule 13 (statement -> class .)
    RETURN          reduce using rule 13 (statement -> class .)
    YIELD           reduce using rule 13 (statement -> class .)
    BREAK           reduce using rule 13 (statement -> class .)
    CONTINUE        reduce using rule 13 (statement -> class .)
    THROW           reduce using rule 13 (statement -> class .)
    TRY             reduce using rule 13 (statement -> class .)
    CATCH           reduce using rule 13 (statement -> class .)
    FINALLY         reduce using rule 13 (statement -> class .)
    SWITCH          reduce using rule 13 (statement -> class .)
    NATIVE          reduce using rule 13 (statement -> class .)
    IMPORT          reduce using rule 13 (statement -> class .)
    EXPORT          reduce using rule 13 (statement -> class .)
    NUMBER          reduce using rule 13 (statement -> class .)
    DELETE          reduce using rule 13 (statement -> class .)
    STRINGLIT       reduce using rule 13 (statement -> class .)
    ID              reduce using rule 13 (statement -> class .)
    GET             reduce using rule 13 (statement -> class .)
    SET             reduce using rule 13 (statement -> class .)
    LSBRACKET       reduce using rule 13 (statement -> class .)
    LPAREN          reduce using rule 13 (statement -> class .)
    MINUS           reduce using rule 13 (statement -> class .)
    NOT             reduce using rule 13 (statement -> class .)
    BITINV          reduce using rule 13 (statement -> class .)
    NEW             reduce using rule 13 (statement -> class .)
    INC             reduce using rule 13 (statement -> class .)
    DEC             reduce using rule 13 (statement -> class .)
    TYPEOF          reduce using rule 13 (statement -> class .)
    REGEXPR         reduce using rule 13 (statement -> class .)
    GLOBAL          reduce using rule 13 (statement -> class .)
    VAR             reduce using rule 13 (statement -> class .)
    STATIC          reduce using rule 13 (statement -> class .)
    TLTHAN          reduce using rule 13 (statement -> class .)
    LBRACKET        reduce using rule 13 (statement -> class .)
    CASE            reduce using rule 13 (statement -> class .)
    RBRACKET        reduce using rule 13 (statement -> class .)
    DEFAULT         reduce using rule 13 (statement -> class .)
    $end            reduce using rule 13 (statement -> class .)


state 81

    (287) expr -> typeof .

    COLON           reduce using rule 287 (expr -> typeof .)
    RSHIFT          reduce using rule 287 (expr -> typeof .)
    LSHIFT          reduce using rule 287 (expr -> typeof .)
    LLSHIFT         reduce using rule 287 (expr -> typeof .)
    RRSHIFT         reduce using rule 287 (expr -> typeof .)
    COND_DOT        reduce using rule 287 (expr -> typeof .)
    DOT             reduce using rule 287 (expr -> typeof .)
    LAND            reduce using rule 287 (expr -> typeof .)
    LOR             reduce using rule 287 (expr -> typeof .)
    BOR             reduce using rule 287 (expr -> typeof .)
    INSTANCEOF      reduce using rule 287 (expr -> typeof .)
    BXOR            reduce using rule 287 (expr -> typeof .)
    BAND            reduce using rule 287 (expr -> typeof .)
    EQUAL           reduce using rule 287 (expr -> typeof .)
    EQUAL_STRICT    reduce using rule 287 (expr -> typeof .)
    NOTEQUAL_STRICT reduce using rule 287 (expr -> typeof .)
    GTHAN           reduce using rule 287 (expr -> typeof .)
    GTHANEQ         reduce using rule 287 (expr -> typeof .)
    LTHAN           reduce using rule 287 (expr -> typeof .)
    MOD             reduce using rule 287 (expr -> typeof .)
    LTHANEQ         reduce using rule 287 (expr -> typeof .)
    NOTEQUAL        reduce using rule 287 (expr -> typeof .)
    PLUS            reduce using rule 287 (expr -> typeof .)
    MINUS           reduce using rule 287 (expr -> typeof .)
    DIVIDE          reduce using rule 287 (expr -> typeof .)
    TIMES           reduce using rule 287 (expr -> typeof .)
    IN              reduce using rule 287 (expr -> typeof .)
    QEST            reduce using rule 287 (expr -> typeof .)
    COMMA           reduce using rule 287 (expr -> typeof .)
    INC             reduce using rule 287 (expr -> typeof .)
    DEC             reduce using rule 287 (expr -> typeof .)
    ASSIGNPLUS      reduce using rule 287 (expr -> typeof .)
    ASSIGNMINUS     reduce using rule 287 (expr -> typeof .)
    ASSIGNDIVIDE    reduce using rule 287 (expr -> typeof .)
    ASSIGNTIMES     reduce using rule 287 (expr -> typeof .)
    ASSIGNBOR       reduce using rule 287 (expr -> typeof .)
    ASSIGNBAND      reduce using rule 287 (expr -> typeof .)
    ASSIGNBXOR      reduce using rule 287 (expr -> typeof .)
    ASSIGNLSHIFT    reduce using rule 287 (expr -> typeof .)
    ASSIGNRSHIFT    reduce using rule 287 (expr -> typeof .)
    ASSIGNRRSHIFT   reduce using rule 287 (expr -> typeof .)
    ASSIGNLLSHIFT   reduce using rule 287 (expr -> typeof .)
    ASSIGN          reduce using rule 287 (expr -> typeof .)
    LSBRACKET       reduce using rule 287 (expr -> typeof .)
    TLTHAN          reduce using rule 287 (expr -> typeof .)
    LPAREN          reduce using rule 287 (expr -> typeof .)
    SEMI            reduce using rule 287 (expr -> typeof .)
    RPAREN          reduce using rule 287 (expr -> typeof .)
    RSBRACKET       reduce using rule 287 (expr -> typeof .)
    FUNCTION        reduce using rule 287 (expr -> typeof .)
    CLASS           reduce using rule 287 (expr -> typeof .)
    TYPED           reduce using rule 287 (expr -> typeof .)
    IF              reduce using rule 287 (expr -> typeof .)
    ELSE            reduce using rule 287 (expr -> typeof .)
    WHILE           reduce using rule 287 (expr -> typeof .)
    WITH            reduce using rule 287 (expr -> typeof .)
    DO              reduce using rule 287 (expr -> typeof .)
    FOR             reduce using rule 287 (expr -> typeof .)
    RETURN          reduce using rule 287 (expr -> typeof .)
    YIELD           reduce using rule 287 (expr -> typeof .)
    BREAK           reduce using rule 287 (expr -> typeof .)
    CONTINUE        reduce using rule 287 (expr -> typeof .)
    THROW           reduce using rule 287 (expr -> typeof .)
    TRY             reduce using rule 287 (expr -> typeof .)
    CATCH           reduce using rule 287 (expr -> typeof .)
    FINALLY         reduce using rule 287 (expr -> typeof .)
    SWITCH          reduce using rule 287 (expr -> typeof .)
    NATIVE          reduce using rule 287 (expr -> typeof .)
    IMPORT          reduce using rule 287 (expr -> typeof .)
    EXPORT          reduce using rule 287 (expr -> typeof .)
    NUMBER          reduce using rule 287 (expr -> typeof .)
    DELETE          reduce using rule 287 (expr -> typeof .)
    STRINGLIT       reduce using rule 287 (expr -> typeof .)
    ID              reduce using rule 287 (expr -> typeof .)
    GET             reduce using rule 287 (expr -> typeof .)
    SET             reduce using rule 287 (expr -> typeof .)
    NOT             reduce using rule 287 (expr -> typeof .)
    BITINV          reduce using rule 287 (expr -> typeof .)
    NEW             reduce using rule 287 (expr -> typeof .)
    TYPEOF          reduce using rule 287 (expr -> typeof .)
    REGEXPR         reduce using rule 287 (expr -> typeof .)
    GLOBAL          reduce using rule 287 (expr -> typeof .)
    VAR             reduce using rule 287 (expr -> typeof .)
    STATIC          reduce using rule 287 (expr -> typeof .)
    LBRACKET        reduce using rule 287 (expr -> typeof .)
    $end            reduce using rule 287 (expr -> typeof .)
    RBRACKET        reduce using rule 287 (expr -> typeof .)
    CASE            reduce using rule 287 (expr -> typeof .)
    DEFAULT         reduce using rule 287 (expr -> typeof .)
    OF              reduce using rule 287 (expr -> typeof .)


state 82

    (351) return -> RETURN . expr
    (352) return -> RETURN .
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    SEMI            reduce using rule 352 (return -> RETURN .)
    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 235
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 83

    (229) new -> NEW . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 236
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 84

    (237) lparen_restrict -> LPAREN .

    NUMBER          reduce using rule 237 (lparen_restrict -> LPAREN .)
    STRINGLIT       reduce using rule 237 (lparen_restrict -> LPAREN .)
    ID              reduce using rule 237 (lparen_restrict -> LPAREN .)
    GET             reduce using rule 237 (lparen_restrict -> LPAREN .)
    SET             reduce using rule 237 (lparen_restrict -> LPAREN .)
    LSBRACKET       reduce using rule 237 (lparen_restrict -> LPAREN .)
    FUNCTION        reduce using rule 237 (lparen_restrict -> LPAREN .)
    LPAREN          reduce using rule 237 (lparen_restrict -> LPAREN .)
    MINUS           reduce using rule 237 (lparen_restrict -> LPAREN .)
    NOT             reduce using rule 237 (lparen_restrict -> LPAREN .)
    BITINV          reduce using rule 237 (lparen_restrict -> LPAREN .)
    NEW             reduce using rule 237 (lparen_restrict -> LPAREN .)
    INC             reduce using rule 237 (lparen_restrict -> LPAREN .)
    DEC             reduce using rule 237 (lparen_restrict -> LPAREN .)
    TYPEOF          reduce using rule 237 (lparen_restrict -> LPAREN .)
    REGEXPR         reduce using rule 237 (lparen_restrict -> LPAREN .)
    TLTHAN          reduce using rule 237 (lparen_restrict -> LPAREN .)
    LBRACKET        reduce using rule 237 (lparen_restrict -> LPAREN .)


state 85

    (14) statement -> typed_class .

    SEMI            reduce using rule 14 (statement -> typed_class .)
    FUNCTION        reduce using rule 14 (statement -> typed_class .)
    CLASS           reduce using rule 14 (statement -> typed_class .)
    TYPED           reduce using rule 14 (statement -> typed_class .)
    IF              reduce using rule 14 (statement -> typed_class .)
    ELSE            reduce using rule 14 (statement -> typed_class .)
    WHILE           reduce using rule 14 (statement -> typed_class .)
    WITH            reduce using rule 14 (statement -> typed_class .)
    DO              reduce using rule 14 (statement -> typed_class .)
    FOR             reduce using rule 14 (statement -> typed_class .)
    RETURN          reduce using rule 14 (statement -> typed_class .)
    YIELD           reduce using rule 14 (statement -> typed_class .)
    BREAK           reduce using rule 14 (statement -> typed_class .)
    CONTINUE        reduce using rule 14 (statement -> typed_class .)
    THROW           reduce using rule 14 (statement -> typed_class .)
    TRY             reduce using rule 14 (statement -> typed_class .)
    CATCH           reduce using rule 14 (statement -> typed_class .)
    FINALLY         reduce using rule 14 (statement -> typed_class .)
    SWITCH          reduce using rule 14 (statement -> typed_class .)
    NATIVE          reduce using rule 14 (statement -> typed_class .)
    IMPORT          reduce using rule 14 (statement -> typed_class .)
    EXPORT          reduce using rule 14 (statement -> typed_class .)
    NUMBER          reduce using rule 14 (statement -> typed_class .)
    DELETE          reduce using rule 14 (statement -> typed_class .)
    STRINGLIT       reduce using rule 14 (statement -> typed_class .)
    ID              reduce using rule 14 (statement -> typed_class .)
    GET             reduce using rule 14 (statement -> typed_class .)
    SET             reduce using rule 14 (statement -> typed_class .)
    LSBRACKET       reduce using rule 14 (statement -> typed_class .)
    LPAREN          reduce using rule 14 (statement -> typed_class .)
    MINUS           reduce using rule 14 (statement -> typed_class .)
    NOT             reduce using rule 14 (statement -> typed_class .)
    BITINV          reduce using rule 14 (statement -> typed_class .)
    NEW             reduce using rule 14 (statement -> typed_class .)
    INC             reduce using rule 14 (statement -> typed_class .)
    DEC             reduce using rule 14 (statement -> typed_class .)
    TYPEOF          reduce using rule 14 (statement -> typed_class .)
    REGEXPR         reduce using rule 14 (statement -> typed_class .)
    GLOBAL          reduce using rule 14 (statement -> typed_class .)
    VAR             reduce using rule 14 (statement -> typed_class .)
    STATIC          reduce using rule 14 (statement -> typed_class .)
    TLTHAN          reduce using rule 14 (statement -> typed_class .)
    LBRACKET        reduce using rule 14 (statement -> typed_class .)
    CASE            reduce using rule 14 (statement -> typed_class .)
    RBRACKET        reduce using rule 14 (statement -> typed_class .)
    DEFAULT         reduce using rule 14 (statement -> typed_class .)
    $end            reduce using rule 14 (statement -> typed_class .)


state 86

    (285) expr -> inc .

    COLON           reduce using rule 285 (expr -> inc .)
    RSHIFT          reduce using rule 285 (expr -> inc .)
    LSHIFT          reduce using rule 285 (expr -> inc .)
    LLSHIFT         reduce using rule 285 (expr -> inc .)
    RRSHIFT         reduce using rule 285 (expr -> inc .)
    COND_DOT        reduce using rule 285 (expr -> inc .)
    DOT             reduce using rule 285 (expr -> inc .)
    LAND            reduce using rule 285 (expr -> inc .)
    LOR             reduce using rule 285 (expr -> inc .)
    BOR             reduce using rule 285 (expr -> inc .)
    INSTANCEOF      reduce using rule 285 (expr -> inc .)
    BXOR            reduce using rule 285 (expr -> inc .)
    BAND            reduce using rule 285 (expr -> inc .)
    EQUAL           reduce using rule 285 (expr -> inc .)
    EQUAL_STRICT    reduce using rule 285 (expr -> inc .)
    NOTEQUAL_STRICT reduce using rule 285 (expr -> inc .)
    GTHAN           reduce using rule 285 (expr -> inc .)
    GTHANEQ         reduce using rule 285 (expr -> inc .)
    LTHAN           reduce using rule 285 (expr -> inc .)
    MOD             reduce using rule 285 (expr -> inc .)
    LTHANEQ         reduce using rule 285 (expr -> inc .)
    NOTEQUAL        reduce using rule 285 (expr -> inc .)
    PLUS            reduce using rule 285 (expr -> inc .)
    MINUS           reduce using rule 285 (expr -> inc .)
    DIVIDE          reduce using rule 285 (expr -> inc .)
    TIMES           reduce using rule 285 (expr -> inc .)
    IN              reduce using rule 285 (expr -> inc .)
    QEST            reduce using rule 285 (expr -> inc .)
    COMMA           reduce using rule 285 (expr -> inc .)
    INC             reduce using rule 285 (expr -> inc .)
    DEC             reduce using rule 285 (expr -> inc .)
    ASSIGNPLUS      reduce using rule 285 (expr -> inc .)
    ASSIGNMINUS     reduce using rule 285 (expr -> inc .)
    ASSIGNDIVIDE    reduce using rule 285 (expr -> inc .)
    ASSIGNTIMES     reduce using rule 285 (expr -> inc .)
    ASSIGNBOR       reduce using rule 285 (expr -> inc .)
    ASSIGNBAND      reduce using rule 285 (expr -> inc .)
    ASSIGNBXOR      reduce using rule 285 (expr -> inc .)
    ASSIGNLSHIFT    reduce using rule 285 (expr -> inc .)
    ASSIGNRSHIFT    reduce using rule 285 (expr -> inc .)
    ASSIGNRRSHIFT   reduce using rule 285 (expr -> inc .)
    ASSIGNLLSHIFT   reduce using rule 285 (expr -> inc .)
    ASSIGN          reduce using rule 285 (expr -> inc .)
    LSBRACKET       reduce using rule 285 (expr -> inc .)
    TLTHAN          reduce using rule 285 (expr -> inc .)
    LPAREN          reduce using rule 285 (expr -> inc .)
    SEMI            reduce using rule 285 (expr -> inc .)
    RPAREN          reduce using rule 285 (expr -> inc .)
    RSBRACKET       reduce using rule 285 (expr -> inc .)
    FUNCTION        reduce using rule 285 (expr -> inc .)
    CLASS           reduce using rule 285 (expr -> inc .)
    TYPED           reduce using rule 285 (expr -> inc .)
    IF              reduce using rule 285 (expr -> inc .)
    ELSE            reduce using rule 285 (expr -> inc .)
    WHILE           reduce using rule 285 (expr -> inc .)
    WITH            reduce using rule 285 (expr -> inc .)
    DO              reduce using rule 285 (expr -> inc .)
    FOR             reduce using rule 285 (expr -> inc .)
    RETURN          reduce using rule 285 (expr -> inc .)
    YIELD           reduce using rule 285 (expr -> inc .)
    BREAK           reduce using rule 285 (expr -> inc .)
    CONTINUE        reduce using rule 285 (expr -> inc .)
    THROW           reduce using rule 285 (expr -> inc .)
    TRY             reduce using rule 285 (expr -> inc .)
    CATCH           reduce using rule 285 (expr -> inc .)
    FINALLY         reduce using rule 285 (expr -> inc .)
    SWITCH          reduce using rule 285 (expr -> inc .)
    NATIVE          reduce using rule 285 (expr -> inc .)
    IMPORT          reduce using rule 285 (expr -> inc .)
    EXPORT          reduce using rule 285 (expr -> inc .)
    NUMBER          reduce using rule 285 (expr -> inc .)
    DELETE          reduce using rule 285 (expr -> inc .)
    STRINGLIT       reduce using rule 285 (expr -> inc .)
    ID              reduce using rule 285 (expr -> inc .)
    GET             reduce using rule 285 (expr -> inc .)
    SET             reduce using rule 285 (expr -> inc .)
    NOT             reduce using rule 285 (expr -> inc .)
    BITINV          reduce using rule 285 (expr -> inc .)
    NEW             reduce using rule 285 (expr -> inc .)
    TYPEOF          reduce using rule 285 (expr -> inc .)
    REGEXPR         reduce using rule 285 (expr -> inc .)
    GLOBAL          reduce using rule 285 (expr -> inc .)
    VAR             reduce using rule 285 (expr -> inc .)
    STATIC          reduce using rule 285 (expr -> inc .)
    LBRACKET        reduce using rule 285 (expr -> inc .)
    $end            reduce using rule 285 (expr -> inc .)
    RBRACKET        reduce using rule 285 (expr -> inc .)
    CASE            reduce using rule 285 (expr -> inc .)
    DEFAULT         reduce using rule 285 (expr -> inc .)
    OF              reduce using rule 285 (expr -> inc .)


state 87

    (0) S' -> statementlist .
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 237
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 238
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    try                            shift and go to state 42
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86

state 88

    (231) inc -> INC . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 239
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 89

    (326) try -> TRY . statement_nonctrl
    (327) try -> TRY . LBRACKET statementlist RBRACKET
    (328) try -> TRY . LBRACKET RBRACKET
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 240
    SEMI            shift and go to state 44
    NUMBER          shift and go to state 29
    FUNCTION        shift and go to state 150
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    FOR             shift and go to state 68
    DO              shift and go to state 41
    WHILE           shift and go to state 73
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21

    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 2
    delete                         shift and go to state 51
    yield                          shift and go to state 152
    for                            shift and go to state 141
    else                           shift and go to state 157
    re_lit                         shift and go to state 8
    return                         shift and go to state 142
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 241
    while                          shift and go to state 143
    type_modifiers                 shift and go to state 53
    not                            shift and go to state 15
    dec                            shift and go to state 66
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 144
    new                            shift and go to state 48
    catch                          shift and go to state 155
    funcref                        shift and go to state 24
    throw                          shift and go to state 145
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    break                          shift and go to state 156
    finally                        shift and go to state 146
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 140
    bitinv                         shift and go to state 32
    continue                       shift and go to state 149
    strlit                         shift and go to state 79
    var_decl                       shift and go to state 37
    typeof                         shift and go to state 81
    try                            shift and go to state 154
    inc                            shift and go to state 86

state 90

    (52) statement_nonctrl -> expr SEMI .

    SEMI            reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    FUNCTION        reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    CLASS           reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    TYPED           reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    IF              reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    ELSE            reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    WHILE           reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    WITH            reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    DO              reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    FOR             reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    RETURN          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    YIELD           reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    BREAK           reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    CONTINUE        reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    THROW           reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    TRY             reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    CATCH           reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    FINALLY         reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    SWITCH          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    NATIVE          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    IMPORT          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    EXPORT          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    NUMBER          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    DELETE          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    STRINGLIT       reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    ID              reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    GET             reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    SET             reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    LSBRACKET       reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    LPAREN          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    MINUS           reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    NOT             reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    BITINV          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    NEW             reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    INC             reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    DEC             reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    TYPEOF          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    REGEXPR         reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    GLOBAL          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    VAR             reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    STATIC          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    TLTHAN          reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    LBRACKET        reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    $end            reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    RBRACKET        reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    CASE            reduce using rule 52 (statement_nonctrl -> expr SEMI .)
    DEFAULT         reduce using rule 52 (statement_nonctrl -> expr SEMI .)


state 91

    (262) expr -> expr BAND . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 242
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 92

    (249) expr -> expr cmplx_assign . expr
    (250) expr -> expr cmplx_assign . expr COLON var_type SEMI
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 243
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 93

    (257) expr -> expr LAND . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 244
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 94

    (272) expr -> expr PLUS . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 245
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 95

    (131) cmplx_assign -> ASSIGNBAND .

    NUMBER          reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    STRINGLIT       reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    ID              reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    GET             reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    SET             reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    LSBRACKET       reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    FUNCTION        reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    LPAREN          reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    MINUS           reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    NOT             reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    BITINV          reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    NEW             reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    INC             reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    DEC             reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    TYPEOF          reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    REGEXPR         reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    TLTHAN          reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)
    LBRACKET        reduce using rule 131 (cmplx_assign -> ASSIGNBAND .)


state 96

    (135) cmplx_assign -> ASSIGNRRSHIFT .

    NUMBER          reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    STRINGLIT       reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    ID              reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    GET             reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    SET             reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    LSBRACKET       reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    FUNCTION        reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    LPAREN          reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    MINUS           reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    NOT             reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    BITINV          reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    NEW             reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    INC             reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    DEC             reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    TYPEOF          reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    REGEXPR         reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    TLTHAN          reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)
    LBRACKET        reduce using rule 135 (cmplx_assign -> ASSIGNRRSHIFT .)


state 97

    (252) expr -> expr LSHIFT . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 246
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 98

    (260) expr -> expr INSTANCEOF . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 247
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 99

    (263) expr -> expr EQUAL . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 248
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 100

    (239) lsbracket_restrict -> LSBRACKET .

    NUMBER          reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    STRINGLIT       reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    ID              reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    GET             reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    SET             reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    LSBRACKET       reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    FUNCTION        reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    LPAREN          reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    MINUS           reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    NOT             reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    BITINV          reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    NEW             reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    INC             reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    DEC             reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    TYPEOF          reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    REGEXPR         reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    TLTHAN          reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)
    LBRACKET        reduce using rule 239 (lsbracket_restrict -> LSBRACKET .)


state 101

    (251) expr -> expr RSHIFT . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 249
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 102

    (258) expr -> expr LOR . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 250
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 103

    (130) cmplx_assign -> ASSIGNBOR .

    NUMBER          reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    STRINGLIT       reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    ID              reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    GET             reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    SET             reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    LSBRACKET       reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    FUNCTION        reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    LPAREN          reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    MINUS           reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    NOT             reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    BITINV          reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    NEW             reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    INC             reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    DEC             reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    TYPEOF          reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    REGEXPR         reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    TLTHAN          reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)
    LBRACKET        reduce using rule 130 (cmplx_assign -> ASSIGNBOR .)


state 104

    (275) expr -> expr TIMES . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 251
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 105

    (279) expr -> expr lsbracket_restrict . expr rsbracket_restrict
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 252
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 106

    (270) expr -> expr LTHANEQ . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 253
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 107

    (289) expr -> expr COMMA . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 254
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 108

    (195) func_call -> template_ref_opt . LPAREN exprlist RPAREN
    (196) func_call -> template_ref_opt . LPAREN RPAREN

    LPAREN          shift and go to state 255


state 109

    (264) expr -> expr EQUAL_STRICT . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 256
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 110

    (253) expr -> expr LLSHIFT . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 257
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 111

    (193) template_ref_opt -> template_ref .

    LPAREN          reduce using rule 193 (template_ref_opt -> template_ref .)


state 112

    (132) cmplx_assign -> ASSIGNBXOR .

    NUMBER          reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    STRINGLIT       reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    ID              reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    GET             reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    SET             reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    LSBRACKET       reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    FUNCTION        reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    LPAREN          reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    MINUS           reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    NOT             reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    BITINV          reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    NEW             reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    INC             reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    DEC             reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    TYPEOF          reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    REGEXPR         reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    TLTHAN          reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)
    LBRACKET        reduce using rule 132 (cmplx_assign -> ASSIGNBXOR .)


state 113

    (269) expr -> expr MOD . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 258
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 114

    (128) cmplx_assign -> ASSIGNDIVIDE .

    NUMBER          reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    STRINGLIT       reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    ID              reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    GET             reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    SET             reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    LSBRACKET       reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    FUNCTION        reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    LPAREN          reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    MINUS           reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    NOT             reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    BITINV          reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    NEW             reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    INC             reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    DEC             reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    TYPEOF          reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    REGEXPR         reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    TLTHAN          reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)
    LBRACKET        reduce using rule 128 (cmplx_assign -> ASSIGNDIVIDE .)


state 115

    (255) expr -> expr COND_DOT . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 259
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 116

    (137) cmplx_assign -> ASSIGN .

    NUMBER          reduce using rule 137 (cmplx_assign -> ASSIGN .)
    STRINGLIT       reduce using rule 137 (cmplx_assign -> ASSIGN .)
    ID              reduce using rule 137 (cmplx_assign -> ASSIGN .)
    GET             reduce using rule 137 (cmplx_assign -> ASSIGN .)
    SET             reduce using rule 137 (cmplx_assign -> ASSIGN .)
    LSBRACKET       reduce using rule 137 (cmplx_assign -> ASSIGN .)
    FUNCTION        reduce using rule 137 (cmplx_assign -> ASSIGN .)
    LPAREN          reduce using rule 137 (cmplx_assign -> ASSIGN .)
    MINUS           reduce using rule 137 (cmplx_assign -> ASSIGN .)
    NOT             reduce using rule 137 (cmplx_assign -> ASSIGN .)
    BITINV          reduce using rule 137 (cmplx_assign -> ASSIGN .)
    NEW             reduce using rule 137 (cmplx_assign -> ASSIGN .)
    INC             reduce using rule 137 (cmplx_assign -> ASSIGN .)
    DEC             reduce using rule 137 (cmplx_assign -> ASSIGN .)
    TYPEOF          reduce using rule 137 (cmplx_assign -> ASSIGN .)
    REGEXPR         reduce using rule 137 (cmplx_assign -> ASSIGN .)
    TLTHAN          reduce using rule 137 (cmplx_assign -> ASSIGN .)
    LBRACKET        reduce using rule 137 (cmplx_assign -> ASSIGN .)


state 117

    (271) expr -> expr NOTEQUAL . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 260
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 118

    (273) expr -> expr MINUS . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 261
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 119

    (256) expr -> expr DOT . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 262
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 120

    (266) expr -> expr GTHAN . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 263
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 121

    (265) expr -> expr NOTEQUAL_STRICT . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 264
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 122

    (276) expr -> expr IN . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 265
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 123

    (126) cmplx_assign -> ASSIGNPLUS .

    NUMBER          reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    STRINGLIT       reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    ID              reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    GET             reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    SET             reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    LSBRACKET       reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    FUNCTION        reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    LPAREN          reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    MINUS           reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    NOT             reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    BITINV          reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    NEW             reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    INC             reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    DEC             reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    TYPEOF          reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    REGEXPR         reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    TLTHAN          reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)
    LBRACKET        reduce using rule 126 (cmplx_assign -> ASSIGNPLUS .)


state 124

    (268) expr -> expr LTHAN . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 266
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 125

    (127) cmplx_assign -> ASSIGNMINUS .

    NUMBER          reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    STRINGLIT       reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    ID              reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    GET             reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    SET             reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    LSBRACKET       reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    FUNCTION        reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    LPAREN          reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    MINUS           reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    NOT             reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    BITINV          reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    NEW             reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    INC             reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    DEC             reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    TYPEOF          reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    REGEXPR         reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    TLTHAN          reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)
    LBRACKET        reduce using rule 127 (cmplx_assign -> ASSIGNMINUS .)


state 126

    (134) cmplx_assign -> ASSIGNRSHIFT .

    NUMBER          reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    STRINGLIT       reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    ID              reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    GET             reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    SET             reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    LSBRACKET       reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    FUNCTION        reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    LPAREN          reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    MINUS           reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    NOT             reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    BITINV          reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    NEW             reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    INC             reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    DEC             reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    TYPEOF          reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    REGEXPR         reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    TLTHAN          reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)
    LBRACKET        reduce using rule 134 (cmplx_assign -> ASSIGNRSHIFT .)


state 127

    (133) cmplx_assign -> ASSIGNLSHIFT .

    NUMBER          reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    STRINGLIT       reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    ID              reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    GET             reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    SET             reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    LSBRACKET       reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    FUNCTION        reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    LPAREN          reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    MINUS           reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    NOT             reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    BITINV          reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    NEW             reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    INC             reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    DEC             reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    TYPEOF          reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    REGEXPR         reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    TLTHAN          reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)
    LBRACKET        reduce using rule 133 (cmplx_assign -> ASSIGNLSHIFT .)


state 128

    (230) inc -> expr INC .

    RSHIFT          reduce using rule 230 (inc -> expr INC .)
    LSHIFT          reduce using rule 230 (inc -> expr INC .)
    LLSHIFT         reduce using rule 230 (inc -> expr INC .)
    RRSHIFT         reduce using rule 230 (inc -> expr INC .)
    COND_DOT        reduce using rule 230 (inc -> expr INC .)
    DOT             reduce using rule 230 (inc -> expr INC .)
    LAND            reduce using rule 230 (inc -> expr INC .)
    LOR             reduce using rule 230 (inc -> expr INC .)
    BOR             reduce using rule 230 (inc -> expr INC .)
    INSTANCEOF      reduce using rule 230 (inc -> expr INC .)
    BXOR            reduce using rule 230 (inc -> expr INC .)
    BAND            reduce using rule 230 (inc -> expr INC .)
    EQUAL           reduce using rule 230 (inc -> expr INC .)
    EQUAL_STRICT    reduce using rule 230 (inc -> expr INC .)
    NOTEQUAL_STRICT reduce using rule 230 (inc -> expr INC .)
    GTHAN           reduce using rule 230 (inc -> expr INC .)
    GTHANEQ         reduce using rule 230 (inc -> expr INC .)
    LTHAN           reduce using rule 230 (inc -> expr INC .)
    MOD             reduce using rule 230 (inc -> expr INC .)
    LTHANEQ         reduce using rule 230 (inc -> expr INC .)
    NOTEQUAL        reduce using rule 230 (inc -> expr INC .)
    PLUS            reduce using rule 230 (inc -> expr INC .)
    MINUS           reduce using rule 230 (inc -> expr INC .)
    DIVIDE          reduce using rule 230 (inc -> expr INC .)
    TIMES           reduce using rule 230 (inc -> expr INC .)
    IN              reduce using rule 230 (inc -> expr INC .)
    QEST            reduce using rule 230 (inc -> expr INC .)
    COMMA           reduce using rule 230 (inc -> expr INC .)
    INC             reduce using rule 230 (inc -> expr INC .)
    DEC             reduce using rule 230 (inc -> expr INC .)
    ASSIGNPLUS      reduce using rule 230 (inc -> expr INC .)
    ASSIGNMINUS     reduce using rule 230 (inc -> expr INC .)
    ASSIGNDIVIDE    reduce using rule 230 (inc -> expr INC .)
    ASSIGNTIMES     reduce using rule 230 (inc -> expr INC .)
    ASSIGNBOR       reduce using rule 230 (inc -> expr INC .)
    ASSIGNBAND      reduce using rule 230 (inc -> expr INC .)
    ASSIGNBXOR      reduce using rule 230 (inc -> expr INC .)
    ASSIGNLSHIFT    reduce using rule 230 (inc -> expr INC .)
    ASSIGNRSHIFT    reduce using rule 230 (inc -> expr INC .)
    ASSIGNRRSHIFT   reduce using rule 230 (inc -> expr INC .)
    ASSIGNLLSHIFT   reduce using rule 230 (inc -> expr INC .)
    ASSIGN          reduce using rule 230 (inc -> expr INC .)
    LSBRACKET       reduce using rule 230 (inc -> expr INC .)
    TLTHAN          reduce using rule 230 (inc -> expr INC .)
    LPAREN          reduce using rule 230 (inc -> expr INC .)
    SEMI            reduce using rule 230 (inc -> expr INC .)
    RPAREN          reduce using rule 230 (inc -> expr INC .)
    RSBRACKET       reduce using rule 230 (inc -> expr INC .)
    COLON           reduce using rule 230 (inc -> expr INC .)
    FUNCTION        reduce using rule 230 (inc -> expr INC .)
    CLASS           reduce using rule 230 (inc -> expr INC .)
    TYPED           reduce using rule 230 (inc -> expr INC .)
    IF              reduce using rule 230 (inc -> expr INC .)
    ELSE            reduce using rule 230 (inc -> expr INC .)
    WHILE           reduce using rule 230 (inc -> expr INC .)
    WITH            reduce using rule 230 (inc -> expr INC .)
    DO              reduce using rule 230 (inc -> expr INC .)
    FOR             reduce using rule 230 (inc -> expr INC .)
    RETURN          reduce using rule 230 (inc -> expr INC .)
    YIELD           reduce using rule 230 (inc -> expr INC .)
    BREAK           reduce using rule 230 (inc -> expr INC .)
    CONTINUE        reduce using rule 230 (inc -> expr INC .)
    THROW           reduce using rule 230 (inc -> expr INC .)
    TRY             reduce using rule 230 (inc -> expr INC .)
    CATCH           reduce using rule 230 (inc -> expr INC .)
    FINALLY         reduce using rule 230 (inc -> expr INC .)
    SWITCH          reduce using rule 230 (inc -> expr INC .)
    NATIVE          reduce using rule 230 (inc -> expr INC .)
    IMPORT          reduce using rule 230 (inc -> expr INC .)
    EXPORT          reduce using rule 230 (inc -> expr INC .)
    NUMBER          reduce using rule 230 (inc -> expr INC .)
    DELETE          reduce using rule 230 (inc -> expr INC .)
    STRINGLIT       reduce using rule 230 (inc -> expr INC .)
    ID              reduce using rule 230 (inc -> expr INC .)
    GET             reduce using rule 230 (inc -> expr INC .)
    SET             reduce using rule 230 (inc -> expr INC .)
    NOT             reduce using rule 230 (inc -> expr INC .)
    BITINV          reduce using rule 230 (inc -> expr INC .)
    NEW             reduce using rule 230 (inc -> expr INC .)
    TYPEOF          reduce using rule 230 (inc -> expr INC .)
    REGEXPR         reduce using rule 230 (inc -> expr INC .)
    GLOBAL          reduce using rule 230 (inc -> expr INC .)
    VAR             reduce using rule 230 (inc -> expr INC .)
    STATIC          reduce using rule 230 (inc -> expr INC .)
    LBRACKET        reduce using rule 230 (inc -> expr INC .)
    $end            reduce using rule 230 (inc -> expr INC .)
    RBRACKET        reduce using rule 230 (inc -> expr INC .)
    CASE            reduce using rule 230 (inc -> expr INC .)
    DEFAULT         reduce using rule 230 (inc -> expr INC .)
    OF              reduce using rule 230 (inc -> expr INC .)


state 129

    (261) expr -> expr BXOR . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 267
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 130

    (267) expr -> expr GTHANEQ . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 268
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 131

    (274) expr -> expr DIVIDE . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 269
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 132

    (278) expr -> expr func_call .

    COLON           reduce using rule 278 (expr -> expr func_call .)
    RSHIFT          reduce using rule 278 (expr -> expr func_call .)
    LSHIFT          reduce using rule 278 (expr -> expr func_call .)
    LLSHIFT         reduce using rule 278 (expr -> expr func_call .)
    RRSHIFT         reduce using rule 278 (expr -> expr func_call .)
    COND_DOT        reduce using rule 278 (expr -> expr func_call .)
    DOT             reduce using rule 278 (expr -> expr func_call .)
    LAND            reduce using rule 278 (expr -> expr func_call .)
    LOR             reduce using rule 278 (expr -> expr func_call .)
    BOR             reduce using rule 278 (expr -> expr func_call .)
    INSTANCEOF      reduce using rule 278 (expr -> expr func_call .)
    BXOR            reduce using rule 278 (expr -> expr func_call .)
    BAND            reduce using rule 278 (expr -> expr func_call .)
    EQUAL           reduce using rule 278 (expr -> expr func_call .)
    EQUAL_STRICT    reduce using rule 278 (expr -> expr func_call .)
    NOTEQUAL_STRICT reduce using rule 278 (expr -> expr func_call .)
    GTHAN           reduce using rule 278 (expr -> expr func_call .)
    GTHANEQ         reduce using rule 278 (expr -> expr func_call .)
    LTHAN           reduce using rule 278 (expr -> expr func_call .)
    MOD             reduce using rule 278 (expr -> expr func_call .)
    LTHANEQ         reduce using rule 278 (expr -> expr func_call .)
    NOTEQUAL        reduce using rule 278 (expr -> expr func_call .)
    PLUS            reduce using rule 278 (expr -> expr func_call .)
    MINUS           reduce using rule 278 (expr -> expr func_call .)
    DIVIDE          reduce using rule 278 (expr -> expr func_call .)
    TIMES           reduce using rule 278 (expr -> expr func_call .)
    IN              reduce using rule 278 (expr -> expr func_call .)
    QEST            reduce using rule 278 (expr -> expr func_call .)
    COMMA           reduce using rule 278 (expr -> expr func_call .)
    INC             reduce using rule 278 (expr -> expr func_call .)
    DEC             reduce using rule 278 (expr -> expr func_call .)
    ASSIGNPLUS      reduce using rule 278 (expr -> expr func_call .)
    ASSIGNMINUS     reduce using rule 278 (expr -> expr func_call .)
    ASSIGNDIVIDE    reduce using rule 278 (expr -> expr func_call .)
    ASSIGNTIMES     reduce using rule 278 (expr -> expr func_call .)
    ASSIGNBOR       reduce using rule 278 (expr -> expr func_call .)
    ASSIGNBAND      reduce using rule 278 (expr -> expr func_call .)
    ASSIGNBXOR      reduce using rule 278 (expr -> expr func_call .)
    ASSIGNLSHIFT    reduce using rule 278 (expr -> expr func_call .)
    ASSIGNRSHIFT    reduce using rule 278 (expr -> expr func_call .)
    ASSIGNRRSHIFT   reduce using rule 278 (expr -> expr func_call .)
    ASSIGNLLSHIFT   reduce using rule 278 (expr -> expr func_call .)
    ASSIGN          reduce using rule 278 (expr -> expr func_call .)
    LSBRACKET       reduce using rule 278 (expr -> expr func_call .)
    TLTHAN          reduce using rule 278 (expr -> expr func_call .)
    LPAREN          reduce using rule 278 (expr -> expr func_call .)
    SEMI            reduce using rule 278 (expr -> expr func_call .)
    RPAREN          reduce using rule 278 (expr -> expr func_call .)
    RSBRACKET       reduce using rule 278 (expr -> expr func_call .)
    FUNCTION        reduce using rule 278 (expr -> expr func_call .)
    CLASS           reduce using rule 278 (expr -> expr func_call .)
    TYPED           reduce using rule 278 (expr -> expr func_call .)
    IF              reduce using rule 278 (expr -> expr func_call .)
    ELSE            reduce using rule 278 (expr -> expr func_call .)
    WHILE           reduce using rule 278 (expr -> expr func_call .)
    WITH            reduce using rule 278 (expr -> expr func_call .)
    DO              reduce using rule 278 (expr -> expr func_call .)
    FOR             reduce using rule 278 (expr -> expr func_call .)
    RETURN          reduce using rule 278 (expr -> expr func_call .)
    YIELD           reduce using rule 278 (expr -> expr func_call .)
    BREAK           reduce using rule 278 (expr -> expr func_call .)
    CONTINUE        reduce using rule 278 (expr -> expr func_call .)
    THROW           reduce using rule 278 (expr -> expr func_call .)
    TRY             reduce using rule 278 (expr -> expr func_call .)
    CATCH           reduce using rule 278 (expr -> expr func_call .)
    FINALLY         reduce using rule 278 (expr -> expr func_call .)
    SWITCH          reduce using rule 278 (expr -> expr func_call .)
    NATIVE          reduce using rule 278 (expr -> expr func_call .)
    IMPORT          reduce using rule 278 (expr -> expr func_call .)
    EXPORT          reduce using rule 278 (expr -> expr func_call .)
    NUMBER          reduce using rule 278 (expr -> expr func_call .)
    DELETE          reduce using rule 278 (expr -> expr func_call .)
    STRINGLIT       reduce using rule 278 (expr -> expr func_call .)
    ID              reduce using rule 278 (expr -> expr func_call .)
    GET             reduce using rule 278 (expr -> expr func_call .)
    SET             reduce using rule 278 (expr -> expr func_call .)
    NOT             reduce using rule 278 (expr -> expr func_call .)
    BITINV          reduce using rule 278 (expr -> expr func_call .)
    NEW             reduce using rule 278 (expr -> expr func_call .)
    TYPEOF          reduce using rule 278 (expr -> expr func_call .)
    REGEXPR         reduce using rule 278 (expr -> expr func_call .)
    GLOBAL          reduce using rule 278 (expr -> expr func_call .)
    VAR             reduce using rule 278 (expr -> expr func_call .)
    STATIC          reduce using rule 278 (expr -> expr func_call .)
    LBRACKET        reduce using rule 278 (expr -> expr func_call .)
    $end            reduce using rule 278 (expr -> expr func_call .)
    RBRACKET        reduce using rule 278 (expr -> expr func_call .)
    CASE            reduce using rule 278 (expr -> expr func_call .)
    DEFAULT         reduce using rule 278 (expr -> expr func_call .)
    OF              reduce using rule 278 (expr -> expr func_call .)


state 133

    (280) expr -> expr QEST . expr COLON expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 270
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 134

    (136) cmplx_assign -> ASSIGNLLSHIFT .

    NUMBER          reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    STRINGLIT       reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    ID              reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    GET             reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    SET             reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    LSBRACKET       reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    FUNCTION        reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    LPAREN          reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    MINUS           reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    NOT             reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    BITINV          reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    NEW             reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    INC             reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    DEC             reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    TYPEOF          reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    REGEXPR         reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    TLTHAN          reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)
    LBRACKET        reduce using rule 136 (cmplx_assign -> ASSIGNLLSHIFT .)


state 135

    (254) expr -> expr RRSHIFT . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 271
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 136

    (259) expr -> expr BOR . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 272
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 137

    (232) dec -> expr DEC .

    SEMI            reduce using rule 232 (dec -> expr DEC .)
    RSHIFT          reduce using rule 232 (dec -> expr DEC .)
    LSHIFT          reduce using rule 232 (dec -> expr DEC .)
    LLSHIFT         reduce using rule 232 (dec -> expr DEC .)
    RRSHIFT         reduce using rule 232 (dec -> expr DEC .)
    COND_DOT        reduce using rule 232 (dec -> expr DEC .)
    DOT             reduce using rule 232 (dec -> expr DEC .)
    LAND            reduce using rule 232 (dec -> expr DEC .)
    LOR             reduce using rule 232 (dec -> expr DEC .)
    BOR             reduce using rule 232 (dec -> expr DEC .)
    INSTANCEOF      reduce using rule 232 (dec -> expr DEC .)
    BXOR            reduce using rule 232 (dec -> expr DEC .)
    BAND            reduce using rule 232 (dec -> expr DEC .)
    EQUAL           reduce using rule 232 (dec -> expr DEC .)
    EQUAL_STRICT    reduce using rule 232 (dec -> expr DEC .)
    NOTEQUAL_STRICT reduce using rule 232 (dec -> expr DEC .)
    GTHAN           reduce using rule 232 (dec -> expr DEC .)
    GTHANEQ         reduce using rule 232 (dec -> expr DEC .)
    LTHAN           reduce using rule 232 (dec -> expr DEC .)
    MOD             reduce using rule 232 (dec -> expr DEC .)
    LTHANEQ         reduce using rule 232 (dec -> expr DEC .)
    NOTEQUAL        reduce using rule 232 (dec -> expr DEC .)
    PLUS            reduce using rule 232 (dec -> expr DEC .)
    MINUS           reduce using rule 232 (dec -> expr DEC .)
    DIVIDE          reduce using rule 232 (dec -> expr DEC .)
    TIMES           reduce using rule 232 (dec -> expr DEC .)
    IN              reduce using rule 232 (dec -> expr DEC .)
    QEST            reduce using rule 232 (dec -> expr DEC .)
    COMMA           reduce using rule 232 (dec -> expr DEC .)
    INC             reduce using rule 232 (dec -> expr DEC .)
    DEC             reduce using rule 232 (dec -> expr DEC .)
    ASSIGNPLUS      reduce using rule 232 (dec -> expr DEC .)
    ASSIGNMINUS     reduce using rule 232 (dec -> expr DEC .)
    ASSIGNDIVIDE    reduce using rule 232 (dec -> expr DEC .)
    ASSIGNTIMES     reduce using rule 232 (dec -> expr DEC .)
    ASSIGNBOR       reduce using rule 232 (dec -> expr DEC .)
    ASSIGNBAND      reduce using rule 232 (dec -> expr DEC .)
    ASSIGNBXOR      reduce using rule 232 (dec -> expr DEC .)
    ASSIGNLSHIFT    reduce using rule 232 (dec -> expr DEC .)
    ASSIGNRSHIFT    reduce using rule 232 (dec -> expr DEC .)
    ASSIGNRRSHIFT   reduce using rule 232 (dec -> expr DEC .)
    ASSIGNLLSHIFT   reduce using rule 232 (dec -> expr DEC .)
    ASSIGN          reduce using rule 232 (dec -> expr DEC .)
    LSBRACKET       reduce using rule 232 (dec -> expr DEC .)
    TLTHAN          reduce using rule 232 (dec -> expr DEC .)
    LPAREN          reduce using rule 232 (dec -> expr DEC .)
    RSBRACKET       reduce using rule 232 (dec -> expr DEC .)
    RPAREN          reduce using rule 232 (dec -> expr DEC .)
    COLON           reduce using rule 232 (dec -> expr DEC .)
    FUNCTION        reduce using rule 232 (dec -> expr DEC .)
    CLASS           reduce using rule 232 (dec -> expr DEC .)
    TYPED           reduce using rule 232 (dec -> expr DEC .)
    IF              reduce using rule 232 (dec -> expr DEC .)
    ELSE            reduce using rule 232 (dec -> expr DEC .)
    WHILE           reduce using rule 232 (dec -> expr DEC .)
    WITH            reduce using rule 232 (dec -> expr DEC .)
    DO              reduce using rule 232 (dec -> expr DEC .)
    FOR             reduce using rule 232 (dec -> expr DEC .)
    RETURN          reduce using rule 232 (dec -> expr DEC .)
    YIELD           reduce using rule 232 (dec -> expr DEC .)
    BREAK           reduce using rule 232 (dec -> expr DEC .)
    CONTINUE        reduce using rule 232 (dec -> expr DEC .)
    THROW           reduce using rule 232 (dec -> expr DEC .)
    TRY             reduce using rule 232 (dec -> expr DEC .)
    CATCH           reduce using rule 232 (dec -> expr DEC .)
    FINALLY         reduce using rule 232 (dec -> expr DEC .)
    SWITCH          reduce using rule 232 (dec -> expr DEC .)
    NATIVE          reduce using rule 232 (dec -> expr DEC .)
    IMPORT          reduce using rule 232 (dec -> expr DEC .)
    EXPORT          reduce using rule 232 (dec -> expr DEC .)
    NUMBER          reduce using rule 232 (dec -> expr DEC .)
    DELETE          reduce using rule 232 (dec -> expr DEC .)
    STRINGLIT       reduce using rule 232 (dec -> expr DEC .)
    ID              reduce using rule 232 (dec -> expr DEC .)
    GET             reduce using rule 232 (dec -> expr DEC .)
    SET             reduce using rule 232 (dec -> expr DEC .)
    NOT             reduce using rule 232 (dec -> expr DEC .)
    BITINV          reduce using rule 232 (dec -> expr DEC .)
    NEW             reduce using rule 232 (dec -> expr DEC .)
    TYPEOF          reduce using rule 232 (dec -> expr DEC .)
    REGEXPR         reduce using rule 232 (dec -> expr DEC .)
    GLOBAL          reduce using rule 232 (dec -> expr DEC .)
    VAR             reduce using rule 232 (dec -> expr DEC .)
    STATIC          reduce using rule 232 (dec -> expr DEC .)
    LBRACKET        reduce using rule 232 (dec -> expr DEC .)
    $end            reduce using rule 232 (dec -> expr DEC .)
    RBRACKET        reduce using rule 232 (dec -> expr DEC .)
    CASE            reduce using rule 232 (dec -> expr DEC .)
    DEFAULT         reduce using rule 232 (dec -> expr DEC .)
    OF              reduce using rule 232 (dec -> expr DEC .)


state 138

    (129) cmplx_assign -> ASSIGNTIMES .

    NUMBER          reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    STRINGLIT       reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    ID              reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    GET             reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    SET             reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    LSBRACKET       reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    FUNCTION        reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    LPAREN          reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    MINUS           reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    NOT             reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    BITINV          reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    NEW             reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    INC             reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    DEC             reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    TYPEOF          reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    REGEXPR         reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    TLTHAN          reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)
    LBRACKET        reduce using rule 129 (cmplx_assign -> ASSIGNTIMES .)


state 139

    (244) expr -> id template_ref .

    COLON           reduce using rule 244 (expr -> id template_ref .)
    RSHIFT          reduce using rule 244 (expr -> id template_ref .)
    LSHIFT          reduce using rule 244 (expr -> id template_ref .)
    LLSHIFT         reduce using rule 244 (expr -> id template_ref .)
    RRSHIFT         reduce using rule 244 (expr -> id template_ref .)
    COND_DOT        reduce using rule 244 (expr -> id template_ref .)
    DOT             reduce using rule 244 (expr -> id template_ref .)
    LAND            reduce using rule 244 (expr -> id template_ref .)
    LOR             reduce using rule 244 (expr -> id template_ref .)
    BOR             reduce using rule 244 (expr -> id template_ref .)
    INSTANCEOF      reduce using rule 244 (expr -> id template_ref .)
    BXOR            reduce using rule 244 (expr -> id template_ref .)
    BAND            reduce using rule 244 (expr -> id template_ref .)
    EQUAL           reduce using rule 244 (expr -> id template_ref .)
    EQUAL_STRICT    reduce using rule 244 (expr -> id template_ref .)
    NOTEQUAL_STRICT reduce using rule 244 (expr -> id template_ref .)
    GTHAN           reduce using rule 244 (expr -> id template_ref .)
    GTHANEQ         reduce using rule 244 (expr -> id template_ref .)
    LTHAN           reduce using rule 244 (expr -> id template_ref .)
    MOD             reduce using rule 244 (expr -> id template_ref .)
    LTHANEQ         reduce using rule 244 (expr -> id template_ref .)
    NOTEQUAL        reduce using rule 244 (expr -> id template_ref .)
    PLUS            reduce using rule 244 (expr -> id template_ref .)
    MINUS           reduce using rule 244 (expr -> id template_ref .)
    DIVIDE          reduce using rule 244 (expr -> id template_ref .)
    TIMES           reduce using rule 244 (expr -> id template_ref .)
    IN              reduce using rule 244 (expr -> id template_ref .)
    QEST            reduce using rule 244 (expr -> id template_ref .)
    COMMA           reduce using rule 244 (expr -> id template_ref .)
    INC             reduce using rule 244 (expr -> id template_ref .)
    DEC             reduce using rule 244 (expr -> id template_ref .)
    ASSIGNPLUS      reduce using rule 244 (expr -> id template_ref .)
    ASSIGNMINUS     reduce using rule 244 (expr -> id template_ref .)
    ASSIGNDIVIDE    reduce using rule 244 (expr -> id template_ref .)
    ASSIGNTIMES     reduce using rule 244 (expr -> id template_ref .)
    ASSIGNBOR       reduce using rule 244 (expr -> id template_ref .)
    ASSIGNBAND      reduce using rule 244 (expr -> id template_ref .)
    ASSIGNBXOR      reduce using rule 244 (expr -> id template_ref .)
    ASSIGNLSHIFT    reduce using rule 244 (expr -> id template_ref .)
    ASSIGNRSHIFT    reduce using rule 244 (expr -> id template_ref .)
    ASSIGNRRSHIFT   reduce using rule 244 (expr -> id template_ref .)
    ASSIGNLLSHIFT   reduce using rule 244 (expr -> id template_ref .)
    ASSIGN          reduce using rule 244 (expr -> id template_ref .)
    LSBRACKET       reduce using rule 244 (expr -> id template_ref .)
    TLTHAN          reduce using rule 244 (expr -> id template_ref .)
    LPAREN          reduce using rule 244 (expr -> id template_ref .)
    SEMI            reduce using rule 244 (expr -> id template_ref .)
    RPAREN          reduce using rule 244 (expr -> id template_ref .)
    RSBRACKET       reduce using rule 244 (expr -> id template_ref .)
    FUNCTION        reduce using rule 244 (expr -> id template_ref .)
    CLASS           reduce using rule 244 (expr -> id template_ref .)
    TYPED           reduce using rule 244 (expr -> id template_ref .)
    IF              reduce using rule 244 (expr -> id template_ref .)
    ELSE            reduce using rule 244 (expr -> id template_ref .)
    WHILE           reduce using rule 244 (expr -> id template_ref .)
    WITH            reduce using rule 244 (expr -> id template_ref .)
    DO              reduce using rule 244 (expr -> id template_ref .)
    FOR             reduce using rule 244 (expr -> id template_ref .)
    RETURN          reduce using rule 244 (expr -> id template_ref .)
    YIELD           reduce using rule 244 (expr -> id template_ref .)
    BREAK           reduce using rule 244 (expr -> id template_ref .)
    CONTINUE        reduce using rule 244 (expr -> id template_ref .)
    THROW           reduce using rule 244 (expr -> id template_ref .)
    TRY             reduce using rule 244 (expr -> id template_ref .)
    CATCH           reduce using rule 244 (expr -> id template_ref .)
    FINALLY         reduce using rule 244 (expr -> id template_ref .)
    SWITCH          reduce using rule 244 (expr -> id template_ref .)
    NATIVE          reduce using rule 244 (expr -> id template_ref .)
    IMPORT          reduce using rule 244 (expr -> id template_ref .)
    EXPORT          reduce using rule 244 (expr -> id template_ref .)
    NUMBER          reduce using rule 244 (expr -> id template_ref .)
    DELETE          reduce using rule 244 (expr -> id template_ref .)
    STRINGLIT       reduce using rule 244 (expr -> id template_ref .)
    ID              reduce using rule 244 (expr -> id template_ref .)
    GET             reduce using rule 244 (expr -> id template_ref .)
    SET             reduce using rule 244 (expr -> id template_ref .)
    NOT             reduce using rule 244 (expr -> id template_ref .)
    BITINV          reduce using rule 244 (expr -> id template_ref .)
    NEW             reduce using rule 244 (expr -> id template_ref .)
    TYPEOF          reduce using rule 244 (expr -> id template_ref .)
    REGEXPR         reduce using rule 244 (expr -> id template_ref .)
    GLOBAL          reduce using rule 244 (expr -> id template_ref .)
    VAR             reduce using rule 244 (expr -> id template_ref .)
    STATIC          reduce using rule 244 (expr -> id template_ref .)
    LBRACKET        reduce using rule 244 (expr -> id template_ref .)
    $end            reduce using rule 244 (expr -> id template_ref .)
    RBRACKET        reduce using rule 244 (expr -> id template_ref .)
    CASE            reduce using rule 244 (expr -> id template_ref .)
    DEFAULT         reduce using rule 244 (expr -> id template_ref .)
    OF              reduce using rule 244 (expr -> id template_ref .)


state 140

    (56) statement_nonctrl -> if .

    SEMI            reduce using rule 56 (statement_nonctrl -> if .)
    FUNCTION        reduce using rule 56 (statement_nonctrl -> if .)
    CLASS           reduce using rule 56 (statement_nonctrl -> if .)
    TYPED           reduce using rule 56 (statement_nonctrl -> if .)
    IF              reduce using rule 56 (statement_nonctrl -> if .)
    ELSE            reduce using rule 56 (statement_nonctrl -> if .)
    WHILE           reduce using rule 56 (statement_nonctrl -> if .)
    WITH            reduce using rule 56 (statement_nonctrl -> if .)
    DO              reduce using rule 56 (statement_nonctrl -> if .)
    FOR             reduce using rule 56 (statement_nonctrl -> if .)
    RETURN          reduce using rule 56 (statement_nonctrl -> if .)
    YIELD           reduce using rule 56 (statement_nonctrl -> if .)
    BREAK           reduce using rule 56 (statement_nonctrl -> if .)
    CONTINUE        reduce using rule 56 (statement_nonctrl -> if .)
    THROW           reduce using rule 56 (statement_nonctrl -> if .)
    TRY             reduce using rule 56 (statement_nonctrl -> if .)
    CATCH           reduce using rule 56 (statement_nonctrl -> if .)
    FINALLY         reduce using rule 56 (statement_nonctrl -> if .)
    SWITCH          reduce using rule 56 (statement_nonctrl -> if .)
    NATIVE          reduce using rule 56 (statement_nonctrl -> if .)
    IMPORT          reduce using rule 56 (statement_nonctrl -> if .)
    EXPORT          reduce using rule 56 (statement_nonctrl -> if .)
    NUMBER          reduce using rule 56 (statement_nonctrl -> if .)
    DELETE          reduce using rule 56 (statement_nonctrl -> if .)
    STRINGLIT       reduce using rule 56 (statement_nonctrl -> if .)
    ID              reduce using rule 56 (statement_nonctrl -> if .)
    GET             reduce using rule 56 (statement_nonctrl -> if .)
    SET             reduce using rule 56 (statement_nonctrl -> if .)
    LSBRACKET       reduce using rule 56 (statement_nonctrl -> if .)
    LPAREN          reduce using rule 56 (statement_nonctrl -> if .)
    MINUS           reduce using rule 56 (statement_nonctrl -> if .)
    NOT             reduce using rule 56 (statement_nonctrl -> if .)
    BITINV          reduce using rule 56 (statement_nonctrl -> if .)
    NEW             reduce using rule 56 (statement_nonctrl -> if .)
    INC             reduce using rule 56 (statement_nonctrl -> if .)
    DEC             reduce using rule 56 (statement_nonctrl -> if .)
    TYPEOF          reduce using rule 56 (statement_nonctrl -> if .)
    REGEXPR         reduce using rule 56 (statement_nonctrl -> if .)
    GLOBAL          reduce using rule 56 (statement_nonctrl -> if .)
    VAR             reduce using rule 56 (statement_nonctrl -> if .)
    STATIC          reduce using rule 56 (statement_nonctrl -> if .)
    TLTHAN          reduce using rule 56 (statement_nonctrl -> if .)
    LBRACKET        reduce using rule 56 (statement_nonctrl -> if .)
    $end            reduce using rule 56 (statement_nonctrl -> if .)
    RBRACKET        reduce using rule 56 (statement_nonctrl -> if .)
    CASE            reduce using rule 56 (statement_nonctrl -> if .)
    DEFAULT         reduce using rule 56 (statement_nonctrl -> if .)


state 141

    (58) statement_nonctrl -> for .

    SEMI            reduce using rule 58 (statement_nonctrl -> for .)
    FUNCTION        reduce using rule 58 (statement_nonctrl -> for .)
    CLASS           reduce using rule 58 (statement_nonctrl -> for .)
    TYPED           reduce using rule 58 (statement_nonctrl -> for .)
    IF              reduce using rule 58 (statement_nonctrl -> for .)
    ELSE            reduce using rule 58 (statement_nonctrl -> for .)
    WHILE           reduce using rule 58 (statement_nonctrl -> for .)
    WITH            reduce using rule 58 (statement_nonctrl -> for .)
    DO              reduce using rule 58 (statement_nonctrl -> for .)
    FOR             reduce using rule 58 (statement_nonctrl -> for .)
    RETURN          reduce using rule 58 (statement_nonctrl -> for .)
    YIELD           reduce using rule 58 (statement_nonctrl -> for .)
    BREAK           reduce using rule 58 (statement_nonctrl -> for .)
    CONTINUE        reduce using rule 58 (statement_nonctrl -> for .)
    THROW           reduce using rule 58 (statement_nonctrl -> for .)
    TRY             reduce using rule 58 (statement_nonctrl -> for .)
    CATCH           reduce using rule 58 (statement_nonctrl -> for .)
    FINALLY         reduce using rule 58 (statement_nonctrl -> for .)
    SWITCH          reduce using rule 58 (statement_nonctrl -> for .)
    NATIVE          reduce using rule 58 (statement_nonctrl -> for .)
    IMPORT          reduce using rule 58 (statement_nonctrl -> for .)
    EXPORT          reduce using rule 58 (statement_nonctrl -> for .)
    NUMBER          reduce using rule 58 (statement_nonctrl -> for .)
    DELETE          reduce using rule 58 (statement_nonctrl -> for .)
    STRINGLIT       reduce using rule 58 (statement_nonctrl -> for .)
    ID              reduce using rule 58 (statement_nonctrl -> for .)
    GET             reduce using rule 58 (statement_nonctrl -> for .)
    SET             reduce using rule 58 (statement_nonctrl -> for .)
    LSBRACKET       reduce using rule 58 (statement_nonctrl -> for .)
    LPAREN          reduce using rule 58 (statement_nonctrl -> for .)
    MINUS           reduce using rule 58 (statement_nonctrl -> for .)
    NOT             reduce using rule 58 (statement_nonctrl -> for .)
    BITINV          reduce using rule 58 (statement_nonctrl -> for .)
    NEW             reduce using rule 58 (statement_nonctrl -> for .)
    INC             reduce using rule 58 (statement_nonctrl -> for .)
    DEC             reduce using rule 58 (statement_nonctrl -> for .)
    TYPEOF          reduce using rule 58 (statement_nonctrl -> for .)
    REGEXPR         reduce using rule 58 (statement_nonctrl -> for .)
    GLOBAL          reduce using rule 58 (statement_nonctrl -> for .)
    VAR             reduce using rule 58 (statement_nonctrl -> for .)
    STATIC          reduce using rule 58 (statement_nonctrl -> for .)
    TLTHAN          reduce using rule 58 (statement_nonctrl -> for .)
    LBRACKET        reduce using rule 58 (statement_nonctrl -> for .)
    $end            reduce using rule 58 (statement_nonctrl -> for .)
    RBRACKET        reduce using rule 58 (statement_nonctrl -> for .)
    CASE            reduce using rule 58 (statement_nonctrl -> for .)
    DEFAULT         reduce using rule 58 (statement_nonctrl -> for .)


state 142

    (61) statement_nonctrl -> return . SEMI

    SEMI            shift and go to state 273


state 143

    (60) statement_nonctrl -> while .

    SEMI            reduce using rule 60 (statement_nonctrl -> while .)
    FUNCTION        reduce using rule 60 (statement_nonctrl -> while .)
    CLASS           reduce using rule 60 (statement_nonctrl -> while .)
    TYPED           reduce using rule 60 (statement_nonctrl -> while .)
    IF              reduce using rule 60 (statement_nonctrl -> while .)
    ELSE            reduce using rule 60 (statement_nonctrl -> while .)
    WHILE           reduce using rule 60 (statement_nonctrl -> while .)
    WITH            reduce using rule 60 (statement_nonctrl -> while .)
    DO              reduce using rule 60 (statement_nonctrl -> while .)
    FOR             reduce using rule 60 (statement_nonctrl -> while .)
    RETURN          reduce using rule 60 (statement_nonctrl -> while .)
    YIELD           reduce using rule 60 (statement_nonctrl -> while .)
    BREAK           reduce using rule 60 (statement_nonctrl -> while .)
    CONTINUE        reduce using rule 60 (statement_nonctrl -> while .)
    THROW           reduce using rule 60 (statement_nonctrl -> while .)
    TRY             reduce using rule 60 (statement_nonctrl -> while .)
    CATCH           reduce using rule 60 (statement_nonctrl -> while .)
    FINALLY         reduce using rule 60 (statement_nonctrl -> while .)
    SWITCH          reduce using rule 60 (statement_nonctrl -> while .)
    NATIVE          reduce using rule 60 (statement_nonctrl -> while .)
    IMPORT          reduce using rule 60 (statement_nonctrl -> while .)
    EXPORT          reduce using rule 60 (statement_nonctrl -> while .)
    NUMBER          reduce using rule 60 (statement_nonctrl -> while .)
    DELETE          reduce using rule 60 (statement_nonctrl -> while .)
    STRINGLIT       reduce using rule 60 (statement_nonctrl -> while .)
    ID              reduce using rule 60 (statement_nonctrl -> while .)
    GET             reduce using rule 60 (statement_nonctrl -> while .)
    SET             reduce using rule 60 (statement_nonctrl -> while .)
    LSBRACKET       reduce using rule 60 (statement_nonctrl -> while .)
    LPAREN          reduce using rule 60 (statement_nonctrl -> while .)
    MINUS           reduce using rule 60 (statement_nonctrl -> while .)
    NOT             reduce using rule 60 (statement_nonctrl -> while .)
    BITINV          reduce using rule 60 (statement_nonctrl -> while .)
    NEW             reduce using rule 60 (statement_nonctrl -> while .)
    INC             reduce using rule 60 (statement_nonctrl -> while .)
    DEC             reduce using rule 60 (statement_nonctrl -> while .)
    TYPEOF          reduce using rule 60 (statement_nonctrl -> while .)
    REGEXPR         reduce using rule 60 (statement_nonctrl -> while .)
    GLOBAL          reduce using rule 60 (statement_nonctrl -> while .)
    VAR             reduce using rule 60 (statement_nonctrl -> while .)
    STATIC          reduce using rule 60 (statement_nonctrl -> while .)
    TLTHAN          reduce using rule 60 (statement_nonctrl -> while .)
    LBRACKET        reduce using rule 60 (statement_nonctrl -> while .)
    $end            reduce using rule 60 (statement_nonctrl -> while .)
    RBRACKET        reduce using rule 60 (statement_nonctrl -> while .)
    CASE            reduce using rule 60 (statement_nonctrl -> while .)
    DEFAULT         reduce using rule 60 (statement_nonctrl -> while .)


state 144

    (59) statement_nonctrl -> dowhile .

    SEMI            reduce using rule 59 (statement_nonctrl -> dowhile .)
    FUNCTION        reduce using rule 59 (statement_nonctrl -> dowhile .)
    CLASS           reduce using rule 59 (statement_nonctrl -> dowhile .)
    TYPED           reduce using rule 59 (statement_nonctrl -> dowhile .)
    IF              reduce using rule 59 (statement_nonctrl -> dowhile .)
    ELSE            reduce using rule 59 (statement_nonctrl -> dowhile .)
    WHILE           reduce using rule 59 (statement_nonctrl -> dowhile .)
    WITH            reduce using rule 59 (statement_nonctrl -> dowhile .)
    DO              reduce using rule 59 (statement_nonctrl -> dowhile .)
    FOR             reduce using rule 59 (statement_nonctrl -> dowhile .)
    RETURN          reduce using rule 59 (statement_nonctrl -> dowhile .)
    YIELD           reduce using rule 59 (statement_nonctrl -> dowhile .)
    BREAK           reduce using rule 59 (statement_nonctrl -> dowhile .)
    CONTINUE        reduce using rule 59 (statement_nonctrl -> dowhile .)
    THROW           reduce using rule 59 (statement_nonctrl -> dowhile .)
    TRY             reduce using rule 59 (statement_nonctrl -> dowhile .)
    CATCH           reduce using rule 59 (statement_nonctrl -> dowhile .)
    FINALLY         reduce using rule 59 (statement_nonctrl -> dowhile .)
    SWITCH          reduce using rule 59 (statement_nonctrl -> dowhile .)
    NATIVE          reduce using rule 59 (statement_nonctrl -> dowhile .)
    IMPORT          reduce using rule 59 (statement_nonctrl -> dowhile .)
    EXPORT          reduce using rule 59 (statement_nonctrl -> dowhile .)
    NUMBER          reduce using rule 59 (statement_nonctrl -> dowhile .)
    DELETE          reduce using rule 59 (statement_nonctrl -> dowhile .)
    STRINGLIT       reduce using rule 59 (statement_nonctrl -> dowhile .)
    ID              reduce using rule 59 (statement_nonctrl -> dowhile .)
    GET             reduce using rule 59 (statement_nonctrl -> dowhile .)
    SET             reduce using rule 59 (statement_nonctrl -> dowhile .)
    LSBRACKET       reduce using rule 59 (statement_nonctrl -> dowhile .)
    LPAREN          reduce using rule 59 (statement_nonctrl -> dowhile .)
    MINUS           reduce using rule 59 (statement_nonctrl -> dowhile .)
    NOT             reduce using rule 59 (statement_nonctrl -> dowhile .)
    BITINV          reduce using rule 59 (statement_nonctrl -> dowhile .)
    NEW             reduce using rule 59 (statement_nonctrl -> dowhile .)
    INC             reduce using rule 59 (statement_nonctrl -> dowhile .)
    DEC             reduce using rule 59 (statement_nonctrl -> dowhile .)
    TYPEOF          reduce using rule 59 (statement_nonctrl -> dowhile .)
    REGEXPR         reduce using rule 59 (statement_nonctrl -> dowhile .)
    GLOBAL          reduce using rule 59 (statement_nonctrl -> dowhile .)
    VAR             reduce using rule 59 (statement_nonctrl -> dowhile .)
    STATIC          reduce using rule 59 (statement_nonctrl -> dowhile .)
    TLTHAN          reduce using rule 59 (statement_nonctrl -> dowhile .)
    LBRACKET        reduce using rule 59 (statement_nonctrl -> dowhile .)
    $end            reduce using rule 59 (statement_nonctrl -> dowhile .)
    RBRACKET        reduce using rule 59 (statement_nonctrl -> dowhile .)
    CASE            reduce using rule 59 (statement_nonctrl -> dowhile .)
    DEFAULT         reduce using rule 59 (statement_nonctrl -> dowhile .)


state 145

    (65) statement_nonctrl -> throw . SEMI

    SEMI            shift and go to state 274


state 146

    (68) statement_nonctrl -> finally .

    SEMI            reduce using rule 68 (statement_nonctrl -> finally .)
    FUNCTION        reduce using rule 68 (statement_nonctrl -> finally .)
    CLASS           reduce using rule 68 (statement_nonctrl -> finally .)
    TYPED           reduce using rule 68 (statement_nonctrl -> finally .)
    IF              reduce using rule 68 (statement_nonctrl -> finally .)
    ELSE            reduce using rule 68 (statement_nonctrl -> finally .)
    WHILE           reduce using rule 68 (statement_nonctrl -> finally .)
    WITH            reduce using rule 68 (statement_nonctrl -> finally .)
    DO              reduce using rule 68 (statement_nonctrl -> finally .)
    FOR             reduce using rule 68 (statement_nonctrl -> finally .)
    RETURN          reduce using rule 68 (statement_nonctrl -> finally .)
    YIELD           reduce using rule 68 (statement_nonctrl -> finally .)
    BREAK           reduce using rule 68 (statement_nonctrl -> finally .)
    CONTINUE        reduce using rule 68 (statement_nonctrl -> finally .)
    THROW           reduce using rule 68 (statement_nonctrl -> finally .)
    TRY             reduce using rule 68 (statement_nonctrl -> finally .)
    CATCH           reduce using rule 68 (statement_nonctrl -> finally .)
    FINALLY         reduce using rule 68 (statement_nonctrl -> finally .)
    SWITCH          reduce using rule 68 (statement_nonctrl -> finally .)
    NATIVE          reduce using rule 68 (statement_nonctrl -> finally .)
    IMPORT          reduce using rule 68 (statement_nonctrl -> finally .)
    EXPORT          reduce using rule 68 (statement_nonctrl -> finally .)
    NUMBER          reduce using rule 68 (statement_nonctrl -> finally .)
    DELETE          reduce using rule 68 (statement_nonctrl -> finally .)
    STRINGLIT       reduce using rule 68 (statement_nonctrl -> finally .)
    ID              reduce using rule 68 (statement_nonctrl -> finally .)
    GET             reduce using rule 68 (statement_nonctrl -> finally .)
    SET             reduce using rule 68 (statement_nonctrl -> finally .)
    LSBRACKET       reduce using rule 68 (statement_nonctrl -> finally .)
    LPAREN          reduce using rule 68 (statement_nonctrl -> finally .)
    MINUS           reduce using rule 68 (statement_nonctrl -> finally .)
    NOT             reduce using rule 68 (statement_nonctrl -> finally .)
    BITINV          reduce using rule 68 (statement_nonctrl -> finally .)
    NEW             reduce using rule 68 (statement_nonctrl -> finally .)
    INC             reduce using rule 68 (statement_nonctrl -> finally .)
    DEC             reduce using rule 68 (statement_nonctrl -> finally .)
    TYPEOF          reduce using rule 68 (statement_nonctrl -> finally .)
    REGEXPR         reduce using rule 68 (statement_nonctrl -> finally .)
    GLOBAL          reduce using rule 68 (statement_nonctrl -> finally .)
    VAR             reduce using rule 68 (statement_nonctrl -> finally .)
    STATIC          reduce using rule 68 (statement_nonctrl -> finally .)
    TLTHAN          reduce using rule 68 (statement_nonctrl -> finally .)
    LBRACKET        reduce using rule 68 (statement_nonctrl -> finally .)
    $end            reduce using rule 68 (statement_nonctrl -> finally .)
    RBRACKET        reduce using rule 68 (statement_nonctrl -> finally .)
    CASE            reduce using rule 68 (statement_nonctrl -> finally .)
    DEFAULT         reduce using rule 68 (statement_nonctrl -> finally .)


state 147

    (308) ctrl_statement -> LBRACKET . statementlist_opt RBRACKET
    (207) lbracket_restrict -> LBRACKET .
    (314) statementlist_opt -> . statementlist
    (315) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 207 (lbracket_restrict -> LBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for GET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for SET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! RBRACKET        [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! GET             [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! SET             [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! RBRACKET        [ reduce using rule 315 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 275
    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    try                            shift and go to state 42
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 276

state 148

    (348) else -> ELSE ctrl_statement .

    SEMI            reduce using rule 348 (else -> ELSE ctrl_statement .)
    FUNCTION        reduce using rule 348 (else -> ELSE ctrl_statement .)
    CLASS           reduce using rule 348 (else -> ELSE ctrl_statement .)
    TYPED           reduce using rule 348 (else -> ELSE ctrl_statement .)
    IF              reduce using rule 348 (else -> ELSE ctrl_statement .)
    ELSE            reduce using rule 348 (else -> ELSE ctrl_statement .)
    WHILE           reduce using rule 348 (else -> ELSE ctrl_statement .)
    WITH            reduce using rule 348 (else -> ELSE ctrl_statement .)
    DO              reduce using rule 348 (else -> ELSE ctrl_statement .)
    FOR             reduce using rule 348 (else -> ELSE ctrl_statement .)
    RETURN          reduce using rule 348 (else -> ELSE ctrl_statement .)
    YIELD           reduce using rule 348 (else -> ELSE ctrl_statement .)
    BREAK           reduce using rule 348 (else -> ELSE ctrl_statement .)
    CONTINUE        reduce using rule 348 (else -> ELSE ctrl_statement .)
    THROW           reduce using rule 348 (else -> ELSE ctrl_statement .)
    TRY             reduce using rule 348 (else -> ELSE ctrl_statement .)
    CATCH           reduce using rule 348 (else -> ELSE ctrl_statement .)
    FINALLY         reduce using rule 348 (else -> ELSE ctrl_statement .)
    SWITCH          reduce using rule 348 (else -> ELSE ctrl_statement .)
    NATIVE          reduce using rule 348 (else -> ELSE ctrl_statement .)
    IMPORT          reduce using rule 348 (else -> ELSE ctrl_statement .)
    EXPORT          reduce using rule 348 (else -> ELSE ctrl_statement .)
    NUMBER          reduce using rule 348 (else -> ELSE ctrl_statement .)
    DELETE          reduce using rule 348 (else -> ELSE ctrl_statement .)
    STRINGLIT       reduce using rule 348 (else -> ELSE ctrl_statement .)
    ID              reduce using rule 348 (else -> ELSE ctrl_statement .)
    GET             reduce using rule 348 (else -> ELSE ctrl_statement .)
    SET             reduce using rule 348 (else -> ELSE ctrl_statement .)
    LSBRACKET       reduce using rule 348 (else -> ELSE ctrl_statement .)
    LPAREN          reduce using rule 348 (else -> ELSE ctrl_statement .)
    MINUS           reduce using rule 348 (else -> ELSE ctrl_statement .)
    NOT             reduce using rule 348 (else -> ELSE ctrl_statement .)
    BITINV          reduce using rule 348 (else -> ELSE ctrl_statement .)
    NEW             reduce using rule 348 (else -> ELSE ctrl_statement .)
    INC             reduce using rule 348 (else -> ELSE ctrl_statement .)
    DEC             reduce using rule 348 (else -> ELSE ctrl_statement .)
    TYPEOF          reduce using rule 348 (else -> ELSE ctrl_statement .)
    REGEXPR         reduce using rule 348 (else -> ELSE ctrl_statement .)
    GLOBAL          reduce using rule 348 (else -> ELSE ctrl_statement .)
    VAR             reduce using rule 348 (else -> ELSE ctrl_statement .)
    STATIC          reduce using rule 348 (else -> ELSE ctrl_statement .)
    TLTHAN          reduce using rule 348 (else -> ELSE ctrl_statement .)
    LBRACKET        reduce using rule 348 (else -> ELSE ctrl_statement .)
    CASE            reduce using rule 348 (else -> ELSE ctrl_statement .)
    RBRACKET        reduce using rule 348 (else -> ELSE ctrl_statement .)
    $end            reduce using rule 348 (else -> ELSE ctrl_statement .)
    DEFAULT         reduce using rule 348 (else -> ELSE ctrl_statement .)


state 149

    (64) statement_nonctrl -> continue . SEMI

    SEMI            shift and go to state 277


state 150

    (204) funcref -> FUNCTION . id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (215) exprfunction -> FUNCTION . func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> FUNCTION . func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (213) func_name_opt -> . ID
    (214) func_name_opt -> .

    ID              shift and go to state 200
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          reduce using rule 214 (func_name_opt -> .)
    LPAREN          reduce using rule 214 (func_name_opt -> .)

    id                             shift and go to state 278
    func_name_opt                  shift and go to state 202

state 151

    (309) ctrl_statement -> SEMI .
    (55) statement_nonctrl -> SEMI .

  ! reduce/reduce conflict for SEMI resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for CLASS resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for TYPED resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for FINALLY resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for IMPORT resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for EXPORT resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for GET resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for SET resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for STATIC resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 55 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 55 (statement_nonctrl -> SEMI .)
    SEMI            reduce using rule 55 (statement_nonctrl -> SEMI .)
    FUNCTION        reduce using rule 55 (statement_nonctrl -> SEMI .)
    CLASS           reduce using rule 55 (statement_nonctrl -> SEMI .)
    TYPED           reduce using rule 55 (statement_nonctrl -> SEMI .)
    IF              reduce using rule 55 (statement_nonctrl -> SEMI .)
    ELSE            reduce using rule 55 (statement_nonctrl -> SEMI .)
    WHILE           reduce using rule 55 (statement_nonctrl -> SEMI .)
    WITH            reduce using rule 55 (statement_nonctrl -> SEMI .)
    DO              reduce using rule 55 (statement_nonctrl -> SEMI .)
    FOR             reduce using rule 55 (statement_nonctrl -> SEMI .)
    RETURN          reduce using rule 55 (statement_nonctrl -> SEMI .)
    YIELD           reduce using rule 55 (statement_nonctrl -> SEMI .)
    BREAK           reduce using rule 55 (statement_nonctrl -> SEMI .)
    CONTINUE        reduce using rule 55 (statement_nonctrl -> SEMI .)
    THROW           reduce using rule 55 (statement_nonctrl -> SEMI .)
    TRY             reduce using rule 55 (statement_nonctrl -> SEMI .)
    CATCH           reduce using rule 55 (statement_nonctrl -> SEMI .)
    FINALLY         reduce using rule 55 (statement_nonctrl -> SEMI .)
    SWITCH          reduce using rule 55 (statement_nonctrl -> SEMI .)
    NATIVE          reduce using rule 55 (statement_nonctrl -> SEMI .)
    IMPORT          reduce using rule 55 (statement_nonctrl -> SEMI .)
    EXPORT          reduce using rule 55 (statement_nonctrl -> SEMI .)
    NUMBER          reduce using rule 55 (statement_nonctrl -> SEMI .)
    DELETE          reduce using rule 55 (statement_nonctrl -> SEMI .)
    STRINGLIT       reduce using rule 55 (statement_nonctrl -> SEMI .)
    ID              reduce using rule 55 (statement_nonctrl -> SEMI .)
    GET             reduce using rule 55 (statement_nonctrl -> SEMI .)
    SET             reduce using rule 55 (statement_nonctrl -> SEMI .)
    LSBRACKET       reduce using rule 55 (statement_nonctrl -> SEMI .)
    LPAREN          reduce using rule 55 (statement_nonctrl -> SEMI .)
    MINUS           reduce using rule 55 (statement_nonctrl -> SEMI .)
    NOT             reduce using rule 55 (statement_nonctrl -> SEMI .)
    BITINV          reduce using rule 55 (statement_nonctrl -> SEMI .)
    NEW             reduce using rule 55 (statement_nonctrl -> SEMI .)
    INC             reduce using rule 55 (statement_nonctrl -> SEMI .)
    DEC             reduce using rule 55 (statement_nonctrl -> SEMI .)
    TYPEOF          reduce using rule 55 (statement_nonctrl -> SEMI .)
    REGEXPR         reduce using rule 55 (statement_nonctrl -> SEMI .)
    GLOBAL          reduce using rule 55 (statement_nonctrl -> SEMI .)
    VAR             reduce using rule 55 (statement_nonctrl -> SEMI .)
    STATIC          reduce using rule 55 (statement_nonctrl -> SEMI .)
    TLTHAN          reduce using rule 55 (statement_nonctrl -> SEMI .)
    LBRACKET        reduce using rule 55 (statement_nonctrl -> SEMI .)
    $end            reduce using rule 55 (statement_nonctrl -> SEMI .)
    RBRACKET        reduce using rule 55 (statement_nonctrl -> SEMI .)
    CASE            reduce using rule 55 (statement_nonctrl -> SEMI .)
    DEFAULT         reduce using rule 55 (statement_nonctrl -> SEMI .)

  ! SEMI            [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! FUNCTION        [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! CLASS           [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! TYPED           [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! IF              [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! ELSE            [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! WHILE           [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! WITH            [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! DO              [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! FOR             [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! RETURN          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! YIELD           [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! BREAK           [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! CONTINUE        [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! THROW           [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! TRY             [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! CATCH           [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! FINALLY         [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! SWITCH          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! NATIVE          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! IMPORT          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! EXPORT          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! NUMBER          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! DELETE          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! STRINGLIT       [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! ID              [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! GET             [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! SET             [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! LSBRACKET       [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! LPAREN          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! MINUS           [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! NOT             [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! BITINV          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! NEW             [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! INC             [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! DEC             [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! TYPEOF          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! REGEXPR         [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! GLOBAL          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! VAR             [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! STATIC          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! TLTHAN          [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! LBRACKET        [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! $end            [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! RBRACKET        [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! CASE            [ reduce using rule 309 (ctrl_statement -> SEMI .) ]
  ! DEFAULT         [ reduce using rule 309 (ctrl_statement -> SEMI .) ]


state 152

    (62) statement_nonctrl -> yield . SEMI

    SEMI            shift and go to state 279


state 153

    (307) ctrl_statement -> statement_nonctrl .

    SEMI            reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    FUNCTION        reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    CLASS           reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    TYPED           reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    IF              reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    ELSE            reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    WHILE           reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    WITH            reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    DO              reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    FOR             reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    RETURN          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    YIELD           reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    BREAK           reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    CONTINUE        reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    THROW           reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    TRY             reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    CATCH           reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    FINALLY         reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    SWITCH          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    NATIVE          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    IMPORT          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    EXPORT          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    NUMBER          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    DELETE          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    STRINGLIT       reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    ID              reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    GET             reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    SET             reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    LSBRACKET       reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    LPAREN          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    MINUS           reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    NOT             reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    BITINV          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    NEW             reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    INC             reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    DEC             reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    TYPEOF          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    REGEXPR         reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    GLOBAL          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    VAR             reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    STATIC          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    TLTHAN          reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    LBRACKET        reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    $end            reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    RBRACKET        reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    CASE            reduce using rule 307 (ctrl_statement -> statement_nonctrl .)
    DEFAULT         reduce using rule 307 (ctrl_statement -> statement_nonctrl .)


state 154

    (66) statement_nonctrl -> try .

    SEMI            reduce using rule 66 (statement_nonctrl -> try .)
    FUNCTION        reduce using rule 66 (statement_nonctrl -> try .)
    CLASS           reduce using rule 66 (statement_nonctrl -> try .)
    TYPED           reduce using rule 66 (statement_nonctrl -> try .)
    IF              reduce using rule 66 (statement_nonctrl -> try .)
    ELSE            reduce using rule 66 (statement_nonctrl -> try .)
    WHILE           reduce using rule 66 (statement_nonctrl -> try .)
    WITH            reduce using rule 66 (statement_nonctrl -> try .)
    DO              reduce using rule 66 (statement_nonctrl -> try .)
    FOR             reduce using rule 66 (statement_nonctrl -> try .)
    RETURN          reduce using rule 66 (statement_nonctrl -> try .)
    YIELD           reduce using rule 66 (statement_nonctrl -> try .)
    BREAK           reduce using rule 66 (statement_nonctrl -> try .)
    CONTINUE        reduce using rule 66 (statement_nonctrl -> try .)
    THROW           reduce using rule 66 (statement_nonctrl -> try .)
    TRY             reduce using rule 66 (statement_nonctrl -> try .)
    CATCH           reduce using rule 66 (statement_nonctrl -> try .)
    FINALLY         reduce using rule 66 (statement_nonctrl -> try .)
    SWITCH          reduce using rule 66 (statement_nonctrl -> try .)
    NATIVE          reduce using rule 66 (statement_nonctrl -> try .)
    IMPORT          reduce using rule 66 (statement_nonctrl -> try .)
    EXPORT          reduce using rule 66 (statement_nonctrl -> try .)
    NUMBER          reduce using rule 66 (statement_nonctrl -> try .)
    DELETE          reduce using rule 66 (statement_nonctrl -> try .)
    STRINGLIT       reduce using rule 66 (statement_nonctrl -> try .)
    ID              reduce using rule 66 (statement_nonctrl -> try .)
    GET             reduce using rule 66 (statement_nonctrl -> try .)
    SET             reduce using rule 66 (statement_nonctrl -> try .)
    LSBRACKET       reduce using rule 66 (statement_nonctrl -> try .)
    LPAREN          reduce using rule 66 (statement_nonctrl -> try .)
    MINUS           reduce using rule 66 (statement_nonctrl -> try .)
    NOT             reduce using rule 66 (statement_nonctrl -> try .)
    BITINV          reduce using rule 66 (statement_nonctrl -> try .)
    NEW             reduce using rule 66 (statement_nonctrl -> try .)
    INC             reduce using rule 66 (statement_nonctrl -> try .)
    DEC             reduce using rule 66 (statement_nonctrl -> try .)
    TYPEOF          reduce using rule 66 (statement_nonctrl -> try .)
    REGEXPR         reduce using rule 66 (statement_nonctrl -> try .)
    GLOBAL          reduce using rule 66 (statement_nonctrl -> try .)
    VAR             reduce using rule 66 (statement_nonctrl -> try .)
    STATIC          reduce using rule 66 (statement_nonctrl -> try .)
    TLTHAN          reduce using rule 66 (statement_nonctrl -> try .)
    LBRACKET        reduce using rule 66 (statement_nonctrl -> try .)
    $end            reduce using rule 66 (statement_nonctrl -> try .)
    RBRACKET        reduce using rule 66 (statement_nonctrl -> try .)
    CASE            reduce using rule 66 (statement_nonctrl -> try .)
    DEFAULT         reduce using rule 66 (statement_nonctrl -> try .)


state 155

    (67) statement_nonctrl -> catch .

    SEMI            reduce using rule 67 (statement_nonctrl -> catch .)
    FUNCTION        reduce using rule 67 (statement_nonctrl -> catch .)
    CLASS           reduce using rule 67 (statement_nonctrl -> catch .)
    TYPED           reduce using rule 67 (statement_nonctrl -> catch .)
    IF              reduce using rule 67 (statement_nonctrl -> catch .)
    ELSE            reduce using rule 67 (statement_nonctrl -> catch .)
    WHILE           reduce using rule 67 (statement_nonctrl -> catch .)
    WITH            reduce using rule 67 (statement_nonctrl -> catch .)
    DO              reduce using rule 67 (statement_nonctrl -> catch .)
    FOR             reduce using rule 67 (statement_nonctrl -> catch .)
    RETURN          reduce using rule 67 (statement_nonctrl -> catch .)
    YIELD           reduce using rule 67 (statement_nonctrl -> catch .)
    BREAK           reduce using rule 67 (statement_nonctrl -> catch .)
    CONTINUE        reduce using rule 67 (statement_nonctrl -> catch .)
    THROW           reduce using rule 67 (statement_nonctrl -> catch .)
    TRY             reduce using rule 67 (statement_nonctrl -> catch .)
    CATCH           reduce using rule 67 (statement_nonctrl -> catch .)
    FINALLY         reduce using rule 67 (statement_nonctrl -> catch .)
    SWITCH          reduce using rule 67 (statement_nonctrl -> catch .)
    NATIVE          reduce using rule 67 (statement_nonctrl -> catch .)
    IMPORT          reduce using rule 67 (statement_nonctrl -> catch .)
    EXPORT          reduce using rule 67 (statement_nonctrl -> catch .)
    NUMBER          reduce using rule 67 (statement_nonctrl -> catch .)
    DELETE          reduce using rule 67 (statement_nonctrl -> catch .)
    STRINGLIT       reduce using rule 67 (statement_nonctrl -> catch .)
    ID              reduce using rule 67 (statement_nonctrl -> catch .)
    GET             reduce using rule 67 (statement_nonctrl -> catch .)
    SET             reduce using rule 67 (statement_nonctrl -> catch .)
    LSBRACKET       reduce using rule 67 (statement_nonctrl -> catch .)
    LPAREN          reduce using rule 67 (statement_nonctrl -> catch .)
    MINUS           reduce using rule 67 (statement_nonctrl -> catch .)
    NOT             reduce using rule 67 (statement_nonctrl -> catch .)
    BITINV          reduce using rule 67 (statement_nonctrl -> catch .)
    NEW             reduce using rule 67 (statement_nonctrl -> catch .)
    INC             reduce using rule 67 (statement_nonctrl -> catch .)
    DEC             reduce using rule 67 (statement_nonctrl -> catch .)
    TYPEOF          reduce using rule 67 (statement_nonctrl -> catch .)
    REGEXPR         reduce using rule 67 (statement_nonctrl -> catch .)
    GLOBAL          reduce using rule 67 (statement_nonctrl -> catch .)
    VAR             reduce using rule 67 (statement_nonctrl -> catch .)
    STATIC          reduce using rule 67 (statement_nonctrl -> catch .)
    TLTHAN          reduce using rule 67 (statement_nonctrl -> catch .)
    LBRACKET        reduce using rule 67 (statement_nonctrl -> catch .)
    $end            reduce using rule 67 (statement_nonctrl -> catch .)
    RBRACKET        reduce using rule 67 (statement_nonctrl -> catch .)
    CASE            reduce using rule 67 (statement_nonctrl -> catch .)
    DEFAULT         reduce using rule 67 (statement_nonctrl -> catch .)


state 156

    (63) statement_nonctrl -> break . SEMI

    SEMI            shift and go to state 280


state 157

    (57) statement_nonctrl -> else .

    SEMI            reduce using rule 57 (statement_nonctrl -> else .)
    FUNCTION        reduce using rule 57 (statement_nonctrl -> else .)
    CLASS           reduce using rule 57 (statement_nonctrl -> else .)
    TYPED           reduce using rule 57 (statement_nonctrl -> else .)
    IF              reduce using rule 57 (statement_nonctrl -> else .)
    ELSE            reduce using rule 57 (statement_nonctrl -> else .)
    WHILE           reduce using rule 57 (statement_nonctrl -> else .)
    WITH            reduce using rule 57 (statement_nonctrl -> else .)
    DO              reduce using rule 57 (statement_nonctrl -> else .)
    FOR             reduce using rule 57 (statement_nonctrl -> else .)
    RETURN          reduce using rule 57 (statement_nonctrl -> else .)
    YIELD           reduce using rule 57 (statement_nonctrl -> else .)
    BREAK           reduce using rule 57 (statement_nonctrl -> else .)
    CONTINUE        reduce using rule 57 (statement_nonctrl -> else .)
    THROW           reduce using rule 57 (statement_nonctrl -> else .)
    TRY             reduce using rule 57 (statement_nonctrl -> else .)
    CATCH           reduce using rule 57 (statement_nonctrl -> else .)
    FINALLY         reduce using rule 57 (statement_nonctrl -> else .)
    SWITCH          reduce using rule 57 (statement_nonctrl -> else .)
    NATIVE          reduce using rule 57 (statement_nonctrl -> else .)
    IMPORT          reduce using rule 57 (statement_nonctrl -> else .)
    EXPORT          reduce using rule 57 (statement_nonctrl -> else .)
    NUMBER          reduce using rule 57 (statement_nonctrl -> else .)
    DELETE          reduce using rule 57 (statement_nonctrl -> else .)
    STRINGLIT       reduce using rule 57 (statement_nonctrl -> else .)
    ID              reduce using rule 57 (statement_nonctrl -> else .)
    GET             reduce using rule 57 (statement_nonctrl -> else .)
    SET             reduce using rule 57 (statement_nonctrl -> else .)
    LSBRACKET       reduce using rule 57 (statement_nonctrl -> else .)
    LPAREN          reduce using rule 57 (statement_nonctrl -> else .)
    MINUS           reduce using rule 57 (statement_nonctrl -> else .)
    NOT             reduce using rule 57 (statement_nonctrl -> else .)
    BITINV          reduce using rule 57 (statement_nonctrl -> else .)
    NEW             reduce using rule 57 (statement_nonctrl -> else .)
    INC             reduce using rule 57 (statement_nonctrl -> else .)
    DEC             reduce using rule 57 (statement_nonctrl -> else .)
    TYPEOF          reduce using rule 57 (statement_nonctrl -> else .)
    REGEXPR         reduce using rule 57 (statement_nonctrl -> else .)
    GLOBAL          reduce using rule 57 (statement_nonctrl -> else .)
    VAR             reduce using rule 57 (statement_nonctrl -> else .)
    STATIC          reduce using rule 57 (statement_nonctrl -> else .)
    TLTHAN          reduce using rule 57 (statement_nonctrl -> else .)
    LBRACKET        reduce using rule 57 (statement_nonctrl -> else .)
    $end            reduce using rule 57 (statement_nonctrl -> else .)
    RBRACKET        reduce using rule 57 (statement_nonctrl -> else .)
    CASE            reduce using rule 57 (statement_nonctrl -> else .)
    DEFAULT         reduce using rule 57 (statement_nonctrl -> else .)


state 158

    (228) delete -> DELETE expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 228 (delete -> DELETE expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 159

    (215) exprfunction -> FUNCTION . func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> FUNCTION . func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (213) func_name_opt -> . ID
    (214) func_name_opt -> .

    ID              shift and go to state 281
    TLTHAN          reduce using rule 214 (func_name_opt -> .)
    LPAREN          reduce using rule 214 (func_name_opt -> .)

    func_name_opt                  shift and go to state 202

state 160

    (120) typeof_opt -> TYPEOF .

    INT             reduce using rule 120 (typeof_opt -> TYPEOF .)
    SHORT           reduce using rule 120 (typeof_opt -> TYPEOF .)
    FLOAT           reduce using rule 120 (typeof_opt -> TYPEOF .)
    DOUBLE          reduce using rule 120 (typeof_opt -> TYPEOF .)
    CHAR            reduce using rule 120 (typeof_opt -> TYPEOF .)
    BYTE            reduce using rule 120 (typeof_opt -> TYPEOF .)
    INFERRED        reduce using rule 120 (typeof_opt -> TYPEOF .)
    ID              reduce using rule 120 (typeof_opt -> TYPEOF .)
    GET             reduce using rule 120 (typeof_opt -> TYPEOF .)
    SET             reduce using rule 120 (typeof_opt -> TYPEOF .)


state 161

    (86) template_ref -> lthan_restrict simple_templatedeflist . gthan_restrict
    (123) simple_templatedeflist -> simple_templatedeflist . COMMA typeof_opt var_type
    (91) gthan_restrict -> . TGTHAN

    COMMA           shift and go to state 283
    TGTHAN          shift and go to state 282

    gthan_restrict                 shift and go to state 284

state 162

    (122) simple_templatedeflist -> typeof_opt . var_type
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 208
    id_var_type                    shift and go to state 211
    var_type                       shift and go to state 285

state 163

    (30) statement -> func_native SEMI .

    SEMI            reduce using rule 30 (statement -> func_native SEMI .)
    FUNCTION        reduce using rule 30 (statement -> func_native SEMI .)
    CLASS           reduce using rule 30 (statement -> func_native SEMI .)
    TYPED           reduce using rule 30 (statement -> func_native SEMI .)
    IF              reduce using rule 30 (statement -> func_native SEMI .)
    ELSE            reduce using rule 30 (statement -> func_native SEMI .)
    WHILE           reduce using rule 30 (statement -> func_native SEMI .)
    WITH            reduce using rule 30 (statement -> func_native SEMI .)
    DO              reduce using rule 30 (statement -> func_native SEMI .)
    FOR             reduce using rule 30 (statement -> func_native SEMI .)
    RETURN          reduce using rule 30 (statement -> func_native SEMI .)
    YIELD           reduce using rule 30 (statement -> func_native SEMI .)
    BREAK           reduce using rule 30 (statement -> func_native SEMI .)
    CONTINUE        reduce using rule 30 (statement -> func_native SEMI .)
    THROW           reduce using rule 30 (statement -> func_native SEMI .)
    TRY             reduce using rule 30 (statement -> func_native SEMI .)
    CATCH           reduce using rule 30 (statement -> func_native SEMI .)
    FINALLY         reduce using rule 30 (statement -> func_native SEMI .)
    SWITCH          reduce using rule 30 (statement -> func_native SEMI .)
    NATIVE          reduce using rule 30 (statement -> func_native SEMI .)
    IMPORT          reduce using rule 30 (statement -> func_native SEMI .)
    EXPORT          reduce using rule 30 (statement -> func_native SEMI .)
    NUMBER          reduce using rule 30 (statement -> func_native SEMI .)
    DELETE          reduce using rule 30 (statement -> func_native SEMI .)
    STRINGLIT       reduce using rule 30 (statement -> func_native SEMI .)
    ID              reduce using rule 30 (statement -> func_native SEMI .)
    GET             reduce using rule 30 (statement -> func_native SEMI .)
    SET             reduce using rule 30 (statement -> func_native SEMI .)
    LSBRACKET       reduce using rule 30 (statement -> func_native SEMI .)
    LPAREN          reduce using rule 30 (statement -> func_native SEMI .)
    MINUS           reduce using rule 30 (statement -> func_native SEMI .)
    NOT             reduce using rule 30 (statement -> func_native SEMI .)
    BITINV          reduce using rule 30 (statement -> func_native SEMI .)
    NEW             reduce using rule 30 (statement -> func_native SEMI .)
    INC             reduce using rule 30 (statement -> func_native SEMI .)
    DEC             reduce using rule 30 (statement -> func_native SEMI .)
    TYPEOF          reduce using rule 30 (statement -> func_native SEMI .)
    REGEXPR         reduce using rule 30 (statement -> func_native SEMI .)
    GLOBAL          reduce using rule 30 (statement -> func_native SEMI .)
    VAR             reduce using rule 30 (statement -> func_native SEMI .)
    STATIC          reduce using rule 30 (statement -> func_native SEMI .)
    TLTHAN          reduce using rule 30 (statement -> func_native SEMI .)
    LBRACKET        reduce using rule 30 (statement -> func_native SEMI .)
    CASE            reduce using rule 30 (statement -> func_native SEMI .)
    RBRACKET        reduce using rule 30 (statement -> func_native SEMI .)
    DEFAULT         reduce using rule 30 (statement -> func_native SEMI .)
    $end            reduce using rule 30 (statement -> func_native SEMI .)


state 164

    (353) yield -> YIELD expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 353 (yield -> YIELD expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 165

    (277) expr -> lparen_restrict expr . rparen_restrict
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (238) rparen_restrict -> . RPAREN
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    RPAREN          shift and go to state 286
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

    rparen_restrict                shift and go to state 287
    func_call                      shift and go to state 132
    template_ref                   shift and go to state 111
    lsbracket_restrict             shift and go to state 105
    template_ref_opt               shift and go to state 108
    lthan_restrict                 shift and go to state 11
    cmplx_assign                   shift and go to state 92

state 166

    (235) bitinv -> BITINV expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    RSHIFT          reduce using rule 235 (bitinv -> BITINV expr .)
    LSHIFT          reduce using rule 235 (bitinv -> BITINV expr .)
    LLSHIFT         reduce using rule 235 (bitinv -> BITINV expr .)
    RRSHIFT         reduce using rule 235 (bitinv -> BITINV expr .)
    LAND            reduce using rule 235 (bitinv -> BITINV expr .)
    LOR             reduce using rule 235 (bitinv -> BITINV expr .)
    BOR             reduce using rule 235 (bitinv -> BITINV expr .)
    INSTANCEOF      reduce using rule 235 (bitinv -> BITINV expr .)
    BXOR            reduce using rule 235 (bitinv -> BITINV expr .)
    BAND            reduce using rule 235 (bitinv -> BITINV expr .)
    EQUAL           reduce using rule 235 (bitinv -> BITINV expr .)
    EQUAL_STRICT    reduce using rule 235 (bitinv -> BITINV expr .)
    NOTEQUAL_STRICT reduce using rule 235 (bitinv -> BITINV expr .)
    GTHAN           reduce using rule 235 (bitinv -> BITINV expr .)
    GTHANEQ         reduce using rule 235 (bitinv -> BITINV expr .)
    LTHAN           reduce using rule 235 (bitinv -> BITINV expr .)
    MOD             reduce using rule 235 (bitinv -> BITINV expr .)
    LTHANEQ         reduce using rule 235 (bitinv -> BITINV expr .)
    NOTEQUAL        reduce using rule 235 (bitinv -> BITINV expr .)
    PLUS            reduce using rule 235 (bitinv -> BITINV expr .)
    MINUS           reduce using rule 235 (bitinv -> BITINV expr .)
    DIVIDE          reduce using rule 235 (bitinv -> BITINV expr .)
    TIMES           reduce using rule 235 (bitinv -> BITINV expr .)
    IN              reduce using rule 235 (bitinv -> BITINV expr .)
    QEST            reduce using rule 235 (bitinv -> BITINV expr .)
    COMMA           reduce using rule 235 (bitinv -> BITINV expr .)
    ASSIGNPLUS      reduce using rule 235 (bitinv -> BITINV expr .)
    ASSIGNMINUS     reduce using rule 235 (bitinv -> BITINV expr .)
    ASSIGNDIVIDE    reduce using rule 235 (bitinv -> BITINV expr .)
    ASSIGNTIMES     reduce using rule 235 (bitinv -> BITINV expr .)
    ASSIGNBOR       reduce using rule 235 (bitinv -> BITINV expr .)
    ASSIGNBAND      reduce using rule 235 (bitinv -> BITINV expr .)
    ASSIGNBXOR      reduce using rule 235 (bitinv -> BITINV expr .)
    ASSIGNLSHIFT    reduce using rule 235 (bitinv -> BITINV expr .)
    ASSIGNRSHIFT    reduce using rule 235 (bitinv -> BITINV expr .)
    ASSIGNRRSHIFT   reduce using rule 235 (bitinv -> BITINV expr .)
    ASSIGNLLSHIFT   reduce using rule 235 (bitinv -> BITINV expr .)
    ASSIGN          reduce using rule 235 (bitinv -> BITINV expr .)
    TLTHAN          reduce using rule 235 (bitinv -> BITINV expr .)
    SEMI            reduce using rule 235 (bitinv -> BITINV expr .)
    RPAREN          reduce using rule 235 (bitinv -> BITINV expr .)
    RSBRACKET       reduce using rule 235 (bitinv -> BITINV expr .)
    COLON           reduce using rule 235 (bitinv -> BITINV expr .)
    FUNCTION        reduce using rule 235 (bitinv -> BITINV expr .)
    CLASS           reduce using rule 235 (bitinv -> BITINV expr .)
    TYPED           reduce using rule 235 (bitinv -> BITINV expr .)
    IF              reduce using rule 235 (bitinv -> BITINV expr .)
    ELSE            reduce using rule 235 (bitinv -> BITINV expr .)
    WHILE           reduce using rule 235 (bitinv -> BITINV expr .)
    WITH            reduce using rule 235 (bitinv -> BITINV expr .)
    DO              reduce using rule 235 (bitinv -> BITINV expr .)
    FOR             reduce using rule 235 (bitinv -> BITINV expr .)
    RETURN          reduce using rule 235 (bitinv -> BITINV expr .)
    YIELD           reduce using rule 235 (bitinv -> BITINV expr .)
    BREAK           reduce using rule 235 (bitinv -> BITINV expr .)
    CONTINUE        reduce using rule 235 (bitinv -> BITINV expr .)
    THROW           reduce using rule 235 (bitinv -> BITINV expr .)
    TRY             reduce using rule 235 (bitinv -> BITINV expr .)
    CATCH           reduce using rule 235 (bitinv -> BITINV expr .)
    FINALLY         reduce using rule 235 (bitinv -> BITINV expr .)
    SWITCH          reduce using rule 235 (bitinv -> BITINV expr .)
    NATIVE          reduce using rule 235 (bitinv -> BITINV expr .)
    IMPORT          reduce using rule 235 (bitinv -> BITINV expr .)
    EXPORT          reduce using rule 235 (bitinv -> BITINV expr .)
    NUMBER          reduce using rule 235 (bitinv -> BITINV expr .)
    DELETE          reduce using rule 235 (bitinv -> BITINV expr .)
    STRINGLIT       reduce using rule 235 (bitinv -> BITINV expr .)
    ID              reduce using rule 235 (bitinv -> BITINV expr .)
    GET             reduce using rule 235 (bitinv -> BITINV expr .)
    SET             reduce using rule 235 (bitinv -> BITINV expr .)
    NOT             reduce using rule 235 (bitinv -> BITINV expr .)
    BITINV          reduce using rule 235 (bitinv -> BITINV expr .)
    NEW             reduce using rule 235 (bitinv -> BITINV expr .)
    TYPEOF          reduce using rule 235 (bitinv -> BITINV expr .)
    REGEXPR         reduce using rule 235 (bitinv -> BITINV expr .)
    GLOBAL          reduce using rule 235 (bitinv -> BITINV expr .)
    VAR             reduce using rule 235 (bitinv -> BITINV expr .)
    STATIC          reduce using rule 235 (bitinv -> BITINV expr .)
    LBRACKET        reduce using rule 235 (bitinv -> BITINV expr .)
    $end            reduce using rule 235 (bitinv -> BITINV expr .)
    RBRACKET        reduce using rule 235 (bitinv -> BITINV expr .)
    CASE            reduce using rule 235 (bitinv -> BITINV expr .)
    DEFAULT         reduce using rule 235 (bitinv -> BITINV expr .)
    OF              reduce using rule 235 (bitinv -> BITINV expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 235 (bitinv -> BITINV expr .) ]
  ! DOT             [ reduce using rule 235 (bitinv -> BITINV expr .) ]
  ! INC             [ reduce using rule 235 (bitinv -> BITINV expr .) ]
  ! DEC             [ reduce using rule 235 (bitinv -> BITINV expr .) ]
  ! LSBRACKET       [ reduce using rule 235 (bitinv -> BITINV expr .) ]
  ! LPAREN          [ reduce using rule 235 (bitinv -> BITINV expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 131 ]
  ! TIMES           [ shift and go to state 104 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 167

    (154) class -> CLASS id . template_opt class_tail
    (200) template_opt -> . template
    (201) template_opt -> .
    (76) template -> . lthan_restrict templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    EXTENDS         reduce using rule 201 (template_opt -> .)
    LBRACKET        reduce using rule 201 (template_opt -> .)
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 289
    template_opt                   shift and go to state 290
    template                       shift and go to state 288

state 168

    (54) statement_nonctrl -> funcref SEMI .

    SEMI            reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    FUNCTION        reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    CLASS           reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    TYPED           reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    IF              reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    ELSE            reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    WHILE           reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    WITH            reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    DO              reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    FOR             reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    RETURN          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    YIELD           reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    BREAK           reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    CONTINUE        reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    THROW           reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    TRY             reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    CATCH           reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    FINALLY         reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    SWITCH          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    NATIVE          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    IMPORT          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    EXPORT          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    NUMBER          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    DELETE          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    STRINGLIT       reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    ID              reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    GET             reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    SET             reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    LSBRACKET       reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    LPAREN          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    MINUS           reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    NOT             reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    BITINV          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    NEW             reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    INC             reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    DEC             reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    TYPEOF          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    REGEXPR         reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    GLOBAL          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    VAR             reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    STATIC          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    TLTHAN          reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    LBRACKET        reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    $end            reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    RBRACKET        reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    CASE            reduce using rule 54 (statement_nonctrl -> funcref SEMI .)
    DEFAULT         reduce using rule 54 (statement_nonctrl -> funcref SEMI .)


state 169

    (23) statement -> break SEMI .
    (63) statement_nonctrl -> break SEMI .

  ! reduce/reduce conflict for SEMI resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for CLASS resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for TYPED resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for FINALLY resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for IMPORT resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for EXPORT resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for GET resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for SET resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for STATIC resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 23 (statement -> break SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 23 (statement -> break SEMI .)
    SEMI            reduce using rule 23 (statement -> break SEMI .)
    FUNCTION        reduce using rule 23 (statement -> break SEMI .)
    CLASS           reduce using rule 23 (statement -> break SEMI .)
    TYPED           reduce using rule 23 (statement -> break SEMI .)
    IF              reduce using rule 23 (statement -> break SEMI .)
    ELSE            reduce using rule 23 (statement -> break SEMI .)
    WHILE           reduce using rule 23 (statement -> break SEMI .)
    WITH            reduce using rule 23 (statement -> break SEMI .)
    DO              reduce using rule 23 (statement -> break SEMI .)
    FOR             reduce using rule 23 (statement -> break SEMI .)
    RETURN          reduce using rule 23 (statement -> break SEMI .)
    YIELD           reduce using rule 23 (statement -> break SEMI .)
    BREAK           reduce using rule 23 (statement -> break SEMI .)
    CONTINUE        reduce using rule 23 (statement -> break SEMI .)
    THROW           reduce using rule 23 (statement -> break SEMI .)
    TRY             reduce using rule 23 (statement -> break SEMI .)
    CATCH           reduce using rule 23 (statement -> break SEMI .)
    FINALLY         reduce using rule 23 (statement -> break SEMI .)
    SWITCH          reduce using rule 23 (statement -> break SEMI .)
    NATIVE          reduce using rule 23 (statement -> break SEMI .)
    IMPORT          reduce using rule 23 (statement -> break SEMI .)
    EXPORT          reduce using rule 23 (statement -> break SEMI .)
    NUMBER          reduce using rule 23 (statement -> break SEMI .)
    DELETE          reduce using rule 23 (statement -> break SEMI .)
    STRINGLIT       reduce using rule 23 (statement -> break SEMI .)
    ID              reduce using rule 23 (statement -> break SEMI .)
    GET             reduce using rule 23 (statement -> break SEMI .)
    SET             reduce using rule 23 (statement -> break SEMI .)
    LSBRACKET       reduce using rule 23 (statement -> break SEMI .)
    LPAREN          reduce using rule 23 (statement -> break SEMI .)
    MINUS           reduce using rule 23 (statement -> break SEMI .)
    NOT             reduce using rule 23 (statement -> break SEMI .)
    BITINV          reduce using rule 23 (statement -> break SEMI .)
    NEW             reduce using rule 23 (statement -> break SEMI .)
    INC             reduce using rule 23 (statement -> break SEMI .)
    DEC             reduce using rule 23 (statement -> break SEMI .)
    TYPEOF          reduce using rule 23 (statement -> break SEMI .)
    REGEXPR         reduce using rule 23 (statement -> break SEMI .)
    GLOBAL          reduce using rule 23 (statement -> break SEMI .)
    VAR             reduce using rule 23 (statement -> break SEMI .)
    STATIC          reduce using rule 23 (statement -> break SEMI .)
    TLTHAN          reduce using rule 23 (statement -> break SEMI .)
    LBRACKET        reduce using rule 23 (statement -> break SEMI .)
    CASE            reduce using rule 23 (statement -> break SEMI .)
    RBRACKET        reduce using rule 23 (statement -> break SEMI .)
    DEFAULT         reduce using rule 23 (statement -> break SEMI .)
    $end            reduce using rule 23 (statement -> break SEMI .)

  ! SEMI            [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! FUNCTION        [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! CLASS           [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! TYPED           [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! IF              [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! ELSE            [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! WHILE           [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! WITH            [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! DO              [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! FOR             [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! RETURN          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! YIELD           [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! BREAK           [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! CONTINUE        [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! THROW           [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! TRY             [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! CATCH           [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! FINALLY         [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! SWITCH          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! NATIVE          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! IMPORT          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! EXPORT          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! NUMBER          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! DELETE          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! STRINGLIT       [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! ID              [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! GET             [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! SET             [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! LSBRACKET       [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! LPAREN          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! MINUS           [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! NOT             [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! BITINV          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! NEW             [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! INC             [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! DEC             [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! TYPEOF          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! REGEXPR         [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! GLOBAL          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! VAR             [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! STATIC          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! TLTHAN          [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! LBRACKET        [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! CASE            [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! RBRACKET        [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! DEFAULT         [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]
  ! $end            [ reduce using rule 63 (statement_nonctrl -> break SEMI .) ]


state 170

    (291) paren_expr -> LPAREN . expr RPAREN
    (292) paren_expr -> LPAREN . RPAREN
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    RPAREN          shift and go to state 292
    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 291
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 171

    (323) switch -> SWITCH paren_expr . LBRACKET case_block RBRACKET

    LBRACKET        shift and go to state 293


state 172

    (24) statement -> continue SEMI .
    (64) statement_nonctrl -> continue SEMI .

  ! reduce/reduce conflict for SEMI resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for CLASS resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for TYPED resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for FINALLY resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for IMPORT resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for EXPORT resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for GET resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for SET resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for STATIC resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 24 (statement -> continue SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 24 (statement -> continue SEMI .)
    SEMI            reduce using rule 24 (statement -> continue SEMI .)
    FUNCTION        reduce using rule 24 (statement -> continue SEMI .)
    CLASS           reduce using rule 24 (statement -> continue SEMI .)
    TYPED           reduce using rule 24 (statement -> continue SEMI .)
    IF              reduce using rule 24 (statement -> continue SEMI .)
    ELSE            reduce using rule 24 (statement -> continue SEMI .)
    WHILE           reduce using rule 24 (statement -> continue SEMI .)
    WITH            reduce using rule 24 (statement -> continue SEMI .)
    DO              reduce using rule 24 (statement -> continue SEMI .)
    FOR             reduce using rule 24 (statement -> continue SEMI .)
    RETURN          reduce using rule 24 (statement -> continue SEMI .)
    YIELD           reduce using rule 24 (statement -> continue SEMI .)
    BREAK           reduce using rule 24 (statement -> continue SEMI .)
    CONTINUE        reduce using rule 24 (statement -> continue SEMI .)
    THROW           reduce using rule 24 (statement -> continue SEMI .)
    TRY             reduce using rule 24 (statement -> continue SEMI .)
    CATCH           reduce using rule 24 (statement -> continue SEMI .)
    FINALLY         reduce using rule 24 (statement -> continue SEMI .)
    SWITCH          reduce using rule 24 (statement -> continue SEMI .)
    NATIVE          reduce using rule 24 (statement -> continue SEMI .)
    IMPORT          reduce using rule 24 (statement -> continue SEMI .)
    EXPORT          reduce using rule 24 (statement -> continue SEMI .)
    NUMBER          reduce using rule 24 (statement -> continue SEMI .)
    DELETE          reduce using rule 24 (statement -> continue SEMI .)
    STRINGLIT       reduce using rule 24 (statement -> continue SEMI .)
    ID              reduce using rule 24 (statement -> continue SEMI .)
    GET             reduce using rule 24 (statement -> continue SEMI .)
    SET             reduce using rule 24 (statement -> continue SEMI .)
    LSBRACKET       reduce using rule 24 (statement -> continue SEMI .)
    LPAREN          reduce using rule 24 (statement -> continue SEMI .)
    MINUS           reduce using rule 24 (statement -> continue SEMI .)
    NOT             reduce using rule 24 (statement -> continue SEMI .)
    BITINV          reduce using rule 24 (statement -> continue SEMI .)
    NEW             reduce using rule 24 (statement -> continue SEMI .)
    INC             reduce using rule 24 (statement -> continue SEMI .)
    DEC             reduce using rule 24 (statement -> continue SEMI .)
    TYPEOF          reduce using rule 24 (statement -> continue SEMI .)
    REGEXPR         reduce using rule 24 (statement -> continue SEMI .)
    GLOBAL          reduce using rule 24 (statement -> continue SEMI .)
    VAR             reduce using rule 24 (statement -> continue SEMI .)
    STATIC          reduce using rule 24 (statement -> continue SEMI .)
    TLTHAN          reduce using rule 24 (statement -> continue SEMI .)
    LBRACKET        reduce using rule 24 (statement -> continue SEMI .)
    CASE            reduce using rule 24 (statement -> continue SEMI .)
    RBRACKET        reduce using rule 24 (statement -> continue SEMI .)
    DEFAULT         reduce using rule 24 (statement -> continue SEMI .)
    $end            reduce using rule 24 (statement -> continue SEMI .)

  ! SEMI            [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! FUNCTION        [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! CLASS           [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! TYPED           [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! IF              [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! ELSE            [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! WHILE           [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! WITH            [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! DO              [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! FOR             [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! RETURN          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! YIELD           [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! BREAK           [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! CONTINUE        [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! THROW           [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! TRY             [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! CATCH           [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! FINALLY         [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! SWITCH          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! NATIVE          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! IMPORT          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! EXPORT          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! NUMBER          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! DELETE          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! STRINGLIT       [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! ID              [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! GET             [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! SET             [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! LSBRACKET       [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! LPAREN          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! MINUS           [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! NOT             [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! BITINV          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! NEW             [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! INC             [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! DEC             [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! TYPEOF          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! REGEXPR         [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! GLOBAL          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! VAR             [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! STATIC          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! TLTHAN          [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! LBRACKET        [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! CASE            [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! RBRACKET        [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! DEFAULT         [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]
  ! $end            [ reduce using rule 64 (statement_nonctrl -> continue SEMI .) ]


state 173

    (331) export_decl -> EXPORT export_clause . from_clause SEMI
    (332) export_decl -> EXPORT export_clause . SEMI
    (44) from_clause -> . FROM module_spec

    SEMI            shift and go to state 294
    FROM            shift and go to state 295

    from_clause                    shift and go to state 296

state 174

    (334) export_decl -> EXPORT function .

    SEMI            reduce using rule 334 (export_decl -> EXPORT function .)
    FUNCTION        reduce using rule 334 (export_decl -> EXPORT function .)
    CLASS           reduce using rule 334 (export_decl -> EXPORT function .)
    TYPED           reduce using rule 334 (export_decl -> EXPORT function .)
    IF              reduce using rule 334 (export_decl -> EXPORT function .)
    ELSE            reduce using rule 334 (export_decl -> EXPORT function .)
    WHILE           reduce using rule 334 (export_decl -> EXPORT function .)
    WITH            reduce using rule 334 (export_decl -> EXPORT function .)
    DO              reduce using rule 334 (export_decl -> EXPORT function .)
    FOR             reduce using rule 334 (export_decl -> EXPORT function .)
    RETURN          reduce using rule 334 (export_decl -> EXPORT function .)
    YIELD           reduce using rule 334 (export_decl -> EXPORT function .)
    BREAK           reduce using rule 334 (export_decl -> EXPORT function .)
    CONTINUE        reduce using rule 334 (export_decl -> EXPORT function .)
    THROW           reduce using rule 334 (export_decl -> EXPORT function .)
    TRY             reduce using rule 334 (export_decl -> EXPORT function .)
    CATCH           reduce using rule 334 (export_decl -> EXPORT function .)
    FINALLY         reduce using rule 334 (export_decl -> EXPORT function .)
    SWITCH          reduce using rule 334 (export_decl -> EXPORT function .)
    NATIVE          reduce using rule 334 (export_decl -> EXPORT function .)
    IMPORT          reduce using rule 334 (export_decl -> EXPORT function .)
    EXPORT          reduce using rule 334 (export_decl -> EXPORT function .)
    NUMBER          reduce using rule 334 (export_decl -> EXPORT function .)
    DELETE          reduce using rule 334 (export_decl -> EXPORT function .)
    STRINGLIT       reduce using rule 334 (export_decl -> EXPORT function .)
    ID              reduce using rule 334 (export_decl -> EXPORT function .)
    GET             reduce using rule 334 (export_decl -> EXPORT function .)
    SET             reduce using rule 334 (export_decl -> EXPORT function .)
    LSBRACKET       reduce using rule 334 (export_decl -> EXPORT function .)
    LPAREN          reduce using rule 334 (export_decl -> EXPORT function .)
    MINUS           reduce using rule 334 (export_decl -> EXPORT function .)
    NOT             reduce using rule 334 (export_decl -> EXPORT function .)
    BITINV          reduce using rule 334 (export_decl -> EXPORT function .)
    NEW             reduce using rule 334 (export_decl -> EXPORT function .)
    INC             reduce using rule 334 (export_decl -> EXPORT function .)
    DEC             reduce using rule 334 (export_decl -> EXPORT function .)
    TYPEOF          reduce using rule 334 (export_decl -> EXPORT function .)
    REGEXPR         reduce using rule 334 (export_decl -> EXPORT function .)
    GLOBAL          reduce using rule 334 (export_decl -> EXPORT function .)
    VAR             reduce using rule 334 (export_decl -> EXPORT function .)
    STATIC          reduce using rule 334 (export_decl -> EXPORT function .)
    TLTHAN          reduce using rule 334 (export_decl -> EXPORT function .)
    LBRACKET        reduce using rule 334 (export_decl -> EXPORT function .)
    RBRACKET        reduce using rule 334 (export_decl -> EXPORT function .)
    CASE            reduce using rule 334 (export_decl -> EXPORT function .)
    DEFAULT         reduce using rule 334 (export_decl -> EXPORT function .)
    $end            reduce using rule 334 (export_decl -> EXPORT function .)


state 175

    (336) export_decl -> EXPORT DEFAULT . function
    (337) export_decl -> EXPORT DEFAULT . class
    (338) export_decl -> EXPORT DEFAULT . assign
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (139) assign -> . expr cmplx_assign expr
    (140) assign -> . assign cmplx_assign expr
    (141) assign -> . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    FUNCTION        shift and go to state 299
    CLASS           shift and go to state 20
    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    assign                         shift and go to state 301
    template_ref                   shift and go to state 13
    expr                           shift and go to state 297
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    function                       shift and go to state 298
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    class                          shift and go to state 300
    re_lit                         shift and go to state 8
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16

state 176

    (339) export_clause -> LBRACKET . RBRACKET
    (340) export_clause -> LBRACKET . exports_list RBRACKET
    (341) export_clause -> LBRACKET . exports_list COMMA RBRACKET
    (342) exports_list -> . export_spec
    (343) exports_list -> . exports_list COMMA export_spec
    (344) export_spec -> . ID
    (345) export_spec -> . ID ID ID

    RBRACKET        shift and go to state 305
    ID              shift and go to state 303

    exports_list                   shift and go to state 302
    export_spec                    shift and go to state 304

state 177

    (335) export_decl -> EXPORT class .

    SEMI            reduce using rule 335 (export_decl -> EXPORT class .)
    FUNCTION        reduce using rule 335 (export_decl -> EXPORT class .)
    CLASS           reduce using rule 335 (export_decl -> EXPORT class .)
    TYPED           reduce using rule 335 (export_decl -> EXPORT class .)
    IF              reduce using rule 335 (export_decl -> EXPORT class .)
    ELSE            reduce using rule 335 (export_decl -> EXPORT class .)
    WHILE           reduce using rule 335 (export_decl -> EXPORT class .)
    WITH            reduce using rule 335 (export_decl -> EXPORT class .)
    DO              reduce using rule 335 (export_decl -> EXPORT class .)
    FOR             reduce using rule 335 (export_decl -> EXPORT class .)
    RETURN          reduce using rule 335 (export_decl -> EXPORT class .)
    YIELD           reduce using rule 335 (export_decl -> EXPORT class .)
    BREAK           reduce using rule 335 (export_decl -> EXPORT class .)
    CONTINUE        reduce using rule 335 (export_decl -> EXPORT class .)
    THROW           reduce using rule 335 (export_decl -> EXPORT class .)
    TRY             reduce using rule 335 (export_decl -> EXPORT class .)
    CATCH           reduce using rule 335 (export_decl -> EXPORT class .)
    FINALLY         reduce using rule 335 (export_decl -> EXPORT class .)
    SWITCH          reduce using rule 335 (export_decl -> EXPORT class .)
    NATIVE          reduce using rule 335 (export_decl -> EXPORT class .)
    IMPORT          reduce using rule 335 (export_decl -> EXPORT class .)
    EXPORT          reduce using rule 335 (export_decl -> EXPORT class .)
    NUMBER          reduce using rule 335 (export_decl -> EXPORT class .)
    DELETE          reduce using rule 335 (export_decl -> EXPORT class .)
    STRINGLIT       reduce using rule 335 (export_decl -> EXPORT class .)
    ID              reduce using rule 335 (export_decl -> EXPORT class .)
    GET             reduce using rule 335 (export_decl -> EXPORT class .)
    SET             reduce using rule 335 (export_decl -> EXPORT class .)
    LSBRACKET       reduce using rule 335 (export_decl -> EXPORT class .)
    LPAREN          reduce using rule 335 (export_decl -> EXPORT class .)
    MINUS           reduce using rule 335 (export_decl -> EXPORT class .)
    NOT             reduce using rule 335 (export_decl -> EXPORT class .)
    BITINV          reduce using rule 335 (export_decl -> EXPORT class .)
    NEW             reduce using rule 335 (export_decl -> EXPORT class .)
    INC             reduce using rule 335 (export_decl -> EXPORT class .)
    DEC             reduce using rule 335 (export_decl -> EXPORT class .)
    TYPEOF          reduce using rule 335 (export_decl -> EXPORT class .)
    REGEXPR         reduce using rule 335 (export_decl -> EXPORT class .)
    GLOBAL          reduce using rule 335 (export_decl -> EXPORT class .)
    VAR             reduce using rule 335 (export_decl -> EXPORT class .)
    STATIC          reduce using rule 335 (export_decl -> EXPORT class .)
    TLTHAN          reduce using rule 335 (export_decl -> EXPORT class .)
    LBRACKET        reduce using rule 335 (export_decl -> EXPORT class .)
    RBRACKET        reduce using rule 335 (export_decl -> EXPORT class .)
    CASE            reduce using rule 335 (export_decl -> EXPORT class .)
    DEFAULT         reduce using rule 335 (export_decl -> EXPORT class .)
    $end            reduce using rule 335 (export_decl -> EXPORT class .)


state 178

    (330) export_decl -> EXPORT TIMES . from_clause SEMI
    (44) from_clause -> . FROM module_spec

    FROM            shift and go to state 295

    from_clause                    shift and go to state 306

state 179

    (333) export_decl -> EXPORT var_decl . SEMI
    (97) var_decl -> var_decl . ASSIGN expr
    (98) var_decl -> var_decl . COMMA id
    (99) var_decl -> var_decl . COMMA id ASSIGN expr

    SEMI            shift and go to state 307
    ASSIGN          shift and go to state 194
    COMMA           shift and go to state 192


state 180

    (206) function -> FUNCTION . id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 308

state 181

    (33) import_decl -> IMPORT import_clause . from_clause SEMI
    (44) from_clause -> . FROM module_spec

    FROM            shift and go to state 295

    from_clause                    shift and go to state 309

state 182

    (34) import_decl -> IMPORT module_spec . SEMI

    SEMI            shift and go to state 310


state 183

    (42) named_imports -> LBRACKET . RBRACKET
    (43) named_imports -> LBRACKET . import_list RBRACKET
    (45) import_list -> . import_spec
    (46) import_list -> . import_list COMMA import_spec
    (47) import_spec -> . import_bind
    (48) import_spec -> . ID ID import_bind
    (49) import_bind -> . binding_ident
    (51) binding_ident -> . ID

    RBRACKET        shift and go to state 314
    ID              shift and go to state 315

    import_list                    shift and go to state 312
    import_bind                    shift and go to state 313
    binding_ident                  shift and go to state 187
    import_spec                    shift and go to state 311

state 184

    (41) name_space_import -> TIMES . ID import_bind

    ID              shift and go to state 316


state 185

    (51) binding_ident -> ID .

    RBRACKET        reduce using rule 51 (binding_ident -> ID .)
    COMMA           reduce using rule 51 (binding_ident -> ID .)
    FROM            reduce using rule 51 (binding_ident -> ID .)


state 186

    (36) import_clause -> name_space_import .

    FROM            reduce using rule 36 (import_clause -> name_space_import .)


state 187

    (49) import_bind -> binding_ident .

    COMMA           reduce using rule 49 (import_bind -> binding_ident .)
    FROM            reduce using rule 49 (import_bind -> binding_ident .)
    RBRACKET        reduce using rule 49 (import_bind -> binding_ident .)


state 188

    (37) import_clause -> named_imports .

    FROM            reduce using rule 37 (import_clause -> named_imports .)


state 189

    (40) import_def_bind -> import_bind .

    COMMA           reduce using rule 40 (import_def_bind -> import_bind .)
    FROM            reduce using rule 40 (import_def_bind -> import_bind .)


state 190

    (50) module_spec -> STRINGLIT .

    SEMI            reduce using rule 50 (module_spec -> STRINGLIT .)


state 191

    (35) import_clause -> import_def_bind .
    (38) import_clause -> import_def_bind . COMMA name_space_import
    (39) import_clause -> import_def_bind . COMMA named_imports

    FROM            reduce using rule 35 (import_clause -> import_def_bind .)
    COMMA           shift and go to state 317


state 192

    (98) var_decl -> var_decl COMMA . id
    (99) var_decl -> var_decl COMMA . id ASSIGN expr
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 318

state 193

    (53) statement_nonctrl -> var_decl SEMI .

    SEMI            reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    FUNCTION        reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    CLASS           reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    TYPED           reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    IF              reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    ELSE            reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    WHILE           reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    WITH            reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    DO              reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    FOR             reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    RETURN          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    YIELD           reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    BREAK           reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    CONTINUE        reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    THROW           reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    TRY             reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    CATCH           reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    FINALLY         reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    SWITCH          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    NATIVE          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    IMPORT          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    EXPORT          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    NUMBER          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    DELETE          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    STRINGLIT       reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    ID              reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    GET             reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    SET             reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    LSBRACKET       reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    LPAREN          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    MINUS           reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    NOT             reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    BITINV          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    NEW             reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    INC             reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    DEC             reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    TYPEOF          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    REGEXPR         reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    GLOBAL          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    VAR             reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    STATIC          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    TLTHAN          reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    LBRACKET        reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    $end            reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    RBRACKET        reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    CASE            reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)
    DEFAULT         reduce using rule 53 (statement_nonctrl -> var_decl SEMI .)


state 194

    (97) var_decl -> var_decl ASSIGN . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 319
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 195

    (346) catch -> CATCH paren_expr . statement_nonctrl
    (347) catch -> CATCH paren_expr . LBRACKET statementlist RBRACKET
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 320
    SEMI            shift and go to state 44
    NUMBER          shift and go to state 29
    FUNCTION        shift and go to state 150
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    FOR             shift and go to state 68
    DO              shift and go to state 41
    WHILE           shift and go to state 73
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    delete                         shift and go to state 51
    yield                          shift and go to state 152
    for                            shift and go to state 141
    else                           shift and go to state 157
    re_lit                         shift and go to state 8
    return                         shift and go to state 142
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 321
    template_ref                   shift and go to state 13
    type_modifiers                 shift and go to state 53
    not                            shift and go to state 15
    dec                            shift and go to state 66
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 144
    new                            shift and go to state 48
    while                          shift and go to state 143
    catch                          shift and go to state 155
    funcref                        shift and go to state 24
    throw                          shift and go to state 145
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    break                          shift and go to state 156
    finally                        shift and go to state 146
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 140
    bitinv                         shift and go to state 32
    continue                       shift and go to state 149
    strlit                         shift and go to state 79
    var_decl                       shift and go to state 37
    typeof                         shift and go to state 81
    try                            shift and go to state 154
    inc                            shift and go to state 86

state 196

    (222) typeof -> TYPEOF expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    RSHIFT          reduce using rule 222 (typeof -> TYPEOF expr .)
    LSHIFT          reduce using rule 222 (typeof -> TYPEOF expr .)
    LLSHIFT         reduce using rule 222 (typeof -> TYPEOF expr .)
    RRSHIFT         reduce using rule 222 (typeof -> TYPEOF expr .)
    LAND            reduce using rule 222 (typeof -> TYPEOF expr .)
    LOR             reduce using rule 222 (typeof -> TYPEOF expr .)
    BOR             reduce using rule 222 (typeof -> TYPEOF expr .)
    INSTANCEOF      reduce using rule 222 (typeof -> TYPEOF expr .)
    BXOR            reduce using rule 222 (typeof -> TYPEOF expr .)
    BAND            reduce using rule 222 (typeof -> TYPEOF expr .)
    EQUAL           reduce using rule 222 (typeof -> TYPEOF expr .)
    EQUAL_STRICT    reduce using rule 222 (typeof -> TYPEOF expr .)
    NOTEQUAL_STRICT reduce using rule 222 (typeof -> TYPEOF expr .)
    GTHAN           reduce using rule 222 (typeof -> TYPEOF expr .)
    GTHANEQ         reduce using rule 222 (typeof -> TYPEOF expr .)
    LTHAN           reduce using rule 222 (typeof -> TYPEOF expr .)
    MOD             reduce using rule 222 (typeof -> TYPEOF expr .)
    LTHANEQ         reduce using rule 222 (typeof -> TYPEOF expr .)
    NOTEQUAL        reduce using rule 222 (typeof -> TYPEOF expr .)
    PLUS            reduce using rule 222 (typeof -> TYPEOF expr .)
    MINUS           reduce using rule 222 (typeof -> TYPEOF expr .)
    DIVIDE          reduce using rule 222 (typeof -> TYPEOF expr .)
    TIMES           reduce using rule 222 (typeof -> TYPEOF expr .)
    IN              reduce using rule 222 (typeof -> TYPEOF expr .)
    QEST            reduce using rule 222 (typeof -> TYPEOF expr .)
    COMMA           reduce using rule 222 (typeof -> TYPEOF expr .)
    ASSIGNPLUS      reduce using rule 222 (typeof -> TYPEOF expr .)
    ASSIGNMINUS     reduce using rule 222 (typeof -> TYPEOF expr .)
    ASSIGNDIVIDE    reduce using rule 222 (typeof -> TYPEOF expr .)
    ASSIGNTIMES     reduce using rule 222 (typeof -> TYPEOF expr .)
    ASSIGNBOR       reduce using rule 222 (typeof -> TYPEOF expr .)
    ASSIGNBAND      reduce using rule 222 (typeof -> TYPEOF expr .)
    ASSIGNBXOR      reduce using rule 222 (typeof -> TYPEOF expr .)
    ASSIGNLSHIFT    reduce using rule 222 (typeof -> TYPEOF expr .)
    ASSIGNRSHIFT    reduce using rule 222 (typeof -> TYPEOF expr .)
    ASSIGNRRSHIFT   reduce using rule 222 (typeof -> TYPEOF expr .)
    ASSIGNLLSHIFT   reduce using rule 222 (typeof -> TYPEOF expr .)
    ASSIGN          reduce using rule 222 (typeof -> TYPEOF expr .)
    TLTHAN          reduce using rule 222 (typeof -> TYPEOF expr .)
    SEMI            reduce using rule 222 (typeof -> TYPEOF expr .)
    RPAREN          reduce using rule 222 (typeof -> TYPEOF expr .)
    RSBRACKET       reduce using rule 222 (typeof -> TYPEOF expr .)
    COLON           reduce using rule 222 (typeof -> TYPEOF expr .)
    FUNCTION        reduce using rule 222 (typeof -> TYPEOF expr .)
    CLASS           reduce using rule 222 (typeof -> TYPEOF expr .)
    TYPED           reduce using rule 222 (typeof -> TYPEOF expr .)
    IF              reduce using rule 222 (typeof -> TYPEOF expr .)
    ELSE            reduce using rule 222 (typeof -> TYPEOF expr .)
    WHILE           reduce using rule 222 (typeof -> TYPEOF expr .)
    WITH            reduce using rule 222 (typeof -> TYPEOF expr .)
    DO              reduce using rule 222 (typeof -> TYPEOF expr .)
    FOR             reduce using rule 222 (typeof -> TYPEOF expr .)
    RETURN          reduce using rule 222 (typeof -> TYPEOF expr .)
    YIELD           reduce using rule 222 (typeof -> TYPEOF expr .)
    BREAK           reduce using rule 222 (typeof -> TYPEOF expr .)
    CONTINUE        reduce using rule 222 (typeof -> TYPEOF expr .)
    THROW           reduce using rule 222 (typeof -> TYPEOF expr .)
    TRY             reduce using rule 222 (typeof -> TYPEOF expr .)
    CATCH           reduce using rule 222 (typeof -> TYPEOF expr .)
    FINALLY         reduce using rule 222 (typeof -> TYPEOF expr .)
    SWITCH          reduce using rule 222 (typeof -> TYPEOF expr .)
    NATIVE          reduce using rule 222 (typeof -> TYPEOF expr .)
    IMPORT          reduce using rule 222 (typeof -> TYPEOF expr .)
    EXPORT          reduce using rule 222 (typeof -> TYPEOF expr .)
    NUMBER          reduce using rule 222 (typeof -> TYPEOF expr .)
    DELETE          reduce using rule 222 (typeof -> TYPEOF expr .)
    STRINGLIT       reduce using rule 222 (typeof -> TYPEOF expr .)
    ID              reduce using rule 222 (typeof -> TYPEOF expr .)
    GET             reduce using rule 222 (typeof -> TYPEOF expr .)
    SET             reduce using rule 222 (typeof -> TYPEOF expr .)
    NOT             reduce using rule 222 (typeof -> TYPEOF expr .)
    BITINV          reduce using rule 222 (typeof -> TYPEOF expr .)
    NEW             reduce using rule 222 (typeof -> TYPEOF expr .)
    TYPEOF          reduce using rule 222 (typeof -> TYPEOF expr .)
    REGEXPR         reduce using rule 222 (typeof -> TYPEOF expr .)
    GLOBAL          reduce using rule 222 (typeof -> TYPEOF expr .)
    VAR             reduce using rule 222 (typeof -> TYPEOF expr .)
    STATIC          reduce using rule 222 (typeof -> TYPEOF expr .)
    LBRACKET        reduce using rule 222 (typeof -> TYPEOF expr .)
    $end            reduce using rule 222 (typeof -> TYPEOF expr .)
    RBRACKET        reduce using rule 222 (typeof -> TYPEOF expr .)
    CASE            reduce using rule 222 (typeof -> TYPEOF expr .)
    DEFAULT         reduce using rule 222 (typeof -> TYPEOF expr .)
    OF              reduce using rule 222 (typeof -> TYPEOF expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 222 (typeof -> TYPEOF expr .) ]
  ! DOT             [ reduce using rule 222 (typeof -> TYPEOF expr .) ]
  ! INC             [ reduce using rule 222 (typeof -> TYPEOF expr .) ]
  ! DEC             [ reduce using rule 222 (typeof -> TYPEOF expr .) ]
  ! LSBRACKET       [ reduce using rule 222 (typeof -> TYPEOF expr .) ]
  ! LPAREN          [ reduce using rule 222 (typeof -> TYPEOF expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 131 ]
  ! TIMES           [ shift and go to state 104 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 197

    (310) dowhile -> DO ctrl_statement . WHILE paren_expr

    WHILE           shift and go to state 322


state 198

    (233) dec -> DEC expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    SEMI            reduce using rule 233 (dec -> DEC expr .)
    RSHIFT          reduce using rule 233 (dec -> DEC expr .)
    LSHIFT          reduce using rule 233 (dec -> DEC expr .)
    LLSHIFT         reduce using rule 233 (dec -> DEC expr .)
    RRSHIFT         reduce using rule 233 (dec -> DEC expr .)
    LAND            reduce using rule 233 (dec -> DEC expr .)
    LOR             reduce using rule 233 (dec -> DEC expr .)
    BOR             reduce using rule 233 (dec -> DEC expr .)
    INSTANCEOF      reduce using rule 233 (dec -> DEC expr .)
    BXOR            reduce using rule 233 (dec -> DEC expr .)
    BAND            reduce using rule 233 (dec -> DEC expr .)
    EQUAL           reduce using rule 233 (dec -> DEC expr .)
    EQUAL_STRICT    reduce using rule 233 (dec -> DEC expr .)
    NOTEQUAL_STRICT reduce using rule 233 (dec -> DEC expr .)
    GTHAN           reduce using rule 233 (dec -> DEC expr .)
    GTHANEQ         reduce using rule 233 (dec -> DEC expr .)
    LTHAN           reduce using rule 233 (dec -> DEC expr .)
    MOD             reduce using rule 233 (dec -> DEC expr .)
    LTHANEQ         reduce using rule 233 (dec -> DEC expr .)
    NOTEQUAL        reduce using rule 233 (dec -> DEC expr .)
    PLUS            reduce using rule 233 (dec -> DEC expr .)
    MINUS           reduce using rule 233 (dec -> DEC expr .)
    DIVIDE          reduce using rule 233 (dec -> DEC expr .)
    TIMES           reduce using rule 233 (dec -> DEC expr .)
    IN              reduce using rule 233 (dec -> DEC expr .)
    QEST            reduce using rule 233 (dec -> DEC expr .)
    COMMA           reduce using rule 233 (dec -> DEC expr .)
    INC             reduce using rule 233 (dec -> DEC expr .)
    DEC             reduce using rule 233 (dec -> DEC expr .)
    ASSIGNPLUS      reduce using rule 233 (dec -> DEC expr .)
    ASSIGNMINUS     reduce using rule 233 (dec -> DEC expr .)
    ASSIGNDIVIDE    reduce using rule 233 (dec -> DEC expr .)
    ASSIGNTIMES     reduce using rule 233 (dec -> DEC expr .)
    ASSIGNBOR       reduce using rule 233 (dec -> DEC expr .)
    ASSIGNBAND      reduce using rule 233 (dec -> DEC expr .)
    ASSIGNBXOR      reduce using rule 233 (dec -> DEC expr .)
    ASSIGNLSHIFT    reduce using rule 233 (dec -> DEC expr .)
    ASSIGNRSHIFT    reduce using rule 233 (dec -> DEC expr .)
    ASSIGNRRSHIFT   reduce using rule 233 (dec -> DEC expr .)
    ASSIGNLLSHIFT   reduce using rule 233 (dec -> DEC expr .)
    ASSIGN          reduce using rule 233 (dec -> DEC expr .)
    LSBRACKET       reduce using rule 233 (dec -> DEC expr .)
    TLTHAN          reduce using rule 233 (dec -> DEC expr .)
    RSBRACKET       reduce using rule 233 (dec -> DEC expr .)
    RPAREN          reduce using rule 233 (dec -> DEC expr .)
    COLON           reduce using rule 233 (dec -> DEC expr .)
    FUNCTION        reduce using rule 233 (dec -> DEC expr .)
    CLASS           reduce using rule 233 (dec -> DEC expr .)
    TYPED           reduce using rule 233 (dec -> DEC expr .)
    IF              reduce using rule 233 (dec -> DEC expr .)
    ELSE            reduce using rule 233 (dec -> DEC expr .)
    WHILE           reduce using rule 233 (dec -> DEC expr .)
    WITH            reduce using rule 233 (dec -> DEC expr .)
    DO              reduce using rule 233 (dec -> DEC expr .)
    FOR             reduce using rule 233 (dec -> DEC expr .)
    RETURN          reduce using rule 233 (dec -> DEC expr .)
    YIELD           reduce using rule 233 (dec -> DEC expr .)
    BREAK           reduce using rule 233 (dec -> DEC expr .)
    CONTINUE        reduce using rule 233 (dec -> DEC expr .)
    THROW           reduce using rule 233 (dec -> DEC expr .)
    TRY             reduce using rule 233 (dec -> DEC expr .)
    CATCH           reduce using rule 233 (dec -> DEC expr .)
    FINALLY         reduce using rule 233 (dec -> DEC expr .)
    SWITCH          reduce using rule 233 (dec -> DEC expr .)
    NATIVE          reduce using rule 233 (dec -> DEC expr .)
    IMPORT          reduce using rule 233 (dec -> DEC expr .)
    EXPORT          reduce using rule 233 (dec -> DEC expr .)
    NUMBER          reduce using rule 233 (dec -> DEC expr .)
    DELETE          reduce using rule 233 (dec -> DEC expr .)
    STRINGLIT       reduce using rule 233 (dec -> DEC expr .)
    ID              reduce using rule 233 (dec -> DEC expr .)
    GET             reduce using rule 233 (dec -> DEC expr .)
    SET             reduce using rule 233 (dec -> DEC expr .)
    NOT             reduce using rule 233 (dec -> DEC expr .)
    BITINV          reduce using rule 233 (dec -> DEC expr .)
    NEW             reduce using rule 233 (dec -> DEC expr .)
    TYPEOF          reduce using rule 233 (dec -> DEC expr .)
    REGEXPR         reduce using rule 233 (dec -> DEC expr .)
    GLOBAL          reduce using rule 233 (dec -> DEC expr .)
    VAR             reduce using rule 233 (dec -> DEC expr .)
    STATIC          reduce using rule 233 (dec -> DEC expr .)
    LBRACKET        reduce using rule 233 (dec -> DEC expr .)
    $end            reduce using rule 233 (dec -> DEC expr .)
    RBRACKET        reduce using rule 233 (dec -> DEC expr .)
    CASE            reduce using rule 233 (dec -> DEC expr .)
    DEFAULT         reduce using rule 233 (dec -> DEC expr .)
    OF              reduce using rule 233 (dec -> DEC expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 233 (dec -> DEC expr .) ]
  ! DOT             [ reduce using rule 233 (dec -> DEC expr .) ]
  ! LPAREN          [ reduce using rule 233 (dec -> DEC expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 131 ]
  ! TIMES           [ shift and go to state 104 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! INC             [ shift and go to state 128 ]
  ! DEC             [ shift and go to state 137 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! LSBRACKET       [ shift and go to state 100 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 199

    (324) with -> WITH paren_expr . ctrl_statement
    (307) ctrl_statement -> . statement_nonctrl
    (308) ctrl_statement -> . LBRACKET statementlist_opt RBRACKET
    (309) ctrl_statement -> . SEMI
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 147
    SEMI            shift and go to state 151
    NUMBER          shift and go to state 29
    FUNCTION        shift and go to state 150
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    FOR             shift and go to state 68
    DO              shift and go to state 41
    WHILE           shift and go to state 73
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    delete                         shift and go to state 51
    yield                          shift and go to state 152
    for                            shift and go to state 141
    else                           shift and go to state 157
    re_lit                         shift and go to state 8
    return                         shift and go to state 142
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 153
    template_ref                   shift and go to state 13
    type_modifiers                 shift and go to state 53
    not                            shift and go to state 15
    dec                            shift and go to state 66
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 144
    new                            shift and go to state 48
    while                          shift and go to state 143
    catch                          shift and go to state 155
    funcref                        shift and go to state 24
    throw                          shift and go to state 145
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    break                          shift and go to state 156
    finally                        shift and go to state 146
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 140
    bitinv                         shift and go to state 32
    ctrl_statement                 shift and go to state 323
    continue                       shift and go to state 149
    strlit                         shift and go to state 79
    var_decl                       shift and go to state 37
    typeof                         shift and go to state 81
    try                            shift and go to state 154
    inc                            shift and go to state 86

state 200

    (355) id -> ID .
    (213) func_name_opt -> ID .

  ! reduce/reduce conflict for TLTHAN resolved using rule 213 (func_name_opt -> ID .)
  ! reduce/reduce conflict for LPAREN resolved using rule 213 (func_name_opt -> ID .)
    TLTHAN          reduce using rule 213 (func_name_opt -> ID .)
    LPAREN          reduce using rule 213 (func_name_opt -> ID .)

  ! TLTHAN          [ reduce using rule 355 (id -> ID .) ]
  ! LPAREN          [ reduce using rule 355 (id -> ID .) ]


state 201

    (206) function -> FUNCTION id . template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (204) funcref -> FUNCTION id . template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (200) template_opt -> . template
    (201) template_opt -> .
    (76) template -> . lthan_restrict templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 201 (template_opt -> .)
    TLTHAN          shift and go to state 21

    template                       shift and go to state 288
    lthan_restrict                 shift and go to state 289
    template_opt                   shift and go to state 324

state 202

    (215) exprfunction -> FUNCTION func_name_opt . template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> FUNCTION func_name_opt . template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (200) template_opt -> . template
    (201) template_opt -> .
    (76) template -> . lthan_restrict templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 201 (template_opt -> .)
    TLTHAN          shift and go to state 21

    template                       shift and go to state 288
    lthan_restrict                 shift and go to state 289
    template_opt                   shift and go to state 325

state 203

    (226) obj_literal -> lbracket_restrict push_scope . obj_lit_list rbracket_restrict
    (223) obj_lit_list -> . id_str_or_num COLON expr
    (224) obj_lit_list -> . obj_lit_list COMMA id_str_or_num COLON expr
    (225) obj_lit_list -> . obj_lit_list COMMA
    (219) id_str_or_num -> . id
    (220) id_str_or_num -> . NUMBER
    (221) id_str_or_num -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    NUMBER          shift and go to state 327
    STRINGLIT       shift and go to state 330
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 329
    obj_lit_list                   shift and go to state 328
    id_str_or_num                  shift and go to state 326

state 204

    (208) rbracket_restrict -> RBRACKET .

    SEMI            reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    RSHIFT          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    LSHIFT          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    LLSHIFT         reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    RRSHIFT         reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    COND_DOT        reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    DOT             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    LAND            reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    LOR             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    BOR             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    INSTANCEOF      reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    BXOR            reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    BAND            reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    EQUAL           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    EQUAL_STRICT    reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    NOTEQUAL_STRICT reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    GTHAN           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    GTHANEQ         reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    LTHAN           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    MOD             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    LTHANEQ         reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    NOTEQUAL        reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    PLUS            reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    MINUS           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    DIVIDE          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    TIMES           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    IN              reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    QEST            reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    COMMA           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    INC             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    DEC             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ASSIGNPLUS      reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ASSIGNMINUS     reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ASSIGNDIVIDE    reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ASSIGNTIMES     reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ASSIGNBOR       reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ASSIGNBAND      reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ASSIGNBXOR      reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ASSIGNLSHIFT    reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ASSIGNRSHIFT    reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ASSIGNRRSHIFT   reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ASSIGNLLSHIFT   reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ASSIGN          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    LSBRACKET       reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    TLTHAN          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    LPAREN          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    RPAREN          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    RSBRACKET       reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    COLON           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    FUNCTION        reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    CLASS           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    TYPED           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    IF              reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ELSE            reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    WHILE           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    WITH            reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    DO              reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    FOR             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    RETURN          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    YIELD           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    BREAK           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    CONTINUE        reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    THROW           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    TRY             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    CATCH           reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    FINALLY         reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    SWITCH          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    NATIVE          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    IMPORT          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    EXPORT          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    NUMBER          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    DELETE          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    STRINGLIT       reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    ID              reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    GET             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    SET             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    NOT             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    BITINV          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    NEW             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    TYPEOF          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    REGEXPR         reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    GLOBAL          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    VAR             reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    STATIC          reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    LBRACKET        reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    $end            reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    RBRACKET        reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    CASE            reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    DEFAULT         reduce using rule 208 (rbracket_restrict -> RBRACKET .)
    OF              reduce using rule 208 (rbracket_restrict -> RBRACKET .)


state 205

    (227) obj_literal -> lbracket_restrict rbracket_restrict .

    SEMI            reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RSHIFT          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LSHIFT          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LLSHIFT         reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RRSHIFT         reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    COND_DOT        reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    DOT             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LAND            reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LOR             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    BOR             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    INSTANCEOF      reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    BXOR            reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    BAND            reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    EQUAL           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    EQUAL_STRICT    reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    GTHAN           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    GTHANEQ         reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LTHAN           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    MOD             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LTHANEQ         reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    NOTEQUAL        reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    PLUS            reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    MINUS           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    DIVIDE          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    TIMES           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    IN              reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    QEST            reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    COMMA           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    INC             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    DEC             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNPLUS      reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNMINUS     reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNTIMES     reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNBOR       reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNBAND      reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNBXOR      reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNLSHIFT    reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNRSHIFT    reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNRRSHIFT   reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNLLSHIFT   reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGN          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LSBRACKET       reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    TLTHAN          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LPAREN          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RPAREN          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RSBRACKET       reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    COLON           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    FUNCTION        reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    CLASS           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    TYPED           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    IF              reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ELSE            reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    WHILE           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    WITH            reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    DO              reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    FOR             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RETURN          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    YIELD           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    BREAK           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    CONTINUE        reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    THROW           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    TRY             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    CATCH           reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    FINALLY         reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    SWITCH          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    NATIVE          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    IMPORT          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    EXPORT          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    NUMBER          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    DELETE          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    STRINGLIT       reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ID              reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    GET             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    SET             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    NOT             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    BITINV          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    NEW             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    TYPEOF          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    REGEXPR         reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    GLOBAL          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    VAR             reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    STATIC          reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LBRACKET        reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    $end            reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RBRACKET        reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    CASE            reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    DEFAULT         reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)
    OF              reduce using rule 227 (obj_literal -> lbracket_restrict rbracket_restrict .)


state 206

    (69) statement_nonctrl -> delete SEMI .

    SEMI            reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    FUNCTION        reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    CLASS           reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    TYPED           reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    IF              reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    ELSE            reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    WHILE           reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    WITH            reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    DO              reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    FOR             reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    RETURN          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    YIELD           reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    BREAK           reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    CONTINUE        reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    THROW           reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    TRY             reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    CATCH           reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    FINALLY         reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    SWITCH          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    NATIVE          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    IMPORT          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    EXPORT          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    NUMBER          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    DELETE          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    STRINGLIT       reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    ID              reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    GET             reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    SET             reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    LSBRACKET       reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    LPAREN          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    MINUS           reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    NOT             reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    BITINV          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    NEW             reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    INC             reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    DEC             reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    TYPEOF          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    REGEXPR         reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    GLOBAL          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    VAR             reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    STATIC          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    TLTHAN          reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    LBRACKET        reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    $end            reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    RBRACKET        reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    CASE            reduce using rule 69 (statement_nonctrl -> delete SEMI .)
    DEFAULT         reduce using rule 69 (statement_nonctrl -> delete SEMI .)


state 207

    (22) statement -> yield SEMI .
    (62) statement_nonctrl -> yield SEMI .

  ! reduce/reduce conflict for SEMI resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for CLASS resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for TYPED resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for FINALLY resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for IMPORT resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for EXPORT resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for GET resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for SET resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for STATIC resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 22 (statement -> yield SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 22 (statement -> yield SEMI .)
    SEMI            reduce using rule 22 (statement -> yield SEMI .)
    FUNCTION        reduce using rule 22 (statement -> yield SEMI .)
    CLASS           reduce using rule 22 (statement -> yield SEMI .)
    TYPED           reduce using rule 22 (statement -> yield SEMI .)
    IF              reduce using rule 22 (statement -> yield SEMI .)
    ELSE            reduce using rule 22 (statement -> yield SEMI .)
    WHILE           reduce using rule 22 (statement -> yield SEMI .)
    WITH            reduce using rule 22 (statement -> yield SEMI .)
    DO              reduce using rule 22 (statement -> yield SEMI .)
    FOR             reduce using rule 22 (statement -> yield SEMI .)
    RETURN          reduce using rule 22 (statement -> yield SEMI .)
    YIELD           reduce using rule 22 (statement -> yield SEMI .)
    BREAK           reduce using rule 22 (statement -> yield SEMI .)
    CONTINUE        reduce using rule 22 (statement -> yield SEMI .)
    THROW           reduce using rule 22 (statement -> yield SEMI .)
    TRY             reduce using rule 22 (statement -> yield SEMI .)
    CATCH           reduce using rule 22 (statement -> yield SEMI .)
    FINALLY         reduce using rule 22 (statement -> yield SEMI .)
    SWITCH          reduce using rule 22 (statement -> yield SEMI .)
    NATIVE          reduce using rule 22 (statement -> yield SEMI .)
    IMPORT          reduce using rule 22 (statement -> yield SEMI .)
    EXPORT          reduce using rule 22 (statement -> yield SEMI .)
    NUMBER          reduce using rule 22 (statement -> yield SEMI .)
    DELETE          reduce using rule 22 (statement -> yield SEMI .)
    STRINGLIT       reduce using rule 22 (statement -> yield SEMI .)
    ID              reduce using rule 22 (statement -> yield SEMI .)
    GET             reduce using rule 22 (statement -> yield SEMI .)
    SET             reduce using rule 22 (statement -> yield SEMI .)
    LSBRACKET       reduce using rule 22 (statement -> yield SEMI .)
    LPAREN          reduce using rule 22 (statement -> yield SEMI .)
    MINUS           reduce using rule 22 (statement -> yield SEMI .)
    NOT             reduce using rule 22 (statement -> yield SEMI .)
    BITINV          reduce using rule 22 (statement -> yield SEMI .)
    NEW             reduce using rule 22 (statement -> yield SEMI .)
    INC             reduce using rule 22 (statement -> yield SEMI .)
    DEC             reduce using rule 22 (statement -> yield SEMI .)
    TYPEOF          reduce using rule 22 (statement -> yield SEMI .)
    REGEXPR         reduce using rule 22 (statement -> yield SEMI .)
    GLOBAL          reduce using rule 22 (statement -> yield SEMI .)
    VAR             reduce using rule 22 (statement -> yield SEMI .)
    STATIC          reduce using rule 22 (statement -> yield SEMI .)
    TLTHAN          reduce using rule 22 (statement -> yield SEMI .)
    LBRACKET        reduce using rule 22 (statement -> yield SEMI .)
    CASE            reduce using rule 22 (statement -> yield SEMI .)
    RBRACKET        reduce using rule 22 (statement -> yield SEMI .)
    DEFAULT         reduce using rule 22 (statement -> yield SEMI .)
    $end            reduce using rule 22 (statement -> yield SEMI .)

  ! SEMI            [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! FUNCTION        [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! CLASS           [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! TYPED           [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! IF              [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! ELSE            [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! WHILE           [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! WITH            [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! DO              [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! FOR             [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! RETURN          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! YIELD           [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! BREAK           [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! CONTINUE        [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! THROW           [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! TRY             [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! CATCH           [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! FINALLY         [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! SWITCH          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! NATIVE          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! IMPORT          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! EXPORT          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! NUMBER          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! DELETE          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! STRINGLIT       [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! ID              [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! GET             [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! SET             [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! LSBRACKET       [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! LPAREN          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! MINUS           [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! NOT             [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! BITINV          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! NEW             [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! INC             [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! DEC             [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! TYPEOF          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! REGEXPR         [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! GLOBAL          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! VAR             [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! STATIC          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! TLTHAN          [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! LBRACKET        [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! CASE            [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! RBRACKET        [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! DEFAULT         [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]
  ! $end            [ reduce using rule 62 (statement_nonctrl -> yield SEMI .) ]


state 208

    (106) id_var_type -> id .

    ID              reduce using rule 106 (id_var_type -> id .)
    GET             reduce using rule 106 (id_var_type -> id .)
    SET             reduce using rule 106 (id_var_type -> id .)
    TLTHAN          reduce using rule 106 (id_var_type -> id .)
    LBRACKET        reduce using rule 106 (id_var_type -> id .)
    SEMI            reduce using rule 106 (id_var_type -> id .)
    ASSIGN          reduce using rule 106 (id_var_type -> id .)
    COMMA           reduce using rule 106 (id_var_type -> id .)
    IN              reduce using rule 106 (id_var_type -> id .)
    OF              reduce using rule 106 (id_var_type -> id .)
    RPAREN          reduce using rule 106 (id_var_type -> id .)
    TGTHAN          reduce using rule 106 (id_var_type -> id .)
    DOT             reduce using rule 106 (id_var_type -> id .)


state 209

    (116) var_type -> CHAR .

    SEMI            reduce using rule 116 (var_type -> CHAR .)
    ID              reduce using rule 116 (var_type -> CHAR .)
    GET             reduce using rule 116 (var_type -> CHAR .)
    SET             reduce using rule 116 (var_type -> CHAR .)
    TLTHAN          reduce using rule 116 (var_type -> CHAR .)
    ASSIGN          reduce using rule 116 (var_type -> CHAR .)
    COMMA           reduce using rule 116 (var_type -> CHAR .)
    TGTHAN          reduce using rule 116 (var_type -> CHAR .)
    RPAREN          reduce using rule 116 (var_type -> CHAR .)
    DOT             reduce using rule 116 (var_type -> CHAR .)
    LBRACKET        reduce using rule 116 (var_type -> CHAR .)
    IN              reduce using rule 116 (var_type -> CHAR .)
    OF              reduce using rule 116 (var_type -> CHAR .)


state 210

    (118) var_type -> INFERRED .

    SEMI            reduce using rule 118 (var_type -> INFERRED .)
    ID              reduce using rule 118 (var_type -> INFERRED .)
    GET             reduce using rule 118 (var_type -> INFERRED .)
    SET             reduce using rule 118 (var_type -> INFERRED .)
    TLTHAN          reduce using rule 118 (var_type -> INFERRED .)
    ASSIGN          reduce using rule 118 (var_type -> INFERRED .)
    COMMA           reduce using rule 118 (var_type -> INFERRED .)
    TGTHAN          reduce using rule 118 (var_type -> INFERRED .)
    RPAREN          reduce using rule 118 (var_type -> INFERRED .)
    DOT             reduce using rule 118 (var_type -> INFERRED .)
    LBRACKET        reduce using rule 118 (var_type -> INFERRED .)
    IN              reduce using rule 118 (var_type -> INFERRED .)
    OF              reduce using rule 118 (var_type -> INFERRED .)


state 211

    (111) var_type -> id_var_type .

    SEMI            reduce using rule 111 (var_type -> id_var_type .)
    ID              reduce using rule 111 (var_type -> id_var_type .)
    GET             reduce using rule 111 (var_type -> id_var_type .)
    SET             reduce using rule 111 (var_type -> id_var_type .)
    TLTHAN          reduce using rule 111 (var_type -> id_var_type .)
    ASSIGN          reduce using rule 111 (var_type -> id_var_type .)
    COMMA           reduce using rule 111 (var_type -> id_var_type .)
    TGTHAN          reduce using rule 111 (var_type -> id_var_type .)
    RPAREN          reduce using rule 111 (var_type -> id_var_type .)
    DOT             reduce using rule 111 (var_type -> id_var_type .)
    LBRACKET        reduce using rule 111 (var_type -> id_var_type .)
    IN              reduce using rule 111 (var_type -> id_var_type .)
    OF              reduce using rule 111 (var_type -> id_var_type .)


state 212

    (112) var_type -> INT .

    SEMI            reduce using rule 112 (var_type -> INT .)
    ID              reduce using rule 112 (var_type -> INT .)
    GET             reduce using rule 112 (var_type -> INT .)
    SET             reduce using rule 112 (var_type -> INT .)
    TLTHAN          reduce using rule 112 (var_type -> INT .)
    ASSIGN          reduce using rule 112 (var_type -> INT .)
    COMMA           reduce using rule 112 (var_type -> INT .)
    TGTHAN          reduce using rule 112 (var_type -> INT .)
    RPAREN          reduce using rule 112 (var_type -> INT .)
    DOT             reduce using rule 112 (var_type -> INT .)
    LBRACKET        reduce using rule 112 (var_type -> INT .)
    IN              reduce using rule 112 (var_type -> INT .)
    OF              reduce using rule 112 (var_type -> INT .)


state 213

    (114) var_type -> FLOAT .

    SEMI            reduce using rule 114 (var_type -> FLOAT .)
    ID              reduce using rule 114 (var_type -> FLOAT .)
    GET             reduce using rule 114 (var_type -> FLOAT .)
    SET             reduce using rule 114 (var_type -> FLOAT .)
    TLTHAN          reduce using rule 114 (var_type -> FLOAT .)
    ASSIGN          reduce using rule 114 (var_type -> FLOAT .)
    COMMA           reduce using rule 114 (var_type -> FLOAT .)
    TGTHAN          reduce using rule 114 (var_type -> FLOAT .)
    RPAREN          reduce using rule 114 (var_type -> FLOAT .)
    DOT             reduce using rule 114 (var_type -> FLOAT .)
    LBRACKET        reduce using rule 114 (var_type -> FLOAT .)
    IN              reduce using rule 114 (var_type -> FLOAT .)
    OF              reduce using rule 114 (var_type -> FLOAT .)


state 214

    (79) type_modifiers -> type_modifiers CONST .

    UNSIGNED        reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    SIGNED          reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    CONST           reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    INT             reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    SHORT           reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    FLOAT           reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    DOUBLE          reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    CHAR            reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    BYTE            reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    INFERRED        reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    ID              reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    GET             reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    SET             reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    GLOBAL          reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    VAR             reduce using rule 79 (type_modifiers -> type_modifiers CONST .)
    STATIC          reduce using rule 79 (type_modifiers -> type_modifiers CONST .)


state 215

    (96) var_decl -> type_modifiers var_type .
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 96 (var_decl -> type_modifiers var_type .)
    ASSIGN          reduce using rule 96 (var_decl -> type_modifiers var_type .)
    COMMA           reduce using rule 96 (var_decl -> type_modifiers var_type .)
    IN              reduce using rule 96 (var_decl -> type_modifiers var_type .)
    OF              reduce using rule 96 (var_decl -> type_modifiers var_type .)
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    id                             shift and go to state 208
    lthan_restrict                 shift and go to state 11
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 216

    (113) var_type -> SHORT .

    SEMI            reduce using rule 113 (var_type -> SHORT .)
    ID              reduce using rule 113 (var_type -> SHORT .)
    GET             reduce using rule 113 (var_type -> SHORT .)
    SET             reduce using rule 113 (var_type -> SHORT .)
    TLTHAN          reduce using rule 113 (var_type -> SHORT .)
    ASSIGN          reduce using rule 113 (var_type -> SHORT .)
    COMMA           reduce using rule 113 (var_type -> SHORT .)
    TGTHAN          reduce using rule 113 (var_type -> SHORT .)
    RPAREN          reduce using rule 113 (var_type -> SHORT .)
    DOT             reduce using rule 113 (var_type -> SHORT .)
    LBRACKET        reduce using rule 113 (var_type -> SHORT .)
    IN              reduce using rule 113 (var_type -> SHORT .)
    OF              reduce using rule 113 (var_type -> SHORT .)


state 217

    (77) type_modifiers -> type_modifiers UNSIGNED .

    UNSIGNED        reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    SIGNED          reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    CONST           reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    INT             reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    SHORT           reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    FLOAT           reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    DOUBLE          reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    CHAR            reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    BYTE            reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    INFERRED        reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    ID              reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    GET             reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    SET             reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    GLOBAL          reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    VAR             reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)
    STATIC          reduce using rule 77 (type_modifiers -> type_modifiers UNSIGNED .)


state 218

    (78) type_modifiers -> type_modifiers SIGNED .

    UNSIGNED        reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    SIGNED          reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    CONST           reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    INT             reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    SHORT           reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    FLOAT           reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    DOUBLE          reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    CHAR            reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    BYTE            reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    INFERRED        reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    ID              reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    GET             reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    SET             reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    GLOBAL          reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    VAR             reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)
    STATIC          reduce using rule 78 (type_modifiers -> type_modifiers SIGNED .)


state 219

    (115) var_type -> DOUBLE .

    SEMI            reduce using rule 115 (var_type -> DOUBLE .)
    ID              reduce using rule 115 (var_type -> DOUBLE .)
    GET             reduce using rule 115 (var_type -> DOUBLE .)
    SET             reduce using rule 115 (var_type -> DOUBLE .)
    TLTHAN          reduce using rule 115 (var_type -> DOUBLE .)
    ASSIGN          reduce using rule 115 (var_type -> DOUBLE .)
    COMMA           reduce using rule 115 (var_type -> DOUBLE .)
    TGTHAN          reduce using rule 115 (var_type -> DOUBLE .)
    RPAREN          reduce using rule 115 (var_type -> DOUBLE .)
    DOT             reduce using rule 115 (var_type -> DOUBLE .)
    LBRACKET        reduce using rule 115 (var_type -> DOUBLE .)
    IN              reduce using rule 115 (var_type -> DOUBLE .)
    OF              reduce using rule 115 (var_type -> DOUBLE .)


state 220

    (117) var_type -> BYTE .

    SEMI            reduce using rule 117 (var_type -> BYTE .)
    ID              reduce using rule 117 (var_type -> BYTE .)
    GET             reduce using rule 117 (var_type -> BYTE .)
    SET             reduce using rule 117 (var_type -> BYTE .)
    TLTHAN          reduce using rule 117 (var_type -> BYTE .)
    ASSIGN          reduce using rule 117 (var_type -> BYTE .)
    COMMA           reduce using rule 117 (var_type -> BYTE .)
    TGTHAN          reduce using rule 117 (var_type -> BYTE .)
    RPAREN          reduce using rule 117 (var_type -> BYTE .)
    DOT             reduce using rule 117 (var_type -> BYTE .)
    LBRACKET        reduce using rule 117 (var_type -> BYTE .)
    IN              reduce using rule 117 (var_type -> BYTE .)
    OF              reduce using rule 117 (var_type -> BYTE .)


state 221

    (142) exprlist -> expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 142 (exprlist -> expr .)
    RSBRACKET       reduce using rule 142 (exprlist -> expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! COMMA           [ reduce using rule 142 (exprlist -> expr .) ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 222

    (218) array_literal -> LSBRACKET RSBRACKET .

    RSHIFT          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    LSHIFT          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    LLSHIFT         reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    RRSHIFT         reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    COND_DOT        reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    DOT             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    LAND            reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    LOR             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    BOR             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    INSTANCEOF      reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    BXOR            reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    BAND            reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    EQUAL           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    EQUAL_STRICT    reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    NOTEQUAL_STRICT reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    GTHAN           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    GTHANEQ         reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    LTHAN           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    MOD             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    LTHANEQ         reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    NOTEQUAL        reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    PLUS            reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    MINUS           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    DIVIDE          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    TIMES           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    IN              reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    QEST            reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    COMMA           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    INC             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    DEC             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNPLUS      reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNMINUS     reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNTIMES     reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNBOR       reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNBAND      reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNBXOR      reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNLSHIFT    reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNRSHIFT    reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNRRSHIFT   reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNLLSHIFT   reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGN          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    LSBRACKET       reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    TLTHAN          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    LPAREN          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    RPAREN          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    SEMI            reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    RSBRACKET       reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    COLON           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    FUNCTION        reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    CLASS           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    TYPED           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    IF              reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ELSE            reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    WHILE           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    WITH            reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    DO              reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    FOR             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    RETURN          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    YIELD           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    BREAK           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    CONTINUE        reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    THROW           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    TRY             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    CATCH           reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    FINALLY         reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    SWITCH          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    NATIVE          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    IMPORT          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    EXPORT          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    NUMBER          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    DELETE          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    STRINGLIT       reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    ID              reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    GET             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    SET             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    NOT             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    BITINV          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    NEW             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    TYPEOF          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    REGEXPR         reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    GLOBAL          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    VAR             reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    STATIC          reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    LBRACKET        reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    $end            reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    RBRACKET        reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    CASE            reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    DEFAULT         reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)
    OF              reduce using rule 218 (array_literal -> LSBRACKET RSBRACKET .)


state 223

    (217) array_literal -> LSBRACKET exprlist . RSBRACKET
    (143) exprlist -> exprlist . COMMA expr

    RSBRACKET       shift and go to state 334
    COMMA           shift and go to state 333


state 224

    (21) statement -> return SEMI .
    (61) statement_nonctrl -> return SEMI .

  ! reduce/reduce conflict for SEMI resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for CLASS resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for TYPED resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for FINALLY resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for IMPORT resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for EXPORT resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for GET resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for SET resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for STATIC resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 21 (statement -> return SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 21 (statement -> return SEMI .)
    SEMI            reduce using rule 21 (statement -> return SEMI .)
    FUNCTION        reduce using rule 21 (statement -> return SEMI .)
    CLASS           reduce using rule 21 (statement -> return SEMI .)
    TYPED           reduce using rule 21 (statement -> return SEMI .)
    IF              reduce using rule 21 (statement -> return SEMI .)
    ELSE            reduce using rule 21 (statement -> return SEMI .)
    WHILE           reduce using rule 21 (statement -> return SEMI .)
    WITH            reduce using rule 21 (statement -> return SEMI .)
    DO              reduce using rule 21 (statement -> return SEMI .)
    FOR             reduce using rule 21 (statement -> return SEMI .)
    RETURN          reduce using rule 21 (statement -> return SEMI .)
    YIELD           reduce using rule 21 (statement -> return SEMI .)
    BREAK           reduce using rule 21 (statement -> return SEMI .)
    CONTINUE        reduce using rule 21 (statement -> return SEMI .)
    THROW           reduce using rule 21 (statement -> return SEMI .)
    TRY             reduce using rule 21 (statement -> return SEMI .)
    CATCH           reduce using rule 21 (statement -> return SEMI .)
    FINALLY         reduce using rule 21 (statement -> return SEMI .)
    SWITCH          reduce using rule 21 (statement -> return SEMI .)
    NATIVE          reduce using rule 21 (statement -> return SEMI .)
    IMPORT          reduce using rule 21 (statement -> return SEMI .)
    EXPORT          reduce using rule 21 (statement -> return SEMI .)
    NUMBER          reduce using rule 21 (statement -> return SEMI .)
    DELETE          reduce using rule 21 (statement -> return SEMI .)
    STRINGLIT       reduce using rule 21 (statement -> return SEMI .)
    ID              reduce using rule 21 (statement -> return SEMI .)
    GET             reduce using rule 21 (statement -> return SEMI .)
    SET             reduce using rule 21 (statement -> return SEMI .)
    LSBRACKET       reduce using rule 21 (statement -> return SEMI .)
    LPAREN          reduce using rule 21 (statement -> return SEMI .)
    MINUS           reduce using rule 21 (statement -> return SEMI .)
    NOT             reduce using rule 21 (statement -> return SEMI .)
    BITINV          reduce using rule 21 (statement -> return SEMI .)
    NEW             reduce using rule 21 (statement -> return SEMI .)
    INC             reduce using rule 21 (statement -> return SEMI .)
    DEC             reduce using rule 21 (statement -> return SEMI .)
    TYPEOF          reduce using rule 21 (statement -> return SEMI .)
    REGEXPR         reduce using rule 21 (statement -> return SEMI .)
    GLOBAL          reduce using rule 21 (statement -> return SEMI .)
    VAR             reduce using rule 21 (statement -> return SEMI .)
    STATIC          reduce using rule 21 (statement -> return SEMI .)
    TLTHAN          reduce using rule 21 (statement -> return SEMI .)
    LBRACKET        reduce using rule 21 (statement -> return SEMI .)
    CASE            reduce using rule 21 (statement -> return SEMI .)
    RBRACKET        reduce using rule 21 (statement -> return SEMI .)
    DEFAULT         reduce using rule 21 (statement -> return SEMI .)
    $end            reduce using rule 21 (statement -> return SEMI .)

  ! SEMI            [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! FUNCTION        [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! CLASS           [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! TYPED           [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! IF              [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! ELSE            [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! WHILE           [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! WITH            [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! DO              [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! FOR             [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! RETURN          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! YIELD           [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! BREAK           [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! CONTINUE        [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! THROW           [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! TRY             [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! CATCH           [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! FINALLY         [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! SWITCH          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! NATIVE          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! IMPORT          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! EXPORT          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! NUMBER          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! DELETE          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! STRINGLIT       [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! ID              [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! GET             [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! SET             [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! LSBRACKET       [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! LPAREN          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! MINUS           [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! NOT             [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! BITINV          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! NEW             [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! INC             [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! DEC             [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! TYPEOF          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! REGEXPR         [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! GLOBAL          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! VAR             [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! STATIC          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! TLTHAN          [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! LBRACKET        [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! CASE            [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! RBRACKET        [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! DEFAULT         [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]
  ! $end            [ reduce using rule 61 (statement_nonctrl -> return SEMI .) ]


state 225

    (329) finally -> FINALLY LBRACKET . statementlist_opt RBRACKET
    (314) statementlist_opt -> . statementlist
    (315) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! RBRACKET        [ reduce using rule 315 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 335
    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    try                            shift and go to state 42
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 276

state 226

    (25) statement -> throw SEMI .
    (65) statement_nonctrl -> throw SEMI .

  ! reduce/reduce conflict for SEMI resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for CLASS resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for TYPED resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for FINALLY resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for IMPORT resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for EXPORT resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for GET resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for SET resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for STATIC resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 25 (statement -> throw SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 25 (statement -> throw SEMI .)
    SEMI            reduce using rule 25 (statement -> throw SEMI .)
    FUNCTION        reduce using rule 25 (statement -> throw SEMI .)
    CLASS           reduce using rule 25 (statement -> throw SEMI .)
    TYPED           reduce using rule 25 (statement -> throw SEMI .)
    IF              reduce using rule 25 (statement -> throw SEMI .)
    ELSE            reduce using rule 25 (statement -> throw SEMI .)
    WHILE           reduce using rule 25 (statement -> throw SEMI .)
    WITH            reduce using rule 25 (statement -> throw SEMI .)
    DO              reduce using rule 25 (statement -> throw SEMI .)
    FOR             reduce using rule 25 (statement -> throw SEMI .)
    RETURN          reduce using rule 25 (statement -> throw SEMI .)
    YIELD           reduce using rule 25 (statement -> throw SEMI .)
    BREAK           reduce using rule 25 (statement -> throw SEMI .)
    CONTINUE        reduce using rule 25 (statement -> throw SEMI .)
    THROW           reduce using rule 25 (statement -> throw SEMI .)
    TRY             reduce using rule 25 (statement -> throw SEMI .)
    CATCH           reduce using rule 25 (statement -> throw SEMI .)
    FINALLY         reduce using rule 25 (statement -> throw SEMI .)
    SWITCH          reduce using rule 25 (statement -> throw SEMI .)
    NATIVE          reduce using rule 25 (statement -> throw SEMI .)
    IMPORT          reduce using rule 25 (statement -> throw SEMI .)
    EXPORT          reduce using rule 25 (statement -> throw SEMI .)
    NUMBER          reduce using rule 25 (statement -> throw SEMI .)
    DELETE          reduce using rule 25 (statement -> throw SEMI .)
    STRINGLIT       reduce using rule 25 (statement -> throw SEMI .)
    ID              reduce using rule 25 (statement -> throw SEMI .)
    GET             reduce using rule 25 (statement -> throw SEMI .)
    SET             reduce using rule 25 (statement -> throw SEMI .)
    LSBRACKET       reduce using rule 25 (statement -> throw SEMI .)
    LPAREN          reduce using rule 25 (statement -> throw SEMI .)
    MINUS           reduce using rule 25 (statement -> throw SEMI .)
    NOT             reduce using rule 25 (statement -> throw SEMI .)
    BITINV          reduce using rule 25 (statement -> throw SEMI .)
    NEW             reduce using rule 25 (statement -> throw SEMI .)
    INC             reduce using rule 25 (statement -> throw SEMI .)
    DEC             reduce using rule 25 (statement -> throw SEMI .)
    TYPEOF          reduce using rule 25 (statement -> throw SEMI .)
    REGEXPR         reduce using rule 25 (statement -> throw SEMI .)
    GLOBAL          reduce using rule 25 (statement -> throw SEMI .)
    VAR             reduce using rule 25 (statement -> throw SEMI .)
    STATIC          reduce using rule 25 (statement -> throw SEMI .)
    TLTHAN          reduce using rule 25 (statement -> throw SEMI .)
    LBRACKET        reduce using rule 25 (statement -> throw SEMI .)
    CASE            reduce using rule 25 (statement -> throw SEMI .)
    RBRACKET        reduce using rule 25 (statement -> throw SEMI .)
    DEFAULT         reduce using rule 25 (statement -> throw SEMI .)
    $end            reduce using rule 25 (statement -> throw SEMI .)

  ! SEMI            [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! FUNCTION        [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! CLASS           [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! TYPED           [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! IF              [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! ELSE            [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! WHILE           [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! WITH            [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! DO              [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! FOR             [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! RETURN          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! YIELD           [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! BREAK           [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! CONTINUE        [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! THROW           [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! TRY             [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! CATCH           [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! FINALLY         [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! SWITCH          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! NATIVE          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! IMPORT          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! EXPORT          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! NUMBER          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! DELETE          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! STRINGLIT       [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! ID              [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! GET             [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! SET             [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! LSBRACKET       [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! LPAREN          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! MINUS           [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! NOT             [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! BITINV          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! NEW             [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! INC             [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! DEC             [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! TYPEOF          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! REGEXPR         [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! GLOBAL          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! VAR             [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! STATIC          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! TLTHAN          [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! LBRACKET        [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! CASE            [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! RBRACKET        [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! DEFAULT         [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]
  ! $end            [ reduce using rule 65 (statement_nonctrl -> throw SEMI .) ]


state 227

    (144) typed_class -> TYPED CLASS . id template_opt typed_class_tail
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 336

state 228

    (305) for -> FOR LPAREN . for_decl RPAREN statement_nonctrl
    (306) for -> FOR LPAREN . for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (303) for_decl -> . for_var_decl SEMI expr_opt SEMI expr_opt
    (304) for_decl -> . for_var_decl in_or_of expr
    (298) for_var_decl -> . id
    (299) for_var_decl -> . id ASSIGN expr
    (300) for_var_decl -> . var_decl
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC

    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17

    type_modifiers                 shift and go to state 53
    id                             shift and go to state 337
    for_decl                       shift and go to state 338
    var_decl                       shift and go to state 339
    for_var_decl                   shift and go to state 340

state 229

    (290) expr_uminus -> MINUS expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    RSHIFT          reduce using rule 290 (expr_uminus -> MINUS expr .)
    LSHIFT          reduce using rule 290 (expr_uminus -> MINUS expr .)
    LLSHIFT         reduce using rule 290 (expr_uminus -> MINUS expr .)
    RRSHIFT         reduce using rule 290 (expr_uminus -> MINUS expr .)
    LAND            reduce using rule 290 (expr_uminus -> MINUS expr .)
    LOR             reduce using rule 290 (expr_uminus -> MINUS expr .)
    BOR             reduce using rule 290 (expr_uminus -> MINUS expr .)
    INSTANCEOF      reduce using rule 290 (expr_uminus -> MINUS expr .)
    BXOR            reduce using rule 290 (expr_uminus -> MINUS expr .)
    BAND            reduce using rule 290 (expr_uminus -> MINUS expr .)
    EQUAL           reduce using rule 290 (expr_uminus -> MINUS expr .)
    EQUAL_STRICT    reduce using rule 290 (expr_uminus -> MINUS expr .)
    NOTEQUAL_STRICT reduce using rule 290 (expr_uminus -> MINUS expr .)
    GTHAN           reduce using rule 290 (expr_uminus -> MINUS expr .)
    GTHANEQ         reduce using rule 290 (expr_uminus -> MINUS expr .)
    LTHAN           reduce using rule 290 (expr_uminus -> MINUS expr .)
    MOD             reduce using rule 290 (expr_uminus -> MINUS expr .)
    LTHANEQ         reduce using rule 290 (expr_uminus -> MINUS expr .)
    NOTEQUAL        reduce using rule 290 (expr_uminus -> MINUS expr .)
    PLUS            reduce using rule 290 (expr_uminus -> MINUS expr .)
    MINUS           reduce using rule 290 (expr_uminus -> MINUS expr .)
    DIVIDE          reduce using rule 290 (expr_uminus -> MINUS expr .)
    TIMES           reduce using rule 290 (expr_uminus -> MINUS expr .)
    IN              reduce using rule 290 (expr_uminus -> MINUS expr .)
    QEST            reduce using rule 290 (expr_uminus -> MINUS expr .)
    COMMA           reduce using rule 290 (expr_uminus -> MINUS expr .)
    ASSIGNPLUS      reduce using rule 290 (expr_uminus -> MINUS expr .)
    ASSIGNMINUS     reduce using rule 290 (expr_uminus -> MINUS expr .)
    ASSIGNDIVIDE    reduce using rule 290 (expr_uminus -> MINUS expr .)
    ASSIGNTIMES     reduce using rule 290 (expr_uminus -> MINUS expr .)
    ASSIGNBOR       reduce using rule 290 (expr_uminus -> MINUS expr .)
    ASSIGNBAND      reduce using rule 290 (expr_uminus -> MINUS expr .)
    ASSIGNBXOR      reduce using rule 290 (expr_uminus -> MINUS expr .)
    ASSIGNLSHIFT    reduce using rule 290 (expr_uminus -> MINUS expr .)
    ASSIGNRSHIFT    reduce using rule 290 (expr_uminus -> MINUS expr .)
    ASSIGNRRSHIFT   reduce using rule 290 (expr_uminus -> MINUS expr .)
    ASSIGNLLSHIFT   reduce using rule 290 (expr_uminus -> MINUS expr .)
    ASSIGN          reduce using rule 290 (expr_uminus -> MINUS expr .)
    TLTHAN          reduce using rule 290 (expr_uminus -> MINUS expr .)
    SEMI            reduce using rule 290 (expr_uminus -> MINUS expr .)
    OF              reduce using rule 290 (expr_uminus -> MINUS expr .)
    RPAREN          reduce using rule 290 (expr_uminus -> MINUS expr .)
    RSBRACKET       reduce using rule 290 (expr_uminus -> MINUS expr .)
    COLON           reduce using rule 290 (expr_uminus -> MINUS expr .)
    FUNCTION        reduce using rule 290 (expr_uminus -> MINUS expr .)
    CLASS           reduce using rule 290 (expr_uminus -> MINUS expr .)
    TYPED           reduce using rule 290 (expr_uminus -> MINUS expr .)
    IF              reduce using rule 290 (expr_uminus -> MINUS expr .)
    ELSE            reduce using rule 290 (expr_uminus -> MINUS expr .)
    WHILE           reduce using rule 290 (expr_uminus -> MINUS expr .)
    WITH            reduce using rule 290 (expr_uminus -> MINUS expr .)
    DO              reduce using rule 290 (expr_uminus -> MINUS expr .)
    FOR             reduce using rule 290 (expr_uminus -> MINUS expr .)
    RETURN          reduce using rule 290 (expr_uminus -> MINUS expr .)
    YIELD           reduce using rule 290 (expr_uminus -> MINUS expr .)
    BREAK           reduce using rule 290 (expr_uminus -> MINUS expr .)
    CONTINUE        reduce using rule 290 (expr_uminus -> MINUS expr .)
    THROW           reduce using rule 290 (expr_uminus -> MINUS expr .)
    TRY             reduce using rule 290 (expr_uminus -> MINUS expr .)
    CATCH           reduce using rule 290 (expr_uminus -> MINUS expr .)
    FINALLY         reduce using rule 290 (expr_uminus -> MINUS expr .)
    SWITCH          reduce using rule 290 (expr_uminus -> MINUS expr .)
    NATIVE          reduce using rule 290 (expr_uminus -> MINUS expr .)
    IMPORT          reduce using rule 290 (expr_uminus -> MINUS expr .)
    EXPORT          reduce using rule 290 (expr_uminus -> MINUS expr .)
    NUMBER          reduce using rule 290 (expr_uminus -> MINUS expr .)
    DELETE          reduce using rule 290 (expr_uminus -> MINUS expr .)
    STRINGLIT       reduce using rule 290 (expr_uminus -> MINUS expr .)
    ID              reduce using rule 290 (expr_uminus -> MINUS expr .)
    GET             reduce using rule 290 (expr_uminus -> MINUS expr .)
    SET             reduce using rule 290 (expr_uminus -> MINUS expr .)
    NOT             reduce using rule 290 (expr_uminus -> MINUS expr .)
    BITINV          reduce using rule 290 (expr_uminus -> MINUS expr .)
    NEW             reduce using rule 290 (expr_uminus -> MINUS expr .)
    TYPEOF          reduce using rule 290 (expr_uminus -> MINUS expr .)
    REGEXPR         reduce using rule 290 (expr_uminus -> MINUS expr .)
    GLOBAL          reduce using rule 290 (expr_uminus -> MINUS expr .)
    VAR             reduce using rule 290 (expr_uminus -> MINUS expr .)
    STATIC          reduce using rule 290 (expr_uminus -> MINUS expr .)
    LBRACKET        reduce using rule 290 (expr_uminus -> MINUS expr .)
    $end            reduce using rule 290 (expr_uminus -> MINUS expr .)
    RBRACKET        reduce using rule 290 (expr_uminus -> MINUS expr .)
    CASE            reduce using rule 290 (expr_uminus -> MINUS expr .)
    DEFAULT         reduce using rule 290 (expr_uminus -> MINUS expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 290 (expr_uminus -> MINUS expr .) ]
  ! DOT             [ reduce using rule 290 (expr_uminus -> MINUS expr .) ]
  ! INC             [ reduce using rule 290 (expr_uminus -> MINUS expr .) ]
  ! DEC             [ reduce using rule 290 (expr_uminus -> MINUS expr .) ]
  ! LSBRACKET       [ reduce using rule 290 (expr_uminus -> MINUS expr .) ]
  ! LPAREN          [ reduce using rule 290 (expr_uminus -> MINUS expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 131 ]
  ! TIMES           [ shift and go to state 104 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 230

    (205) func_native -> NATIVE push_scope . FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt

    FUNCTION        shift and go to state 341


state 231

    (311) while -> WHILE paren_expr . statement_nonctrl
    (312) while -> WHILE paren_expr . LBRACKET statementlist_opt RBRACKET
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 342
    SEMI            shift and go to state 44
    NUMBER          shift and go to state 29
    FUNCTION        shift and go to state 150
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    FOR             shift and go to state 68
    DO              shift and go to state 41
    WHILE           shift and go to state 73
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    delete                         shift and go to state 51
    yield                          shift and go to state 152
    for                            shift and go to state 141
    else                           shift and go to state 157
    re_lit                         shift and go to state 8
    return                         shift and go to state 142
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 343
    template_ref                   shift and go to state 13
    type_modifiers                 shift and go to state 53
    not                            shift and go to state 15
    dec                            shift and go to state 66
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 144
    new                            shift and go to state 48
    while                          shift and go to state 143
    catch                          shift and go to state 155
    funcref                        shift and go to state 24
    throw                          shift and go to state 145
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    break                          shift and go to state 156
    finally                        shift and go to state 146
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 140
    bitinv                         shift and go to state 32
    continue                       shift and go to state 149
    strlit                         shift and go to state 79
    var_decl                       shift and go to state 37
    typeof                         shift and go to state 81
    try                            shift and go to state 154
    inc                            shift and go to state 86

state 232

    (138) throw -> THROW expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 138 (throw -> THROW expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 233

    (325) if -> IF paren_expr . ctrl_statement
    (307) ctrl_statement -> . statement_nonctrl
    (308) ctrl_statement -> . LBRACKET statementlist_opt RBRACKET
    (309) ctrl_statement -> . SEMI
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 147
    SEMI            shift and go to state 151
    NUMBER          shift and go to state 29
    FUNCTION        shift and go to state 150
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    FOR             shift and go to state 68
    DO              shift and go to state 41
    WHILE           shift and go to state 73
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    delete                         shift and go to state 51
    yield                          shift and go to state 152
    for                            shift and go to state 141
    else                           shift and go to state 157
    re_lit                         shift and go to state 8
    return                         shift and go to state 142
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 153
    template_ref                   shift and go to state 13
    type_modifiers                 shift and go to state 53
    not                            shift and go to state 15
    dec                            shift and go to state 66
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 144
    new                            shift and go to state 48
    while                          shift and go to state 143
    catch                          shift and go to state 155
    funcref                        shift and go to state 24
    throw                          shift and go to state 145
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    break                          shift and go to state 156
    finally                        shift and go to state 146
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 140
    bitinv                         shift and go to state 32
    ctrl_statement                 shift and go to state 344
    continue                       shift and go to state 149
    strlit                         shift and go to state 79
    var_decl                       shift and go to state 37
    typeof                         shift and go to state 81
    try                            shift and go to state 154
    inc                            shift and go to state 86

state 234

    (234) not -> NOT expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    RSHIFT          reduce using rule 234 (not -> NOT expr .)
    LSHIFT          reduce using rule 234 (not -> NOT expr .)
    LLSHIFT         reduce using rule 234 (not -> NOT expr .)
    RRSHIFT         reduce using rule 234 (not -> NOT expr .)
    LAND            reduce using rule 234 (not -> NOT expr .)
    LOR             reduce using rule 234 (not -> NOT expr .)
    BOR             reduce using rule 234 (not -> NOT expr .)
    INSTANCEOF      reduce using rule 234 (not -> NOT expr .)
    BXOR            reduce using rule 234 (not -> NOT expr .)
    BAND            reduce using rule 234 (not -> NOT expr .)
    EQUAL           reduce using rule 234 (not -> NOT expr .)
    EQUAL_STRICT    reduce using rule 234 (not -> NOT expr .)
    NOTEQUAL_STRICT reduce using rule 234 (not -> NOT expr .)
    GTHAN           reduce using rule 234 (not -> NOT expr .)
    GTHANEQ         reduce using rule 234 (not -> NOT expr .)
    LTHAN           reduce using rule 234 (not -> NOT expr .)
    MOD             reduce using rule 234 (not -> NOT expr .)
    LTHANEQ         reduce using rule 234 (not -> NOT expr .)
    NOTEQUAL        reduce using rule 234 (not -> NOT expr .)
    PLUS            reduce using rule 234 (not -> NOT expr .)
    MINUS           reduce using rule 234 (not -> NOT expr .)
    DIVIDE          reduce using rule 234 (not -> NOT expr .)
    TIMES           reduce using rule 234 (not -> NOT expr .)
    IN              reduce using rule 234 (not -> NOT expr .)
    QEST            reduce using rule 234 (not -> NOT expr .)
    COMMA           reduce using rule 234 (not -> NOT expr .)
    ASSIGNPLUS      reduce using rule 234 (not -> NOT expr .)
    ASSIGNMINUS     reduce using rule 234 (not -> NOT expr .)
    ASSIGNDIVIDE    reduce using rule 234 (not -> NOT expr .)
    ASSIGNTIMES     reduce using rule 234 (not -> NOT expr .)
    ASSIGNBOR       reduce using rule 234 (not -> NOT expr .)
    ASSIGNBAND      reduce using rule 234 (not -> NOT expr .)
    ASSIGNBXOR      reduce using rule 234 (not -> NOT expr .)
    ASSIGNLSHIFT    reduce using rule 234 (not -> NOT expr .)
    ASSIGNRSHIFT    reduce using rule 234 (not -> NOT expr .)
    ASSIGNRRSHIFT   reduce using rule 234 (not -> NOT expr .)
    ASSIGNLLSHIFT   reduce using rule 234 (not -> NOT expr .)
    ASSIGN          reduce using rule 234 (not -> NOT expr .)
    TLTHAN          reduce using rule 234 (not -> NOT expr .)
    SEMI            reduce using rule 234 (not -> NOT expr .)
    RPAREN          reduce using rule 234 (not -> NOT expr .)
    RSBRACKET       reduce using rule 234 (not -> NOT expr .)
    COLON           reduce using rule 234 (not -> NOT expr .)
    FUNCTION        reduce using rule 234 (not -> NOT expr .)
    CLASS           reduce using rule 234 (not -> NOT expr .)
    TYPED           reduce using rule 234 (not -> NOT expr .)
    IF              reduce using rule 234 (not -> NOT expr .)
    ELSE            reduce using rule 234 (not -> NOT expr .)
    WHILE           reduce using rule 234 (not -> NOT expr .)
    WITH            reduce using rule 234 (not -> NOT expr .)
    DO              reduce using rule 234 (not -> NOT expr .)
    FOR             reduce using rule 234 (not -> NOT expr .)
    RETURN          reduce using rule 234 (not -> NOT expr .)
    YIELD           reduce using rule 234 (not -> NOT expr .)
    BREAK           reduce using rule 234 (not -> NOT expr .)
    CONTINUE        reduce using rule 234 (not -> NOT expr .)
    THROW           reduce using rule 234 (not -> NOT expr .)
    TRY             reduce using rule 234 (not -> NOT expr .)
    CATCH           reduce using rule 234 (not -> NOT expr .)
    FINALLY         reduce using rule 234 (not -> NOT expr .)
    SWITCH          reduce using rule 234 (not -> NOT expr .)
    NATIVE          reduce using rule 234 (not -> NOT expr .)
    IMPORT          reduce using rule 234 (not -> NOT expr .)
    EXPORT          reduce using rule 234 (not -> NOT expr .)
    NUMBER          reduce using rule 234 (not -> NOT expr .)
    DELETE          reduce using rule 234 (not -> NOT expr .)
    STRINGLIT       reduce using rule 234 (not -> NOT expr .)
    ID              reduce using rule 234 (not -> NOT expr .)
    GET             reduce using rule 234 (not -> NOT expr .)
    SET             reduce using rule 234 (not -> NOT expr .)
    NOT             reduce using rule 234 (not -> NOT expr .)
    BITINV          reduce using rule 234 (not -> NOT expr .)
    NEW             reduce using rule 234 (not -> NOT expr .)
    TYPEOF          reduce using rule 234 (not -> NOT expr .)
    REGEXPR         reduce using rule 234 (not -> NOT expr .)
    GLOBAL          reduce using rule 234 (not -> NOT expr .)
    VAR             reduce using rule 234 (not -> NOT expr .)
    STATIC          reduce using rule 234 (not -> NOT expr .)
    LBRACKET        reduce using rule 234 (not -> NOT expr .)
    $end            reduce using rule 234 (not -> NOT expr .)
    RBRACKET        reduce using rule 234 (not -> NOT expr .)
    CASE            reduce using rule 234 (not -> NOT expr .)
    DEFAULT         reduce using rule 234 (not -> NOT expr .)
    OF              reduce using rule 234 (not -> NOT expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 234 (not -> NOT expr .) ]
  ! DOT             [ reduce using rule 234 (not -> NOT expr .) ]
  ! INC             [ reduce using rule 234 (not -> NOT expr .) ]
  ! DEC             [ reduce using rule 234 (not -> NOT expr .) ]
  ! LSBRACKET       [ reduce using rule 234 (not -> NOT expr .) ]
  ! LPAREN          [ reduce using rule 234 (not -> NOT expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 131 ]
  ! TIMES           [ shift and go to state 104 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 235

    (351) return -> RETURN expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 351 (return -> RETURN expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 236

    (229) new -> NEW expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    RSHIFT          reduce using rule 229 (new -> NEW expr .)
    LSHIFT          reduce using rule 229 (new -> NEW expr .)
    LLSHIFT         reduce using rule 229 (new -> NEW expr .)
    RRSHIFT         reduce using rule 229 (new -> NEW expr .)
    LAND            reduce using rule 229 (new -> NEW expr .)
    LOR             reduce using rule 229 (new -> NEW expr .)
    BOR             reduce using rule 229 (new -> NEW expr .)
    INSTANCEOF      reduce using rule 229 (new -> NEW expr .)
    BXOR            reduce using rule 229 (new -> NEW expr .)
    BAND            reduce using rule 229 (new -> NEW expr .)
    EQUAL           reduce using rule 229 (new -> NEW expr .)
    EQUAL_STRICT    reduce using rule 229 (new -> NEW expr .)
    NOTEQUAL_STRICT reduce using rule 229 (new -> NEW expr .)
    GTHAN           reduce using rule 229 (new -> NEW expr .)
    GTHANEQ         reduce using rule 229 (new -> NEW expr .)
    LTHAN           reduce using rule 229 (new -> NEW expr .)
    MOD             reduce using rule 229 (new -> NEW expr .)
    LTHANEQ         reduce using rule 229 (new -> NEW expr .)
    NOTEQUAL        reduce using rule 229 (new -> NEW expr .)
    PLUS            reduce using rule 229 (new -> NEW expr .)
    MINUS           reduce using rule 229 (new -> NEW expr .)
    DIVIDE          reduce using rule 229 (new -> NEW expr .)
    TIMES           reduce using rule 229 (new -> NEW expr .)
    IN              reduce using rule 229 (new -> NEW expr .)
    QEST            reduce using rule 229 (new -> NEW expr .)
    COMMA           reduce using rule 229 (new -> NEW expr .)
    INC             reduce using rule 229 (new -> NEW expr .)
    DEC             reduce using rule 229 (new -> NEW expr .)
    ASSIGNPLUS      reduce using rule 229 (new -> NEW expr .)
    ASSIGNMINUS     reduce using rule 229 (new -> NEW expr .)
    ASSIGNDIVIDE    reduce using rule 229 (new -> NEW expr .)
    ASSIGNTIMES     reduce using rule 229 (new -> NEW expr .)
    ASSIGNBOR       reduce using rule 229 (new -> NEW expr .)
    ASSIGNBAND      reduce using rule 229 (new -> NEW expr .)
    ASSIGNBXOR      reduce using rule 229 (new -> NEW expr .)
    ASSIGNLSHIFT    reduce using rule 229 (new -> NEW expr .)
    ASSIGNRSHIFT    reduce using rule 229 (new -> NEW expr .)
    ASSIGNRRSHIFT   reduce using rule 229 (new -> NEW expr .)
    ASSIGNLLSHIFT   reduce using rule 229 (new -> NEW expr .)
    ASSIGN          reduce using rule 229 (new -> NEW expr .)
    LSBRACKET       reduce using rule 229 (new -> NEW expr .)
    TLTHAN          reduce using rule 229 (new -> NEW expr .)
    SEMI            reduce using rule 229 (new -> NEW expr .)
    RPAREN          reduce using rule 229 (new -> NEW expr .)
    RSBRACKET       reduce using rule 229 (new -> NEW expr .)
    COLON           reduce using rule 229 (new -> NEW expr .)
    FUNCTION        reduce using rule 229 (new -> NEW expr .)
    CLASS           reduce using rule 229 (new -> NEW expr .)
    TYPED           reduce using rule 229 (new -> NEW expr .)
    IF              reduce using rule 229 (new -> NEW expr .)
    ELSE            reduce using rule 229 (new -> NEW expr .)
    WHILE           reduce using rule 229 (new -> NEW expr .)
    WITH            reduce using rule 229 (new -> NEW expr .)
    DO              reduce using rule 229 (new -> NEW expr .)
    FOR             reduce using rule 229 (new -> NEW expr .)
    RETURN          reduce using rule 229 (new -> NEW expr .)
    YIELD           reduce using rule 229 (new -> NEW expr .)
    BREAK           reduce using rule 229 (new -> NEW expr .)
    CONTINUE        reduce using rule 229 (new -> NEW expr .)
    THROW           reduce using rule 229 (new -> NEW expr .)
    TRY             reduce using rule 229 (new -> NEW expr .)
    CATCH           reduce using rule 229 (new -> NEW expr .)
    FINALLY         reduce using rule 229 (new -> NEW expr .)
    SWITCH          reduce using rule 229 (new -> NEW expr .)
    NATIVE          reduce using rule 229 (new -> NEW expr .)
    IMPORT          reduce using rule 229 (new -> NEW expr .)
    EXPORT          reduce using rule 229 (new -> NEW expr .)
    NUMBER          reduce using rule 229 (new -> NEW expr .)
    DELETE          reduce using rule 229 (new -> NEW expr .)
    STRINGLIT       reduce using rule 229 (new -> NEW expr .)
    ID              reduce using rule 229 (new -> NEW expr .)
    GET             reduce using rule 229 (new -> NEW expr .)
    SET             reduce using rule 229 (new -> NEW expr .)
    NOT             reduce using rule 229 (new -> NEW expr .)
    BITINV          reduce using rule 229 (new -> NEW expr .)
    NEW             reduce using rule 229 (new -> NEW expr .)
    TYPEOF          reduce using rule 229 (new -> NEW expr .)
    REGEXPR         reduce using rule 229 (new -> NEW expr .)
    GLOBAL          reduce using rule 229 (new -> NEW expr .)
    VAR             reduce using rule 229 (new -> NEW expr .)
    STATIC          reduce using rule 229 (new -> NEW expr .)
    LBRACKET        reduce using rule 229 (new -> NEW expr .)
    $end            reduce using rule 229 (new -> NEW expr .)
    RBRACKET        reduce using rule 229 (new -> NEW expr .)
    CASE            reduce using rule 229 (new -> NEW expr .)
    DEFAULT         reduce using rule 229 (new -> NEW expr .)
    OF              reduce using rule 229 (new -> NEW expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 229 (new -> NEW expr .) ]
  ! DOT             [ reduce using rule 229 (new -> NEW expr .) ]
  ! LPAREN          [ reduce using rule 229 (new -> NEW expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 131 ]
  ! TIMES           [ shift and go to state 104 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! INC             [ shift and go to state 128 ]
  ! DEC             [ shift and go to state 137 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! LSBRACKET       [ shift and go to state 100 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 237

    (4) statementlist -> statementlist statement_nonctrl .

    SEMI            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    FUNCTION        reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    CLASS           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    TYPED           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    IF              reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    ELSE            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    WHILE           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    WITH            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    DO              reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    FOR             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    RETURN          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    YIELD           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    BREAK           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    CONTINUE        reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    THROW           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    TRY             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    CATCH           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    FINALLY         reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    SWITCH          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    NATIVE          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    IMPORT          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    EXPORT          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    NUMBER          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    DELETE          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    STRINGLIT       reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    ID              reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    GET             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    SET             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    LSBRACKET       reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    LPAREN          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    MINUS           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    NOT             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    BITINV          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    NEW             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    INC             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    DEC             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    TYPEOF          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    REGEXPR         reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    GLOBAL          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    VAR             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    STATIC          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    TLTHAN          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    LBRACKET        reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    RBRACKET        reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    CASE            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    DEFAULT         reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    $end            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)


state 238

    (3) statementlist -> statementlist statement .

    SEMI            reduce using rule 3 (statementlist -> statementlist statement .)
    FUNCTION        reduce using rule 3 (statementlist -> statementlist statement .)
    CLASS           reduce using rule 3 (statementlist -> statementlist statement .)
    TYPED           reduce using rule 3 (statementlist -> statementlist statement .)
    IF              reduce using rule 3 (statementlist -> statementlist statement .)
    ELSE            reduce using rule 3 (statementlist -> statementlist statement .)
    WHILE           reduce using rule 3 (statementlist -> statementlist statement .)
    WITH            reduce using rule 3 (statementlist -> statementlist statement .)
    DO              reduce using rule 3 (statementlist -> statementlist statement .)
    FOR             reduce using rule 3 (statementlist -> statementlist statement .)
    RETURN          reduce using rule 3 (statementlist -> statementlist statement .)
    YIELD           reduce using rule 3 (statementlist -> statementlist statement .)
    BREAK           reduce using rule 3 (statementlist -> statementlist statement .)
    CONTINUE        reduce using rule 3 (statementlist -> statementlist statement .)
    THROW           reduce using rule 3 (statementlist -> statementlist statement .)
    TRY             reduce using rule 3 (statementlist -> statementlist statement .)
    CATCH           reduce using rule 3 (statementlist -> statementlist statement .)
    FINALLY         reduce using rule 3 (statementlist -> statementlist statement .)
    SWITCH          reduce using rule 3 (statementlist -> statementlist statement .)
    NATIVE          reduce using rule 3 (statementlist -> statementlist statement .)
    IMPORT          reduce using rule 3 (statementlist -> statementlist statement .)
    EXPORT          reduce using rule 3 (statementlist -> statementlist statement .)
    NUMBER          reduce using rule 3 (statementlist -> statementlist statement .)
    DELETE          reduce using rule 3 (statementlist -> statementlist statement .)
    STRINGLIT       reduce using rule 3 (statementlist -> statementlist statement .)
    ID              reduce using rule 3 (statementlist -> statementlist statement .)
    GET             reduce using rule 3 (statementlist -> statementlist statement .)
    SET             reduce using rule 3 (statementlist -> statementlist statement .)
    LSBRACKET       reduce using rule 3 (statementlist -> statementlist statement .)
    LPAREN          reduce using rule 3 (statementlist -> statementlist statement .)
    MINUS           reduce using rule 3 (statementlist -> statementlist statement .)
    NOT             reduce using rule 3 (statementlist -> statementlist statement .)
    BITINV          reduce using rule 3 (statementlist -> statementlist statement .)
    NEW             reduce using rule 3 (statementlist -> statementlist statement .)
    INC             reduce using rule 3 (statementlist -> statementlist statement .)
    DEC             reduce using rule 3 (statementlist -> statementlist statement .)
    TYPEOF          reduce using rule 3 (statementlist -> statementlist statement .)
    REGEXPR         reduce using rule 3 (statementlist -> statementlist statement .)
    GLOBAL          reduce using rule 3 (statementlist -> statementlist statement .)
    VAR             reduce using rule 3 (statementlist -> statementlist statement .)
    STATIC          reduce using rule 3 (statementlist -> statementlist statement .)
    TLTHAN          reduce using rule 3 (statementlist -> statementlist statement .)
    LBRACKET        reduce using rule 3 (statementlist -> statementlist statement .)
    RBRACKET        reduce using rule 3 (statementlist -> statementlist statement .)
    CASE            reduce using rule 3 (statementlist -> statementlist statement .)
    DEFAULT         reduce using rule 3 (statementlist -> statementlist statement .)
    $end            reduce using rule 3 (statementlist -> statementlist statement .)


state 239

    (231) inc -> INC expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    RSHIFT          reduce using rule 231 (inc -> INC expr .)
    LSHIFT          reduce using rule 231 (inc -> INC expr .)
    LLSHIFT         reduce using rule 231 (inc -> INC expr .)
    RRSHIFT         reduce using rule 231 (inc -> INC expr .)
    LAND            reduce using rule 231 (inc -> INC expr .)
    LOR             reduce using rule 231 (inc -> INC expr .)
    BOR             reduce using rule 231 (inc -> INC expr .)
    INSTANCEOF      reduce using rule 231 (inc -> INC expr .)
    BXOR            reduce using rule 231 (inc -> INC expr .)
    BAND            reduce using rule 231 (inc -> INC expr .)
    EQUAL           reduce using rule 231 (inc -> INC expr .)
    EQUAL_STRICT    reduce using rule 231 (inc -> INC expr .)
    NOTEQUAL_STRICT reduce using rule 231 (inc -> INC expr .)
    GTHAN           reduce using rule 231 (inc -> INC expr .)
    GTHANEQ         reduce using rule 231 (inc -> INC expr .)
    LTHAN           reduce using rule 231 (inc -> INC expr .)
    MOD             reduce using rule 231 (inc -> INC expr .)
    LTHANEQ         reduce using rule 231 (inc -> INC expr .)
    NOTEQUAL        reduce using rule 231 (inc -> INC expr .)
    PLUS            reduce using rule 231 (inc -> INC expr .)
    MINUS           reduce using rule 231 (inc -> INC expr .)
    DIVIDE          reduce using rule 231 (inc -> INC expr .)
    TIMES           reduce using rule 231 (inc -> INC expr .)
    IN              reduce using rule 231 (inc -> INC expr .)
    QEST            reduce using rule 231 (inc -> INC expr .)
    COMMA           reduce using rule 231 (inc -> INC expr .)
    INC             reduce using rule 231 (inc -> INC expr .)
    DEC             reduce using rule 231 (inc -> INC expr .)
    ASSIGNPLUS      reduce using rule 231 (inc -> INC expr .)
    ASSIGNMINUS     reduce using rule 231 (inc -> INC expr .)
    ASSIGNDIVIDE    reduce using rule 231 (inc -> INC expr .)
    ASSIGNTIMES     reduce using rule 231 (inc -> INC expr .)
    ASSIGNBOR       reduce using rule 231 (inc -> INC expr .)
    ASSIGNBAND      reduce using rule 231 (inc -> INC expr .)
    ASSIGNBXOR      reduce using rule 231 (inc -> INC expr .)
    ASSIGNLSHIFT    reduce using rule 231 (inc -> INC expr .)
    ASSIGNRSHIFT    reduce using rule 231 (inc -> INC expr .)
    ASSIGNRRSHIFT   reduce using rule 231 (inc -> INC expr .)
    ASSIGNLLSHIFT   reduce using rule 231 (inc -> INC expr .)
    ASSIGN          reduce using rule 231 (inc -> INC expr .)
    LSBRACKET       reduce using rule 231 (inc -> INC expr .)
    TLTHAN          reduce using rule 231 (inc -> INC expr .)
    SEMI            reduce using rule 231 (inc -> INC expr .)
    RPAREN          reduce using rule 231 (inc -> INC expr .)
    RSBRACKET       reduce using rule 231 (inc -> INC expr .)
    COLON           reduce using rule 231 (inc -> INC expr .)
    FUNCTION        reduce using rule 231 (inc -> INC expr .)
    CLASS           reduce using rule 231 (inc -> INC expr .)
    TYPED           reduce using rule 231 (inc -> INC expr .)
    IF              reduce using rule 231 (inc -> INC expr .)
    ELSE            reduce using rule 231 (inc -> INC expr .)
    WHILE           reduce using rule 231 (inc -> INC expr .)
    WITH            reduce using rule 231 (inc -> INC expr .)
    DO              reduce using rule 231 (inc -> INC expr .)
    FOR             reduce using rule 231 (inc -> INC expr .)
    RETURN          reduce using rule 231 (inc -> INC expr .)
    YIELD           reduce using rule 231 (inc -> INC expr .)
    BREAK           reduce using rule 231 (inc -> INC expr .)
    CONTINUE        reduce using rule 231 (inc -> INC expr .)
    THROW           reduce using rule 231 (inc -> INC expr .)
    TRY             reduce using rule 231 (inc -> INC expr .)
    CATCH           reduce using rule 231 (inc -> INC expr .)
    FINALLY         reduce using rule 231 (inc -> INC expr .)
    SWITCH          reduce using rule 231 (inc -> INC expr .)
    NATIVE          reduce using rule 231 (inc -> INC expr .)
    IMPORT          reduce using rule 231 (inc -> INC expr .)
    EXPORT          reduce using rule 231 (inc -> INC expr .)
    NUMBER          reduce using rule 231 (inc -> INC expr .)
    DELETE          reduce using rule 231 (inc -> INC expr .)
    STRINGLIT       reduce using rule 231 (inc -> INC expr .)
    ID              reduce using rule 231 (inc -> INC expr .)
    GET             reduce using rule 231 (inc -> INC expr .)
    SET             reduce using rule 231 (inc -> INC expr .)
    NOT             reduce using rule 231 (inc -> INC expr .)
    BITINV          reduce using rule 231 (inc -> INC expr .)
    NEW             reduce using rule 231 (inc -> INC expr .)
    TYPEOF          reduce using rule 231 (inc -> INC expr .)
    REGEXPR         reduce using rule 231 (inc -> INC expr .)
    GLOBAL          reduce using rule 231 (inc -> INC expr .)
    VAR             reduce using rule 231 (inc -> INC expr .)
    STATIC          reduce using rule 231 (inc -> INC expr .)
    LBRACKET        reduce using rule 231 (inc -> INC expr .)
    $end            reduce using rule 231 (inc -> INC expr .)
    RBRACKET        reduce using rule 231 (inc -> INC expr .)
    CASE            reduce using rule 231 (inc -> INC expr .)
    DEFAULT         reduce using rule 231 (inc -> INC expr .)
    OF              reduce using rule 231 (inc -> INC expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 231 (inc -> INC expr .) ]
  ! DOT             [ reduce using rule 231 (inc -> INC expr .) ]
  ! LPAREN          [ reduce using rule 231 (inc -> INC expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 131 ]
  ! TIMES           [ shift and go to state 104 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! INC             [ shift and go to state 128 ]
  ! DEC             [ shift and go to state 137 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! LSBRACKET       [ shift and go to state 100 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 240

    (327) try -> TRY LBRACKET . statementlist RBRACKET
    (328) try -> TRY LBRACKET . RBRACKET
    (207) lbracket_restrict -> LBRACKET .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! shift/reduce conflict for RBRACKET resolved as shift
  ! shift/reduce conflict for RBRACKET resolved as shift
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for GET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for SET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        shift and go to state 345
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! RBRACKET        [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! GET             [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! SET             [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! RBRACKET        [ reduce using rule 5 (statementlist -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    try                            shift and go to state 42
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 346

state 241

    (326) try -> TRY statement_nonctrl .

    SEMI            reduce using rule 326 (try -> TRY statement_nonctrl .)
    FUNCTION        reduce using rule 326 (try -> TRY statement_nonctrl .)
    CLASS           reduce using rule 326 (try -> TRY statement_nonctrl .)
    TYPED           reduce using rule 326 (try -> TRY statement_nonctrl .)
    IF              reduce using rule 326 (try -> TRY statement_nonctrl .)
    ELSE            reduce using rule 326 (try -> TRY statement_nonctrl .)
    WHILE           reduce using rule 326 (try -> TRY statement_nonctrl .)
    WITH            reduce using rule 326 (try -> TRY statement_nonctrl .)
    DO              reduce using rule 326 (try -> TRY statement_nonctrl .)
    FOR             reduce using rule 326 (try -> TRY statement_nonctrl .)
    RETURN          reduce using rule 326 (try -> TRY statement_nonctrl .)
    YIELD           reduce using rule 326 (try -> TRY statement_nonctrl .)
    BREAK           reduce using rule 326 (try -> TRY statement_nonctrl .)
    CONTINUE        reduce using rule 326 (try -> TRY statement_nonctrl .)
    THROW           reduce using rule 326 (try -> TRY statement_nonctrl .)
    TRY             reduce using rule 326 (try -> TRY statement_nonctrl .)
    CATCH           reduce using rule 326 (try -> TRY statement_nonctrl .)
    FINALLY         reduce using rule 326 (try -> TRY statement_nonctrl .)
    SWITCH          reduce using rule 326 (try -> TRY statement_nonctrl .)
    NATIVE          reduce using rule 326 (try -> TRY statement_nonctrl .)
    IMPORT          reduce using rule 326 (try -> TRY statement_nonctrl .)
    EXPORT          reduce using rule 326 (try -> TRY statement_nonctrl .)
    NUMBER          reduce using rule 326 (try -> TRY statement_nonctrl .)
    DELETE          reduce using rule 326 (try -> TRY statement_nonctrl .)
    STRINGLIT       reduce using rule 326 (try -> TRY statement_nonctrl .)
    ID              reduce using rule 326 (try -> TRY statement_nonctrl .)
    GET             reduce using rule 326 (try -> TRY statement_nonctrl .)
    SET             reduce using rule 326 (try -> TRY statement_nonctrl .)
    LSBRACKET       reduce using rule 326 (try -> TRY statement_nonctrl .)
    LPAREN          reduce using rule 326 (try -> TRY statement_nonctrl .)
    MINUS           reduce using rule 326 (try -> TRY statement_nonctrl .)
    NOT             reduce using rule 326 (try -> TRY statement_nonctrl .)
    BITINV          reduce using rule 326 (try -> TRY statement_nonctrl .)
    NEW             reduce using rule 326 (try -> TRY statement_nonctrl .)
    INC             reduce using rule 326 (try -> TRY statement_nonctrl .)
    DEC             reduce using rule 326 (try -> TRY statement_nonctrl .)
    TYPEOF          reduce using rule 326 (try -> TRY statement_nonctrl .)
    REGEXPR         reduce using rule 326 (try -> TRY statement_nonctrl .)
    GLOBAL          reduce using rule 326 (try -> TRY statement_nonctrl .)
    VAR             reduce using rule 326 (try -> TRY statement_nonctrl .)
    STATIC          reduce using rule 326 (try -> TRY statement_nonctrl .)
    TLTHAN          reduce using rule 326 (try -> TRY statement_nonctrl .)
    LBRACKET        reduce using rule 326 (try -> TRY statement_nonctrl .)
    $end            reduce using rule 326 (try -> TRY statement_nonctrl .)
    RBRACKET        reduce using rule 326 (try -> TRY statement_nonctrl .)
    CASE            reduce using rule 326 (try -> TRY statement_nonctrl .)
    DEFAULT         reduce using rule 326 (try -> TRY statement_nonctrl .)


state 242

    (262) expr -> expr BAND expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 262 (expr -> expr BAND expr .)
    LAND            reduce using rule 262 (expr -> expr BAND expr .)
    LOR             reduce using rule 262 (expr -> expr BAND expr .)
    BOR             reduce using rule 262 (expr -> expr BAND expr .)
    BXOR            reduce using rule 262 (expr -> expr BAND expr .)
    BAND            reduce using rule 262 (expr -> expr BAND expr .)
    MOD             reduce using rule 262 (expr -> expr BAND expr .)
    QEST            reduce using rule 262 (expr -> expr BAND expr .)
    COMMA           reduce using rule 262 (expr -> expr BAND expr .)
    ASSIGNPLUS      reduce using rule 262 (expr -> expr BAND expr .)
    ASSIGNMINUS     reduce using rule 262 (expr -> expr BAND expr .)
    ASSIGNDIVIDE    reduce using rule 262 (expr -> expr BAND expr .)
    ASSIGNTIMES     reduce using rule 262 (expr -> expr BAND expr .)
    ASSIGNBOR       reduce using rule 262 (expr -> expr BAND expr .)
    ASSIGNBAND      reduce using rule 262 (expr -> expr BAND expr .)
    ASSIGNBXOR      reduce using rule 262 (expr -> expr BAND expr .)
    ASSIGNLSHIFT    reduce using rule 262 (expr -> expr BAND expr .)
    ASSIGNRSHIFT    reduce using rule 262 (expr -> expr BAND expr .)
    ASSIGNRRSHIFT   reduce using rule 262 (expr -> expr BAND expr .)
    ASSIGNLLSHIFT   reduce using rule 262 (expr -> expr BAND expr .)
    ASSIGN          reduce using rule 262 (expr -> expr BAND expr .)
    TLTHAN          reduce using rule 262 (expr -> expr BAND expr .)
    SEMI            reduce using rule 262 (expr -> expr BAND expr .)
    RPAREN          reduce using rule 262 (expr -> expr BAND expr .)
    RSBRACKET       reduce using rule 262 (expr -> expr BAND expr .)
    FUNCTION        reduce using rule 262 (expr -> expr BAND expr .)
    CLASS           reduce using rule 262 (expr -> expr BAND expr .)
    TYPED           reduce using rule 262 (expr -> expr BAND expr .)
    IF              reduce using rule 262 (expr -> expr BAND expr .)
    ELSE            reduce using rule 262 (expr -> expr BAND expr .)
    WHILE           reduce using rule 262 (expr -> expr BAND expr .)
    WITH            reduce using rule 262 (expr -> expr BAND expr .)
    DO              reduce using rule 262 (expr -> expr BAND expr .)
    FOR             reduce using rule 262 (expr -> expr BAND expr .)
    RETURN          reduce using rule 262 (expr -> expr BAND expr .)
    YIELD           reduce using rule 262 (expr -> expr BAND expr .)
    BREAK           reduce using rule 262 (expr -> expr BAND expr .)
    CONTINUE        reduce using rule 262 (expr -> expr BAND expr .)
    THROW           reduce using rule 262 (expr -> expr BAND expr .)
    TRY             reduce using rule 262 (expr -> expr BAND expr .)
    CATCH           reduce using rule 262 (expr -> expr BAND expr .)
    FINALLY         reduce using rule 262 (expr -> expr BAND expr .)
    SWITCH          reduce using rule 262 (expr -> expr BAND expr .)
    NATIVE          reduce using rule 262 (expr -> expr BAND expr .)
    IMPORT          reduce using rule 262 (expr -> expr BAND expr .)
    EXPORT          reduce using rule 262 (expr -> expr BAND expr .)
    NUMBER          reduce using rule 262 (expr -> expr BAND expr .)
    DELETE          reduce using rule 262 (expr -> expr BAND expr .)
    STRINGLIT       reduce using rule 262 (expr -> expr BAND expr .)
    ID              reduce using rule 262 (expr -> expr BAND expr .)
    GET             reduce using rule 262 (expr -> expr BAND expr .)
    SET             reduce using rule 262 (expr -> expr BAND expr .)
    NOT             reduce using rule 262 (expr -> expr BAND expr .)
    BITINV          reduce using rule 262 (expr -> expr BAND expr .)
    NEW             reduce using rule 262 (expr -> expr BAND expr .)
    TYPEOF          reduce using rule 262 (expr -> expr BAND expr .)
    REGEXPR         reduce using rule 262 (expr -> expr BAND expr .)
    GLOBAL          reduce using rule 262 (expr -> expr BAND expr .)
    VAR             reduce using rule 262 (expr -> expr BAND expr .)
    STATIC          reduce using rule 262 (expr -> expr BAND expr .)
    LBRACKET        reduce using rule 262 (expr -> expr BAND expr .)
    $end            reduce using rule 262 (expr -> expr BAND expr .)
    RBRACKET        reduce using rule 262 (expr -> expr BAND expr .)
    CASE            reduce using rule 262 (expr -> expr BAND expr .)
    DEFAULT         reduce using rule 262 (expr -> expr BAND expr .)
    OF              reduce using rule 262 (expr -> expr BAND expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INSTANCEOF      shift and go to state 98
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! LSHIFT          [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! LLSHIFT         [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! RRSHIFT         [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! COND_DOT        [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! DOT             [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! INSTANCEOF      [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! EQUAL           [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! GTHAN           [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! GTHANEQ         [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! LTHAN           [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! LTHANEQ         [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! NOTEQUAL        [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! PLUS            [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! MINUS           [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! DIVIDE          [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! TIMES           [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! IN              [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! INC             [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! DEC             [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! LSBRACKET       [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! LPAREN          [ reduce using rule 262 (expr -> expr BAND expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! MOD             [ shift and go to state 113 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 243

    (249) expr -> expr cmplx_assign expr .
    (250) expr -> expr cmplx_assign expr . COLON var_type SEMI
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for LLSHIFT resolved as shift
  ! shift/reduce conflict for RRSHIFT resolved as shift
  ! shift/reduce conflict for COND_DOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for INSTANCEOF resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_STRICT resolved as shift
  ! shift/reduce conflict for NOTEQUAL_STRICT resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for QEST resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for ASSIGNPLUS resolved as shift
  ! shift/reduce conflict for ASSIGNMINUS resolved as shift
  ! shift/reduce conflict for ASSIGNDIVIDE resolved as shift
  ! shift/reduce conflict for ASSIGNTIMES resolved as shift
  ! shift/reduce conflict for ASSIGNBOR resolved as shift
  ! shift/reduce conflict for ASSIGNBAND resolved as shift
  ! shift/reduce conflict for ASSIGNBXOR resolved as shift
  ! shift/reduce conflict for ASSIGNLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNLLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
  ! shift/reduce conflict for TLTHAN resolved as shift
    SEMI            reduce using rule 249 (expr -> expr cmplx_assign expr .)
    RPAREN          reduce using rule 249 (expr -> expr cmplx_assign expr .)
    RSBRACKET       reduce using rule 249 (expr -> expr cmplx_assign expr .)
    FUNCTION        reduce using rule 249 (expr -> expr cmplx_assign expr .)
    CLASS           reduce using rule 249 (expr -> expr cmplx_assign expr .)
    TYPED           reduce using rule 249 (expr -> expr cmplx_assign expr .)
    IF              reduce using rule 249 (expr -> expr cmplx_assign expr .)
    ELSE            reduce using rule 249 (expr -> expr cmplx_assign expr .)
    WHILE           reduce using rule 249 (expr -> expr cmplx_assign expr .)
    WITH            reduce using rule 249 (expr -> expr cmplx_assign expr .)
    DO              reduce using rule 249 (expr -> expr cmplx_assign expr .)
    FOR             reduce using rule 249 (expr -> expr cmplx_assign expr .)
    RETURN          reduce using rule 249 (expr -> expr cmplx_assign expr .)
    YIELD           reduce using rule 249 (expr -> expr cmplx_assign expr .)
    BREAK           reduce using rule 249 (expr -> expr cmplx_assign expr .)
    CONTINUE        reduce using rule 249 (expr -> expr cmplx_assign expr .)
    THROW           reduce using rule 249 (expr -> expr cmplx_assign expr .)
    TRY             reduce using rule 249 (expr -> expr cmplx_assign expr .)
    CATCH           reduce using rule 249 (expr -> expr cmplx_assign expr .)
    FINALLY         reduce using rule 249 (expr -> expr cmplx_assign expr .)
    SWITCH          reduce using rule 249 (expr -> expr cmplx_assign expr .)
    NATIVE          reduce using rule 249 (expr -> expr cmplx_assign expr .)
    IMPORT          reduce using rule 249 (expr -> expr cmplx_assign expr .)
    EXPORT          reduce using rule 249 (expr -> expr cmplx_assign expr .)
    NUMBER          reduce using rule 249 (expr -> expr cmplx_assign expr .)
    DELETE          reduce using rule 249 (expr -> expr cmplx_assign expr .)
    STRINGLIT       reduce using rule 249 (expr -> expr cmplx_assign expr .)
    ID              reduce using rule 249 (expr -> expr cmplx_assign expr .)
    GET             reduce using rule 249 (expr -> expr cmplx_assign expr .)
    SET             reduce using rule 249 (expr -> expr cmplx_assign expr .)
    NOT             reduce using rule 249 (expr -> expr cmplx_assign expr .)
    BITINV          reduce using rule 249 (expr -> expr cmplx_assign expr .)
    NEW             reduce using rule 249 (expr -> expr cmplx_assign expr .)
    TYPEOF          reduce using rule 249 (expr -> expr cmplx_assign expr .)
    REGEXPR         reduce using rule 249 (expr -> expr cmplx_assign expr .)
    GLOBAL          reduce using rule 249 (expr -> expr cmplx_assign expr .)
    VAR             reduce using rule 249 (expr -> expr cmplx_assign expr .)
    STATIC          reduce using rule 249 (expr -> expr cmplx_assign expr .)
    LBRACKET        reduce using rule 249 (expr -> expr cmplx_assign expr .)
    $end            reduce using rule 249 (expr -> expr cmplx_assign expr .)
    RBRACKET        reduce using rule 249 (expr -> expr cmplx_assign expr .)
    CASE            reduce using rule 249 (expr -> expr cmplx_assign expr .)
    DEFAULT         reduce using rule 249 (expr -> expr cmplx_assign expr .)
    OF              reduce using rule 249 (expr -> expr cmplx_assign expr .)
    COLON           shift and go to state 347
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! COLON           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! RSHIFT          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LSHIFT          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LLSHIFT         [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! RRSHIFT         [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! COND_DOT        [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! DOT             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LAND            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LOR             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! BOR             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! INSTANCEOF      [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! BXOR            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! BAND            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! EQUAL           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! GTHAN           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! GTHANEQ         [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LTHAN           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! MOD             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LTHANEQ         [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! NOTEQUAL        [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! PLUS            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! MINUS           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! DIVIDE          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! TIMES           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! IN              [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! QEST            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! COMMA           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! INC             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! DEC             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNPLUS      [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNBOR       [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNBAND      [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNLSHIFT    [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNRSHIFT    [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNRRSHIFT   [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNLLSHIFT   [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGN          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LSBRACKET       [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! TLTHAN          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LPAREN          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 244

    (257) expr -> expr LAND expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 257 (expr -> expr LAND expr .)
    LAND            reduce using rule 257 (expr -> expr LAND expr .)
    LOR             reduce using rule 257 (expr -> expr LAND expr .)
    MOD             reduce using rule 257 (expr -> expr LAND expr .)
    QEST            reduce using rule 257 (expr -> expr LAND expr .)
    COMMA           reduce using rule 257 (expr -> expr LAND expr .)
    ASSIGNPLUS      reduce using rule 257 (expr -> expr LAND expr .)
    ASSIGNMINUS     reduce using rule 257 (expr -> expr LAND expr .)
    ASSIGNDIVIDE    reduce using rule 257 (expr -> expr LAND expr .)
    ASSIGNTIMES     reduce using rule 257 (expr -> expr LAND expr .)
    ASSIGNBOR       reduce using rule 257 (expr -> expr LAND expr .)
    ASSIGNBAND      reduce using rule 257 (expr -> expr LAND expr .)
    ASSIGNBXOR      reduce using rule 257 (expr -> expr LAND expr .)
    ASSIGNLSHIFT    reduce using rule 257 (expr -> expr LAND expr .)
    ASSIGNRSHIFT    reduce using rule 257 (expr -> expr LAND expr .)
    ASSIGNRRSHIFT   reduce using rule 257 (expr -> expr LAND expr .)
    ASSIGNLLSHIFT   reduce using rule 257 (expr -> expr LAND expr .)
    ASSIGN          reduce using rule 257 (expr -> expr LAND expr .)
    TLTHAN          reduce using rule 257 (expr -> expr LAND expr .)
    SEMI            reduce using rule 257 (expr -> expr LAND expr .)
    RPAREN          reduce using rule 257 (expr -> expr LAND expr .)
    RSBRACKET       reduce using rule 257 (expr -> expr LAND expr .)
    FUNCTION        reduce using rule 257 (expr -> expr LAND expr .)
    CLASS           reduce using rule 257 (expr -> expr LAND expr .)
    TYPED           reduce using rule 257 (expr -> expr LAND expr .)
    IF              reduce using rule 257 (expr -> expr LAND expr .)
    ELSE            reduce using rule 257 (expr -> expr LAND expr .)
    WHILE           reduce using rule 257 (expr -> expr LAND expr .)
    WITH            reduce using rule 257 (expr -> expr LAND expr .)
    DO              reduce using rule 257 (expr -> expr LAND expr .)
    FOR             reduce using rule 257 (expr -> expr LAND expr .)
    RETURN          reduce using rule 257 (expr -> expr LAND expr .)
    YIELD           reduce using rule 257 (expr -> expr LAND expr .)
    BREAK           reduce using rule 257 (expr -> expr LAND expr .)
    CONTINUE        reduce using rule 257 (expr -> expr LAND expr .)
    THROW           reduce using rule 257 (expr -> expr LAND expr .)
    TRY             reduce using rule 257 (expr -> expr LAND expr .)
    CATCH           reduce using rule 257 (expr -> expr LAND expr .)
    FINALLY         reduce using rule 257 (expr -> expr LAND expr .)
    SWITCH          reduce using rule 257 (expr -> expr LAND expr .)
    NATIVE          reduce using rule 257 (expr -> expr LAND expr .)
    IMPORT          reduce using rule 257 (expr -> expr LAND expr .)
    EXPORT          reduce using rule 257 (expr -> expr LAND expr .)
    NUMBER          reduce using rule 257 (expr -> expr LAND expr .)
    DELETE          reduce using rule 257 (expr -> expr LAND expr .)
    STRINGLIT       reduce using rule 257 (expr -> expr LAND expr .)
    ID              reduce using rule 257 (expr -> expr LAND expr .)
    GET             reduce using rule 257 (expr -> expr LAND expr .)
    SET             reduce using rule 257 (expr -> expr LAND expr .)
    NOT             reduce using rule 257 (expr -> expr LAND expr .)
    BITINV          reduce using rule 257 (expr -> expr LAND expr .)
    NEW             reduce using rule 257 (expr -> expr LAND expr .)
    TYPEOF          reduce using rule 257 (expr -> expr LAND expr .)
    REGEXPR         reduce using rule 257 (expr -> expr LAND expr .)
    GLOBAL          reduce using rule 257 (expr -> expr LAND expr .)
    VAR             reduce using rule 257 (expr -> expr LAND expr .)
    STATIC          reduce using rule 257 (expr -> expr LAND expr .)
    LBRACKET        reduce using rule 257 (expr -> expr LAND expr .)
    $end            reduce using rule 257 (expr -> expr LAND expr .)
    RBRACKET        reduce using rule 257 (expr -> expr LAND expr .)
    CASE            reduce using rule 257 (expr -> expr LAND expr .)
    DEFAULT         reduce using rule 257 (expr -> expr LAND expr .)
    OF              reduce using rule 257 (expr -> expr LAND expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! LSHIFT          [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! LLSHIFT         [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! RRSHIFT         [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! COND_DOT        [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! DOT             [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! BOR             [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! INSTANCEOF      [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! BXOR            [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! BAND            [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! EQUAL           [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! GTHAN           [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! GTHANEQ         [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! LTHAN           [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! LTHANEQ         [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! NOTEQUAL        [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! PLUS            [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! MINUS           [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! DIVIDE          [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! TIMES           [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! IN              [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! INC             [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! DEC             [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! LSBRACKET       [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! LPAREN          [ reduce using rule 257 (expr -> expr LAND expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! MOD             [ shift and go to state 113 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 245

    (272) expr -> expr PLUS expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 272 (expr -> expr PLUS expr .)
    RSHIFT          reduce using rule 272 (expr -> expr PLUS expr .)
    LSHIFT          reduce using rule 272 (expr -> expr PLUS expr .)
    LLSHIFT         reduce using rule 272 (expr -> expr PLUS expr .)
    RRSHIFT         reduce using rule 272 (expr -> expr PLUS expr .)
    LAND            reduce using rule 272 (expr -> expr PLUS expr .)
    LOR             reduce using rule 272 (expr -> expr PLUS expr .)
    BOR             reduce using rule 272 (expr -> expr PLUS expr .)
    INSTANCEOF      reduce using rule 272 (expr -> expr PLUS expr .)
    BXOR            reduce using rule 272 (expr -> expr PLUS expr .)
    BAND            reduce using rule 272 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 272 (expr -> expr PLUS expr .)
    EQUAL_STRICT    reduce using rule 272 (expr -> expr PLUS expr .)
    NOTEQUAL_STRICT reduce using rule 272 (expr -> expr PLUS expr .)
    GTHAN           reduce using rule 272 (expr -> expr PLUS expr .)
    GTHANEQ         reduce using rule 272 (expr -> expr PLUS expr .)
    LTHAN           reduce using rule 272 (expr -> expr PLUS expr .)
    MOD             reduce using rule 272 (expr -> expr PLUS expr .)
    LTHANEQ         reduce using rule 272 (expr -> expr PLUS expr .)
    NOTEQUAL        reduce using rule 272 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 272 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 272 (expr -> expr PLUS expr .)
    IN              reduce using rule 272 (expr -> expr PLUS expr .)
    QEST            reduce using rule 272 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 272 (expr -> expr PLUS expr .)
    ASSIGNPLUS      reduce using rule 272 (expr -> expr PLUS expr .)
    ASSIGNMINUS     reduce using rule 272 (expr -> expr PLUS expr .)
    ASSIGNDIVIDE    reduce using rule 272 (expr -> expr PLUS expr .)
    ASSIGNTIMES     reduce using rule 272 (expr -> expr PLUS expr .)
    ASSIGNBOR       reduce using rule 272 (expr -> expr PLUS expr .)
    ASSIGNBAND      reduce using rule 272 (expr -> expr PLUS expr .)
    ASSIGNBXOR      reduce using rule 272 (expr -> expr PLUS expr .)
    ASSIGNLSHIFT    reduce using rule 272 (expr -> expr PLUS expr .)
    ASSIGNRSHIFT    reduce using rule 272 (expr -> expr PLUS expr .)
    ASSIGNRRSHIFT   reduce using rule 272 (expr -> expr PLUS expr .)
    ASSIGNLLSHIFT   reduce using rule 272 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 272 (expr -> expr PLUS expr .)
    TLTHAN          reduce using rule 272 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 272 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 272 (expr -> expr PLUS expr .)
    RSBRACKET       reduce using rule 272 (expr -> expr PLUS expr .)
    FUNCTION        reduce using rule 272 (expr -> expr PLUS expr .)
    CLASS           reduce using rule 272 (expr -> expr PLUS expr .)
    TYPED           reduce using rule 272 (expr -> expr PLUS expr .)
    IF              reduce using rule 272 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 272 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 272 (expr -> expr PLUS expr .)
    WITH            reduce using rule 272 (expr -> expr PLUS expr .)
    DO              reduce using rule 272 (expr -> expr PLUS expr .)
    FOR             reduce using rule 272 (expr -> expr PLUS expr .)
    RETURN          reduce using rule 272 (expr -> expr PLUS expr .)
    YIELD           reduce using rule 272 (expr -> expr PLUS expr .)
    BREAK           reduce using rule 272 (expr -> expr PLUS expr .)
    CONTINUE        reduce using rule 272 (expr -> expr PLUS expr .)
    THROW           reduce using rule 272 (expr -> expr PLUS expr .)
    TRY             reduce using rule 272 (expr -> expr PLUS expr .)
    CATCH           reduce using rule 272 (expr -> expr PLUS expr .)
    FINALLY         reduce using rule 272 (expr -> expr PLUS expr .)
    SWITCH          reduce using rule 272 (expr -> expr PLUS expr .)
    NATIVE          reduce using rule 272 (expr -> expr PLUS expr .)
    IMPORT          reduce using rule 272 (expr -> expr PLUS expr .)
    EXPORT          reduce using rule 272 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 272 (expr -> expr PLUS expr .)
    DELETE          reduce using rule 272 (expr -> expr PLUS expr .)
    STRINGLIT       reduce using rule 272 (expr -> expr PLUS expr .)
    ID              reduce using rule 272 (expr -> expr PLUS expr .)
    GET             reduce using rule 272 (expr -> expr PLUS expr .)
    SET             reduce using rule 272 (expr -> expr PLUS expr .)
    NOT             reduce using rule 272 (expr -> expr PLUS expr .)
    BITINV          reduce using rule 272 (expr -> expr PLUS expr .)
    NEW             reduce using rule 272 (expr -> expr PLUS expr .)
    TYPEOF          reduce using rule 272 (expr -> expr PLUS expr .)
    REGEXPR         reduce using rule 272 (expr -> expr PLUS expr .)
    GLOBAL          reduce using rule 272 (expr -> expr PLUS expr .)
    VAR             reduce using rule 272 (expr -> expr PLUS expr .)
    STATIC          reduce using rule 272 (expr -> expr PLUS expr .)
    LBRACKET        reduce using rule 272 (expr -> expr PLUS expr .)
    $end            reduce using rule 272 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 272 (expr -> expr PLUS expr .)
    CASE            reduce using rule 272 (expr -> expr PLUS expr .)
    DEFAULT         reduce using rule 272 (expr -> expr PLUS expr .)
    OF              reduce using rule 272 (expr -> expr PLUS expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 272 (expr -> expr PLUS expr .) ]
  ! DOT             [ reduce using rule 272 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 272 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 272 (expr -> expr PLUS expr .) ]
  ! INC             [ reduce using rule 272 (expr -> expr PLUS expr .) ]
  ! DEC             [ reduce using rule 272 (expr -> expr PLUS expr .) ]
  ! LSBRACKET       [ reduce using rule 272 (expr -> expr PLUS expr .) ]
  ! LPAREN          [ reduce using rule 272 (expr -> expr PLUS expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 246

    (252) expr -> expr LSHIFT expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 252 (expr -> expr LSHIFT expr .)
    RSHIFT          reduce using rule 252 (expr -> expr LSHIFT expr .)
    LSHIFT          reduce using rule 252 (expr -> expr LSHIFT expr .)
    LLSHIFT         reduce using rule 252 (expr -> expr LSHIFT expr .)
    RRSHIFT         reduce using rule 252 (expr -> expr LSHIFT expr .)
    LAND            reduce using rule 252 (expr -> expr LSHIFT expr .)
    LOR             reduce using rule 252 (expr -> expr LSHIFT expr .)
    BOR             reduce using rule 252 (expr -> expr LSHIFT expr .)
    INSTANCEOF      reduce using rule 252 (expr -> expr LSHIFT expr .)
    BXOR            reduce using rule 252 (expr -> expr LSHIFT expr .)
    BAND            reduce using rule 252 (expr -> expr LSHIFT expr .)
    EQUAL           reduce using rule 252 (expr -> expr LSHIFT expr .)
    EQUAL_STRICT    reduce using rule 252 (expr -> expr LSHIFT expr .)
    NOTEQUAL_STRICT reduce using rule 252 (expr -> expr LSHIFT expr .)
    GTHAN           reduce using rule 252 (expr -> expr LSHIFT expr .)
    GTHANEQ         reduce using rule 252 (expr -> expr LSHIFT expr .)
    LTHAN           reduce using rule 252 (expr -> expr LSHIFT expr .)
    MOD             reduce using rule 252 (expr -> expr LSHIFT expr .)
    LTHANEQ         reduce using rule 252 (expr -> expr LSHIFT expr .)
    NOTEQUAL        reduce using rule 252 (expr -> expr LSHIFT expr .)
    IN              reduce using rule 252 (expr -> expr LSHIFT expr .)
    QEST            reduce using rule 252 (expr -> expr LSHIFT expr .)
    COMMA           reduce using rule 252 (expr -> expr LSHIFT expr .)
    ASSIGNPLUS      reduce using rule 252 (expr -> expr LSHIFT expr .)
    ASSIGNMINUS     reduce using rule 252 (expr -> expr LSHIFT expr .)
    ASSIGNDIVIDE    reduce using rule 252 (expr -> expr LSHIFT expr .)
    ASSIGNTIMES     reduce using rule 252 (expr -> expr LSHIFT expr .)
    ASSIGNBOR       reduce using rule 252 (expr -> expr LSHIFT expr .)
    ASSIGNBAND      reduce using rule 252 (expr -> expr LSHIFT expr .)
    ASSIGNBXOR      reduce using rule 252 (expr -> expr LSHIFT expr .)
    ASSIGNLSHIFT    reduce using rule 252 (expr -> expr LSHIFT expr .)
    ASSIGNRSHIFT    reduce using rule 252 (expr -> expr LSHIFT expr .)
    ASSIGNRRSHIFT   reduce using rule 252 (expr -> expr LSHIFT expr .)
    ASSIGNLLSHIFT   reduce using rule 252 (expr -> expr LSHIFT expr .)
    ASSIGN          reduce using rule 252 (expr -> expr LSHIFT expr .)
    TLTHAN          reduce using rule 252 (expr -> expr LSHIFT expr .)
    SEMI            reduce using rule 252 (expr -> expr LSHIFT expr .)
    RPAREN          reduce using rule 252 (expr -> expr LSHIFT expr .)
    RSBRACKET       reduce using rule 252 (expr -> expr LSHIFT expr .)
    FUNCTION        reduce using rule 252 (expr -> expr LSHIFT expr .)
    CLASS           reduce using rule 252 (expr -> expr LSHIFT expr .)
    TYPED           reduce using rule 252 (expr -> expr LSHIFT expr .)
    IF              reduce using rule 252 (expr -> expr LSHIFT expr .)
    ELSE            reduce using rule 252 (expr -> expr LSHIFT expr .)
    WHILE           reduce using rule 252 (expr -> expr LSHIFT expr .)
    WITH            reduce using rule 252 (expr -> expr LSHIFT expr .)
    DO              reduce using rule 252 (expr -> expr LSHIFT expr .)
    FOR             reduce using rule 252 (expr -> expr LSHIFT expr .)
    RETURN          reduce using rule 252 (expr -> expr LSHIFT expr .)
    YIELD           reduce using rule 252 (expr -> expr LSHIFT expr .)
    BREAK           reduce using rule 252 (expr -> expr LSHIFT expr .)
    CONTINUE        reduce using rule 252 (expr -> expr LSHIFT expr .)
    THROW           reduce using rule 252 (expr -> expr LSHIFT expr .)
    TRY             reduce using rule 252 (expr -> expr LSHIFT expr .)
    CATCH           reduce using rule 252 (expr -> expr LSHIFT expr .)
    FINALLY         reduce using rule 252 (expr -> expr LSHIFT expr .)
    SWITCH          reduce using rule 252 (expr -> expr LSHIFT expr .)
    NATIVE          reduce using rule 252 (expr -> expr LSHIFT expr .)
    IMPORT          reduce using rule 252 (expr -> expr LSHIFT expr .)
    EXPORT          reduce using rule 252 (expr -> expr LSHIFT expr .)
    NUMBER          reduce using rule 252 (expr -> expr LSHIFT expr .)
    DELETE          reduce using rule 252 (expr -> expr LSHIFT expr .)
    STRINGLIT       reduce using rule 252 (expr -> expr LSHIFT expr .)
    ID              reduce using rule 252 (expr -> expr LSHIFT expr .)
    GET             reduce using rule 252 (expr -> expr LSHIFT expr .)
    SET             reduce using rule 252 (expr -> expr LSHIFT expr .)
    NOT             reduce using rule 252 (expr -> expr LSHIFT expr .)
    BITINV          reduce using rule 252 (expr -> expr LSHIFT expr .)
    NEW             reduce using rule 252 (expr -> expr LSHIFT expr .)
    TYPEOF          reduce using rule 252 (expr -> expr LSHIFT expr .)
    REGEXPR         reduce using rule 252 (expr -> expr LSHIFT expr .)
    GLOBAL          reduce using rule 252 (expr -> expr LSHIFT expr .)
    VAR             reduce using rule 252 (expr -> expr LSHIFT expr .)
    STATIC          reduce using rule 252 (expr -> expr LSHIFT expr .)
    LBRACKET        reduce using rule 252 (expr -> expr LSHIFT expr .)
    $end            reduce using rule 252 (expr -> expr LSHIFT expr .)
    RBRACKET        reduce using rule 252 (expr -> expr LSHIFT expr .)
    CASE            reduce using rule 252 (expr -> expr LSHIFT expr .)
    DEFAULT         reduce using rule 252 (expr -> expr LSHIFT expr .)
    OF              reduce using rule 252 (expr -> expr LSHIFT expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 252 (expr -> expr LSHIFT expr .) ]
  ! DOT             [ reduce using rule 252 (expr -> expr LSHIFT expr .) ]
  ! PLUS            [ reduce using rule 252 (expr -> expr LSHIFT expr .) ]
  ! MINUS           [ reduce using rule 252 (expr -> expr LSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 252 (expr -> expr LSHIFT expr .) ]
  ! TIMES           [ reduce using rule 252 (expr -> expr LSHIFT expr .) ]
  ! INC             [ reduce using rule 252 (expr -> expr LSHIFT expr .) ]
  ! DEC             [ reduce using rule 252 (expr -> expr LSHIFT expr .) ]
  ! LSBRACKET       [ reduce using rule 252 (expr -> expr LSHIFT expr .) ]
  ! LPAREN          [ reduce using rule 252 (expr -> expr LSHIFT expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 247

    (260) expr -> expr INSTANCEOF expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    LAND            reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    LOR             reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    BOR             reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    INSTANCEOF      reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    BXOR            reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    BAND            reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    EQUAL           reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    EQUAL_STRICT    reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    NOTEQUAL_STRICT reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    GTHAN           reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    GTHANEQ         reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    LTHAN           reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    MOD             reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    LTHANEQ         reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    NOTEQUAL        reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    QEST            reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    COMMA           reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ASSIGNPLUS      reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ASSIGNMINUS     reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ASSIGNDIVIDE    reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ASSIGNTIMES     reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ASSIGNBOR       reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ASSIGNBAND      reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ASSIGNBXOR      reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ASSIGNLSHIFT    reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ASSIGNRSHIFT    reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ASSIGNRRSHIFT   reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ASSIGNLLSHIFT   reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ASSIGN          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    TLTHAN          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    SEMI            reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    RPAREN          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    RSBRACKET       reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    FUNCTION        reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    CLASS           reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    TYPED           reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    IF              reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ELSE            reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    WHILE           reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    WITH            reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    DO              reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    FOR             reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    RETURN          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    YIELD           reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    BREAK           reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    CONTINUE        reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    THROW           reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    TRY             reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    CATCH           reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    FINALLY         reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    SWITCH          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    NATIVE          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    IMPORT          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    EXPORT          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    NUMBER          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    DELETE          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    STRINGLIT       reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    ID              reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    GET             reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    SET             reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    NOT             reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    BITINV          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    NEW             reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    TYPEOF          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    REGEXPR         reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    GLOBAL          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    VAR             reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    STATIC          reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    LBRACKET        reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    $end            reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    RBRACKET        reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    CASE            reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    DEFAULT         reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    OF              reduce using rule 260 (expr -> expr INSTANCEOF expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! LSHIFT          [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! LLSHIFT         [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! RRSHIFT         [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! COND_DOT        [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! DOT             [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! PLUS            [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! MINUS           [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! DIVIDE          [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! TIMES           [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! IN              [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! INC             [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! DEC             [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! LSBRACKET       [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! LPAREN          [ reduce using rule 260 (expr -> expr INSTANCEOF expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 248

    (263) expr -> expr EQUAL expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 263 (expr -> expr EQUAL expr .)
    LAND            reduce using rule 263 (expr -> expr EQUAL expr .)
    LOR             reduce using rule 263 (expr -> expr EQUAL expr .)
    BOR             reduce using rule 263 (expr -> expr EQUAL expr .)
    BXOR            reduce using rule 263 (expr -> expr EQUAL expr .)
    BAND            reduce using rule 263 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 263 (expr -> expr EQUAL expr .)
    EQUAL_STRICT    reduce using rule 263 (expr -> expr EQUAL expr .)
    NOTEQUAL_STRICT reduce using rule 263 (expr -> expr EQUAL expr .)
    GTHAN           reduce using rule 263 (expr -> expr EQUAL expr .)
    GTHANEQ         reduce using rule 263 (expr -> expr EQUAL expr .)
    LTHAN           reduce using rule 263 (expr -> expr EQUAL expr .)
    MOD             reduce using rule 263 (expr -> expr EQUAL expr .)
    LTHANEQ         reduce using rule 263 (expr -> expr EQUAL expr .)
    NOTEQUAL        reduce using rule 263 (expr -> expr EQUAL expr .)
    QEST            reduce using rule 263 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 263 (expr -> expr EQUAL expr .)
    ASSIGNPLUS      reduce using rule 263 (expr -> expr EQUAL expr .)
    ASSIGNMINUS     reduce using rule 263 (expr -> expr EQUAL expr .)
    ASSIGNDIVIDE    reduce using rule 263 (expr -> expr EQUAL expr .)
    ASSIGNTIMES     reduce using rule 263 (expr -> expr EQUAL expr .)
    ASSIGNBOR       reduce using rule 263 (expr -> expr EQUAL expr .)
    ASSIGNBAND      reduce using rule 263 (expr -> expr EQUAL expr .)
    ASSIGNBXOR      reduce using rule 263 (expr -> expr EQUAL expr .)
    ASSIGNLSHIFT    reduce using rule 263 (expr -> expr EQUAL expr .)
    ASSIGNRSHIFT    reduce using rule 263 (expr -> expr EQUAL expr .)
    ASSIGNRRSHIFT   reduce using rule 263 (expr -> expr EQUAL expr .)
    ASSIGNLLSHIFT   reduce using rule 263 (expr -> expr EQUAL expr .)
    ASSIGN          reduce using rule 263 (expr -> expr EQUAL expr .)
    TLTHAN          reduce using rule 263 (expr -> expr EQUAL expr .)
    SEMI            reduce using rule 263 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 263 (expr -> expr EQUAL expr .)
    RSBRACKET       reduce using rule 263 (expr -> expr EQUAL expr .)
    FUNCTION        reduce using rule 263 (expr -> expr EQUAL expr .)
    CLASS           reduce using rule 263 (expr -> expr EQUAL expr .)
    TYPED           reduce using rule 263 (expr -> expr EQUAL expr .)
    IF              reduce using rule 263 (expr -> expr EQUAL expr .)
    ELSE            reduce using rule 263 (expr -> expr EQUAL expr .)
    WHILE           reduce using rule 263 (expr -> expr EQUAL expr .)
    WITH            reduce using rule 263 (expr -> expr EQUAL expr .)
    DO              reduce using rule 263 (expr -> expr EQUAL expr .)
    FOR             reduce using rule 263 (expr -> expr EQUAL expr .)
    RETURN          reduce using rule 263 (expr -> expr EQUAL expr .)
    YIELD           reduce using rule 263 (expr -> expr EQUAL expr .)
    BREAK           reduce using rule 263 (expr -> expr EQUAL expr .)
    CONTINUE        reduce using rule 263 (expr -> expr EQUAL expr .)
    THROW           reduce using rule 263 (expr -> expr EQUAL expr .)
    TRY             reduce using rule 263 (expr -> expr EQUAL expr .)
    CATCH           reduce using rule 263 (expr -> expr EQUAL expr .)
    FINALLY         reduce using rule 263 (expr -> expr EQUAL expr .)
    SWITCH          reduce using rule 263 (expr -> expr EQUAL expr .)
    NATIVE          reduce using rule 263 (expr -> expr EQUAL expr .)
    IMPORT          reduce using rule 263 (expr -> expr EQUAL expr .)
    EXPORT          reduce using rule 263 (expr -> expr EQUAL expr .)
    NUMBER          reduce using rule 263 (expr -> expr EQUAL expr .)
    DELETE          reduce using rule 263 (expr -> expr EQUAL expr .)
    STRINGLIT       reduce using rule 263 (expr -> expr EQUAL expr .)
    ID              reduce using rule 263 (expr -> expr EQUAL expr .)
    GET             reduce using rule 263 (expr -> expr EQUAL expr .)
    SET             reduce using rule 263 (expr -> expr EQUAL expr .)
    NOT             reduce using rule 263 (expr -> expr EQUAL expr .)
    BITINV          reduce using rule 263 (expr -> expr EQUAL expr .)
    NEW             reduce using rule 263 (expr -> expr EQUAL expr .)
    TYPEOF          reduce using rule 263 (expr -> expr EQUAL expr .)
    REGEXPR         reduce using rule 263 (expr -> expr EQUAL expr .)
    GLOBAL          reduce using rule 263 (expr -> expr EQUAL expr .)
    VAR             reduce using rule 263 (expr -> expr EQUAL expr .)
    STATIC          reduce using rule 263 (expr -> expr EQUAL expr .)
    LBRACKET        reduce using rule 263 (expr -> expr EQUAL expr .)
    $end            reduce using rule 263 (expr -> expr EQUAL expr .)
    RBRACKET        reduce using rule 263 (expr -> expr EQUAL expr .)
    CASE            reduce using rule 263 (expr -> expr EQUAL expr .)
    DEFAULT         reduce using rule 263 (expr -> expr EQUAL expr .)
    OF              reduce using rule 263 (expr -> expr EQUAL expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INSTANCEOF      shift and go to state 98
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! LLSHIFT         [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! RRSHIFT         [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! COND_DOT        [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! DOT             [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! TIMES           [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! IN              [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! INC             [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! DEC             [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! LSBRACKET       [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! LPAREN          [ reduce using rule 263 (expr -> expr EQUAL expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 249

    (251) expr -> expr RSHIFT expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 251 (expr -> expr RSHIFT expr .)
    RSHIFT          reduce using rule 251 (expr -> expr RSHIFT expr .)
    LSHIFT          reduce using rule 251 (expr -> expr RSHIFT expr .)
    LLSHIFT         reduce using rule 251 (expr -> expr RSHIFT expr .)
    RRSHIFT         reduce using rule 251 (expr -> expr RSHIFT expr .)
    LAND            reduce using rule 251 (expr -> expr RSHIFT expr .)
    LOR             reduce using rule 251 (expr -> expr RSHIFT expr .)
    BOR             reduce using rule 251 (expr -> expr RSHIFT expr .)
    INSTANCEOF      reduce using rule 251 (expr -> expr RSHIFT expr .)
    BXOR            reduce using rule 251 (expr -> expr RSHIFT expr .)
    BAND            reduce using rule 251 (expr -> expr RSHIFT expr .)
    EQUAL           reduce using rule 251 (expr -> expr RSHIFT expr .)
    EQUAL_STRICT    reduce using rule 251 (expr -> expr RSHIFT expr .)
    NOTEQUAL_STRICT reduce using rule 251 (expr -> expr RSHIFT expr .)
    GTHAN           reduce using rule 251 (expr -> expr RSHIFT expr .)
    GTHANEQ         reduce using rule 251 (expr -> expr RSHIFT expr .)
    LTHAN           reduce using rule 251 (expr -> expr RSHIFT expr .)
    MOD             reduce using rule 251 (expr -> expr RSHIFT expr .)
    LTHANEQ         reduce using rule 251 (expr -> expr RSHIFT expr .)
    NOTEQUAL        reduce using rule 251 (expr -> expr RSHIFT expr .)
    IN              reduce using rule 251 (expr -> expr RSHIFT expr .)
    QEST            reduce using rule 251 (expr -> expr RSHIFT expr .)
    COMMA           reduce using rule 251 (expr -> expr RSHIFT expr .)
    ASSIGNPLUS      reduce using rule 251 (expr -> expr RSHIFT expr .)
    ASSIGNMINUS     reduce using rule 251 (expr -> expr RSHIFT expr .)
    ASSIGNDIVIDE    reduce using rule 251 (expr -> expr RSHIFT expr .)
    ASSIGNTIMES     reduce using rule 251 (expr -> expr RSHIFT expr .)
    ASSIGNBOR       reduce using rule 251 (expr -> expr RSHIFT expr .)
    ASSIGNBAND      reduce using rule 251 (expr -> expr RSHIFT expr .)
    ASSIGNBXOR      reduce using rule 251 (expr -> expr RSHIFT expr .)
    ASSIGNLSHIFT    reduce using rule 251 (expr -> expr RSHIFT expr .)
    ASSIGNRSHIFT    reduce using rule 251 (expr -> expr RSHIFT expr .)
    ASSIGNRRSHIFT   reduce using rule 251 (expr -> expr RSHIFT expr .)
    ASSIGNLLSHIFT   reduce using rule 251 (expr -> expr RSHIFT expr .)
    ASSIGN          reduce using rule 251 (expr -> expr RSHIFT expr .)
    TLTHAN          reduce using rule 251 (expr -> expr RSHIFT expr .)
    SEMI            reduce using rule 251 (expr -> expr RSHIFT expr .)
    RPAREN          reduce using rule 251 (expr -> expr RSHIFT expr .)
    RSBRACKET       reduce using rule 251 (expr -> expr RSHIFT expr .)
    FUNCTION        reduce using rule 251 (expr -> expr RSHIFT expr .)
    CLASS           reduce using rule 251 (expr -> expr RSHIFT expr .)
    TYPED           reduce using rule 251 (expr -> expr RSHIFT expr .)
    IF              reduce using rule 251 (expr -> expr RSHIFT expr .)
    ELSE            reduce using rule 251 (expr -> expr RSHIFT expr .)
    WHILE           reduce using rule 251 (expr -> expr RSHIFT expr .)
    WITH            reduce using rule 251 (expr -> expr RSHIFT expr .)
    DO              reduce using rule 251 (expr -> expr RSHIFT expr .)
    FOR             reduce using rule 251 (expr -> expr RSHIFT expr .)
    RETURN          reduce using rule 251 (expr -> expr RSHIFT expr .)
    YIELD           reduce using rule 251 (expr -> expr RSHIFT expr .)
    BREAK           reduce using rule 251 (expr -> expr RSHIFT expr .)
    CONTINUE        reduce using rule 251 (expr -> expr RSHIFT expr .)
    THROW           reduce using rule 251 (expr -> expr RSHIFT expr .)
    TRY             reduce using rule 251 (expr -> expr RSHIFT expr .)
    CATCH           reduce using rule 251 (expr -> expr RSHIFT expr .)
    FINALLY         reduce using rule 251 (expr -> expr RSHIFT expr .)
    SWITCH          reduce using rule 251 (expr -> expr RSHIFT expr .)
    NATIVE          reduce using rule 251 (expr -> expr RSHIFT expr .)
    IMPORT          reduce using rule 251 (expr -> expr RSHIFT expr .)
    EXPORT          reduce using rule 251 (expr -> expr RSHIFT expr .)
    NUMBER          reduce using rule 251 (expr -> expr RSHIFT expr .)
    DELETE          reduce using rule 251 (expr -> expr RSHIFT expr .)
    STRINGLIT       reduce using rule 251 (expr -> expr RSHIFT expr .)
    ID              reduce using rule 251 (expr -> expr RSHIFT expr .)
    GET             reduce using rule 251 (expr -> expr RSHIFT expr .)
    SET             reduce using rule 251 (expr -> expr RSHIFT expr .)
    NOT             reduce using rule 251 (expr -> expr RSHIFT expr .)
    BITINV          reduce using rule 251 (expr -> expr RSHIFT expr .)
    NEW             reduce using rule 251 (expr -> expr RSHIFT expr .)
    TYPEOF          reduce using rule 251 (expr -> expr RSHIFT expr .)
    REGEXPR         reduce using rule 251 (expr -> expr RSHIFT expr .)
    GLOBAL          reduce using rule 251 (expr -> expr RSHIFT expr .)
    VAR             reduce using rule 251 (expr -> expr RSHIFT expr .)
    STATIC          reduce using rule 251 (expr -> expr RSHIFT expr .)
    LBRACKET        reduce using rule 251 (expr -> expr RSHIFT expr .)
    $end            reduce using rule 251 (expr -> expr RSHIFT expr .)
    RBRACKET        reduce using rule 251 (expr -> expr RSHIFT expr .)
    CASE            reduce using rule 251 (expr -> expr RSHIFT expr .)
    DEFAULT         reduce using rule 251 (expr -> expr RSHIFT expr .)
    OF              reduce using rule 251 (expr -> expr RSHIFT expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 251 (expr -> expr RSHIFT expr .) ]
  ! DOT             [ reduce using rule 251 (expr -> expr RSHIFT expr .) ]
  ! PLUS            [ reduce using rule 251 (expr -> expr RSHIFT expr .) ]
  ! MINUS           [ reduce using rule 251 (expr -> expr RSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 251 (expr -> expr RSHIFT expr .) ]
  ! TIMES           [ reduce using rule 251 (expr -> expr RSHIFT expr .) ]
  ! INC             [ reduce using rule 251 (expr -> expr RSHIFT expr .) ]
  ! DEC             [ reduce using rule 251 (expr -> expr RSHIFT expr .) ]
  ! LSBRACKET       [ reduce using rule 251 (expr -> expr RSHIFT expr .) ]
  ! LPAREN          [ reduce using rule 251 (expr -> expr RSHIFT expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 250

    (258) expr -> expr LOR expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 258 (expr -> expr LOR expr .)
    LAND            reduce using rule 258 (expr -> expr LOR expr .)
    LOR             reduce using rule 258 (expr -> expr LOR expr .)
    MOD             reduce using rule 258 (expr -> expr LOR expr .)
    QEST            reduce using rule 258 (expr -> expr LOR expr .)
    COMMA           reduce using rule 258 (expr -> expr LOR expr .)
    ASSIGNPLUS      reduce using rule 258 (expr -> expr LOR expr .)
    ASSIGNMINUS     reduce using rule 258 (expr -> expr LOR expr .)
    ASSIGNDIVIDE    reduce using rule 258 (expr -> expr LOR expr .)
    ASSIGNTIMES     reduce using rule 258 (expr -> expr LOR expr .)
    ASSIGNBOR       reduce using rule 258 (expr -> expr LOR expr .)
    ASSIGNBAND      reduce using rule 258 (expr -> expr LOR expr .)
    ASSIGNBXOR      reduce using rule 258 (expr -> expr LOR expr .)
    ASSIGNLSHIFT    reduce using rule 258 (expr -> expr LOR expr .)
    ASSIGNRSHIFT    reduce using rule 258 (expr -> expr LOR expr .)
    ASSIGNRRSHIFT   reduce using rule 258 (expr -> expr LOR expr .)
    ASSIGNLLSHIFT   reduce using rule 258 (expr -> expr LOR expr .)
    ASSIGN          reduce using rule 258 (expr -> expr LOR expr .)
    TLTHAN          reduce using rule 258 (expr -> expr LOR expr .)
    SEMI            reduce using rule 258 (expr -> expr LOR expr .)
    RPAREN          reduce using rule 258 (expr -> expr LOR expr .)
    RSBRACKET       reduce using rule 258 (expr -> expr LOR expr .)
    FUNCTION        reduce using rule 258 (expr -> expr LOR expr .)
    CLASS           reduce using rule 258 (expr -> expr LOR expr .)
    TYPED           reduce using rule 258 (expr -> expr LOR expr .)
    IF              reduce using rule 258 (expr -> expr LOR expr .)
    ELSE            reduce using rule 258 (expr -> expr LOR expr .)
    WHILE           reduce using rule 258 (expr -> expr LOR expr .)
    WITH            reduce using rule 258 (expr -> expr LOR expr .)
    DO              reduce using rule 258 (expr -> expr LOR expr .)
    FOR             reduce using rule 258 (expr -> expr LOR expr .)
    RETURN          reduce using rule 258 (expr -> expr LOR expr .)
    YIELD           reduce using rule 258 (expr -> expr LOR expr .)
    BREAK           reduce using rule 258 (expr -> expr LOR expr .)
    CONTINUE        reduce using rule 258 (expr -> expr LOR expr .)
    THROW           reduce using rule 258 (expr -> expr LOR expr .)
    TRY             reduce using rule 258 (expr -> expr LOR expr .)
    CATCH           reduce using rule 258 (expr -> expr LOR expr .)
    FINALLY         reduce using rule 258 (expr -> expr LOR expr .)
    SWITCH          reduce using rule 258 (expr -> expr LOR expr .)
    NATIVE          reduce using rule 258 (expr -> expr LOR expr .)
    IMPORT          reduce using rule 258 (expr -> expr LOR expr .)
    EXPORT          reduce using rule 258 (expr -> expr LOR expr .)
    NUMBER          reduce using rule 258 (expr -> expr LOR expr .)
    DELETE          reduce using rule 258 (expr -> expr LOR expr .)
    STRINGLIT       reduce using rule 258 (expr -> expr LOR expr .)
    ID              reduce using rule 258 (expr -> expr LOR expr .)
    GET             reduce using rule 258 (expr -> expr LOR expr .)
    SET             reduce using rule 258 (expr -> expr LOR expr .)
    NOT             reduce using rule 258 (expr -> expr LOR expr .)
    BITINV          reduce using rule 258 (expr -> expr LOR expr .)
    NEW             reduce using rule 258 (expr -> expr LOR expr .)
    TYPEOF          reduce using rule 258 (expr -> expr LOR expr .)
    REGEXPR         reduce using rule 258 (expr -> expr LOR expr .)
    GLOBAL          reduce using rule 258 (expr -> expr LOR expr .)
    VAR             reduce using rule 258 (expr -> expr LOR expr .)
    STATIC          reduce using rule 258 (expr -> expr LOR expr .)
    LBRACKET        reduce using rule 258 (expr -> expr LOR expr .)
    $end            reduce using rule 258 (expr -> expr LOR expr .)
    RBRACKET        reduce using rule 258 (expr -> expr LOR expr .)
    CASE            reduce using rule 258 (expr -> expr LOR expr .)
    DEFAULT         reduce using rule 258 (expr -> expr LOR expr .)
    OF              reduce using rule 258 (expr -> expr LOR expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! LSHIFT          [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! LLSHIFT         [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! RRSHIFT         [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! COND_DOT        [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! DOT             [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! BOR             [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! BXOR            [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! BAND            [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! EQUAL           [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! GTHAN           [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! GTHANEQ         [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! LTHAN           [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! LTHANEQ         [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! NOTEQUAL        [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! PLUS            [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! MINUS           [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! DIVIDE          [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! TIMES           [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! IN              [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! INC             [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! DEC             [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! LSBRACKET       [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! LPAREN          [ reduce using rule 258 (expr -> expr LOR expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! MOD             [ shift and go to state 113 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 251

    (275) expr -> expr TIMES expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 275 (expr -> expr TIMES expr .)
    RSHIFT          reduce using rule 275 (expr -> expr TIMES expr .)
    LSHIFT          reduce using rule 275 (expr -> expr TIMES expr .)
    LLSHIFT         reduce using rule 275 (expr -> expr TIMES expr .)
    RRSHIFT         reduce using rule 275 (expr -> expr TIMES expr .)
    LAND            reduce using rule 275 (expr -> expr TIMES expr .)
    LOR             reduce using rule 275 (expr -> expr TIMES expr .)
    BOR             reduce using rule 275 (expr -> expr TIMES expr .)
    INSTANCEOF      reduce using rule 275 (expr -> expr TIMES expr .)
    BXOR            reduce using rule 275 (expr -> expr TIMES expr .)
    BAND            reduce using rule 275 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 275 (expr -> expr TIMES expr .)
    EQUAL_STRICT    reduce using rule 275 (expr -> expr TIMES expr .)
    NOTEQUAL_STRICT reduce using rule 275 (expr -> expr TIMES expr .)
    GTHAN           reduce using rule 275 (expr -> expr TIMES expr .)
    GTHANEQ         reduce using rule 275 (expr -> expr TIMES expr .)
    LTHAN           reduce using rule 275 (expr -> expr TIMES expr .)
    MOD             reduce using rule 275 (expr -> expr TIMES expr .)
    LTHANEQ         reduce using rule 275 (expr -> expr TIMES expr .)
    NOTEQUAL        reduce using rule 275 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 275 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 275 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 275 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 275 (expr -> expr TIMES expr .)
    IN              reduce using rule 275 (expr -> expr TIMES expr .)
    QEST            reduce using rule 275 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 275 (expr -> expr TIMES expr .)
    ASSIGNPLUS      reduce using rule 275 (expr -> expr TIMES expr .)
    ASSIGNMINUS     reduce using rule 275 (expr -> expr TIMES expr .)
    ASSIGNDIVIDE    reduce using rule 275 (expr -> expr TIMES expr .)
    ASSIGNTIMES     reduce using rule 275 (expr -> expr TIMES expr .)
    ASSIGNBOR       reduce using rule 275 (expr -> expr TIMES expr .)
    ASSIGNBAND      reduce using rule 275 (expr -> expr TIMES expr .)
    ASSIGNBXOR      reduce using rule 275 (expr -> expr TIMES expr .)
    ASSIGNLSHIFT    reduce using rule 275 (expr -> expr TIMES expr .)
    ASSIGNRSHIFT    reduce using rule 275 (expr -> expr TIMES expr .)
    ASSIGNRRSHIFT   reduce using rule 275 (expr -> expr TIMES expr .)
    ASSIGNLLSHIFT   reduce using rule 275 (expr -> expr TIMES expr .)
    ASSIGN          reduce using rule 275 (expr -> expr TIMES expr .)
    TLTHAN          reduce using rule 275 (expr -> expr TIMES expr .)
    SEMI            reduce using rule 275 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 275 (expr -> expr TIMES expr .)
    RSBRACKET       reduce using rule 275 (expr -> expr TIMES expr .)
    FUNCTION        reduce using rule 275 (expr -> expr TIMES expr .)
    CLASS           reduce using rule 275 (expr -> expr TIMES expr .)
    TYPED           reduce using rule 275 (expr -> expr TIMES expr .)
    IF              reduce using rule 275 (expr -> expr TIMES expr .)
    ELSE            reduce using rule 275 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 275 (expr -> expr TIMES expr .)
    WITH            reduce using rule 275 (expr -> expr TIMES expr .)
    DO              reduce using rule 275 (expr -> expr TIMES expr .)
    FOR             reduce using rule 275 (expr -> expr TIMES expr .)
    RETURN          reduce using rule 275 (expr -> expr TIMES expr .)
    YIELD           reduce using rule 275 (expr -> expr TIMES expr .)
    BREAK           reduce using rule 275 (expr -> expr TIMES expr .)
    CONTINUE        reduce using rule 275 (expr -> expr TIMES expr .)
    THROW           reduce using rule 275 (expr -> expr TIMES expr .)
    TRY             reduce using rule 275 (expr -> expr TIMES expr .)
    CATCH           reduce using rule 275 (expr -> expr TIMES expr .)
    FINALLY         reduce using rule 275 (expr -> expr TIMES expr .)
    SWITCH          reduce using rule 275 (expr -> expr TIMES expr .)
    NATIVE          reduce using rule 275 (expr -> expr TIMES expr .)
    IMPORT          reduce using rule 275 (expr -> expr TIMES expr .)
    EXPORT          reduce using rule 275 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 275 (expr -> expr TIMES expr .)
    DELETE          reduce using rule 275 (expr -> expr TIMES expr .)
    STRINGLIT       reduce using rule 275 (expr -> expr TIMES expr .)
    ID              reduce using rule 275 (expr -> expr TIMES expr .)
    GET             reduce using rule 275 (expr -> expr TIMES expr .)
    SET             reduce using rule 275 (expr -> expr TIMES expr .)
    NOT             reduce using rule 275 (expr -> expr TIMES expr .)
    BITINV          reduce using rule 275 (expr -> expr TIMES expr .)
    NEW             reduce using rule 275 (expr -> expr TIMES expr .)
    TYPEOF          reduce using rule 275 (expr -> expr TIMES expr .)
    REGEXPR         reduce using rule 275 (expr -> expr TIMES expr .)
    GLOBAL          reduce using rule 275 (expr -> expr TIMES expr .)
    VAR             reduce using rule 275 (expr -> expr TIMES expr .)
    STATIC          reduce using rule 275 (expr -> expr TIMES expr .)
    LBRACKET        reduce using rule 275 (expr -> expr TIMES expr .)
    $end            reduce using rule 275 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 275 (expr -> expr TIMES expr .)
    CASE            reduce using rule 275 (expr -> expr TIMES expr .)
    DEFAULT         reduce using rule 275 (expr -> expr TIMES expr .)
    OF              reduce using rule 275 (expr -> expr TIMES expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 275 (expr -> expr TIMES expr .) ]
  ! DOT             [ reduce using rule 275 (expr -> expr TIMES expr .) ]
  ! INC             [ reduce using rule 275 (expr -> expr TIMES expr .) ]
  ! DEC             [ reduce using rule 275 (expr -> expr TIMES expr .) ]
  ! LSBRACKET       [ reduce using rule 275 (expr -> expr TIMES expr .) ]
  ! LPAREN          [ reduce using rule 275 (expr -> expr TIMES expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 131 ]
  ! TIMES           [ shift and go to state 104 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 252

    (279) expr -> expr lsbracket_restrict expr . rsbracket_restrict
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (240) rsbracket_restrict -> . RSBRACKET
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    RSBRACKET       shift and go to state 348
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

    rsbracket_restrict             shift and go to state 349
    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 253

    (270) expr -> expr LTHANEQ expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 270 (expr -> expr LTHANEQ expr .)
    LAND            reduce using rule 270 (expr -> expr LTHANEQ expr .)
    LOR             reduce using rule 270 (expr -> expr LTHANEQ expr .)
    BOR             reduce using rule 270 (expr -> expr LTHANEQ expr .)
    BXOR            reduce using rule 270 (expr -> expr LTHANEQ expr .)
    BAND            reduce using rule 270 (expr -> expr LTHANEQ expr .)
    EQUAL           reduce using rule 270 (expr -> expr LTHANEQ expr .)
    EQUAL_STRICT    reduce using rule 270 (expr -> expr LTHANEQ expr .)
    NOTEQUAL_STRICT reduce using rule 270 (expr -> expr LTHANEQ expr .)
    GTHAN           reduce using rule 270 (expr -> expr LTHANEQ expr .)
    GTHANEQ         reduce using rule 270 (expr -> expr LTHANEQ expr .)
    LTHAN           reduce using rule 270 (expr -> expr LTHANEQ expr .)
    MOD             reduce using rule 270 (expr -> expr LTHANEQ expr .)
    LTHANEQ         reduce using rule 270 (expr -> expr LTHANEQ expr .)
    NOTEQUAL        reduce using rule 270 (expr -> expr LTHANEQ expr .)
    QEST            reduce using rule 270 (expr -> expr LTHANEQ expr .)
    COMMA           reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ASSIGNPLUS      reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ASSIGNMINUS     reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ASSIGNDIVIDE    reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ASSIGNTIMES     reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ASSIGNBOR       reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ASSIGNBAND      reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ASSIGNBXOR      reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ASSIGNLSHIFT    reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ASSIGNRSHIFT    reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ASSIGNRRSHIFT   reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ASSIGNLLSHIFT   reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ASSIGN          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    TLTHAN          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    SEMI            reduce using rule 270 (expr -> expr LTHANEQ expr .)
    RPAREN          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    RSBRACKET       reduce using rule 270 (expr -> expr LTHANEQ expr .)
    FUNCTION        reduce using rule 270 (expr -> expr LTHANEQ expr .)
    CLASS           reduce using rule 270 (expr -> expr LTHANEQ expr .)
    TYPED           reduce using rule 270 (expr -> expr LTHANEQ expr .)
    IF              reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ELSE            reduce using rule 270 (expr -> expr LTHANEQ expr .)
    WHILE           reduce using rule 270 (expr -> expr LTHANEQ expr .)
    WITH            reduce using rule 270 (expr -> expr LTHANEQ expr .)
    DO              reduce using rule 270 (expr -> expr LTHANEQ expr .)
    FOR             reduce using rule 270 (expr -> expr LTHANEQ expr .)
    RETURN          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    YIELD           reduce using rule 270 (expr -> expr LTHANEQ expr .)
    BREAK           reduce using rule 270 (expr -> expr LTHANEQ expr .)
    CONTINUE        reduce using rule 270 (expr -> expr LTHANEQ expr .)
    THROW           reduce using rule 270 (expr -> expr LTHANEQ expr .)
    TRY             reduce using rule 270 (expr -> expr LTHANEQ expr .)
    CATCH           reduce using rule 270 (expr -> expr LTHANEQ expr .)
    FINALLY         reduce using rule 270 (expr -> expr LTHANEQ expr .)
    SWITCH          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    NATIVE          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    IMPORT          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    EXPORT          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    NUMBER          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    DELETE          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    STRINGLIT       reduce using rule 270 (expr -> expr LTHANEQ expr .)
    ID              reduce using rule 270 (expr -> expr LTHANEQ expr .)
    GET             reduce using rule 270 (expr -> expr LTHANEQ expr .)
    SET             reduce using rule 270 (expr -> expr LTHANEQ expr .)
    NOT             reduce using rule 270 (expr -> expr LTHANEQ expr .)
    BITINV          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    NEW             reduce using rule 270 (expr -> expr LTHANEQ expr .)
    TYPEOF          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    REGEXPR         reduce using rule 270 (expr -> expr LTHANEQ expr .)
    GLOBAL          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    VAR             reduce using rule 270 (expr -> expr LTHANEQ expr .)
    STATIC          reduce using rule 270 (expr -> expr LTHANEQ expr .)
    LBRACKET        reduce using rule 270 (expr -> expr LTHANEQ expr .)
    $end            reduce using rule 270 (expr -> expr LTHANEQ expr .)
    RBRACKET        reduce using rule 270 (expr -> expr LTHANEQ expr .)
    CASE            reduce using rule 270 (expr -> expr LTHANEQ expr .)
    DEFAULT         reduce using rule 270 (expr -> expr LTHANEQ expr .)
    OF              reduce using rule 270 (expr -> expr LTHANEQ expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INSTANCEOF      shift and go to state 98
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! LSHIFT          [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! LLSHIFT         [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! RRSHIFT         [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! COND_DOT        [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! DOT             [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! INSTANCEOF      [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! PLUS            [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! MINUS           [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! DIVIDE          [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! TIMES           [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! IN              [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! INC             [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! DEC             [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! LSBRACKET       [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! LPAREN          [ reduce using rule 270 (expr -> expr LTHANEQ expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 254

    (289) expr -> expr COMMA expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 289 (expr -> expr COMMA expr .)
    MOD             reduce using rule 289 (expr -> expr COMMA expr .)
    COMMA           reduce using rule 289 (expr -> expr COMMA expr .)
    ASSIGNRRSHIFT   reduce using rule 289 (expr -> expr COMMA expr .)
    ASSIGNLLSHIFT   reduce using rule 289 (expr -> expr COMMA expr .)
    TLTHAN          reduce using rule 289 (expr -> expr COMMA expr .)
    SEMI            reduce using rule 289 (expr -> expr COMMA expr .)
    RPAREN          reduce using rule 289 (expr -> expr COMMA expr .)
    RSBRACKET       reduce using rule 289 (expr -> expr COMMA expr .)
    FUNCTION        reduce using rule 289 (expr -> expr COMMA expr .)
    CLASS           reduce using rule 289 (expr -> expr COMMA expr .)
    TYPED           reduce using rule 289 (expr -> expr COMMA expr .)
    IF              reduce using rule 289 (expr -> expr COMMA expr .)
    ELSE            reduce using rule 289 (expr -> expr COMMA expr .)
    WHILE           reduce using rule 289 (expr -> expr COMMA expr .)
    WITH            reduce using rule 289 (expr -> expr COMMA expr .)
    DO              reduce using rule 289 (expr -> expr COMMA expr .)
    FOR             reduce using rule 289 (expr -> expr COMMA expr .)
    RETURN          reduce using rule 289 (expr -> expr COMMA expr .)
    YIELD           reduce using rule 289 (expr -> expr COMMA expr .)
    BREAK           reduce using rule 289 (expr -> expr COMMA expr .)
    CONTINUE        reduce using rule 289 (expr -> expr COMMA expr .)
    THROW           reduce using rule 289 (expr -> expr COMMA expr .)
    TRY             reduce using rule 289 (expr -> expr COMMA expr .)
    CATCH           reduce using rule 289 (expr -> expr COMMA expr .)
    FINALLY         reduce using rule 289 (expr -> expr COMMA expr .)
    SWITCH          reduce using rule 289 (expr -> expr COMMA expr .)
    NATIVE          reduce using rule 289 (expr -> expr COMMA expr .)
    IMPORT          reduce using rule 289 (expr -> expr COMMA expr .)
    EXPORT          reduce using rule 289 (expr -> expr COMMA expr .)
    NUMBER          reduce using rule 289 (expr -> expr COMMA expr .)
    DELETE          reduce using rule 289 (expr -> expr COMMA expr .)
    STRINGLIT       reduce using rule 289 (expr -> expr COMMA expr .)
    ID              reduce using rule 289 (expr -> expr COMMA expr .)
    GET             reduce using rule 289 (expr -> expr COMMA expr .)
    SET             reduce using rule 289 (expr -> expr COMMA expr .)
    NOT             reduce using rule 289 (expr -> expr COMMA expr .)
    BITINV          reduce using rule 289 (expr -> expr COMMA expr .)
    NEW             reduce using rule 289 (expr -> expr COMMA expr .)
    TYPEOF          reduce using rule 289 (expr -> expr COMMA expr .)
    REGEXPR         reduce using rule 289 (expr -> expr COMMA expr .)
    GLOBAL          reduce using rule 289 (expr -> expr COMMA expr .)
    VAR             reduce using rule 289 (expr -> expr COMMA expr .)
    STATIC          reduce using rule 289 (expr -> expr COMMA expr .)
    LBRACKET        reduce using rule 289 (expr -> expr COMMA expr .)
    $end            reduce using rule 289 (expr -> expr COMMA expr .)
    RBRACKET        reduce using rule 289 (expr -> expr COMMA expr .)
    CASE            reduce using rule 289 (expr -> expr COMMA expr .)
    DEFAULT         reduce using rule 289 (expr -> expr COMMA expr .)
    OF              reduce using rule 289 (expr -> expr COMMA expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! LSHIFT          [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! LLSHIFT         [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! RRSHIFT         [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! COND_DOT        [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! DOT             [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! LAND            [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! LOR             [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! BOR             [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! INSTANCEOF      [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! BXOR            [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! BAND            [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! EQUAL           [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! GTHAN           [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! GTHANEQ         [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! LTHAN           [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! LTHANEQ         [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! NOTEQUAL        [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! PLUS            [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! MINUS           [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! DIVIDE          [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! TIMES           [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! IN              [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! QEST            [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! INC             [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! DEC             [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! ASSIGNPLUS      [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! ASSIGNBOR       [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! ASSIGNBAND      [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! ASSIGNLSHIFT    [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! ASSIGNRSHIFT    [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! ASSIGN          [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! LSBRACKET       [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! LPAREN          [ reduce using rule 289 (expr -> expr COMMA expr .) ]
  ! MOD             [ shift and go to state 113 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 255

    (195) func_call -> template_ref_opt LPAREN . exprlist RPAREN
    (196) func_call -> template_ref_opt LPAREN . RPAREN
    (142) exprlist -> . expr
    (143) exprlist -> . exprlist COMMA expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    RPAREN          shift and go to state 351
    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 221
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    exprlist                       shift and go to state 350
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 256

    (264) expr -> expr EQUAL_STRICT expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    LAND            reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    LOR             reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    BOR             reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    BXOR            reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    BAND            reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    EQUAL           reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    EQUAL_STRICT    reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    NOTEQUAL_STRICT reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    GTHAN           reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    GTHANEQ         reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    LTHAN           reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    MOD             reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    LTHANEQ         reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    NOTEQUAL        reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    QEST            reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    COMMA           reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNPLUS      reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNMINUS     reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNDIVIDE    reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNTIMES     reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNBOR       reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNBAND      reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNBXOR      reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNLSHIFT    reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNRSHIFT    reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNRRSHIFT   reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNLLSHIFT   reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ASSIGN          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    TLTHAN          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    SEMI            reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    RPAREN          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    RSBRACKET       reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    FUNCTION        reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    CLASS           reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    TYPED           reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    IF              reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ELSE            reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    WHILE           reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    WITH            reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    DO              reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    FOR             reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    RETURN          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    YIELD           reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    BREAK           reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    CONTINUE        reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    THROW           reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    TRY             reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    CATCH           reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    FINALLY         reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    SWITCH          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    NATIVE          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    IMPORT          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    EXPORT          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    NUMBER          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    DELETE          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    STRINGLIT       reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    ID              reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    GET             reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    SET             reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    NOT             reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    BITINV          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    NEW             reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    TYPEOF          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    REGEXPR         reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    GLOBAL          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    VAR             reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    STATIC          reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    LBRACKET        reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    $end            reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    RBRACKET        reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    CASE            reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    DEFAULT         reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    OF              reduce using rule 264 (expr -> expr EQUAL_STRICT expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INSTANCEOF      shift and go to state 98
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! LSHIFT          [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! LLSHIFT         [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! RRSHIFT         [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! COND_DOT        [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! DOT             [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! INSTANCEOF      [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! PLUS            [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! MINUS           [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! DIVIDE          [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! TIMES           [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! IN              [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! INC             [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! DEC             [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! LSBRACKET       [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! LPAREN          [ reduce using rule 264 (expr -> expr EQUAL_STRICT expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 257

    (253) expr -> expr LLSHIFT expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 253 (expr -> expr LLSHIFT expr .)
    RSHIFT          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    LSHIFT          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    LLSHIFT         reduce using rule 253 (expr -> expr LLSHIFT expr .)
    RRSHIFT         reduce using rule 253 (expr -> expr LLSHIFT expr .)
    LAND            reduce using rule 253 (expr -> expr LLSHIFT expr .)
    LOR             reduce using rule 253 (expr -> expr LLSHIFT expr .)
    BOR             reduce using rule 253 (expr -> expr LLSHIFT expr .)
    INSTANCEOF      reduce using rule 253 (expr -> expr LLSHIFT expr .)
    BXOR            reduce using rule 253 (expr -> expr LLSHIFT expr .)
    BAND            reduce using rule 253 (expr -> expr LLSHIFT expr .)
    EQUAL           reduce using rule 253 (expr -> expr LLSHIFT expr .)
    EQUAL_STRICT    reduce using rule 253 (expr -> expr LLSHIFT expr .)
    NOTEQUAL_STRICT reduce using rule 253 (expr -> expr LLSHIFT expr .)
    GTHAN           reduce using rule 253 (expr -> expr LLSHIFT expr .)
    GTHANEQ         reduce using rule 253 (expr -> expr LLSHIFT expr .)
    LTHAN           reduce using rule 253 (expr -> expr LLSHIFT expr .)
    MOD             reduce using rule 253 (expr -> expr LLSHIFT expr .)
    LTHANEQ         reduce using rule 253 (expr -> expr LLSHIFT expr .)
    NOTEQUAL        reduce using rule 253 (expr -> expr LLSHIFT expr .)
    IN              reduce using rule 253 (expr -> expr LLSHIFT expr .)
    QEST            reduce using rule 253 (expr -> expr LLSHIFT expr .)
    COMMA           reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ASSIGNPLUS      reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ASSIGNMINUS     reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ASSIGNDIVIDE    reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ASSIGNTIMES     reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ASSIGNBOR       reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ASSIGNBAND      reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ASSIGNBXOR      reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ASSIGNLSHIFT    reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ASSIGNRSHIFT    reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ASSIGNRRSHIFT   reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ASSIGNLLSHIFT   reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ASSIGN          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    TLTHAN          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    SEMI            reduce using rule 253 (expr -> expr LLSHIFT expr .)
    RPAREN          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    RSBRACKET       reduce using rule 253 (expr -> expr LLSHIFT expr .)
    FUNCTION        reduce using rule 253 (expr -> expr LLSHIFT expr .)
    CLASS           reduce using rule 253 (expr -> expr LLSHIFT expr .)
    TYPED           reduce using rule 253 (expr -> expr LLSHIFT expr .)
    IF              reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ELSE            reduce using rule 253 (expr -> expr LLSHIFT expr .)
    WHILE           reduce using rule 253 (expr -> expr LLSHIFT expr .)
    WITH            reduce using rule 253 (expr -> expr LLSHIFT expr .)
    DO              reduce using rule 253 (expr -> expr LLSHIFT expr .)
    FOR             reduce using rule 253 (expr -> expr LLSHIFT expr .)
    RETURN          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    YIELD           reduce using rule 253 (expr -> expr LLSHIFT expr .)
    BREAK           reduce using rule 253 (expr -> expr LLSHIFT expr .)
    CONTINUE        reduce using rule 253 (expr -> expr LLSHIFT expr .)
    THROW           reduce using rule 253 (expr -> expr LLSHIFT expr .)
    TRY             reduce using rule 253 (expr -> expr LLSHIFT expr .)
    CATCH           reduce using rule 253 (expr -> expr LLSHIFT expr .)
    FINALLY         reduce using rule 253 (expr -> expr LLSHIFT expr .)
    SWITCH          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    NATIVE          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    IMPORT          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    EXPORT          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    NUMBER          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    DELETE          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    STRINGLIT       reduce using rule 253 (expr -> expr LLSHIFT expr .)
    ID              reduce using rule 253 (expr -> expr LLSHIFT expr .)
    GET             reduce using rule 253 (expr -> expr LLSHIFT expr .)
    SET             reduce using rule 253 (expr -> expr LLSHIFT expr .)
    NOT             reduce using rule 253 (expr -> expr LLSHIFT expr .)
    BITINV          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    NEW             reduce using rule 253 (expr -> expr LLSHIFT expr .)
    TYPEOF          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    REGEXPR         reduce using rule 253 (expr -> expr LLSHIFT expr .)
    GLOBAL          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    VAR             reduce using rule 253 (expr -> expr LLSHIFT expr .)
    STATIC          reduce using rule 253 (expr -> expr LLSHIFT expr .)
    LBRACKET        reduce using rule 253 (expr -> expr LLSHIFT expr .)
    $end            reduce using rule 253 (expr -> expr LLSHIFT expr .)
    RBRACKET        reduce using rule 253 (expr -> expr LLSHIFT expr .)
    CASE            reduce using rule 253 (expr -> expr LLSHIFT expr .)
    DEFAULT         reduce using rule 253 (expr -> expr LLSHIFT expr .)
    OF              reduce using rule 253 (expr -> expr LLSHIFT expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 253 (expr -> expr LLSHIFT expr .) ]
  ! DOT             [ reduce using rule 253 (expr -> expr LLSHIFT expr .) ]
  ! PLUS            [ reduce using rule 253 (expr -> expr LLSHIFT expr .) ]
  ! MINUS           [ reduce using rule 253 (expr -> expr LLSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 253 (expr -> expr LLSHIFT expr .) ]
  ! TIMES           [ reduce using rule 253 (expr -> expr LLSHIFT expr .) ]
  ! INC             [ reduce using rule 253 (expr -> expr LLSHIFT expr .) ]
  ! DEC             [ reduce using rule 253 (expr -> expr LLSHIFT expr .) ]
  ! LSBRACKET       [ reduce using rule 253 (expr -> expr LLSHIFT expr .) ]
  ! LPAREN          [ reduce using rule 253 (expr -> expr LLSHIFT expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 258

    (269) expr -> expr MOD expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for LLSHIFT resolved as shift
  ! shift/reduce conflict for RRSHIFT resolved as shift
  ! shift/reduce conflict for COND_DOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for INSTANCEOF resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_STRICT resolved as shift
  ! shift/reduce conflict for NOTEQUAL_STRICT resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for QEST resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for ASSIGNPLUS resolved as shift
  ! shift/reduce conflict for ASSIGNMINUS resolved as shift
  ! shift/reduce conflict for ASSIGNDIVIDE resolved as shift
  ! shift/reduce conflict for ASSIGNTIMES resolved as shift
  ! shift/reduce conflict for ASSIGNBOR resolved as shift
  ! shift/reduce conflict for ASSIGNBAND resolved as shift
  ! shift/reduce conflict for ASSIGNBXOR resolved as shift
  ! shift/reduce conflict for ASSIGNLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNLLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
  ! shift/reduce conflict for TLTHAN resolved as shift
    COLON           reduce using rule 269 (expr -> expr MOD expr .)
    SEMI            reduce using rule 269 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 269 (expr -> expr MOD expr .)
    RSBRACKET       reduce using rule 269 (expr -> expr MOD expr .)
    FUNCTION        reduce using rule 269 (expr -> expr MOD expr .)
    CLASS           reduce using rule 269 (expr -> expr MOD expr .)
    TYPED           reduce using rule 269 (expr -> expr MOD expr .)
    IF              reduce using rule 269 (expr -> expr MOD expr .)
    ELSE            reduce using rule 269 (expr -> expr MOD expr .)
    WHILE           reduce using rule 269 (expr -> expr MOD expr .)
    WITH            reduce using rule 269 (expr -> expr MOD expr .)
    DO              reduce using rule 269 (expr -> expr MOD expr .)
    FOR             reduce using rule 269 (expr -> expr MOD expr .)
    RETURN          reduce using rule 269 (expr -> expr MOD expr .)
    YIELD           reduce using rule 269 (expr -> expr MOD expr .)
    BREAK           reduce using rule 269 (expr -> expr MOD expr .)
    CONTINUE        reduce using rule 269 (expr -> expr MOD expr .)
    THROW           reduce using rule 269 (expr -> expr MOD expr .)
    TRY             reduce using rule 269 (expr -> expr MOD expr .)
    CATCH           reduce using rule 269 (expr -> expr MOD expr .)
    FINALLY         reduce using rule 269 (expr -> expr MOD expr .)
    SWITCH          reduce using rule 269 (expr -> expr MOD expr .)
    NATIVE          reduce using rule 269 (expr -> expr MOD expr .)
    IMPORT          reduce using rule 269 (expr -> expr MOD expr .)
    EXPORT          reduce using rule 269 (expr -> expr MOD expr .)
    NUMBER          reduce using rule 269 (expr -> expr MOD expr .)
    DELETE          reduce using rule 269 (expr -> expr MOD expr .)
    STRINGLIT       reduce using rule 269 (expr -> expr MOD expr .)
    ID              reduce using rule 269 (expr -> expr MOD expr .)
    GET             reduce using rule 269 (expr -> expr MOD expr .)
    SET             reduce using rule 269 (expr -> expr MOD expr .)
    NOT             reduce using rule 269 (expr -> expr MOD expr .)
    BITINV          reduce using rule 269 (expr -> expr MOD expr .)
    NEW             reduce using rule 269 (expr -> expr MOD expr .)
    TYPEOF          reduce using rule 269 (expr -> expr MOD expr .)
    REGEXPR         reduce using rule 269 (expr -> expr MOD expr .)
    GLOBAL          reduce using rule 269 (expr -> expr MOD expr .)
    VAR             reduce using rule 269 (expr -> expr MOD expr .)
    STATIC          reduce using rule 269 (expr -> expr MOD expr .)
    LBRACKET        reduce using rule 269 (expr -> expr MOD expr .)
    $end            reduce using rule 269 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 269 (expr -> expr MOD expr .)
    CASE            reduce using rule 269 (expr -> expr MOD expr .)
    DEFAULT         reduce using rule 269 (expr -> expr MOD expr .)
    OF              reduce using rule 269 (expr -> expr MOD expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! RSHIFT          [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! LSHIFT          [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! LLSHIFT         [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! RRSHIFT         [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! COND_DOT        [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! DOT             [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! LAND            [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! LOR             [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! BOR             [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! INSTANCEOF      [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! BXOR            [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! BAND            [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! EQUAL           [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! GTHAN           [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! GTHANEQ         [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! LTHAN           [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! MOD             [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! LTHANEQ         [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! NOTEQUAL        [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! PLUS            [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! MINUS           [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! DIVIDE          [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! TIMES           [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! IN              [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! QEST            [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! COMMA           [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! INC             [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! DEC             [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! ASSIGNPLUS      [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! ASSIGNBOR       [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! ASSIGNBAND      [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! ASSIGNLSHIFT    [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! ASSIGNRSHIFT    [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! ASSIGNRRSHIFT   [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! ASSIGNLLSHIFT   [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! ASSIGN          [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! LSBRACKET       [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! TLTHAN          [ reduce using rule 269 (expr -> expr MOD expr .) ]
  ! LPAREN          [ reduce using rule 269 (expr -> expr MOD expr .) ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 259

    (255) expr -> expr COND_DOT expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 255 (expr -> expr COND_DOT expr .)
    RSHIFT          reduce using rule 255 (expr -> expr COND_DOT expr .)
    LSHIFT          reduce using rule 255 (expr -> expr COND_DOT expr .)
    LLSHIFT         reduce using rule 255 (expr -> expr COND_DOT expr .)
    RRSHIFT         reduce using rule 255 (expr -> expr COND_DOT expr .)
    COND_DOT        reduce using rule 255 (expr -> expr COND_DOT expr .)
    DOT             reduce using rule 255 (expr -> expr COND_DOT expr .)
    LAND            reduce using rule 255 (expr -> expr COND_DOT expr .)
    LOR             reduce using rule 255 (expr -> expr COND_DOT expr .)
    BOR             reduce using rule 255 (expr -> expr COND_DOT expr .)
    INSTANCEOF      reduce using rule 255 (expr -> expr COND_DOT expr .)
    BXOR            reduce using rule 255 (expr -> expr COND_DOT expr .)
    BAND            reduce using rule 255 (expr -> expr COND_DOT expr .)
    EQUAL           reduce using rule 255 (expr -> expr COND_DOT expr .)
    EQUAL_STRICT    reduce using rule 255 (expr -> expr COND_DOT expr .)
    NOTEQUAL_STRICT reduce using rule 255 (expr -> expr COND_DOT expr .)
    GTHAN           reduce using rule 255 (expr -> expr COND_DOT expr .)
    GTHANEQ         reduce using rule 255 (expr -> expr COND_DOT expr .)
    LTHAN           reduce using rule 255 (expr -> expr COND_DOT expr .)
    MOD             reduce using rule 255 (expr -> expr COND_DOT expr .)
    LTHANEQ         reduce using rule 255 (expr -> expr COND_DOT expr .)
    NOTEQUAL        reduce using rule 255 (expr -> expr COND_DOT expr .)
    PLUS            reduce using rule 255 (expr -> expr COND_DOT expr .)
    MINUS           reduce using rule 255 (expr -> expr COND_DOT expr .)
    DIVIDE          reduce using rule 255 (expr -> expr COND_DOT expr .)
    TIMES           reduce using rule 255 (expr -> expr COND_DOT expr .)
    IN              reduce using rule 255 (expr -> expr COND_DOT expr .)
    QEST            reduce using rule 255 (expr -> expr COND_DOT expr .)
    COMMA           reduce using rule 255 (expr -> expr COND_DOT expr .)
    INC             reduce using rule 255 (expr -> expr COND_DOT expr .)
    DEC             reduce using rule 255 (expr -> expr COND_DOT expr .)
    ASSIGNPLUS      reduce using rule 255 (expr -> expr COND_DOT expr .)
    ASSIGNMINUS     reduce using rule 255 (expr -> expr COND_DOT expr .)
    ASSIGNDIVIDE    reduce using rule 255 (expr -> expr COND_DOT expr .)
    ASSIGNTIMES     reduce using rule 255 (expr -> expr COND_DOT expr .)
    ASSIGNBOR       reduce using rule 255 (expr -> expr COND_DOT expr .)
    ASSIGNBAND      reduce using rule 255 (expr -> expr COND_DOT expr .)
    ASSIGNBXOR      reduce using rule 255 (expr -> expr COND_DOT expr .)
    ASSIGNLSHIFT    reduce using rule 255 (expr -> expr COND_DOT expr .)
    ASSIGNRSHIFT    reduce using rule 255 (expr -> expr COND_DOT expr .)
    ASSIGNRRSHIFT   reduce using rule 255 (expr -> expr COND_DOT expr .)
    ASSIGNLLSHIFT   reduce using rule 255 (expr -> expr COND_DOT expr .)
    ASSIGN          reduce using rule 255 (expr -> expr COND_DOT expr .)
    LSBRACKET       reduce using rule 255 (expr -> expr COND_DOT expr .)
    TLTHAN          reduce using rule 255 (expr -> expr COND_DOT expr .)
    SEMI            reduce using rule 255 (expr -> expr COND_DOT expr .)
    RPAREN          reduce using rule 255 (expr -> expr COND_DOT expr .)
    RSBRACKET       reduce using rule 255 (expr -> expr COND_DOT expr .)
    FUNCTION        reduce using rule 255 (expr -> expr COND_DOT expr .)
    CLASS           reduce using rule 255 (expr -> expr COND_DOT expr .)
    TYPED           reduce using rule 255 (expr -> expr COND_DOT expr .)
    IF              reduce using rule 255 (expr -> expr COND_DOT expr .)
    ELSE            reduce using rule 255 (expr -> expr COND_DOT expr .)
    WHILE           reduce using rule 255 (expr -> expr COND_DOT expr .)
    WITH            reduce using rule 255 (expr -> expr COND_DOT expr .)
    DO              reduce using rule 255 (expr -> expr COND_DOT expr .)
    FOR             reduce using rule 255 (expr -> expr COND_DOT expr .)
    RETURN          reduce using rule 255 (expr -> expr COND_DOT expr .)
    YIELD           reduce using rule 255 (expr -> expr COND_DOT expr .)
    BREAK           reduce using rule 255 (expr -> expr COND_DOT expr .)
    CONTINUE        reduce using rule 255 (expr -> expr COND_DOT expr .)
    THROW           reduce using rule 255 (expr -> expr COND_DOT expr .)
    TRY             reduce using rule 255 (expr -> expr COND_DOT expr .)
    CATCH           reduce using rule 255 (expr -> expr COND_DOT expr .)
    FINALLY         reduce using rule 255 (expr -> expr COND_DOT expr .)
    SWITCH          reduce using rule 255 (expr -> expr COND_DOT expr .)
    NATIVE          reduce using rule 255 (expr -> expr COND_DOT expr .)
    IMPORT          reduce using rule 255 (expr -> expr COND_DOT expr .)
    EXPORT          reduce using rule 255 (expr -> expr COND_DOT expr .)
    NUMBER          reduce using rule 255 (expr -> expr COND_DOT expr .)
    DELETE          reduce using rule 255 (expr -> expr COND_DOT expr .)
    STRINGLIT       reduce using rule 255 (expr -> expr COND_DOT expr .)
    ID              reduce using rule 255 (expr -> expr COND_DOT expr .)
    GET             reduce using rule 255 (expr -> expr COND_DOT expr .)
    SET             reduce using rule 255 (expr -> expr COND_DOT expr .)
    NOT             reduce using rule 255 (expr -> expr COND_DOT expr .)
    BITINV          reduce using rule 255 (expr -> expr COND_DOT expr .)
    NEW             reduce using rule 255 (expr -> expr COND_DOT expr .)
    TYPEOF          reduce using rule 255 (expr -> expr COND_DOT expr .)
    REGEXPR         reduce using rule 255 (expr -> expr COND_DOT expr .)
    GLOBAL          reduce using rule 255 (expr -> expr COND_DOT expr .)
    VAR             reduce using rule 255 (expr -> expr COND_DOT expr .)
    STATIC          reduce using rule 255 (expr -> expr COND_DOT expr .)
    LBRACKET        reduce using rule 255 (expr -> expr COND_DOT expr .)
    $end            reduce using rule 255 (expr -> expr COND_DOT expr .)
    RBRACKET        reduce using rule 255 (expr -> expr COND_DOT expr .)
    CASE            reduce using rule 255 (expr -> expr COND_DOT expr .)
    DEFAULT         reduce using rule 255 (expr -> expr COND_DOT expr .)
    OF              reduce using rule 255 (expr -> expr COND_DOT expr .)
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! LPAREN          [ reduce using rule 255 (expr -> expr COND_DOT expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! COND_DOT        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 119 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 131 ]
  ! TIMES           [ shift and go to state 104 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! INC             [ shift and go to state 128 ]
  ! DEC             [ shift and go to state 137 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! LSBRACKET       [ shift and go to state 100 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 260

    (271) expr -> expr NOTEQUAL expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    LAND            reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    LOR             reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    BOR             reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    BXOR            reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    BAND            reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    EQUAL           reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    EQUAL_STRICT    reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    NOTEQUAL_STRICT reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    GTHAN           reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    GTHANEQ         reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    LTHAN           reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    MOD             reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    LTHANEQ         reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    NOTEQUAL        reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    QEST            reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    COMMA           reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ASSIGNPLUS      reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ASSIGNMINUS     reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ASSIGNDIVIDE    reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ASSIGNTIMES     reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ASSIGNBOR       reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ASSIGNBAND      reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ASSIGNBXOR      reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ASSIGNLSHIFT    reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ASSIGNRSHIFT    reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ASSIGNRRSHIFT   reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ASSIGNLLSHIFT   reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ASSIGN          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    TLTHAN          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    SEMI            reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    RPAREN          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    RSBRACKET       reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    FUNCTION        reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    CLASS           reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    TYPED           reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    IF              reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ELSE            reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    WHILE           reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    WITH            reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    DO              reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    FOR             reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    RETURN          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    YIELD           reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    BREAK           reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    CONTINUE        reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    THROW           reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    TRY             reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    CATCH           reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    FINALLY         reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    SWITCH          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    NATIVE          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    IMPORT          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    EXPORT          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    NUMBER          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    DELETE          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    STRINGLIT       reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    ID              reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    GET             reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    SET             reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    NOT             reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    BITINV          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    NEW             reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    TYPEOF          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    REGEXPR         reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    GLOBAL          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    VAR             reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    STATIC          reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    LBRACKET        reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    $end            reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    RBRACKET        reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    CASE            reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    DEFAULT         reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    OF              reduce using rule 271 (expr -> expr NOTEQUAL expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INSTANCEOF      shift and go to state 98
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! LLSHIFT         [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! RRSHIFT         [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! COND_DOT        [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! DOT             [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! PLUS            [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! MINUS           [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! TIMES           [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! IN              [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! INC             [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! DEC             [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! LSBRACKET       [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! LPAREN          [ reduce using rule 271 (expr -> expr NOTEQUAL expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 261

    (273) expr -> expr MINUS expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 273 (expr -> expr MINUS expr .)
    RSHIFT          reduce using rule 273 (expr -> expr MINUS expr .)
    LSHIFT          reduce using rule 273 (expr -> expr MINUS expr .)
    LLSHIFT         reduce using rule 273 (expr -> expr MINUS expr .)
    RRSHIFT         reduce using rule 273 (expr -> expr MINUS expr .)
    LAND            reduce using rule 273 (expr -> expr MINUS expr .)
    LOR             reduce using rule 273 (expr -> expr MINUS expr .)
    BOR             reduce using rule 273 (expr -> expr MINUS expr .)
    INSTANCEOF      reduce using rule 273 (expr -> expr MINUS expr .)
    BXOR            reduce using rule 273 (expr -> expr MINUS expr .)
    BAND            reduce using rule 273 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 273 (expr -> expr MINUS expr .)
    EQUAL_STRICT    reduce using rule 273 (expr -> expr MINUS expr .)
    NOTEQUAL_STRICT reduce using rule 273 (expr -> expr MINUS expr .)
    GTHAN           reduce using rule 273 (expr -> expr MINUS expr .)
    GTHANEQ         reduce using rule 273 (expr -> expr MINUS expr .)
    LTHAN           reduce using rule 273 (expr -> expr MINUS expr .)
    MOD             reduce using rule 273 (expr -> expr MINUS expr .)
    LTHANEQ         reduce using rule 273 (expr -> expr MINUS expr .)
    NOTEQUAL        reduce using rule 273 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 273 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 273 (expr -> expr MINUS expr .)
    IN              reduce using rule 273 (expr -> expr MINUS expr .)
    QEST            reduce using rule 273 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 273 (expr -> expr MINUS expr .)
    ASSIGNPLUS      reduce using rule 273 (expr -> expr MINUS expr .)
    ASSIGNMINUS     reduce using rule 273 (expr -> expr MINUS expr .)
    ASSIGNDIVIDE    reduce using rule 273 (expr -> expr MINUS expr .)
    ASSIGNTIMES     reduce using rule 273 (expr -> expr MINUS expr .)
    ASSIGNBOR       reduce using rule 273 (expr -> expr MINUS expr .)
    ASSIGNBAND      reduce using rule 273 (expr -> expr MINUS expr .)
    ASSIGNBXOR      reduce using rule 273 (expr -> expr MINUS expr .)
    ASSIGNLSHIFT    reduce using rule 273 (expr -> expr MINUS expr .)
    ASSIGNRSHIFT    reduce using rule 273 (expr -> expr MINUS expr .)
    ASSIGNRRSHIFT   reduce using rule 273 (expr -> expr MINUS expr .)
    ASSIGNLLSHIFT   reduce using rule 273 (expr -> expr MINUS expr .)
    ASSIGN          reduce using rule 273 (expr -> expr MINUS expr .)
    TLTHAN          reduce using rule 273 (expr -> expr MINUS expr .)
    SEMI            reduce using rule 273 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 273 (expr -> expr MINUS expr .)
    RSBRACKET       reduce using rule 273 (expr -> expr MINUS expr .)
    FUNCTION        reduce using rule 273 (expr -> expr MINUS expr .)
    CLASS           reduce using rule 273 (expr -> expr MINUS expr .)
    TYPED           reduce using rule 273 (expr -> expr MINUS expr .)
    IF              reduce using rule 273 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 273 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 273 (expr -> expr MINUS expr .)
    WITH            reduce using rule 273 (expr -> expr MINUS expr .)
    DO              reduce using rule 273 (expr -> expr MINUS expr .)
    FOR             reduce using rule 273 (expr -> expr MINUS expr .)
    RETURN          reduce using rule 273 (expr -> expr MINUS expr .)
    YIELD           reduce using rule 273 (expr -> expr MINUS expr .)
    BREAK           reduce using rule 273 (expr -> expr MINUS expr .)
    CONTINUE        reduce using rule 273 (expr -> expr MINUS expr .)
    THROW           reduce using rule 273 (expr -> expr MINUS expr .)
    TRY             reduce using rule 273 (expr -> expr MINUS expr .)
    CATCH           reduce using rule 273 (expr -> expr MINUS expr .)
    FINALLY         reduce using rule 273 (expr -> expr MINUS expr .)
    SWITCH          reduce using rule 273 (expr -> expr MINUS expr .)
    NATIVE          reduce using rule 273 (expr -> expr MINUS expr .)
    IMPORT          reduce using rule 273 (expr -> expr MINUS expr .)
    EXPORT          reduce using rule 273 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 273 (expr -> expr MINUS expr .)
    DELETE          reduce using rule 273 (expr -> expr MINUS expr .)
    STRINGLIT       reduce using rule 273 (expr -> expr MINUS expr .)
    ID              reduce using rule 273 (expr -> expr MINUS expr .)
    GET             reduce using rule 273 (expr -> expr MINUS expr .)
    SET             reduce using rule 273 (expr -> expr MINUS expr .)
    NOT             reduce using rule 273 (expr -> expr MINUS expr .)
    BITINV          reduce using rule 273 (expr -> expr MINUS expr .)
    NEW             reduce using rule 273 (expr -> expr MINUS expr .)
    TYPEOF          reduce using rule 273 (expr -> expr MINUS expr .)
    REGEXPR         reduce using rule 273 (expr -> expr MINUS expr .)
    GLOBAL          reduce using rule 273 (expr -> expr MINUS expr .)
    VAR             reduce using rule 273 (expr -> expr MINUS expr .)
    STATIC          reduce using rule 273 (expr -> expr MINUS expr .)
    LBRACKET        reduce using rule 273 (expr -> expr MINUS expr .)
    $end            reduce using rule 273 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 273 (expr -> expr MINUS expr .)
    CASE            reduce using rule 273 (expr -> expr MINUS expr .)
    DEFAULT         reduce using rule 273 (expr -> expr MINUS expr .)
    OF              reduce using rule 273 (expr -> expr MINUS expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 273 (expr -> expr MINUS expr .) ]
  ! DOT             [ reduce using rule 273 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 273 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 273 (expr -> expr MINUS expr .) ]
  ! INC             [ reduce using rule 273 (expr -> expr MINUS expr .) ]
  ! DEC             [ reduce using rule 273 (expr -> expr MINUS expr .) ]
  ! LSBRACKET       [ reduce using rule 273 (expr -> expr MINUS expr .) ]
  ! LPAREN          [ reduce using rule 273 (expr -> expr MINUS expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 262

    (256) expr -> expr DOT expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 256 (expr -> expr DOT expr .)
    RSHIFT          reduce using rule 256 (expr -> expr DOT expr .)
    LSHIFT          reduce using rule 256 (expr -> expr DOT expr .)
    LLSHIFT         reduce using rule 256 (expr -> expr DOT expr .)
    RRSHIFT         reduce using rule 256 (expr -> expr DOT expr .)
    COND_DOT        reduce using rule 256 (expr -> expr DOT expr .)
    DOT             reduce using rule 256 (expr -> expr DOT expr .)
    LAND            reduce using rule 256 (expr -> expr DOT expr .)
    LOR             reduce using rule 256 (expr -> expr DOT expr .)
    BOR             reduce using rule 256 (expr -> expr DOT expr .)
    INSTANCEOF      reduce using rule 256 (expr -> expr DOT expr .)
    BXOR            reduce using rule 256 (expr -> expr DOT expr .)
    BAND            reduce using rule 256 (expr -> expr DOT expr .)
    EQUAL           reduce using rule 256 (expr -> expr DOT expr .)
    EQUAL_STRICT    reduce using rule 256 (expr -> expr DOT expr .)
    NOTEQUAL_STRICT reduce using rule 256 (expr -> expr DOT expr .)
    GTHAN           reduce using rule 256 (expr -> expr DOT expr .)
    GTHANEQ         reduce using rule 256 (expr -> expr DOT expr .)
    LTHAN           reduce using rule 256 (expr -> expr DOT expr .)
    MOD             reduce using rule 256 (expr -> expr DOT expr .)
    LTHANEQ         reduce using rule 256 (expr -> expr DOT expr .)
    NOTEQUAL        reduce using rule 256 (expr -> expr DOT expr .)
    PLUS            reduce using rule 256 (expr -> expr DOT expr .)
    MINUS           reduce using rule 256 (expr -> expr DOT expr .)
    DIVIDE          reduce using rule 256 (expr -> expr DOT expr .)
    TIMES           reduce using rule 256 (expr -> expr DOT expr .)
    IN              reduce using rule 256 (expr -> expr DOT expr .)
    QEST            reduce using rule 256 (expr -> expr DOT expr .)
    COMMA           reduce using rule 256 (expr -> expr DOT expr .)
    INC             reduce using rule 256 (expr -> expr DOT expr .)
    DEC             reduce using rule 256 (expr -> expr DOT expr .)
    ASSIGNPLUS      reduce using rule 256 (expr -> expr DOT expr .)
    ASSIGNMINUS     reduce using rule 256 (expr -> expr DOT expr .)
    ASSIGNDIVIDE    reduce using rule 256 (expr -> expr DOT expr .)
    ASSIGNTIMES     reduce using rule 256 (expr -> expr DOT expr .)
    ASSIGNBOR       reduce using rule 256 (expr -> expr DOT expr .)
    ASSIGNBAND      reduce using rule 256 (expr -> expr DOT expr .)
    ASSIGNBXOR      reduce using rule 256 (expr -> expr DOT expr .)
    ASSIGNLSHIFT    reduce using rule 256 (expr -> expr DOT expr .)
    ASSIGNRSHIFT    reduce using rule 256 (expr -> expr DOT expr .)
    ASSIGNRRSHIFT   reduce using rule 256 (expr -> expr DOT expr .)
    ASSIGNLLSHIFT   reduce using rule 256 (expr -> expr DOT expr .)
    ASSIGN          reduce using rule 256 (expr -> expr DOT expr .)
    LSBRACKET       reduce using rule 256 (expr -> expr DOT expr .)
    TLTHAN          reduce using rule 256 (expr -> expr DOT expr .)
    SEMI            reduce using rule 256 (expr -> expr DOT expr .)
    RPAREN          reduce using rule 256 (expr -> expr DOT expr .)
    RSBRACKET       reduce using rule 256 (expr -> expr DOT expr .)
    FUNCTION        reduce using rule 256 (expr -> expr DOT expr .)
    CLASS           reduce using rule 256 (expr -> expr DOT expr .)
    TYPED           reduce using rule 256 (expr -> expr DOT expr .)
    IF              reduce using rule 256 (expr -> expr DOT expr .)
    ELSE            reduce using rule 256 (expr -> expr DOT expr .)
    WHILE           reduce using rule 256 (expr -> expr DOT expr .)
    WITH            reduce using rule 256 (expr -> expr DOT expr .)
    DO              reduce using rule 256 (expr -> expr DOT expr .)
    FOR             reduce using rule 256 (expr -> expr DOT expr .)
    RETURN          reduce using rule 256 (expr -> expr DOT expr .)
    YIELD           reduce using rule 256 (expr -> expr DOT expr .)
    BREAK           reduce using rule 256 (expr -> expr DOT expr .)
    CONTINUE        reduce using rule 256 (expr -> expr DOT expr .)
    THROW           reduce using rule 256 (expr -> expr DOT expr .)
    TRY             reduce using rule 256 (expr -> expr DOT expr .)
    CATCH           reduce using rule 256 (expr -> expr DOT expr .)
    FINALLY         reduce using rule 256 (expr -> expr DOT expr .)
    SWITCH          reduce using rule 256 (expr -> expr DOT expr .)
    NATIVE          reduce using rule 256 (expr -> expr DOT expr .)
    IMPORT          reduce using rule 256 (expr -> expr DOT expr .)
    EXPORT          reduce using rule 256 (expr -> expr DOT expr .)
    NUMBER          reduce using rule 256 (expr -> expr DOT expr .)
    DELETE          reduce using rule 256 (expr -> expr DOT expr .)
    STRINGLIT       reduce using rule 256 (expr -> expr DOT expr .)
    ID              reduce using rule 256 (expr -> expr DOT expr .)
    GET             reduce using rule 256 (expr -> expr DOT expr .)
    SET             reduce using rule 256 (expr -> expr DOT expr .)
    NOT             reduce using rule 256 (expr -> expr DOT expr .)
    BITINV          reduce using rule 256 (expr -> expr DOT expr .)
    NEW             reduce using rule 256 (expr -> expr DOT expr .)
    TYPEOF          reduce using rule 256 (expr -> expr DOT expr .)
    REGEXPR         reduce using rule 256 (expr -> expr DOT expr .)
    GLOBAL          reduce using rule 256 (expr -> expr DOT expr .)
    VAR             reduce using rule 256 (expr -> expr DOT expr .)
    STATIC          reduce using rule 256 (expr -> expr DOT expr .)
    LBRACKET        reduce using rule 256 (expr -> expr DOT expr .)
    $end            reduce using rule 256 (expr -> expr DOT expr .)
    RBRACKET        reduce using rule 256 (expr -> expr DOT expr .)
    CASE            reduce using rule 256 (expr -> expr DOT expr .)
    DEFAULT         reduce using rule 256 (expr -> expr DOT expr .)
    OF              reduce using rule 256 (expr -> expr DOT expr .)
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! LPAREN          [ reduce using rule 256 (expr -> expr DOT expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! COND_DOT        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 119 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 131 ]
  ! TIMES           [ shift and go to state 104 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! INC             [ shift and go to state 128 ]
  ! DEC             [ shift and go to state 137 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! LSBRACKET       [ shift and go to state 100 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 263

    (266) expr -> expr GTHAN expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 266 (expr -> expr GTHAN expr .)
    LAND            reduce using rule 266 (expr -> expr GTHAN expr .)
    LOR             reduce using rule 266 (expr -> expr GTHAN expr .)
    BOR             reduce using rule 266 (expr -> expr GTHAN expr .)
    BXOR            reduce using rule 266 (expr -> expr GTHAN expr .)
    BAND            reduce using rule 266 (expr -> expr GTHAN expr .)
    EQUAL           reduce using rule 266 (expr -> expr GTHAN expr .)
    EQUAL_STRICT    reduce using rule 266 (expr -> expr GTHAN expr .)
    NOTEQUAL_STRICT reduce using rule 266 (expr -> expr GTHAN expr .)
    GTHAN           reduce using rule 266 (expr -> expr GTHAN expr .)
    GTHANEQ         reduce using rule 266 (expr -> expr GTHAN expr .)
    LTHAN           reduce using rule 266 (expr -> expr GTHAN expr .)
    MOD             reduce using rule 266 (expr -> expr GTHAN expr .)
    LTHANEQ         reduce using rule 266 (expr -> expr GTHAN expr .)
    NOTEQUAL        reduce using rule 266 (expr -> expr GTHAN expr .)
    QEST            reduce using rule 266 (expr -> expr GTHAN expr .)
    COMMA           reduce using rule 266 (expr -> expr GTHAN expr .)
    ASSIGNPLUS      reduce using rule 266 (expr -> expr GTHAN expr .)
    ASSIGNMINUS     reduce using rule 266 (expr -> expr GTHAN expr .)
    ASSIGNDIVIDE    reduce using rule 266 (expr -> expr GTHAN expr .)
    ASSIGNTIMES     reduce using rule 266 (expr -> expr GTHAN expr .)
    ASSIGNBOR       reduce using rule 266 (expr -> expr GTHAN expr .)
    ASSIGNBAND      reduce using rule 266 (expr -> expr GTHAN expr .)
    ASSIGNBXOR      reduce using rule 266 (expr -> expr GTHAN expr .)
    ASSIGNLSHIFT    reduce using rule 266 (expr -> expr GTHAN expr .)
    ASSIGNRSHIFT    reduce using rule 266 (expr -> expr GTHAN expr .)
    ASSIGNRRSHIFT   reduce using rule 266 (expr -> expr GTHAN expr .)
    ASSIGNLLSHIFT   reduce using rule 266 (expr -> expr GTHAN expr .)
    ASSIGN          reduce using rule 266 (expr -> expr GTHAN expr .)
    TLTHAN          reduce using rule 266 (expr -> expr GTHAN expr .)
    SEMI            reduce using rule 266 (expr -> expr GTHAN expr .)
    RPAREN          reduce using rule 266 (expr -> expr GTHAN expr .)
    RSBRACKET       reduce using rule 266 (expr -> expr GTHAN expr .)
    FUNCTION        reduce using rule 266 (expr -> expr GTHAN expr .)
    CLASS           reduce using rule 266 (expr -> expr GTHAN expr .)
    TYPED           reduce using rule 266 (expr -> expr GTHAN expr .)
    IF              reduce using rule 266 (expr -> expr GTHAN expr .)
    ELSE            reduce using rule 266 (expr -> expr GTHAN expr .)
    WHILE           reduce using rule 266 (expr -> expr GTHAN expr .)
    WITH            reduce using rule 266 (expr -> expr GTHAN expr .)
    DO              reduce using rule 266 (expr -> expr GTHAN expr .)
    FOR             reduce using rule 266 (expr -> expr GTHAN expr .)
    RETURN          reduce using rule 266 (expr -> expr GTHAN expr .)
    YIELD           reduce using rule 266 (expr -> expr GTHAN expr .)
    BREAK           reduce using rule 266 (expr -> expr GTHAN expr .)
    CONTINUE        reduce using rule 266 (expr -> expr GTHAN expr .)
    THROW           reduce using rule 266 (expr -> expr GTHAN expr .)
    TRY             reduce using rule 266 (expr -> expr GTHAN expr .)
    CATCH           reduce using rule 266 (expr -> expr GTHAN expr .)
    FINALLY         reduce using rule 266 (expr -> expr GTHAN expr .)
    SWITCH          reduce using rule 266 (expr -> expr GTHAN expr .)
    NATIVE          reduce using rule 266 (expr -> expr GTHAN expr .)
    IMPORT          reduce using rule 266 (expr -> expr GTHAN expr .)
    EXPORT          reduce using rule 266 (expr -> expr GTHAN expr .)
    NUMBER          reduce using rule 266 (expr -> expr GTHAN expr .)
    DELETE          reduce using rule 266 (expr -> expr GTHAN expr .)
    STRINGLIT       reduce using rule 266 (expr -> expr GTHAN expr .)
    ID              reduce using rule 266 (expr -> expr GTHAN expr .)
    GET             reduce using rule 266 (expr -> expr GTHAN expr .)
    SET             reduce using rule 266 (expr -> expr GTHAN expr .)
    NOT             reduce using rule 266 (expr -> expr GTHAN expr .)
    BITINV          reduce using rule 266 (expr -> expr GTHAN expr .)
    NEW             reduce using rule 266 (expr -> expr GTHAN expr .)
    TYPEOF          reduce using rule 266 (expr -> expr GTHAN expr .)
    REGEXPR         reduce using rule 266 (expr -> expr GTHAN expr .)
    GLOBAL          reduce using rule 266 (expr -> expr GTHAN expr .)
    VAR             reduce using rule 266 (expr -> expr GTHAN expr .)
    STATIC          reduce using rule 266 (expr -> expr GTHAN expr .)
    LBRACKET        reduce using rule 266 (expr -> expr GTHAN expr .)
    $end            reduce using rule 266 (expr -> expr GTHAN expr .)
    RBRACKET        reduce using rule 266 (expr -> expr GTHAN expr .)
    CASE            reduce using rule 266 (expr -> expr GTHAN expr .)
    DEFAULT         reduce using rule 266 (expr -> expr GTHAN expr .)
    OF              reduce using rule 266 (expr -> expr GTHAN expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INSTANCEOF      shift and go to state 98
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! LSHIFT          [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! LLSHIFT         [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! RRSHIFT         [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! COND_DOT        [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! DOT             [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! INSTANCEOF      [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! PLUS            [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! MINUS           [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! DIVIDE          [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! TIMES           [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! IN              [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! INC             [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! DEC             [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! LSBRACKET       [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! LPAREN          [ reduce using rule 266 (expr -> expr GTHAN expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 264

    (265) expr -> expr NOTEQUAL_STRICT expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    LAND            reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    LOR             reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    BOR             reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    BXOR            reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    BAND            reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    EQUAL           reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    EQUAL_STRICT    reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    NOTEQUAL_STRICT reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    GTHAN           reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    GTHANEQ         reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    LTHAN           reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    MOD             reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    LTHANEQ         reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    NOTEQUAL        reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    QEST            reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    COMMA           reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNPLUS      reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNMINUS     reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNDIVIDE    reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNTIMES     reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNBOR       reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNBAND      reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNBXOR      reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNLSHIFT    reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNRSHIFT    reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNRRSHIFT   reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNLLSHIFT   reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGN          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    TLTHAN          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    SEMI            reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    RPAREN          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    RSBRACKET       reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    FUNCTION        reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    CLASS           reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    TYPED           reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    IF              reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ELSE            reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    WHILE           reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    WITH            reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    DO              reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    FOR             reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    RETURN          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    YIELD           reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    BREAK           reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    CONTINUE        reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    THROW           reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    TRY             reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    CATCH           reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    FINALLY         reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    SWITCH          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    NATIVE          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    IMPORT          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    EXPORT          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    NUMBER          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    DELETE          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    STRINGLIT       reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    ID              reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    GET             reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    SET             reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    NOT             reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    BITINV          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    NEW             reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    TYPEOF          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    REGEXPR         reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    GLOBAL          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    VAR             reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    STATIC          reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    LBRACKET        reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    $end            reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    RBRACKET        reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    CASE            reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    DEFAULT         reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    OF              reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INSTANCEOF      shift and go to state 98
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LSHIFT          [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LLSHIFT         [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! RRSHIFT         [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! COND_DOT        [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! DOT             [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! INSTANCEOF      [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! PLUS            [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! MINUS           [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! DIVIDE          [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! TIMES           [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! IN              [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! INC             [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! DEC             [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LSBRACKET       [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LPAREN          [ reduce using rule 265 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 265

    (276) expr -> expr IN expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 276 (expr -> expr IN expr .)
    LAND            reduce using rule 276 (expr -> expr IN expr .)
    LOR             reduce using rule 276 (expr -> expr IN expr .)
    BOR             reduce using rule 276 (expr -> expr IN expr .)
    INSTANCEOF      reduce using rule 276 (expr -> expr IN expr .)
    BXOR            reduce using rule 276 (expr -> expr IN expr .)
    BAND            reduce using rule 276 (expr -> expr IN expr .)
    EQUAL           reduce using rule 276 (expr -> expr IN expr .)
    EQUAL_STRICT    reduce using rule 276 (expr -> expr IN expr .)
    NOTEQUAL_STRICT reduce using rule 276 (expr -> expr IN expr .)
    GTHAN           reduce using rule 276 (expr -> expr IN expr .)
    GTHANEQ         reduce using rule 276 (expr -> expr IN expr .)
    LTHAN           reduce using rule 276 (expr -> expr IN expr .)
    MOD             reduce using rule 276 (expr -> expr IN expr .)
    LTHANEQ         reduce using rule 276 (expr -> expr IN expr .)
    NOTEQUAL        reduce using rule 276 (expr -> expr IN expr .)
    IN              reduce using rule 276 (expr -> expr IN expr .)
    QEST            reduce using rule 276 (expr -> expr IN expr .)
    COMMA           reduce using rule 276 (expr -> expr IN expr .)
    ASSIGNPLUS      reduce using rule 276 (expr -> expr IN expr .)
    ASSIGNMINUS     reduce using rule 276 (expr -> expr IN expr .)
    ASSIGNDIVIDE    reduce using rule 276 (expr -> expr IN expr .)
    ASSIGNTIMES     reduce using rule 276 (expr -> expr IN expr .)
    ASSIGNBOR       reduce using rule 276 (expr -> expr IN expr .)
    ASSIGNBAND      reduce using rule 276 (expr -> expr IN expr .)
    ASSIGNBXOR      reduce using rule 276 (expr -> expr IN expr .)
    ASSIGNLSHIFT    reduce using rule 276 (expr -> expr IN expr .)
    ASSIGNRSHIFT    reduce using rule 276 (expr -> expr IN expr .)
    ASSIGNRRSHIFT   reduce using rule 276 (expr -> expr IN expr .)
    ASSIGNLLSHIFT   reduce using rule 276 (expr -> expr IN expr .)
    ASSIGN          reduce using rule 276 (expr -> expr IN expr .)
    TLTHAN          reduce using rule 276 (expr -> expr IN expr .)
    SEMI            reduce using rule 276 (expr -> expr IN expr .)
    RPAREN          reduce using rule 276 (expr -> expr IN expr .)
    RSBRACKET       reduce using rule 276 (expr -> expr IN expr .)
    FUNCTION        reduce using rule 276 (expr -> expr IN expr .)
    CLASS           reduce using rule 276 (expr -> expr IN expr .)
    TYPED           reduce using rule 276 (expr -> expr IN expr .)
    IF              reduce using rule 276 (expr -> expr IN expr .)
    ELSE            reduce using rule 276 (expr -> expr IN expr .)
    WHILE           reduce using rule 276 (expr -> expr IN expr .)
    WITH            reduce using rule 276 (expr -> expr IN expr .)
    DO              reduce using rule 276 (expr -> expr IN expr .)
    FOR             reduce using rule 276 (expr -> expr IN expr .)
    RETURN          reduce using rule 276 (expr -> expr IN expr .)
    YIELD           reduce using rule 276 (expr -> expr IN expr .)
    BREAK           reduce using rule 276 (expr -> expr IN expr .)
    CONTINUE        reduce using rule 276 (expr -> expr IN expr .)
    THROW           reduce using rule 276 (expr -> expr IN expr .)
    TRY             reduce using rule 276 (expr -> expr IN expr .)
    CATCH           reduce using rule 276 (expr -> expr IN expr .)
    FINALLY         reduce using rule 276 (expr -> expr IN expr .)
    SWITCH          reduce using rule 276 (expr -> expr IN expr .)
    NATIVE          reduce using rule 276 (expr -> expr IN expr .)
    IMPORT          reduce using rule 276 (expr -> expr IN expr .)
    EXPORT          reduce using rule 276 (expr -> expr IN expr .)
    NUMBER          reduce using rule 276 (expr -> expr IN expr .)
    DELETE          reduce using rule 276 (expr -> expr IN expr .)
    STRINGLIT       reduce using rule 276 (expr -> expr IN expr .)
    ID              reduce using rule 276 (expr -> expr IN expr .)
    GET             reduce using rule 276 (expr -> expr IN expr .)
    SET             reduce using rule 276 (expr -> expr IN expr .)
    NOT             reduce using rule 276 (expr -> expr IN expr .)
    BITINV          reduce using rule 276 (expr -> expr IN expr .)
    NEW             reduce using rule 276 (expr -> expr IN expr .)
    TYPEOF          reduce using rule 276 (expr -> expr IN expr .)
    REGEXPR         reduce using rule 276 (expr -> expr IN expr .)
    GLOBAL          reduce using rule 276 (expr -> expr IN expr .)
    VAR             reduce using rule 276 (expr -> expr IN expr .)
    STATIC          reduce using rule 276 (expr -> expr IN expr .)
    LBRACKET        reduce using rule 276 (expr -> expr IN expr .)
    $end            reduce using rule 276 (expr -> expr IN expr .)
    RBRACKET        reduce using rule 276 (expr -> expr IN expr .)
    CASE            reduce using rule 276 (expr -> expr IN expr .)
    DEFAULT         reduce using rule 276 (expr -> expr IN expr .)
    OF              reduce using rule 276 (expr -> expr IN expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! LSHIFT          [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! LLSHIFT         [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! RRSHIFT         [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! COND_DOT        [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! DOT             [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! PLUS            [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! MINUS           [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! DIVIDE          [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! TIMES           [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! INC             [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! DEC             [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! LSBRACKET       [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! LPAREN          [ reduce using rule 276 (expr -> expr IN expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 266

    (268) expr -> expr LTHAN expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 268 (expr -> expr LTHAN expr .)
    LAND            reduce using rule 268 (expr -> expr LTHAN expr .)
    LOR             reduce using rule 268 (expr -> expr LTHAN expr .)
    BOR             reduce using rule 268 (expr -> expr LTHAN expr .)
    BXOR            reduce using rule 268 (expr -> expr LTHAN expr .)
    BAND            reduce using rule 268 (expr -> expr LTHAN expr .)
    EQUAL           reduce using rule 268 (expr -> expr LTHAN expr .)
    EQUAL_STRICT    reduce using rule 268 (expr -> expr LTHAN expr .)
    NOTEQUAL_STRICT reduce using rule 268 (expr -> expr LTHAN expr .)
    GTHAN           reduce using rule 268 (expr -> expr LTHAN expr .)
    GTHANEQ         reduce using rule 268 (expr -> expr LTHAN expr .)
    LTHAN           reduce using rule 268 (expr -> expr LTHAN expr .)
    MOD             reduce using rule 268 (expr -> expr LTHAN expr .)
    LTHANEQ         reduce using rule 268 (expr -> expr LTHAN expr .)
    NOTEQUAL        reduce using rule 268 (expr -> expr LTHAN expr .)
    QEST            reduce using rule 268 (expr -> expr LTHAN expr .)
    COMMA           reduce using rule 268 (expr -> expr LTHAN expr .)
    ASSIGNPLUS      reduce using rule 268 (expr -> expr LTHAN expr .)
    ASSIGNMINUS     reduce using rule 268 (expr -> expr LTHAN expr .)
    ASSIGNDIVIDE    reduce using rule 268 (expr -> expr LTHAN expr .)
    ASSIGNTIMES     reduce using rule 268 (expr -> expr LTHAN expr .)
    ASSIGNBOR       reduce using rule 268 (expr -> expr LTHAN expr .)
    ASSIGNBAND      reduce using rule 268 (expr -> expr LTHAN expr .)
    ASSIGNBXOR      reduce using rule 268 (expr -> expr LTHAN expr .)
    ASSIGNLSHIFT    reduce using rule 268 (expr -> expr LTHAN expr .)
    ASSIGNRSHIFT    reduce using rule 268 (expr -> expr LTHAN expr .)
    ASSIGNRRSHIFT   reduce using rule 268 (expr -> expr LTHAN expr .)
    ASSIGNLLSHIFT   reduce using rule 268 (expr -> expr LTHAN expr .)
    ASSIGN          reduce using rule 268 (expr -> expr LTHAN expr .)
    TLTHAN          reduce using rule 268 (expr -> expr LTHAN expr .)
    SEMI            reduce using rule 268 (expr -> expr LTHAN expr .)
    RPAREN          reduce using rule 268 (expr -> expr LTHAN expr .)
    RSBRACKET       reduce using rule 268 (expr -> expr LTHAN expr .)
    FUNCTION        reduce using rule 268 (expr -> expr LTHAN expr .)
    CLASS           reduce using rule 268 (expr -> expr LTHAN expr .)
    TYPED           reduce using rule 268 (expr -> expr LTHAN expr .)
    IF              reduce using rule 268 (expr -> expr LTHAN expr .)
    ELSE            reduce using rule 268 (expr -> expr LTHAN expr .)
    WHILE           reduce using rule 268 (expr -> expr LTHAN expr .)
    WITH            reduce using rule 268 (expr -> expr LTHAN expr .)
    DO              reduce using rule 268 (expr -> expr LTHAN expr .)
    FOR             reduce using rule 268 (expr -> expr LTHAN expr .)
    RETURN          reduce using rule 268 (expr -> expr LTHAN expr .)
    YIELD           reduce using rule 268 (expr -> expr LTHAN expr .)
    BREAK           reduce using rule 268 (expr -> expr LTHAN expr .)
    CONTINUE        reduce using rule 268 (expr -> expr LTHAN expr .)
    THROW           reduce using rule 268 (expr -> expr LTHAN expr .)
    TRY             reduce using rule 268 (expr -> expr LTHAN expr .)
    CATCH           reduce using rule 268 (expr -> expr LTHAN expr .)
    FINALLY         reduce using rule 268 (expr -> expr LTHAN expr .)
    SWITCH          reduce using rule 268 (expr -> expr LTHAN expr .)
    NATIVE          reduce using rule 268 (expr -> expr LTHAN expr .)
    IMPORT          reduce using rule 268 (expr -> expr LTHAN expr .)
    EXPORT          reduce using rule 268 (expr -> expr LTHAN expr .)
    NUMBER          reduce using rule 268 (expr -> expr LTHAN expr .)
    DELETE          reduce using rule 268 (expr -> expr LTHAN expr .)
    STRINGLIT       reduce using rule 268 (expr -> expr LTHAN expr .)
    ID              reduce using rule 268 (expr -> expr LTHAN expr .)
    GET             reduce using rule 268 (expr -> expr LTHAN expr .)
    SET             reduce using rule 268 (expr -> expr LTHAN expr .)
    NOT             reduce using rule 268 (expr -> expr LTHAN expr .)
    BITINV          reduce using rule 268 (expr -> expr LTHAN expr .)
    NEW             reduce using rule 268 (expr -> expr LTHAN expr .)
    TYPEOF          reduce using rule 268 (expr -> expr LTHAN expr .)
    REGEXPR         reduce using rule 268 (expr -> expr LTHAN expr .)
    GLOBAL          reduce using rule 268 (expr -> expr LTHAN expr .)
    VAR             reduce using rule 268 (expr -> expr LTHAN expr .)
    STATIC          reduce using rule 268 (expr -> expr LTHAN expr .)
    LBRACKET        reduce using rule 268 (expr -> expr LTHAN expr .)
    $end            reduce using rule 268 (expr -> expr LTHAN expr .)
    RBRACKET        reduce using rule 268 (expr -> expr LTHAN expr .)
    CASE            reduce using rule 268 (expr -> expr LTHAN expr .)
    DEFAULT         reduce using rule 268 (expr -> expr LTHAN expr .)
    OF              reduce using rule 268 (expr -> expr LTHAN expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INSTANCEOF      shift and go to state 98
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! LSHIFT          [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! LLSHIFT         [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! RRSHIFT         [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! COND_DOT        [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! DOT             [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! INSTANCEOF      [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! PLUS            [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! MINUS           [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! DIVIDE          [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! TIMES           [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! IN              [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! INC             [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! DEC             [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! LSBRACKET       [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! LPAREN          [ reduce using rule 268 (expr -> expr LTHAN expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 267

    (261) expr -> expr BXOR expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 261 (expr -> expr BXOR expr .)
    LAND            reduce using rule 261 (expr -> expr BXOR expr .)
    LOR             reduce using rule 261 (expr -> expr BXOR expr .)
    BOR             reduce using rule 261 (expr -> expr BXOR expr .)
    BXOR            reduce using rule 261 (expr -> expr BXOR expr .)
    BAND            reduce using rule 261 (expr -> expr BXOR expr .)
    MOD             reduce using rule 261 (expr -> expr BXOR expr .)
    QEST            reduce using rule 261 (expr -> expr BXOR expr .)
    COMMA           reduce using rule 261 (expr -> expr BXOR expr .)
    ASSIGNPLUS      reduce using rule 261 (expr -> expr BXOR expr .)
    ASSIGNMINUS     reduce using rule 261 (expr -> expr BXOR expr .)
    ASSIGNDIVIDE    reduce using rule 261 (expr -> expr BXOR expr .)
    ASSIGNTIMES     reduce using rule 261 (expr -> expr BXOR expr .)
    ASSIGNBOR       reduce using rule 261 (expr -> expr BXOR expr .)
    ASSIGNBAND      reduce using rule 261 (expr -> expr BXOR expr .)
    ASSIGNBXOR      reduce using rule 261 (expr -> expr BXOR expr .)
    ASSIGNLSHIFT    reduce using rule 261 (expr -> expr BXOR expr .)
    ASSIGNRSHIFT    reduce using rule 261 (expr -> expr BXOR expr .)
    ASSIGNRRSHIFT   reduce using rule 261 (expr -> expr BXOR expr .)
    ASSIGNLLSHIFT   reduce using rule 261 (expr -> expr BXOR expr .)
    ASSIGN          reduce using rule 261 (expr -> expr BXOR expr .)
    TLTHAN          reduce using rule 261 (expr -> expr BXOR expr .)
    SEMI            reduce using rule 261 (expr -> expr BXOR expr .)
    RPAREN          reduce using rule 261 (expr -> expr BXOR expr .)
    RSBRACKET       reduce using rule 261 (expr -> expr BXOR expr .)
    FUNCTION        reduce using rule 261 (expr -> expr BXOR expr .)
    CLASS           reduce using rule 261 (expr -> expr BXOR expr .)
    TYPED           reduce using rule 261 (expr -> expr BXOR expr .)
    IF              reduce using rule 261 (expr -> expr BXOR expr .)
    ELSE            reduce using rule 261 (expr -> expr BXOR expr .)
    WHILE           reduce using rule 261 (expr -> expr BXOR expr .)
    WITH            reduce using rule 261 (expr -> expr BXOR expr .)
    DO              reduce using rule 261 (expr -> expr BXOR expr .)
    FOR             reduce using rule 261 (expr -> expr BXOR expr .)
    RETURN          reduce using rule 261 (expr -> expr BXOR expr .)
    YIELD           reduce using rule 261 (expr -> expr BXOR expr .)
    BREAK           reduce using rule 261 (expr -> expr BXOR expr .)
    CONTINUE        reduce using rule 261 (expr -> expr BXOR expr .)
    THROW           reduce using rule 261 (expr -> expr BXOR expr .)
    TRY             reduce using rule 261 (expr -> expr BXOR expr .)
    CATCH           reduce using rule 261 (expr -> expr BXOR expr .)
    FINALLY         reduce using rule 261 (expr -> expr BXOR expr .)
    SWITCH          reduce using rule 261 (expr -> expr BXOR expr .)
    NATIVE          reduce using rule 261 (expr -> expr BXOR expr .)
    IMPORT          reduce using rule 261 (expr -> expr BXOR expr .)
    EXPORT          reduce using rule 261 (expr -> expr BXOR expr .)
    NUMBER          reduce using rule 261 (expr -> expr BXOR expr .)
    DELETE          reduce using rule 261 (expr -> expr BXOR expr .)
    STRINGLIT       reduce using rule 261 (expr -> expr BXOR expr .)
    ID              reduce using rule 261 (expr -> expr BXOR expr .)
    GET             reduce using rule 261 (expr -> expr BXOR expr .)
    SET             reduce using rule 261 (expr -> expr BXOR expr .)
    NOT             reduce using rule 261 (expr -> expr BXOR expr .)
    BITINV          reduce using rule 261 (expr -> expr BXOR expr .)
    NEW             reduce using rule 261 (expr -> expr BXOR expr .)
    TYPEOF          reduce using rule 261 (expr -> expr BXOR expr .)
    REGEXPR         reduce using rule 261 (expr -> expr BXOR expr .)
    GLOBAL          reduce using rule 261 (expr -> expr BXOR expr .)
    VAR             reduce using rule 261 (expr -> expr BXOR expr .)
    STATIC          reduce using rule 261 (expr -> expr BXOR expr .)
    LBRACKET        reduce using rule 261 (expr -> expr BXOR expr .)
    $end            reduce using rule 261 (expr -> expr BXOR expr .)
    RBRACKET        reduce using rule 261 (expr -> expr BXOR expr .)
    CASE            reduce using rule 261 (expr -> expr BXOR expr .)
    DEFAULT         reduce using rule 261 (expr -> expr BXOR expr .)
    OF              reduce using rule 261 (expr -> expr BXOR expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INSTANCEOF      shift and go to state 98
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! LSHIFT          [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! LLSHIFT         [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! RRSHIFT         [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! COND_DOT        [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! DOT             [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! EQUAL           [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! GTHAN           [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! GTHANEQ         [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! LTHAN           [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! LTHANEQ         [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! NOTEQUAL        [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! PLUS            [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! MINUS           [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! DIVIDE          [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! TIMES           [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! IN              [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! INC             [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! DEC             [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! LSBRACKET       [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! LPAREN          [ reduce using rule 261 (expr -> expr BXOR expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! MOD             [ shift and go to state 113 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 268

    (267) expr -> expr GTHANEQ expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 267 (expr -> expr GTHANEQ expr .)
    LAND            reduce using rule 267 (expr -> expr GTHANEQ expr .)
    LOR             reduce using rule 267 (expr -> expr GTHANEQ expr .)
    BOR             reduce using rule 267 (expr -> expr GTHANEQ expr .)
    BXOR            reduce using rule 267 (expr -> expr GTHANEQ expr .)
    BAND            reduce using rule 267 (expr -> expr GTHANEQ expr .)
    EQUAL           reduce using rule 267 (expr -> expr GTHANEQ expr .)
    EQUAL_STRICT    reduce using rule 267 (expr -> expr GTHANEQ expr .)
    NOTEQUAL_STRICT reduce using rule 267 (expr -> expr GTHANEQ expr .)
    GTHAN           reduce using rule 267 (expr -> expr GTHANEQ expr .)
    GTHANEQ         reduce using rule 267 (expr -> expr GTHANEQ expr .)
    LTHAN           reduce using rule 267 (expr -> expr GTHANEQ expr .)
    MOD             reduce using rule 267 (expr -> expr GTHANEQ expr .)
    LTHANEQ         reduce using rule 267 (expr -> expr GTHANEQ expr .)
    NOTEQUAL        reduce using rule 267 (expr -> expr GTHANEQ expr .)
    QEST            reduce using rule 267 (expr -> expr GTHANEQ expr .)
    COMMA           reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ASSIGNPLUS      reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ASSIGNMINUS     reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ASSIGNDIVIDE    reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ASSIGNTIMES     reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ASSIGNBOR       reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ASSIGNBAND      reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ASSIGNBXOR      reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ASSIGNLSHIFT    reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ASSIGNRSHIFT    reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ASSIGNRRSHIFT   reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ASSIGNLLSHIFT   reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ASSIGN          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    TLTHAN          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    SEMI            reduce using rule 267 (expr -> expr GTHANEQ expr .)
    RPAREN          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    RSBRACKET       reduce using rule 267 (expr -> expr GTHANEQ expr .)
    FUNCTION        reduce using rule 267 (expr -> expr GTHANEQ expr .)
    CLASS           reduce using rule 267 (expr -> expr GTHANEQ expr .)
    TYPED           reduce using rule 267 (expr -> expr GTHANEQ expr .)
    IF              reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ELSE            reduce using rule 267 (expr -> expr GTHANEQ expr .)
    WHILE           reduce using rule 267 (expr -> expr GTHANEQ expr .)
    WITH            reduce using rule 267 (expr -> expr GTHANEQ expr .)
    DO              reduce using rule 267 (expr -> expr GTHANEQ expr .)
    FOR             reduce using rule 267 (expr -> expr GTHANEQ expr .)
    RETURN          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    YIELD           reduce using rule 267 (expr -> expr GTHANEQ expr .)
    BREAK           reduce using rule 267 (expr -> expr GTHANEQ expr .)
    CONTINUE        reduce using rule 267 (expr -> expr GTHANEQ expr .)
    THROW           reduce using rule 267 (expr -> expr GTHANEQ expr .)
    TRY             reduce using rule 267 (expr -> expr GTHANEQ expr .)
    CATCH           reduce using rule 267 (expr -> expr GTHANEQ expr .)
    FINALLY         reduce using rule 267 (expr -> expr GTHANEQ expr .)
    SWITCH          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    NATIVE          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    IMPORT          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    EXPORT          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    NUMBER          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    DELETE          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    STRINGLIT       reduce using rule 267 (expr -> expr GTHANEQ expr .)
    ID              reduce using rule 267 (expr -> expr GTHANEQ expr .)
    GET             reduce using rule 267 (expr -> expr GTHANEQ expr .)
    SET             reduce using rule 267 (expr -> expr GTHANEQ expr .)
    NOT             reduce using rule 267 (expr -> expr GTHANEQ expr .)
    BITINV          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    NEW             reduce using rule 267 (expr -> expr GTHANEQ expr .)
    TYPEOF          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    REGEXPR         reduce using rule 267 (expr -> expr GTHANEQ expr .)
    GLOBAL          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    VAR             reduce using rule 267 (expr -> expr GTHANEQ expr .)
    STATIC          reduce using rule 267 (expr -> expr GTHANEQ expr .)
    LBRACKET        reduce using rule 267 (expr -> expr GTHANEQ expr .)
    $end            reduce using rule 267 (expr -> expr GTHANEQ expr .)
    RBRACKET        reduce using rule 267 (expr -> expr GTHANEQ expr .)
    CASE            reduce using rule 267 (expr -> expr GTHANEQ expr .)
    DEFAULT         reduce using rule 267 (expr -> expr GTHANEQ expr .)
    OF              reduce using rule 267 (expr -> expr GTHANEQ expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INSTANCEOF      shift and go to state 98
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! LSHIFT          [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! LLSHIFT         [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! RRSHIFT         [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! COND_DOT        [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! DOT             [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! INSTANCEOF      [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! PLUS            [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! MINUS           [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! DIVIDE          [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! TIMES           [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! IN              [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! INC             [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! DEC             [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! LSBRACKET       [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! LPAREN          [ reduce using rule 267 (expr -> expr GTHANEQ expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 269

    (274) expr -> expr DIVIDE expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 274 (expr -> expr DIVIDE expr .)
    RSHIFT          reduce using rule 274 (expr -> expr DIVIDE expr .)
    LSHIFT          reduce using rule 274 (expr -> expr DIVIDE expr .)
    LLSHIFT         reduce using rule 274 (expr -> expr DIVIDE expr .)
    RRSHIFT         reduce using rule 274 (expr -> expr DIVIDE expr .)
    LAND            reduce using rule 274 (expr -> expr DIVIDE expr .)
    LOR             reduce using rule 274 (expr -> expr DIVIDE expr .)
    BOR             reduce using rule 274 (expr -> expr DIVIDE expr .)
    INSTANCEOF      reduce using rule 274 (expr -> expr DIVIDE expr .)
    BXOR            reduce using rule 274 (expr -> expr DIVIDE expr .)
    BAND            reduce using rule 274 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 274 (expr -> expr DIVIDE expr .)
    EQUAL_STRICT    reduce using rule 274 (expr -> expr DIVIDE expr .)
    NOTEQUAL_STRICT reduce using rule 274 (expr -> expr DIVIDE expr .)
    GTHAN           reduce using rule 274 (expr -> expr DIVIDE expr .)
    GTHANEQ         reduce using rule 274 (expr -> expr DIVIDE expr .)
    LTHAN           reduce using rule 274 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 274 (expr -> expr DIVIDE expr .)
    LTHANEQ         reduce using rule 274 (expr -> expr DIVIDE expr .)
    NOTEQUAL        reduce using rule 274 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 274 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 274 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 274 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 274 (expr -> expr DIVIDE expr .)
    IN              reduce using rule 274 (expr -> expr DIVIDE expr .)
    QEST            reduce using rule 274 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 274 (expr -> expr DIVIDE expr .)
    ASSIGNPLUS      reduce using rule 274 (expr -> expr DIVIDE expr .)
    ASSIGNMINUS     reduce using rule 274 (expr -> expr DIVIDE expr .)
    ASSIGNDIVIDE    reduce using rule 274 (expr -> expr DIVIDE expr .)
    ASSIGNTIMES     reduce using rule 274 (expr -> expr DIVIDE expr .)
    ASSIGNBOR       reduce using rule 274 (expr -> expr DIVIDE expr .)
    ASSIGNBAND      reduce using rule 274 (expr -> expr DIVIDE expr .)
    ASSIGNBXOR      reduce using rule 274 (expr -> expr DIVIDE expr .)
    ASSIGNLSHIFT    reduce using rule 274 (expr -> expr DIVIDE expr .)
    ASSIGNRSHIFT    reduce using rule 274 (expr -> expr DIVIDE expr .)
    ASSIGNRRSHIFT   reduce using rule 274 (expr -> expr DIVIDE expr .)
    ASSIGNLLSHIFT   reduce using rule 274 (expr -> expr DIVIDE expr .)
    ASSIGN          reduce using rule 274 (expr -> expr DIVIDE expr .)
    TLTHAN          reduce using rule 274 (expr -> expr DIVIDE expr .)
    SEMI            reduce using rule 274 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 274 (expr -> expr DIVIDE expr .)
    RSBRACKET       reduce using rule 274 (expr -> expr DIVIDE expr .)
    FUNCTION        reduce using rule 274 (expr -> expr DIVIDE expr .)
    CLASS           reduce using rule 274 (expr -> expr DIVIDE expr .)
    TYPED           reduce using rule 274 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 274 (expr -> expr DIVIDE expr .)
    ELSE            reduce using rule 274 (expr -> expr DIVIDE expr .)
    WHILE           reduce using rule 274 (expr -> expr DIVIDE expr .)
    WITH            reduce using rule 274 (expr -> expr DIVIDE expr .)
    DO              reduce using rule 274 (expr -> expr DIVIDE expr .)
    FOR             reduce using rule 274 (expr -> expr DIVIDE expr .)
    RETURN          reduce using rule 274 (expr -> expr DIVIDE expr .)
    YIELD           reduce using rule 274 (expr -> expr DIVIDE expr .)
    BREAK           reduce using rule 274 (expr -> expr DIVIDE expr .)
    CONTINUE        reduce using rule 274 (expr -> expr DIVIDE expr .)
    THROW           reduce using rule 274 (expr -> expr DIVIDE expr .)
    TRY             reduce using rule 274 (expr -> expr DIVIDE expr .)
    CATCH           reduce using rule 274 (expr -> expr DIVIDE expr .)
    FINALLY         reduce using rule 274 (expr -> expr DIVIDE expr .)
    SWITCH          reduce using rule 274 (expr -> expr DIVIDE expr .)
    NATIVE          reduce using rule 274 (expr -> expr DIVIDE expr .)
    IMPORT          reduce using rule 274 (expr -> expr DIVIDE expr .)
    EXPORT          reduce using rule 274 (expr -> expr DIVIDE expr .)
    NUMBER          reduce using rule 274 (expr -> expr DIVIDE expr .)
    DELETE          reduce using rule 274 (expr -> expr DIVIDE expr .)
    STRINGLIT       reduce using rule 274 (expr -> expr DIVIDE expr .)
    ID              reduce using rule 274 (expr -> expr DIVIDE expr .)
    GET             reduce using rule 274 (expr -> expr DIVIDE expr .)
    SET             reduce using rule 274 (expr -> expr DIVIDE expr .)
    NOT             reduce using rule 274 (expr -> expr DIVIDE expr .)
    BITINV          reduce using rule 274 (expr -> expr DIVIDE expr .)
    NEW             reduce using rule 274 (expr -> expr DIVIDE expr .)
    TYPEOF          reduce using rule 274 (expr -> expr DIVIDE expr .)
    REGEXPR         reduce using rule 274 (expr -> expr DIVIDE expr .)
    GLOBAL          reduce using rule 274 (expr -> expr DIVIDE expr .)
    VAR             reduce using rule 274 (expr -> expr DIVIDE expr .)
    STATIC          reduce using rule 274 (expr -> expr DIVIDE expr .)
    LBRACKET        reduce using rule 274 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 274 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 274 (expr -> expr DIVIDE expr .)
    CASE            reduce using rule 274 (expr -> expr DIVIDE expr .)
    DEFAULT         reduce using rule 274 (expr -> expr DIVIDE expr .)
    OF              reduce using rule 274 (expr -> expr DIVIDE expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 274 (expr -> expr DIVIDE expr .) ]
  ! DOT             [ reduce using rule 274 (expr -> expr DIVIDE expr .) ]
  ! INC             [ reduce using rule 274 (expr -> expr DIVIDE expr .) ]
  ! DEC             [ reduce using rule 274 (expr -> expr DIVIDE expr .) ]
  ! LSBRACKET       [ reduce using rule 274 (expr -> expr DIVIDE expr .) ]
  ! LPAREN          [ reduce using rule 274 (expr -> expr DIVIDE expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 131 ]
  ! TIMES           [ shift and go to state 104 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 270

    (280) expr -> expr QEST expr . COLON expr
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    COLON           shift and go to state 352
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 271

    (254) expr -> expr RRSHIFT expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 254 (expr -> expr RRSHIFT expr .)
    RSHIFT          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    LSHIFT          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    LLSHIFT         reduce using rule 254 (expr -> expr RRSHIFT expr .)
    RRSHIFT         reduce using rule 254 (expr -> expr RRSHIFT expr .)
    LAND            reduce using rule 254 (expr -> expr RRSHIFT expr .)
    LOR             reduce using rule 254 (expr -> expr RRSHIFT expr .)
    BOR             reduce using rule 254 (expr -> expr RRSHIFT expr .)
    INSTANCEOF      reduce using rule 254 (expr -> expr RRSHIFT expr .)
    BXOR            reduce using rule 254 (expr -> expr RRSHIFT expr .)
    BAND            reduce using rule 254 (expr -> expr RRSHIFT expr .)
    EQUAL           reduce using rule 254 (expr -> expr RRSHIFT expr .)
    EQUAL_STRICT    reduce using rule 254 (expr -> expr RRSHIFT expr .)
    NOTEQUAL_STRICT reduce using rule 254 (expr -> expr RRSHIFT expr .)
    GTHAN           reduce using rule 254 (expr -> expr RRSHIFT expr .)
    GTHANEQ         reduce using rule 254 (expr -> expr RRSHIFT expr .)
    LTHAN           reduce using rule 254 (expr -> expr RRSHIFT expr .)
    MOD             reduce using rule 254 (expr -> expr RRSHIFT expr .)
    LTHANEQ         reduce using rule 254 (expr -> expr RRSHIFT expr .)
    NOTEQUAL        reduce using rule 254 (expr -> expr RRSHIFT expr .)
    IN              reduce using rule 254 (expr -> expr RRSHIFT expr .)
    QEST            reduce using rule 254 (expr -> expr RRSHIFT expr .)
    COMMA           reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ASSIGNPLUS      reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ASSIGNMINUS     reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ASSIGNDIVIDE    reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ASSIGNTIMES     reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ASSIGNBOR       reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ASSIGNBAND      reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ASSIGNBXOR      reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ASSIGNLSHIFT    reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ASSIGNRSHIFT    reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ASSIGNRRSHIFT   reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ASSIGNLLSHIFT   reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ASSIGN          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    TLTHAN          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    SEMI            reduce using rule 254 (expr -> expr RRSHIFT expr .)
    RPAREN          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    RSBRACKET       reduce using rule 254 (expr -> expr RRSHIFT expr .)
    FUNCTION        reduce using rule 254 (expr -> expr RRSHIFT expr .)
    CLASS           reduce using rule 254 (expr -> expr RRSHIFT expr .)
    TYPED           reduce using rule 254 (expr -> expr RRSHIFT expr .)
    IF              reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ELSE            reduce using rule 254 (expr -> expr RRSHIFT expr .)
    WHILE           reduce using rule 254 (expr -> expr RRSHIFT expr .)
    WITH            reduce using rule 254 (expr -> expr RRSHIFT expr .)
    DO              reduce using rule 254 (expr -> expr RRSHIFT expr .)
    FOR             reduce using rule 254 (expr -> expr RRSHIFT expr .)
    RETURN          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    YIELD           reduce using rule 254 (expr -> expr RRSHIFT expr .)
    BREAK           reduce using rule 254 (expr -> expr RRSHIFT expr .)
    CONTINUE        reduce using rule 254 (expr -> expr RRSHIFT expr .)
    THROW           reduce using rule 254 (expr -> expr RRSHIFT expr .)
    TRY             reduce using rule 254 (expr -> expr RRSHIFT expr .)
    CATCH           reduce using rule 254 (expr -> expr RRSHIFT expr .)
    FINALLY         reduce using rule 254 (expr -> expr RRSHIFT expr .)
    SWITCH          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    NATIVE          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    IMPORT          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    EXPORT          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    NUMBER          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    DELETE          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    STRINGLIT       reduce using rule 254 (expr -> expr RRSHIFT expr .)
    ID              reduce using rule 254 (expr -> expr RRSHIFT expr .)
    GET             reduce using rule 254 (expr -> expr RRSHIFT expr .)
    SET             reduce using rule 254 (expr -> expr RRSHIFT expr .)
    NOT             reduce using rule 254 (expr -> expr RRSHIFT expr .)
    BITINV          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    NEW             reduce using rule 254 (expr -> expr RRSHIFT expr .)
    TYPEOF          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    REGEXPR         reduce using rule 254 (expr -> expr RRSHIFT expr .)
    GLOBAL          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    VAR             reduce using rule 254 (expr -> expr RRSHIFT expr .)
    STATIC          reduce using rule 254 (expr -> expr RRSHIFT expr .)
    LBRACKET        reduce using rule 254 (expr -> expr RRSHIFT expr .)
    $end            reduce using rule 254 (expr -> expr RRSHIFT expr .)
    RBRACKET        reduce using rule 254 (expr -> expr RRSHIFT expr .)
    CASE            reduce using rule 254 (expr -> expr RRSHIFT expr .)
    DEFAULT         reduce using rule 254 (expr -> expr RRSHIFT expr .)
    OF              reduce using rule 254 (expr -> expr RRSHIFT expr .)
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! COND_DOT        [ reduce using rule 254 (expr -> expr RRSHIFT expr .) ]
  ! DOT             [ reduce using rule 254 (expr -> expr RRSHIFT expr .) ]
  ! PLUS            [ reduce using rule 254 (expr -> expr RRSHIFT expr .) ]
  ! MINUS           [ reduce using rule 254 (expr -> expr RRSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 254 (expr -> expr RRSHIFT expr .) ]
  ! TIMES           [ reduce using rule 254 (expr -> expr RRSHIFT expr .) ]
  ! INC             [ reduce using rule 254 (expr -> expr RRSHIFT expr .) ]
  ! DEC             [ reduce using rule 254 (expr -> expr RRSHIFT expr .) ]
  ! LSBRACKET       [ reduce using rule 254 (expr -> expr RRSHIFT expr .) ]
  ! LPAREN          [ reduce using rule 254 (expr -> expr RRSHIFT expr .) ]
  ! RSHIFT          [ shift and go to state 101 ]
  ! LSHIFT          [ shift and go to state 97 ]
  ! LLSHIFT         [ shift and go to state 110 ]
  ! RRSHIFT         [ shift and go to state 135 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! INSTANCEOF      [ shift and go to state 98 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 99 ]
  ! EQUAL_STRICT    [ shift and go to state 109 ]
  ! NOTEQUAL_STRICT [ shift and go to state 121 ]
  ! GTHAN           [ shift and go to state 120 ]
  ! GTHANEQ         [ shift and go to state 130 ]
  ! LTHAN           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 113 ]
  ! LTHANEQ         [ shift and go to state 106 ]
  ! NOTEQUAL        [ shift and go to state 117 ]
  ! IN              [ shift and go to state 122 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 272

    (259) expr -> expr BOR expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 259 (expr -> expr BOR expr .)
    LAND            reduce using rule 259 (expr -> expr BOR expr .)
    LOR             reduce using rule 259 (expr -> expr BOR expr .)
    BOR             reduce using rule 259 (expr -> expr BOR expr .)
    BXOR            reduce using rule 259 (expr -> expr BOR expr .)
    BAND            reduce using rule 259 (expr -> expr BOR expr .)
    MOD             reduce using rule 259 (expr -> expr BOR expr .)
    QEST            reduce using rule 259 (expr -> expr BOR expr .)
    COMMA           reduce using rule 259 (expr -> expr BOR expr .)
    ASSIGNPLUS      reduce using rule 259 (expr -> expr BOR expr .)
    ASSIGNMINUS     reduce using rule 259 (expr -> expr BOR expr .)
    ASSIGNDIVIDE    reduce using rule 259 (expr -> expr BOR expr .)
    ASSIGNTIMES     reduce using rule 259 (expr -> expr BOR expr .)
    ASSIGNBOR       reduce using rule 259 (expr -> expr BOR expr .)
    ASSIGNBAND      reduce using rule 259 (expr -> expr BOR expr .)
    ASSIGNBXOR      reduce using rule 259 (expr -> expr BOR expr .)
    ASSIGNLSHIFT    reduce using rule 259 (expr -> expr BOR expr .)
    ASSIGNRSHIFT    reduce using rule 259 (expr -> expr BOR expr .)
    ASSIGNRRSHIFT   reduce using rule 259 (expr -> expr BOR expr .)
    ASSIGNLLSHIFT   reduce using rule 259 (expr -> expr BOR expr .)
    ASSIGN          reduce using rule 259 (expr -> expr BOR expr .)
    TLTHAN          reduce using rule 259 (expr -> expr BOR expr .)
    SEMI            reduce using rule 259 (expr -> expr BOR expr .)
    RPAREN          reduce using rule 259 (expr -> expr BOR expr .)
    RSBRACKET       reduce using rule 259 (expr -> expr BOR expr .)
    FUNCTION        reduce using rule 259 (expr -> expr BOR expr .)
    CLASS           reduce using rule 259 (expr -> expr BOR expr .)
    TYPED           reduce using rule 259 (expr -> expr BOR expr .)
    IF              reduce using rule 259 (expr -> expr BOR expr .)
    ELSE            reduce using rule 259 (expr -> expr BOR expr .)
    WHILE           reduce using rule 259 (expr -> expr BOR expr .)
    WITH            reduce using rule 259 (expr -> expr BOR expr .)
    DO              reduce using rule 259 (expr -> expr BOR expr .)
    FOR             reduce using rule 259 (expr -> expr BOR expr .)
    RETURN          reduce using rule 259 (expr -> expr BOR expr .)
    YIELD           reduce using rule 259 (expr -> expr BOR expr .)
    BREAK           reduce using rule 259 (expr -> expr BOR expr .)
    CONTINUE        reduce using rule 259 (expr -> expr BOR expr .)
    THROW           reduce using rule 259 (expr -> expr BOR expr .)
    TRY             reduce using rule 259 (expr -> expr BOR expr .)
    CATCH           reduce using rule 259 (expr -> expr BOR expr .)
    FINALLY         reduce using rule 259 (expr -> expr BOR expr .)
    SWITCH          reduce using rule 259 (expr -> expr BOR expr .)
    NATIVE          reduce using rule 259 (expr -> expr BOR expr .)
    IMPORT          reduce using rule 259 (expr -> expr BOR expr .)
    EXPORT          reduce using rule 259 (expr -> expr BOR expr .)
    NUMBER          reduce using rule 259 (expr -> expr BOR expr .)
    DELETE          reduce using rule 259 (expr -> expr BOR expr .)
    STRINGLIT       reduce using rule 259 (expr -> expr BOR expr .)
    ID              reduce using rule 259 (expr -> expr BOR expr .)
    GET             reduce using rule 259 (expr -> expr BOR expr .)
    SET             reduce using rule 259 (expr -> expr BOR expr .)
    NOT             reduce using rule 259 (expr -> expr BOR expr .)
    BITINV          reduce using rule 259 (expr -> expr BOR expr .)
    NEW             reduce using rule 259 (expr -> expr BOR expr .)
    TYPEOF          reduce using rule 259 (expr -> expr BOR expr .)
    REGEXPR         reduce using rule 259 (expr -> expr BOR expr .)
    GLOBAL          reduce using rule 259 (expr -> expr BOR expr .)
    VAR             reduce using rule 259 (expr -> expr BOR expr .)
    STATIC          reduce using rule 259 (expr -> expr BOR expr .)
    LBRACKET        reduce using rule 259 (expr -> expr BOR expr .)
    $end            reduce using rule 259 (expr -> expr BOR expr .)
    RBRACKET        reduce using rule 259 (expr -> expr BOR expr .)
    CASE            reduce using rule 259 (expr -> expr BOR expr .)
    DEFAULT         reduce using rule 259 (expr -> expr BOR expr .)
    OF              reduce using rule 259 (expr -> expr BOR expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    INSTANCEOF      shift and go to state 98
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! LSHIFT          [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! LLSHIFT         [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! RRSHIFT         [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! COND_DOT        [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! DOT             [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! EQUAL           [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! GTHAN           [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! GTHANEQ         [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! LTHAN           [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! LTHANEQ         [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! NOTEQUAL        [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! PLUS            [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! MINUS           [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! DIVIDE          [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! TIMES           [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! IN              [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! INC             [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! DEC             [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! LSBRACKET       [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! LPAREN          [ reduce using rule 259 (expr -> expr BOR expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 102 ]
  ! BOR             [ shift and go to state 136 ]
  ! BXOR            [ shift and go to state 129 ]
  ! BAND            [ shift and go to state 91 ]
  ! MOD             [ shift and go to state 113 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 273

    (61) statement_nonctrl -> return SEMI .

    SEMI            reduce using rule 61 (statement_nonctrl -> return SEMI .)
    FUNCTION        reduce using rule 61 (statement_nonctrl -> return SEMI .)
    CLASS           reduce using rule 61 (statement_nonctrl -> return SEMI .)
    TYPED           reduce using rule 61 (statement_nonctrl -> return SEMI .)
    IF              reduce using rule 61 (statement_nonctrl -> return SEMI .)
    ELSE            reduce using rule 61 (statement_nonctrl -> return SEMI .)
    WHILE           reduce using rule 61 (statement_nonctrl -> return SEMI .)
    WITH            reduce using rule 61 (statement_nonctrl -> return SEMI .)
    DO              reduce using rule 61 (statement_nonctrl -> return SEMI .)
    FOR             reduce using rule 61 (statement_nonctrl -> return SEMI .)
    RETURN          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    YIELD           reduce using rule 61 (statement_nonctrl -> return SEMI .)
    BREAK           reduce using rule 61 (statement_nonctrl -> return SEMI .)
    CONTINUE        reduce using rule 61 (statement_nonctrl -> return SEMI .)
    THROW           reduce using rule 61 (statement_nonctrl -> return SEMI .)
    TRY             reduce using rule 61 (statement_nonctrl -> return SEMI .)
    CATCH           reduce using rule 61 (statement_nonctrl -> return SEMI .)
    FINALLY         reduce using rule 61 (statement_nonctrl -> return SEMI .)
    SWITCH          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    NATIVE          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    IMPORT          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    EXPORT          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    NUMBER          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    DELETE          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    STRINGLIT       reduce using rule 61 (statement_nonctrl -> return SEMI .)
    ID              reduce using rule 61 (statement_nonctrl -> return SEMI .)
    GET             reduce using rule 61 (statement_nonctrl -> return SEMI .)
    SET             reduce using rule 61 (statement_nonctrl -> return SEMI .)
    LSBRACKET       reduce using rule 61 (statement_nonctrl -> return SEMI .)
    LPAREN          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    MINUS           reduce using rule 61 (statement_nonctrl -> return SEMI .)
    NOT             reduce using rule 61 (statement_nonctrl -> return SEMI .)
    BITINV          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    NEW             reduce using rule 61 (statement_nonctrl -> return SEMI .)
    INC             reduce using rule 61 (statement_nonctrl -> return SEMI .)
    DEC             reduce using rule 61 (statement_nonctrl -> return SEMI .)
    TYPEOF          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    REGEXPR         reduce using rule 61 (statement_nonctrl -> return SEMI .)
    GLOBAL          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    VAR             reduce using rule 61 (statement_nonctrl -> return SEMI .)
    STATIC          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    TLTHAN          reduce using rule 61 (statement_nonctrl -> return SEMI .)
    LBRACKET        reduce using rule 61 (statement_nonctrl -> return SEMI .)
    $end            reduce using rule 61 (statement_nonctrl -> return SEMI .)
    RBRACKET        reduce using rule 61 (statement_nonctrl -> return SEMI .)
    CASE            reduce using rule 61 (statement_nonctrl -> return SEMI .)
    DEFAULT         reduce using rule 61 (statement_nonctrl -> return SEMI .)


state 274

    (65) statement_nonctrl -> throw SEMI .

    SEMI            reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    FUNCTION        reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    CLASS           reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    TYPED           reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    IF              reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    ELSE            reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    WHILE           reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    WITH            reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    DO              reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    FOR             reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    RETURN          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    YIELD           reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    BREAK           reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    CONTINUE        reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    THROW           reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    TRY             reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    CATCH           reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    FINALLY         reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    SWITCH          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    NATIVE          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    IMPORT          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    EXPORT          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    NUMBER          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    DELETE          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    STRINGLIT       reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    ID              reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    GET             reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    SET             reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    LSBRACKET       reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    LPAREN          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    MINUS           reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    NOT             reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    BITINV          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    NEW             reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    INC             reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    DEC             reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    TYPEOF          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    REGEXPR         reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    GLOBAL          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    VAR             reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    STATIC          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    TLTHAN          reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    LBRACKET        reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    $end            reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    RBRACKET        reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    CASE            reduce using rule 65 (statement_nonctrl -> throw SEMI .)
    DEFAULT         reduce using rule 65 (statement_nonctrl -> throw SEMI .)


state 275

    (308) ctrl_statement -> LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 353


state 276

    (314) statementlist_opt -> statementlist .
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    RBRACKET        reduce using rule 314 (statementlist_opt -> statementlist .)
    CASE            reduce using rule 314 (statementlist_opt -> statementlist .)
    DEFAULT         reduce using rule 314 (statementlist_opt -> statementlist .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 237
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 238
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    try                            shift and go to state 42
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86

state 277

    (64) statement_nonctrl -> continue SEMI .

    SEMI            reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    FUNCTION        reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    CLASS           reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    TYPED           reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    IF              reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    ELSE            reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    WHILE           reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    WITH            reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    DO              reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    FOR             reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    RETURN          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    YIELD           reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    BREAK           reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    CONTINUE        reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    THROW           reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    TRY             reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    CATCH           reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    FINALLY         reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    SWITCH          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    NATIVE          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    IMPORT          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    EXPORT          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    NUMBER          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    DELETE          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    STRINGLIT       reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    ID              reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    GET             reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    SET             reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    LSBRACKET       reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    LPAREN          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    MINUS           reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    NOT             reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    BITINV          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    NEW             reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    INC             reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    DEC             reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    TYPEOF          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    REGEXPR         reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    GLOBAL          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    VAR             reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    STATIC          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    TLTHAN          reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    LBRACKET        reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    $end            reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    RBRACKET        reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    CASE            reduce using rule 64 (statement_nonctrl -> continue SEMI .)
    DEFAULT         reduce using rule 64 (statement_nonctrl -> continue SEMI .)


state 278

    (204) funcref -> FUNCTION id . template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (200) template_opt -> . template
    (201) template_opt -> .
    (76) template -> . lthan_restrict templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 201 (template_opt -> .)
    TLTHAN          shift and go to state 21

    template                       shift and go to state 288
    lthan_restrict                 shift and go to state 289
    template_opt                   shift and go to state 354

state 279

    (62) statement_nonctrl -> yield SEMI .

    SEMI            reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    FUNCTION        reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    CLASS           reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    TYPED           reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    IF              reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    ELSE            reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    WHILE           reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    WITH            reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    DO              reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    FOR             reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    RETURN          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    YIELD           reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    BREAK           reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    CONTINUE        reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    THROW           reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    TRY             reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    CATCH           reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    FINALLY         reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    SWITCH          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    NATIVE          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    IMPORT          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    EXPORT          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    NUMBER          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    DELETE          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    STRINGLIT       reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    ID              reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    GET             reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    SET             reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    LSBRACKET       reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    LPAREN          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    MINUS           reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    NOT             reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    BITINV          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    NEW             reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    INC             reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    DEC             reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    TYPEOF          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    REGEXPR         reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    GLOBAL          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    VAR             reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    STATIC          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    TLTHAN          reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    LBRACKET        reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    $end            reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    RBRACKET        reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    CASE            reduce using rule 62 (statement_nonctrl -> yield SEMI .)
    DEFAULT         reduce using rule 62 (statement_nonctrl -> yield SEMI .)


state 280

    (63) statement_nonctrl -> break SEMI .

    SEMI            reduce using rule 63 (statement_nonctrl -> break SEMI .)
    FUNCTION        reduce using rule 63 (statement_nonctrl -> break SEMI .)
    CLASS           reduce using rule 63 (statement_nonctrl -> break SEMI .)
    TYPED           reduce using rule 63 (statement_nonctrl -> break SEMI .)
    IF              reduce using rule 63 (statement_nonctrl -> break SEMI .)
    ELSE            reduce using rule 63 (statement_nonctrl -> break SEMI .)
    WHILE           reduce using rule 63 (statement_nonctrl -> break SEMI .)
    WITH            reduce using rule 63 (statement_nonctrl -> break SEMI .)
    DO              reduce using rule 63 (statement_nonctrl -> break SEMI .)
    FOR             reduce using rule 63 (statement_nonctrl -> break SEMI .)
    RETURN          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    YIELD           reduce using rule 63 (statement_nonctrl -> break SEMI .)
    BREAK           reduce using rule 63 (statement_nonctrl -> break SEMI .)
    CONTINUE        reduce using rule 63 (statement_nonctrl -> break SEMI .)
    THROW           reduce using rule 63 (statement_nonctrl -> break SEMI .)
    TRY             reduce using rule 63 (statement_nonctrl -> break SEMI .)
    CATCH           reduce using rule 63 (statement_nonctrl -> break SEMI .)
    FINALLY         reduce using rule 63 (statement_nonctrl -> break SEMI .)
    SWITCH          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    NATIVE          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    IMPORT          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    EXPORT          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    NUMBER          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    DELETE          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    STRINGLIT       reduce using rule 63 (statement_nonctrl -> break SEMI .)
    ID              reduce using rule 63 (statement_nonctrl -> break SEMI .)
    GET             reduce using rule 63 (statement_nonctrl -> break SEMI .)
    SET             reduce using rule 63 (statement_nonctrl -> break SEMI .)
    LSBRACKET       reduce using rule 63 (statement_nonctrl -> break SEMI .)
    LPAREN          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    MINUS           reduce using rule 63 (statement_nonctrl -> break SEMI .)
    NOT             reduce using rule 63 (statement_nonctrl -> break SEMI .)
    BITINV          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    NEW             reduce using rule 63 (statement_nonctrl -> break SEMI .)
    INC             reduce using rule 63 (statement_nonctrl -> break SEMI .)
    DEC             reduce using rule 63 (statement_nonctrl -> break SEMI .)
    TYPEOF          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    REGEXPR         reduce using rule 63 (statement_nonctrl -> break SEMI .)
    GLOBAL          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    VAR             reduce using rule 63 (statement_nonctrl -> break SEMI .)
    STATIC          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    TLTHAN          reduce using rule 63 (statement_nonctrl -> break SEMI .)
    LBRACKET        reduce using rule 63 (statement_nonctrl -> break SEMI .)
    $end            reduce using rule 63 (statement_nonctrl -> break SEMI .)
    RBRACKET        reduce using rule 63 (statement_nonctrl -> break SEMI .)
    CASE            reduce using rule 63 (statement_nonctrl -> break SEMI .)
    DEFAULT         reduce using rule 63 (statement_nonctrl -> break SEMI .)


state 281

    (213) func_name_opt -> ID .

    TLTHAN          reduce using rule 213 (func_name_opt -> ID .)
    LPAREN          reduce using rule 213 (func_name_opt -> ID .)


state 282

    (91) gthan_restrict -> TGTHAN .

    EXTENDS         reduce using rule 91 (gthan_restrict -> TGTHAN .)
    LBRACKET        reduce using rule 91 (gthan_restrict -> TGTHAN .)
    LPAREN          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    SEMI            reduce using rule 91 (gthan_restrict -> TGTHAN .)
    RSHIFT          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    LSHIFT          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    LLSHIFT         reduce using rule 91 (gthan_restrict -> TGTHAN .)
    RRSHIFT         reduce using rule 91 (gthan_restrict -> TGTHAN .)
    COND_DOT        reduce using rule 91 (gthan_restrict -> TGTHAN .)
    DOT             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    LAND            reduce using rule 91 (gthan_restrict -> TGTHAN .)
    LOR             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    BOR             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    INSTANCEOF      reduce using rule 91 (gthan_restrict -> TGTHAN .)
    BXOR            reduce using rule 91 (gthan_restrict -> TGTHAN .)
    BAND            reduce using rule 91 (gthan_restrict -> TGTHAN .)
    EQUAL           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    EQUAL_STRICT    reduce using rule 91 (gthan_restrict -> TGTHAN .)
    NOTEQUAL_STRICT reduce using rule 91 (gthan_restrict -> TGTHAN .)
    GTHAN           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    GTHANEQ         reduce using rule 91 (gthan_restrict -> TGTHAN .)
    LTHAN           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    MOD             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    LTHANEQ         reduce using rule 91 (gthan_restrict -> TGTHAN .)
    NOTEQUAL        reduce using rule 91 (gthan_restrict -> TGTHAN .)
    PLUS            reduce using rule 91 (gthan_restrict -> TGTHAN .)
    MINUS           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    DIVIDE          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    TIMES           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    IN              reduce using rule 91 (gthan_restrict -> TGTHAN .)
    QEST            reduce using rule 91 (gthan_restrict -> TGTHAN .)
    COMMA           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    INC             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    DEC             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ASSIGNPLUS      reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ASSIGNMINUS     reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ASSIGNDIVIDE    reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ASSIGNTIMES     reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ASSIGNBOR       reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ASSIGNBAND      reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ASSIGNBXOR      reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ASSIGNLSHIFT    reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ASSIGNRSHIFT    reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ASSIGNRRSHIFT   reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ASSIGNLLSHIFT   reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ASSIGN          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    LSBRACKET       reduce using rule 91 (gthan_restrict -> TGTHAN .)
    TLTHAN          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    RPAREN          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    RSBRACKET       reduce using rule 91 (gthan_restrict -> TGTHAN .)
    COLON           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    FUNCTION        reduce using rule 91 (gthan_restrict -> TGTHAN .)
    CLASS           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    TYPED           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    IF              reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ELSE            reduce using rule 91 (gthan_restrict -> TGTHAN .)
    WHILE           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    WITH            reduce using rule 91 (gthan_restrict -> TGTHAN .)
    DO              reduce using rule 91 (gthan_restrict -> TGTHAN .)
    FOR             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    RETURN          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    YIELD           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    BREAK           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    CONTINUE        reduce using rule 91 (gthan_restrict -> TGTHAN .)
    THROW           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    TRY             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    CATCH           reduce using rule 91 (gthan_restrict -> TGTHAN .)
    FINALLY         reduce using rule 91 (gthan_restrict -> TGTHAN .)
    SWITCH          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    NATIVE          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    IMPORT          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    EXPORT          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    NUMBER          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    DELETE          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    STRINGLIT       reduce using rule 91 (gthan_restrict -> TGTHAN .)
    ID              reduce using rule 91 (gthan_restrict -> TGTHAN .)
    GET             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    SET             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    NOT             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    BITINV          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    NEW             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    TYPEOF          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    REGEXPR         reduce using rule 91 (gthan_restrict -> TGTHAN .)
    GLOBAL          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    VAR             reduce using rule 91 (gthan_restrict -> TGTHAN .)
    STATIC          reduce using rule 91 (gthan_restrict -> TGTHAN .)
    $end            reduce using rule 91 (gthan_restrict -> TGTHAN .)
    RBRACKET        reduce using rule 91 (gthan_restrict -> TGTHAN .)
    CASE            reduce using rule 91 (gthan_restrict -> TGTHAN .)
    DEFAULT         reduce using rule 91 (gthan_restrict -> TGTHAN .)
    OF              reduce using rule 91 (gthan_restrict -> TGTHAN .)
    TGTHAN          reduce using rule 91 (gthan_restrict -> TGTHAN .)


state 283

    (123) simple_templatedeflist -> simple_templatedeflist COMMA . typeof_opt var_type
    (120) typeof_opt -> . TYPEOF
    (121) typeof_opt -> .

    TYPEOF          shift and go to state 160
    INT             reduce using rule 121 (typeof_opt -> .)
    SHORT           reduce using rule 121 (typeof_opt -> .)
    FLOAT           reduce using rule 121 (typeof_opt -> .)
    DOUBLE          reduce using rule 121 (typeof_opt -> .)
    CHAR            reduce using rule 121 (typeof_opt -> .)
    BYTE            reduce using rule 121 (typeof_opt -> .)
    INFERRED        reduce using rule 121 (typeof_opt -> .)
    ID              reduce using rule 121 (typeof_opt -> .)
    GET             reduce using rule 121 (typeof_opt -> .)
    SET             reduce using rule 121 (typeof_opt -> .)

    typeof_opt                     shift and go to state 355

state 284

    (86) template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .

    RSHIFT          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LSHIFT          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LLSHIFT         reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RRSHIFT         reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    COND_DOT        reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    DOT             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LAND            reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LOR             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    BOR             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    INSTANCEOF      reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    BXOR            reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    BAND            reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    EQUAL           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    EQUAL_STRICT    reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    NOTEQUAL_STRICT reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    GTHAN           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    GTHANEQ         reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LTHAN           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    MOD             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LTHANEQ         reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    NOTEQUAL        reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    PLUS            reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    MINUS           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    DIVIDE          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    TIMES           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    IN              reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    QEST            reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    COMMA           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    INC             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    DEC             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNPLUS      reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNMINUS     reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNDIVIDE    reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNTIMES     reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNBOR       reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNBAND      reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNBXOR      reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNLSHIFT    reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNRSHIFT    reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNRRSHIFT   reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNLLSHIFT   reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGN          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LSBRACKET       reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    TLTHAN          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LPAREN          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    SEMI            reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RPAREN          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RSBRACKET       reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    COLON           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    FUNCTION        reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    CLASS           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    TYPED           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    IF              reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ELSE            reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    WHILE           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    WITH            reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    DO              reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    FOR             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RETURN          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    YIELD           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    BREAK           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    CONTINUE        reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    THROW           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    TRY             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    CATCH           reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    FINALLY         reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    SWITCH          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    NATIVE          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    IMPORT          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    EXPORT          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    NUMBER          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    DELETE          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    STRINGLIT       reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ID              reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    GET             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    SET             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    NOT             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    BITINV          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    NEW             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    TYPEOF          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    REGEXPR         reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    GLOBAL          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    VAR             reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    STATIC          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LBRACKET        reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    $end            reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RBRACKET        reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    CASE            reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    DEFAULT         reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    OF              reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    TGTHAN          reduce using rule 86 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)


state 285

    (122) simple_templatedeflist -> typeof_opt var_type .
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 122 (simple_templatedeflist -> typeof_opt var_type .)
    TGTHAN          reduce using rule 122 (simple_templatedeflist -> typeof_opt var_type .)
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 11
    id                             shift and go to state 208
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 286

    (238) rparen_restrict -> RPAREN .

    SEMI            reduce using rule 238 (rparen_restrict -> RPAREN .)
    RSHIFT          reduce using rule 238 (rparen_restrict -> RPAREN .)
    LSHIFT          reduce using rule 238 (rparen_restrict -> RPAREN .)
    LLSHIFT         reduce using rule 238 (rparen_restrict -> RPAREN .)
    RRSHIFT         reduce using rule 238 (rparen_restrict -> RPAREN .)
    COND_DOT        reduce using rule 238 (rparen_restrict -> RPAREN .)
    DOT             reduce using rule 238 (rparen_restrict -> RPAREN .)
    LAND            reduce using rule 238 (rparen_restrict -> RPAREN .)
    LOR             reduce using rule 238 (rparen_restrict -> RPAREN .)
    BOR             reduce using rule 238 (rparen_restrict -> RPAREN .)
    INSTANCEOF      reduce using rule 238 (rparen_restrict -> RPAREN .)
    BXOR            reduce using rule 238 (rparen_restrict -> RPAREN .)
    BAND            reduce using rule 238 (rparen_restrict -> RPAREN .)
    EQUAL           reduce using rule 238 (rparen_restrict -> RPAREN .)
    EQUAL_STRICT    reduce using rule 238 (rparen_restrict -> RPAREN .)
    NOTEQUAL_STRICT reduce using rule 238 (rparen_restrict -> RPAREN .)
    GTHAN           reduce using rule 238 (rparen_restrict -> RPAREN .)
    GTHANEQ         reduce using rule 238 (rparen_restrict -> RPAREN .)
    LTHAN           reduce using rule 238 (rparen_restrict -> RPAREN .)
    MOD             reduce using rule 238 (rparen_restrict -> RPAREN .)
    LTHANEQ         reduce using rule 238 (rparen_restrict -> RPAREN .)
    NOTEQUAL        reduce using rule 238 (rparen_restrict -> RPAREN .)
    PLUS            reduce using rule 238 (rparen_restrict -> RPAREN .)
    MINUS           reduce using rule 238 (rparen_restrict -> RPAREN .)
    DIVIDE          reduce using rule 238 (rparen_restrict -> RPAREN .)
    TIMES           reduce using rule 238 (rparen_restrict -> RPAREN .)
    IN              reduce using rule 238 (rparen_restrict -> RPAREN .)
    QEST            reduce using rule 238 (rparen_restrict -> RPAREN .)
    COMMA           reduce using rule 238 (rparen_restrict -> RPAREN .)
    INC             reduce using rule 238 (rparen_restrict -> RPAREN .)
    DEC             reduce using rule 238 (rparen_restrict -> RPAREN .)
    ASSIGNPLUS      reduce using rule 238 (rparen_restrict -> RPAREN .)
    ASSIGNMINUS     reduce using rule 238 (rparen_restrict -> RPAREN .)
    ASSIGNDIVIDE    reduce using rule 238 (rparen_restrict -> RPAREN .)
    ASSIGNTIMES     reduce using rule 238 (rparen_restrict -> RPAREN .)
    ASSIGNBOR       reduce using rule 238 (rparen_restrict -> RPAREN .)
    ASSIGNBAND      reduce using rule 238 (rparen_restrict -> RPAREN .)
    ASSIGNBXOR      reduce using rule 238 (rparen_restrict -> RPAREN .)
    ASSIGNLSHIFT    reduce using rule 238 (rparen_restrict -> RPAREN .)
    ASSIGNRSHIFT    reduce using rule 238 (rparen_restrict -> RPAREN .)
    ASSIGNRRSHIFT   reduce using rule 238 (rparen_restrict -> RPAREN .)
    ASSIGNLLSHIFT   reduce using rule 238 (rparen_restrict -> RPAREN .)
    ASSIGN          reduce using rule 238 (rparen_restrict -> RPAREN .)
    LSBRACKET       reduce using rule 238 (rparen_restrict -> RPAREN .)
    TLTHAN          reduce using rule 238 (rparen_restrict -> RPAREN .)
    LPAREN          reduce using rule 238 (rparen_restrict -> RPAREN .)
    RPAREN          reduce using rule 238 (rparen_restrict -> RPAREN .)
    RSBRACKET       reduce using rule 238 (rparen_restrict -> RPAREN .)
    COLON           reduce using rule 238 (rparen_restrict -> RPAREN .)
    FUNCTION        reduce using rule 238 (rparen_restrict -> RPAREN .)
    CLASS           reduce using rule 238 (rparen_restrict -> RPAREN .)
    TYPED           reduce using rule 238 (rparen_restrict -> RPAREN .)
    IF              reduce using rule 238 (rparen_restrict -> RPAREN .)
    ELSE            reduce using rule 238 (rparen_restrict -> RPAREN .)
    WHILE           reduce using rule 238 (rparen_restrict -> RPAREN .)
    WITH            reduce using rule 238 (rparen_restrict -> RPAREN .)
    DO              reduce using rule 238 (rparen_restrict -> RPAREN .)
    FOR             reduce using rule 238 (rparen_restrict -> RPAREN .)
    RETURN          reduce using rule 238 (rparen_restrict -> RPAREN .)
    YIELD           reduce using rule 238 (rparen_restrict -> RPAREN .)
    BREAK           reduce using rule 238 (rparen_restrict -> RPAREN .)
    CONTINUE        reduce using rule 238 (rparen_restrict -> RPAREN .)
    THROW           reduce using rule 238 (rparen_restrict -> RPAREN .)
    TRY             reduce using rule 238 (rparen_restrict -> RPAREN .)
    CATCH           reduce using rule 238 (rparen_restrict -> RPAREN .)
    FINALLY         reduce using rule 238 (rparen_restrict -> RPAREN .)
    SWITCH          reduce using rule 238 (rparen_restrict -> RPAREN .)
    NATIVE          reduce using rule 238 (rparen_restrict -> RPAREN .)
    IMPORT          reduce using rule 238 (rparen_restrict -> RPAREN .)
    EXPORT          reduce using rule 238 (rparen_restrict -> RPAREN .)
    NUMBER          reduce using rule 238 (rparen_restrict -> RPAREN .)
    DELETE          reduce using rule 238 (rparen_restrict -> RPAREN .)
    STRINGLIT       reduce using rule 238 (rparen_restrict -> RPAREN .)
    ID              reduce using rule 238 (rparen_restrict -> RPAREN .)
    GET             reduce using rule 238 (rparen_restrict -> RPAREN .)
    SET             reduce using rule 238 (rparen_restrict -> RPAREN .)
    NOT             reduce using rule 238 (rparen_restrict -> RPAREN .)
    BITINV          reduce using rule 238 (rparen_restrict -> RPAREN .)
    NEW             reduce using rule 238 (rparen_restrict -> RPAREN .)
    TYPEOF          reduce using rule 238 (rparen_restrict -> RPAREN .)
    REGEXPR         reduce using rule 238 (rparen_restrict -> RPAREN .)
    GLOBAL          reduce using rule 238 (rparen_restrict -> RPAREN .)
    VAR             reduce using rule 238 (rparen_restrict -> RPAREN .)
    STATIC          reduce using rule 238 (rparen_restrict -> RPAREN .)
    LBRACKET        reduce using rule 238 (rparen_restrict -> RPAREN .)
    $end            reduce using rule 238 (rparen_restrict -> RPAREN .)
    RBRACKET        reduce using rule 238 (rparen_restrict -> RPAREN .)
    CASE            reduce using rule 238 (rparen_restrict -> RPAREN .)
    DEFAULT         reduce using rule 238 (rparen_restrict -> RPAREN .)
    OF              reduce using rule 238 (rparen_restrict -> RPAREN .)


state 287

    (277) expr -> lparen_restrict expr rparen_restrict .

    COLON           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    RSHIFT          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    LSHIFT          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    LLSHIFT         reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    RRSHIFT         reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    COND_DOT        reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    DOT             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    LAND            reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    LOR             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    BOR             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    INSTANCEOF      reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    BXOR            reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    BAND            reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    EQUAL           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    EQUAL_STRICT    reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    NOTEQUAL_STRICT reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    GTHAN           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    GTHANEQ         reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    LTHAN           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    MOD             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    LTHANEQ         reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    NOTEQUAL        reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    PLUS            reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    MINUS           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    DIVIDE          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    TIMES           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    IN              reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    QEST            reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    COMMA           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    INC             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    DEC             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNPLUS      reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNMINUS     reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNDIVIDE    reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNTIMES     reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNBOR       reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNBAND      reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNBXOR      reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNLSHIFT    reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNRSHIFT    reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNRRSHIFT   reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNLLSHIFT   reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGN          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    LSBRACKET       reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    TLTHAN          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    LPAREN          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    SEMI            reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    RPAREN          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    RSBRACKET       reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    FUNCTION        reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    CLASS           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    TYPED           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    IF              reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ELSE            reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    WHILE           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    WITH            reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    DO              reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    FOR             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    RETURN          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    YIELD           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    BREAK           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    CONTINUE        reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    THROW           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    TRY             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    CATCH           reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    FINALLY         reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    SWITCH          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    NATIVE          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    IMPORT          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    EXPORT          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    NUMBER          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    DELETE          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    STRINGLIT       reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    ID              reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    GET             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    SET             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    NOT             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    BITINV          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    NEW             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    TYPEOF          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    REGEXPR         reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    GLOBAL          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    VAR             reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    STATIC          reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    LBRACKET        reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    $end            reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    RBRACKET        reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    CASE            reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    DEFAULT         reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)
    OF              reduce using rule 277 (expr -> lparen_restrict expr rparen_restrict .)


state 288

    (200) template_opt -> template .

    LPAREN          reduce using rule 200 (template_opt -> template .)
    EXTENDS         reduce using rule 200 (template_opt -> template .)
    LBRACKET        reduce using rule 200 (template_opt -> template .)


state 289

    (76) template -> lthan_restrict . templatedeflist gthan_restrict
    (72) templatedeflist -> . var_type
    (73) templatedeflist -> . var_type ASSIGN var_type
    (74) templatedeflist -> . templatedeflist COMMA var_type
    (75) templatedeflist -> . templatedeflist COMMA var_type ASSIGN var_type
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    var_type                       shift and go to state 357
    templatedeflist                shift and go to state 356
    id                             shift and go to state 208
    id_var_type                    shift and go to state 211

state 290

    (154) class -> CLASS id template_opt . class_tail
    (156) class_tail -> . class_heritage_opt LBRACKET class_body_opt RBRACKET
    (162) class_heritage_opt -> . class_heritage
    (163) class_heritage_opt -> .
    (161) class_heritage -> . EXTENDS class_list

    LBRACKET        reduce using rule 163 (class_heritage_opt -> .)
    EXTENDS         shift and go to state 359

    class_heritage_opt             shift and go to state 358
    class_heritage                 shift and go to state 360
    class_tail                     shift and go to state 361

state 291

    (291) paren_expr -> LPAREN expr . RPAREN
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    RPAREN          shift and go to state 362
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 292

    (292) paren_expr -> LPAREN RPAREN .

    LBRACKET        reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    SEMI            reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    NUMBER          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    IF              reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    ELSE            reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    FOR             reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    DO              reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    WHILE           reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    RETURN          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    YIELD           reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    BREAK           reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    THROW           reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    TRY             reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    CATCH           reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    FINALLY         reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    DELETE          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    STRINGLIT       reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    ID              reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    GET             reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    SET             reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    LSBRACKET       reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    LPAREN          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    MINUS           reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    NOT             reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    BITINV          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    NEW             reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    INC             reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    DEC             reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    TYPEOF          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    REGEXPR         reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    GLOBAL          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    VAR             reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    STATIC          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    TLTHAN          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    CLASS           reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    TYPED           reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    WITH            reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    SWITCH          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    NATIVE          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    IMPORT          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    EXPORT          reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    $end            reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    CASE            reduce using rule 292 (paren_expr -> LPAREN RPAREN .)
    DEFAULT         reduce using rule 292 (paren_expr -> LPAREN RPAREN .)


state 293

    (323) switch -> SWITCH paren_expr LBRACKET . case_block RBRACKET
    (321) case_block -> . case_clauses
    (322) case_block -> . case_clauses_opt default_case case_clauses_opt
    (317) case_clauses -> . case_clause
    (318) case_clauses -> . case_clauses case_clause
    (319) case_clauses_opt -> . case_clauses
    (320) case_clauses_opt -> .
    (316) case_clause -> . CASE expr COLON statementlist_opt

    DEFAULT         reduce using rule 320 (case_clauses_opt -> .)
    CASE            shift and go to state 363

    case_clause                    shift and go to state 365
    case_block                     shift and go to state 366
    case_clauses_opt               shift and go to state 367
    case_clauses                   shift and go to state 364

state 294

    (332) export_decl -> EXPORT export_clause SEMI .

    SEMI            reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    FUNCTION        reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    CLASS           reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    TYPED           reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    IF              reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    ELSE            reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    WHILE           reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    WITH            reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    DO              reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    FOR             reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    RETURN          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    YIELD           reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    BREAK           reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    CONTINUE        reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    THROW           reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    TRY             reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    CATCH           reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    FINALLY         reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    SWITCH          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    NATIVE          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    IMPORT          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    EXPORT          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    NUMBER          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    DELETE          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    STRINGLIT       reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    ID              reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    GET             reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    SET             reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    LSBRACKET       reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    LPAREN          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    MINUS           reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    NOT             reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    BITINV          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    NEW             reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    INC             reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    DEC             reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    TYPEOF          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    REGEXPR         reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    GLOBAL          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    VAR             reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    STATIC          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    TLTHAN          reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    LBRACKET        reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    RBRACKET        reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    CASE            reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    DEFAULT         reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)
    $end            reduce using rule 332 (export_decl -> EXPORT export_clause SEMI .)


state 295

    (44) from_clause -> FROM . module_spec
    (50) module_spec -> . STRINGLIT

    STRINGLIT       shift and go to state 190

    module_spec                    shift and go to state 368

state 296

    (331) export_decl -> EXPORT export_clause from_clause . SEMI

    SEMI            shift and go to state 369


state 297

    (139) assign -> expr . cmplx_assign expr
    (141) assign -> expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for ASSIGNPLUS resolved as shift
  ! shift/reduce conflict for ASSIGNMINUS resolved as shift
  ! shift/reduce conflict for ASSIGNDIVIDE resolved as shift
  ! shift/reduce conflict for ASSIGNTIMES resolved as shift
  ! shift/reduce conflict for ASSIGNBOR resolved as shift
  ! shift/reduce conflict for ASSIGNBAND resolved as shift
  ! shift/reduce conflict for ASSIGNBXOR resolved as shift
  ! shift/reduce conflict for ASSIGNLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNLLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 141 (assign -> expr .)
  ! shift/reduce conflict for TLTHAN resolved as shift
    SEMI            reduce using rule 141 (assign -> expr .)
    FUNCTION        reduce using rule 141 (assign -> expr .)
    CLASS           reduce using rule 141 (assign -> expr .)
    TYPED           reduce using rule 141 (assign -> expr .)
    IF              reduce using rule 141 (assign -> expr .)
    ELSE            reduce using rule 141 (assign -> expr .)
    WHILE           reduce using rule 141 (assign -> expr .)
    WITH            reduce using rule 141 (assign -> expr .)
    DO              reduce using rule 141 (assign -> expr .)
    FOR             reduce using rule 141 (assign -> expr .)
    RETURN          reduce using rule 141 (assign -> expr .)
    YIELD           reduce using rule 141 (assign -> expr .)
    BREAK           reduce using rule 141 (assign -> expr .)
    CONTINUE        reduce using rule 141 (assign -> expr .)
    THROW           reduce using rule 141 (assign -> expr .)
    TRY             reduce using rule 141 (assign -> expr .)
    CATCH           reduce using rule 141 (assign -> expr .)
    FINALLY         reduce using rule 141 (assign -> expr .)
    SWITCH          reduce using rule 141 (assign -> expr .)
    NATIVE          reduce using rule 141 (assign -> expr .)
    IMPORT          reduce using rule 141 (assign -> expr .)
    EXPORT          reduce using rule 141 (assign -> expr .)
    NUMBER          reduce using rule 141 (assign -> expr .)
    DELETE          reduce using rule 141 (assign -> expr .)
    STRINGLIT       reduce using rule 141 (assign -> expr .)
    ID              reduce using rule 141 (assign -> expr .)
    GET             reduce using rule 141 (assign -> expr .)
    SET             reduce using rule 141 (assign -> expr .)
    LPAREN          reduce using rule 141 (assign -> expr .)
    NOT             reduce using rule 141 (assign -> expr .)
    BITINV          reduce using rule 141 (assign -> expr .)
    NEW             reduce using rule 141 (assign -> expr .)
    TYPEOF          reduce using rule 141 (assign -> expr .)
    REGEXPR         reduce using rule 141 (assign -> expr .)
    GLOBAL          reduce using rule 141 (assign -> expr .)
    VAR             reduce using rule 141 (assign -> expr .)
    STATIC          reduce using rule 141 (assign -> expr .)
    LBRACKET        reduce using rule 141 (assign -> expr .)
    $end            reduce using rule 141 (assign -> expr .)
    RBRACKET        reduce using rule 141 (assign -> expr .)
    CASE            reduce using rule 141 (assign -> expr .)
    DEFAULT         reduce using rule 141 (assign -> expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    TLTHAN          shift and go to state 21

  ! ASSIGNPLUS      [ reduce using rule 141 (assign -> expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 141 (assign -> expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 141 (assign -> expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 141 (assign -> expr .) ]
  ! ASSIGNBOR       [ reduce using rule 141 (assign -> expr .) ]
  ! ASSIGNBAND      [ reduce using rule 141 (assign -> expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 141 (assign -> expr .) ]
  ! ASSIGNLSHIFT    [ reduce using rule 141 (assign -> expr .) ]
  ! ASSIGNRSHIFT    [ reduce using rule 141 (assign -> expr .) ]
  ! ASSIGNRRSHIFT   [ reduce using rule 141 (assign -> expr .) ]
  ! ASSIGNLLSHIFT   [ reduce using rule 141 (assign -> expr .) ]
  ! ASSIGN          [ reduce using rule 141 (assign -> expr .) ]
  ! LSBRACKET       [ reduce using rule 141 (assign -> expr .) ]
  ! MINUS           [ reduce using rule 141 (assign -> expr .) ]
  ! INC             [ reduce using rule 141 (assign -> expr .) ]
  ! DEC             [ reduce using rule 141 (assign -> expr .) ]
  ! TLTHAN          [ reduce using rule 141 (assign -> expr .) ]
  ! LPAREN          [ reduce using rule 194 (template_ref_opt -> .) ]

    cmplx_assign                   shift and go to state 370
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 298

    (336) export_decl -> EXPORT DEFAULT function .

    SEMI            reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    FUNCTION        reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    CLASS           reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    TYPED           reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    IF              reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    ELSE            reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    WHILE           reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    WITH            reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    DO              reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    FOR             reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    RETURN          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    YIELD           reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    BREAK           reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    CONTINUE        reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    THROW           reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    TRY             reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    CATCH           reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    FINALLY         reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    SWITCH          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    NATIVE          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    IMPORT          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    EXPORT          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    NUMBER          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    DELETE          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    STRINGLIT       reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    ID              reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    GET             reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    SET             reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    LSBRACKET       reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    LPAREN          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    MINUS           reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    NOT             reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    BITINV          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    NEW             reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    INC             reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    DEC             reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    TYPEOF          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    REGEXPR         reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    GLOBAL          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    VAR             reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    STATIC          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    TLTHAN          reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    LBRACKET        reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    RBRACKET        reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    CASE            reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    DEFAULT         reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)
    $end            reduce using rule 336 (export_decl -> EXPORT DEFAULT function .)


state 299

    (206) function -> FUNCTION . id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (215) exprfunction -> FUNCTION . func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> FUNCTION . func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (213) func_name_opt -> . ID
    (214) func_name_opt -> .

    ID              shift and go to state 200
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          reduce using rule 214 (func_name_opt -> .)
    LPAREN          reduce using rule 214 (func_name_opt -> .)

    id                             shift and go to state 308
    func_name_opt                  shift and go to state 202

state 300

    (337) export_decl -> EXPORT DEFAULT class .

    SEMI            reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    FUNCTION        reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    CLASS           reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    TYPED           reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    IF              reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    ELSE            reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    WHILE           reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    WITH            reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    DO              reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    FOR             reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    RETURN          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    YIELD           reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    BREAK           reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    CONTINUE        reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    THROW           reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    TRY             reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    CATCH           reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    FINALLY         reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    SWITCH          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    NATIVE          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    IMPORT          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    EXPORT          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    NUMBER          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    DELETE          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    STRINGLIT       reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    ID              reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    GET             reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    SET             reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    LSBRACKET       reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    LPAREN          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    MINUS           reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    NOT             reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    BITINV          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    NEW             reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    INC             reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    DEC             reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    TYPEOF          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    REGEXPR         reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    GLOBAL          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    VAR             reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    STATIC          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    TLTHAN          reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    LBRACKET        reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    RBRACKET        reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    CASE            reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    DEFAULT         reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)
    $end            reduce using rule 337 (export_decl -> EXPORT DEFAULT class .)


state 301

    (338) export_decl -> EXPORT DEFAULT assign .
    (140) assign -> assign . cmplx_assign expr
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN

    SEMI            reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    FUNCTION        reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    CLASS           reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    TYPED           reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    IF              reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    ELSE            reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    WHILE           reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    WITH            reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    DO              reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    FOR             reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    RETURN          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    YIELD           reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    BREAK           reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    CONTINUE        reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    THROW           reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    TRY             reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    CATCH           reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    FINALLY         reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    SWITCH          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    NATIVE          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    IMPORT          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    EXPORT          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    NUMBER          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    DELETE          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    STRINGLIT       reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    ID              reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    GET             reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    SET             reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    LSBRACKET       reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    LPAREN          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    MINUS           reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    NOT             reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    BITINV          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    NEW             reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    INC             reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    DEC             reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    TYPEOF          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    REGEXPR         reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    GLOBAL          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    VAR             reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    STATIC          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    TLTHAN          reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    LBRACKET        reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    RBRACKET        reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    CASE            reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    DEFAULT         reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    $end            reduce using rule 338 (export_decl -> EXPORT DEFAULT assign .)
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116

    cmplx_assign                   shift and go to state 371

state 302

    (340) export_clause -> LBRACKET exports_list . RBRACKET
    (341) export_clause -> LBRACKET exports_list . COMMA RBRACKET
    (343) exports_list -> exports_list . COMMA export_spec

    RBRACKET        shift and go to state 373
    COMMA           shift and go to state 372


state 303

    (344) export_spec -> ID .
    (345) export_spec -> ID . ID ID

    RBRACKET        reduce using rule 344 (export_spec -> ID .)
    COMMA           reduce using rule 344 (export_spec -> ID .)
    ID              shift and go to state 374


state 304

    (342) exports_list -> export_spec .

    RBRACKET        reduce using rule 342 (exports_list -> export_spec .)
    COMMA           reduce using rule 342 (exports_list -> export_spec .)


state 305

    (339) export_clause -> LBRACKET RBRACKET .

    SEMI            reduce using rule 339 (export_clause -> LBRACKET RBRACKET .)
    FROM            reduce using rule 339 (export_clause -> LBRACKET RBRACKET .)


state 306

    (330) export_decl -> EXPORT TIMES from_clause . SEMI

    SEMI            shift and go to state 375


state 307

    (333) export_decl -> EXPORT var_decl SEMI .

    SEMI            reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    FUNCTION        reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    CLASS           reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    TYPED           reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    IF              reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    ELSE            reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    WHILE           reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    WITH            reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    DO              reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    FOR             reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    RETURN          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    YIELD           reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    BREAK           reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    CONTINUE        reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    THROW           reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    TRY             reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    CATCH           reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    FINALLY         reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    SWITCH          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    NATIVE          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    IMPORT          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    EXPORT          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    NUMBER          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    DELETE          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    STRINGLIT       reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    ID              reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    GET             reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    SET             reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    LSBRACKET       reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    LPAREN          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    MINUS           reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    NOT             reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    BITINV          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    NEW             reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    INC             reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    DEC             reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    TYPEOF          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    REGEXPR         reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    GLOBAL          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    VAR             reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    STATIC          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    TLTHAN          reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    LBRACKET        reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    RBRACKET        reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    CASE            reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    DEFAULT         reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)
    $end            reduce using rule 333 (export_decl -> EXPORT var_decl SEMI .)


state 308

    (206) function -> FUNCTION id . template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (200) template_opt -> . template
    (201) template_opt -> .
    (76) template -> . lthan_restrict templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 201 (template_opt -> .)
    TLTHAN          shift and go to state 21

    template                       shift and go to state 288
    lthan_restrict                 shift and go to state 289
    template_opt                   shift and go to state 376

state 309

    (33) import_decl -> IMPORT import_clause from_clause . SEMI

    SEMI            shift and go to state 377


state 310

    (34) import_decl -> IMPORT module_spec SEMI .

    SEMI            reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    FUNCTION        reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    CLASS           reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    TYPED           reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    IF              reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    ELSE            reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    WHILE           reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    WITH            reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    DO              reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    FOR             reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    RETURN          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    YIELD           reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    BREAK           reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    CONTINUE        reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    THROW           reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    TRY             reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    CATCH           reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    FINALLY         reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    SWITCH          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    NATIVE          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    IMPORT          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    EXPORT          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    NUMBER          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    DELETE          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    STRINGLIT       reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    ID              reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    GET             reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    SET             reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    LSBRACKET       reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    LPAREN          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    MINUS           reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    NOT             reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    BITINV          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    NEW             reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    INC             reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    DEC             reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    TYPEOF          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    REGEXPR         reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    GLOBAL          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    VAR             reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    STATIC          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    TLTHAN          reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    LBRACKET        reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    RBRACKET        reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    $end            reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    CASE            reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)
    DEFAULT         reduce using rule 34 (import_decl -> IMPORT module_spec SEMI .)


state 311

    (45) import_list -> import_spec .

    RBRACKET        reduce using rule 45 (import_list -> import_spec .)
    COMMA           reduce using rule 45 (import_list -> import_spec .)


state 312

    (43) named_imports -> LBRACKET import_list . RBRACKET
    (46) import_list -> import_list . COMMA import_spec

    RBRACKET        shift and go to state 379
    COMMA           shift and go to state 378


state 313

    (47) import_spec -> import_bind .

    RBRACKET        reduce using rule 47 (import_spec -> import_bind .)
    COMMA           reduce using rule 47 (import_spec -> import_bind .)


state 314

    (42) named_imports -> LBRACKET RBRACKET .

    FROM            reduce using rule 42 (named_imports -> LBRACKET RBRACKET .)


state 315

    (48) import_spec -> ID . ID import_bind
    (51) binding_ident -> ID .

    ID              shift and go to state 380
    RBRACKET        reduce using rule 51 (binding_ident -> ID .)
    COMMA           reduce using rule 51 (binding_ident -> ID .)


state 316

    (41) name_space_import -> TIMES ID . import_bind
    (49) import_bind -> . binding_ident
    (51) binding_ident -> . ID

    ID              shift and go to state 185

    import_bind                    shift and go to state 381
    binding_ident                  shift and go to state 187

state 317

    (38) import_clause -> import_def_bind COMMA . name_space_import
    (39) import_clause -> import_def_bind COMMA . named_imports
    (41) name_space_import -> . TIMES ID import_bind
    (42) named_imports -> . LBRACKET RBRACKET
    (43) named_imports -> . LBRACKET import_list RBRACKET

    TIMES           shift and go to state 184
    LBRACKET        shift and go to state 183

    named_imports                  shift and go to state 382
    name_space_import              shift and go to state 383

state 318

    (98) var_decl -> var_decl COMMA id .
    (99) var_decl -> var_decl COMMA id . ASSIGN expr

    SEMI            reduce using rule 98 (var_decl -> var_decl COMMA id .)
    COMMA           reduce using rule 98 (var_decl -> var_decl COMMA id .)
    IN              reduce using rule 98 (var_decl -> var_decl COMMA id .)
    OF              reduce using rule 98 (var_decl -> var_decl COMMA id .)
    ASSIGN          shift and go to state 384

  ! ASSIGN          [ reduce using rule 98 (var_decl -> var_decl COMMA id .) ]


state 319

    (97) var_decl -> var_decl ASSIGN expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 97 (var_decl -> var_decl ASSIGN expr .)
    ASSIGN          reduce using rule 97 (var_decl -> var_decl ASSIGN expr .)
    COMMA           reduce using rule 97 (var_decl -> var_decl ASSIGN expr .)
    OF              reduce using rule 97 (var_decl -> var_decl ASSIGN expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! IN              [ reduce using rule 97 (var_decl -> var_decl ASSIGN expr .) ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGN          [ shift and go to state 116 ]

    lsbracket_restrict             shift and go to state 105
    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    template_ref_opt               shift and go to state 108
    template_ref                   shift and go to state 111
    func_call                      shift and go to state 132

state 320

    (347) catch -> CATCH paren_expr LBRACKET . statementlist RBRACKET
    (207) lbracket_restrict -> LBRACKET .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for GET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for SET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! RBRACKET        [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! GET             [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! SET             [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    try                            shift and go to state 42
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 385

state 321

    (346) catch -> CATCH paren_expr statement_nonctrl .

    RBRACKET        reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    SEMI            reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    FUNCTION        reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    CLASS           reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    TYPED           reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    IF              reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    ELSE            reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    WHILE           reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    WITH            reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    DO              reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    FOR             reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    RETURN          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    YIELD           reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    BREAK           reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    CONTINUE        reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    THROW           reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    TRY             reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    CATCH           reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    FINALLY         reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    SWITCH          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    NATIVE          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    IMPORT          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    EXPORT          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    NUMBER          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    DELETE          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    STRINGLIT       reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    ID              reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    GET             reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    SET             reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    LSBRACKET       reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    LPAREN          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    MINUS           reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    NOT             reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    BITINV          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    NEW             reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    INC             reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    DEC             reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    TYPEOF          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    REGEXPR         reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    GLOBAL          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    VAR             reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    STATIC          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    TLTHAN          reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    LBRACKET        reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    $end            reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    CASE            reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)
    DEFAULT         reduce using rule 346 (catch -> CATCH paren_expr statement_nonctrl .)


state 322

    (310) dowhile -> DO ctrl_statement WHILE . paren_expr
    (291) paren_expr -> . LPAREN expr RPAREN
    (292) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 170

    paren_expr                     shift and go to state 386

state 323

    (324) with -> WITH paren_expr ctrl_statement .

    SEMI            reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    FUNCTION        reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    CLASS           reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    TYPED           reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    IF              reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    ELSE            reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    WHILE           reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    WITH            reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    DO              reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    FOR             reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    RETURN          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    YIELD           reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    BREAK           reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    CONTINUE        reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    THROW           reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    TRY             reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    CATCH           reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    FINALLY         reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    SWITCH          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    NATIVE          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    IMPORT          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    EXPORT          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    NUMBER          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    DELETE          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    STRINGLIT       reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    ID              reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    GET             reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    SET             reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    LSBRACKET       reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    LPAREN          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    MINUS           reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    NOT             reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    BITINV          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    NEW             reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    INC             reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    DEC             reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    TYPEOF          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    REGEXPR         reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    GLOBAL          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    VAR             reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    STATIC          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    TLTHAN          reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    LBRACKET        reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    RBRACKET        reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    $end            reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    CASE            reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)
    DEFAULT         reduce using rule 324 (with -> WITH paren_expr ctrl_statement .)


state 324

    (206) function -> FUNCTION id template_opt . push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (204) funcref -> FUNCTION id template_opt . push_scope LPAREN funcdeflist RPAREN func_type_opt
    (6) push_scope -> .

    LPAREN          reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 387

state 325

    (215) exprfunction -> FUNCTION func_name_opt template_opt . push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> FUNCTION func_name_opt template_opt . push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (6) push_scope -> .

    LPAREN          reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 388

state 326

    (223) obj_lit_list -> id_str_or_num . COLON expr

    COLON           shift and go to state 389


state 327

    (220) id_str_or_num -> NUMBER .

    COLON           reduce using rule 220 (id_str_or_num -> NUMBER .)


state 328

    (226) obj_literal -> lbracket_restrict push_scope obj_lit_list . rbracket_restrict
    (224) obj_lit_list -> obj_lit_list . COMMA id_str_or_num COLON expr
    (225) obj_lit_list -> obj_lit_list . COMMA
    (208) rbracket_restrict -> . RBRACKET

    COMMA           shift and go to state 390
    RBRACKET        shift and go to state 204

    rbracket_restrict              shift and go to state 391

state 329

    (219) id_str_or_num -> id .

    COLON           reduce using rule 219 (id_str_or_num -> id .)


state 330

    (221) id_str_or_num -> STRINGLIT .

    COLON           reduce using rule 221 (id_str_or_num -> STRINGLIT .)


state 331

    (110) var_type -> var_type id_var_type .

    SEMI            reduce using rule 110 (var_type -> var_type id_var_type .)
    ID              reduce using rule 110 (var_type -> var_type id_var_type .)
    GET             reduce using rule 110 (var_type -> var_type id_var_type .)
    SET             reduce using rule 110 (var_type -> var_type id_var_type .)
    TLTHAN          reduce using rule 110 (var_type -> var_type id_var_type .)
    ASSIGN          reduce using rule 110 (var_type -> var_type id_var_type .)
    COMMA           reduce using rule 110 (var_type -> var_type id_var_type .)
    TGTHAN          reduce using rule 110 (var_type -> var_type id_var_type .)
    RPAREN          reduce using rule 110 (var_type -> var_type id_var_type .)
    DOT             reduce using rule 110 (var_type -> var_type id_var_type .)
    LBRACKET        reduce using rule 110 (var_type -> var_type id_var_type .)
    IN              reduce using rule 110 (var_type -> var_type id_var_type .)
    OF              reduce using rule 110 (var_type -> var_type id_var_type .)


state 332

    (119) var_type -> var_type template_ref .

    SEMI            reduce using rule 119 (var_type -> var_type template_ref .)
    ID              reduce using rule 119 (var_type -> var_type template_ref .)
    GET             reduce using rule 119 (var_type -> var_type template_ref .)
    SET             reduce using rule 119 (var_type -> var_type template_ref .)
    TLTHAN          reduce using rule 119 (var_type -> var_type template_ref .)
    ASSIGN          reduce using rule 119 (var_type -> var_type template_ref .)
    COMMA           reduce using rule 119 (var_type -> var_type template_ref .)
    TGTHAN          reduce using rule 119 (var_type -> var_type template_ref .)
    RPAREN          reduce using rule 119 (var_type -> var_type template_ref .)
    DOT             reduce using rule 119 (var_type -> var_type template_ref .)
    LBRACKET        reduce using rule 119 (var_type -> var_type template_ref .)
    IN              reduce using rule 119 (var_type -> var_type template_ref .)
    OF              reduce using rule 119 (var_type -> var_type template_ref .)


state 333

    (143) exprlist -> exprlist COMMA . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 392
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 334

    (217) array_literal -> LSBRACKET exprlist RSBRACKET .

    RSHIFT          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LSHIFT          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LLSHIFT         reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RRSHIFT         reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    COND_DOT        reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DOT             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LAND            reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LOR             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BOR             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    INSTANCEOF      reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BXOR            reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BAND            reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    EQUAL           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    EQUAL_STRICT    reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    NOTEQUAL_STRICT reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    GTHAN           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    GTHANEQ         reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LTHAN           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    MOD             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LTHANEQ         reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    NOTEQUAL        reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    PLUS            reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    MINUS           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DIVIDE          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    TIMES           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    IN              reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    QEST            reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    COMMA           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    INC             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DEC             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNPLUS      reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNMINUS     reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNTIMES     reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNBOR       reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNBAND      reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNBXOR      reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNLSHIFT    reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNRSHIFT    reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNRRSHIFT   reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNLLSHIFT   reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGN          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LSBRACKET       reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    TLTHAN          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LPAREN          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RPAREN          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    SEMI            reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RSBRACKET       reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    COLON           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    FUNCTION        reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    CLASS           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    TYPED           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    IF              reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ELSE            reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    WHILE           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    WITH            reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DO              reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    FOR             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RETURN          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    YIELD           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BREAK           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    CONTINUE        reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    THROW           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    TRY             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    CATCH           reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    FINALLY         reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    SWITCH          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    NATIVE          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    IMPORT          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    EXPORT          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    NUMBER          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DELETE          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    STRINGLIT       reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ID              reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    GET             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    SET             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    NOT             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BITINV          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    NEW             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    TYPEOF          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    REGEXPR         reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    GLOBAL          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    VAR             reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    STATIC          reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LBRACKET        reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    $end            reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RBRACKET        reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    CASE            reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DEFAULT         reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    OF              reduce using rule 217 (array_literal -> LSBRACKET exprlist RSBRACKET .)


state 335

    (329) finally -> FINALLY LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 393


state 336

    (144) typed_class -> TYPED CLASS id . template_opt typed_class_tail
    (200) template_opt -> . template
    (201) template_opt -> .
    (76) template -> . lthan_restrict templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    EXTENDS         reduce using rule 201 (template_opt -> .)
    LBRACKET        reduce using rule 201 (template_opt -> .)
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 289
    template_opt                   shift and go to state 394
    template                       shift and go to state 288

state 337

    (298) for_var_decl -> id .
    (299) for_var_decl -> id . ASSIGN expr

    SEMI            reduce using rule 298 (for_var_decl -> id .)
    IN              reduce using rule 298 (for_var_decl -> id .)
    OF              reduce using rule 298 (for_var_decl -> id .)
    ASSIGN          shift and go to state 395


state 338

    (305) for -> FOR LPAREN for_decl . RPAREN statement_nonctrl
    (306) for -> FOR LPAREN for_decl . RPAREN LBRACKET statementlist_opt RBRACKET

    RPAREN          shift and go to state 396


state 339

    (300) for_var_decl -> var_decl .
    (97) var_decl -> var_decl . ASSIGN expr
    (98) var_decl -> var_decl . COMMA id
    (99) var_decl -> var_decl . COMMA id ASSIGN expr

    SEMI            reduce using rule 300 (for_var_decl -> var_decl .)
    IN              reduce using rule 300 (for_var_decl -> var_decl .)
    OF              reduce using rule 300 (for_var_decl -> var_decl .)
    ASSIGN          shift and go to state 194
    COMMA           shift and go to state 192


state 340

    (303) for_decl -> for_var_decl . SEMI expr_opt SEMI expr_opt
    (304) for_decl -> for_var_decl . in_or_of expr
    (301) in_or_of -> . IN
    (302) in_or_of -> . OF

    SEMI            shift and go to state 399
    IN              shift and go to state 398
    OF              shift and go to state 400

    in_or_of                       shift and go to state 397

state 341

    (205) func_native -> NATIVE push_scope FUNCTION . id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 401

state 342

    (312) while -> WHILE paren_expr LBRACKET . statementlist_opt RBRACKET
    (207) lbracket_restrict -> LBRACKET .
    (314) statementlist_opt -> . statementlist
    (315) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 207 (lbracket_restrict -> LBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for GET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for SET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! RBRACKET        [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! GET             [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! SET             [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! RBRACKET        [ reduce using rule 315 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 402
    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    try                            shift and go to state 42
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 276

state 343

    (311) while -> WHILE paren_expr statement_nonctrl .

    SEMI            reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    FUNCTION        reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    CLASS           reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    TYPED           reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    IF              reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    ELSE            reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    WHILE           reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    WITH            reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    DO              reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    FOR             reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    RETURN          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    YIELD           reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    BREAK           reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    CONTINUE        reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    THROW           reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    TRY             reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    CATCH           reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    FINALLY         reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    SWITCH          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    NATIVE          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    IMPORT          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    EXPORT          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    NUMBER          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    DELETE          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    STRINGLIT       reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    ID              reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    GET             reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    SET             reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    LSBRACKET       reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    LPAREN          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    MINUS           reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    NOT             reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    BITINV          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    NEW             reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    INC             reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    DEC             reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    TYPEOF          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    REGEXPR         reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    GLOBAL          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    VAR             reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    STATIC          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    TLTHAN          reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    LBRACKET        reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    RBRACKET        reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    $end            reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    CASE            reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)
    DEFAULT         reduce using rule 311 (while -> WHILE paren_expr statement_nonctrl .)


state 344

    (325) if -> IF paren_expr ctrl_statement .

    SEMI            reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    FUNCTION        reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    CLASS           reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    TYPED           reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    IF              reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    ELSE            reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    WHILE           reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    WITH            reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    DO              reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    FOR             reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    RETURN          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    YIELD           reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    BREAK           reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    CONTINUE        reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    THROW           reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    TRY             reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    CATCH           reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    FINALLY         reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    SWITCH          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    NATIVE          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    IMPORT          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    EXPORT          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    NUMBER          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    DELETE          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    STRINGLIT       reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    ID              reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    GET             reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    SET             reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    LSBRACKET       reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    LPAREN          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    MINUS           reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    NOT             reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    BITINV          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    NEW             reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    INC             reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    DEC             reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    TYPEOF          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    REGEXPR         reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    GLOBAL          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    VAR             reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    STATIC          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    TLTHAN          reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    LBRACKET        reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    $end            reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    RBRACKET        reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    CASE            reduce using rule 325 (if -> IF paren_expr ctrl_statement .)
    DEFAULT         reduce using rule 325 (if -> IF paren_expr ctrl_statement .)


state 345

    (328) try -> TRY LBRACKET RBRACKET .

    SEMI            reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    FUNCTION        reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    CLASS           reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    TYPED           reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    IF              reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    ELSE            reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    WHILE           reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    WITH            reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    DO              reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    FOR             reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    RETURN          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    YIELD           reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    BREAK           reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    CONTINUE        reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    THROW           reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    TRY             reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    CATCH           reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    FINALLY         reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    SWITCH          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    NATIVE          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    IMPORT          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    EXPORT          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    NUMBER          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    DELETE          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    STRINGLIT       reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    ID              reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    GET             reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    SET             reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    LSBRACKET       reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    LPAREN          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    MINUS           reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    NOT             reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    BITINV          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    NEW             reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    INC             reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    DEC             reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    TYPEOF          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    REGEXPR         reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    GLOBAL          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    VAR             reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    STATIC          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    TLTHAN          reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    $end            reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    CASE            reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)
    DEFAULT         reduce using rule 328 (try -> TRY LBRACKET RBRACKET .)


state 346

    (327) try -> TRY LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    RBRACKET        shift and go to state 403
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 237
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 238
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    try                            shift and go to state 42
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86

state 347

    (250) expr -> expr cmplx_assign expr COLON . var_type SEMI
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    var_type                       shift and go to state 404
    id                             shift and go to state 208
    id_var_type                    shift and go to state 211

state 348

    (240) rsbracket_restrict -> RSBRACKET .

    SEMI            reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    RSHIFT          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    LSHIFT          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    LLSHIFT         reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    RRSHIFT         reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    COND_DOT        reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    DOT             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    LAND            reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    LOR             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    BOR             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    INSTANCEOF      reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    BXOR            reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    BAND            reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    EQUAL           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    EQUAL_STRICT    reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    NOTEQUAL_STRICT reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    GTHAN           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    GTHANEQ         reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    LTHAN           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    MOD             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    LTHANEQ         reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    NOTEQUAL        reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    PLUS            reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    MINUS           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    DIVIDE          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    TIMES           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    IN              reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    QEST            reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    COMMA           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    INC             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    DEC             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNPLUS      reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNMINUS     reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNTIMES     reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNBOR       reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNBAND      reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNBXOR      reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNLSHIFT    reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNRSHIFT    reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNRRSHIFT   reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNLLSHIFT   reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ASSIGN          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    LSBRACKET       reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    TLTHAN          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    LPAREN          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    RPAREN          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    RSBRACKET       reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    COLON           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    FUNCTION        reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    CLASS           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    TYPED           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    IF              reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ELSE            reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    WHILE           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    WITH            reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    DO              reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    FOR             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    RETURN          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    YIELD           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    BREAK           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    CONTINUE        reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    THROW           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    TRY             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    CATCH           reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    FINALLY         reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    SWITCH          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    NATIVE          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    IMPORT          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    EXPORT          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    NUMBER          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    DELETE          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    STRINGLIT       reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    ID              reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    GET             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    SET             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    NOT             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    BITINV          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    NEW             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    TYPEOF          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    REGEXPR         reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    GLOBAL          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    VAR             reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    STATIC          reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    LBRACKET        reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    $end            reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    RBRACKET        reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    CASE            reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    DEFAULT         reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)
    OF              reduce using rule 240 (rsbracket_restrict -> RSBRACKET .)


state 349

    (279) expr -> expr lsbracket_restrict expr rsbracket_restrict .

    COLON           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RSHIFT          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LSHIFT          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LLSHIFT         reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RRSHIFT         reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    COND_DOT        reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    DOT             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LAND            reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LOR             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    BOR             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    INSTANCEOF      reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    BXOR            reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    BAND            reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    EQUAL           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    EQUAL_STRICT    reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    GTHAN           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    GTHANEQ         reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LTHAN           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    MOD             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LTHANEQ         reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    NOTEQUAL        reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    PLUS            reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    MINUS           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    DIVIDE          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    TIMES           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    IN              reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    QEST            reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    COMMA           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    INC             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    DEC             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNPLUS      reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNMINUS     reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNTIMES     reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNBOR       reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNBAND      reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNBXOR      reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNLSHIFT    reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNRSHIFT    reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNRRSHIFT   reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNLLSHIFT   reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGN          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LSBRACKET       reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    TLTHAN          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LPAREN          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    SEMI            reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RPAREN          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RSBRACKET       reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    FUNCTION        reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    CLASS           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    TYPED           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    IF              reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ELSE            reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    WHILE           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    WITH            reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    DO              reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    FOR             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RETURN          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    YIELD           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    BREAK           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    CONTINUE        reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    THROW           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    TRY             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    CATCH           reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    FINALLY         reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    SWITCH          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    NATIVE          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    IMPORT          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    EXPORT          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    NUMBER          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    DELETE          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    STRINGLIT       reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ID              reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    GET             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    SET             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    NOT             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    BITINV          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    NEW             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    TYPEOF          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    REGEXPR         reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    GLOBAL          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    VAR             reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    STATIC          reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LBRACKET        reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    $end            reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RBRACKET        reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    CASE            reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    DEFAULT         reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    OF              reduce using rule 279 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)


state 350

    (195) func_call -> template_ref_opt LPAREN exprlist . RPAREN
    (143) exprlist -> exprlist . COMMA expr

    RPAREN          shift and go to state 405
    COMMA           shift and go to state 333


state 351

    (196) func_call -> template_ref_opt LPAREN RPAREN .

    RSHIFT          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    LSHIFT          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    LLSHIFT         reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    RRSHIFT         reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    COND_DOT        reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    DOT             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    LAND            reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    LOR             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    BOR             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    INSTANCEOF      reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    BXOR            reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    BAND            reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    EQUAL           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    EQUAL_STRICT    reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    NOTEQUAL_STRICT reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    GTHAN           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    GTHANEQ         reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    LTHAN           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    MOD             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    LTHANEQ         reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    PLUS            reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    MINUS           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    DIVIDE          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    TIMES           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    IN              reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    QEST            reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    COMMA           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    INC             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    DEC             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNPLUS      reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNMINUS     reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNDIVIDE    reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNTIMES     reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNBOR       reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNBAND      reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNBXOR      reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNLSHIFT    reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNRSHIFT    reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNRRSHIFT   reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNLLSHIFT   reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGN          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    LSBRACKET       reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    TLTHAN          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    LPAREN          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    SEMI            reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    RPAREN          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    RSBRACKET       reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    COLON           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    FUNCTION        reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    CLASS           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    TYPED           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    IF              reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ELSE            reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    WHILE           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    WITH            reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    DO              reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    FOR             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    RETURN          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    YIELD           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    BREAK           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    CONTINUE        reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    THROW           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    TRY             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    CATCH           reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    FINALLY         reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    SWITCH          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    NATIVE          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    IMPORT          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    EXPORT          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    NUMBER          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    DELETE          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    STRINGLIT       reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    ID              reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    GET             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    SET             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    NOT             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    BITINV          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    NEW             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    TYPEOF          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    REGEXPR         reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    GLOBAL          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    VAR             reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    STATIC          reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    LBRACKET        reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    $end            reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    RBRACKET        reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    CASE            reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    DEFAULT         reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)
    OF              reduce using rule 196 (func_call -> template_ref_opt LPAREN RPAREN .)


state 352

    (280) expr -> expr QEST expr COLON . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 406
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 353

    (308) ctrl_statement -> LBRACKET statementlist_opt RBRACKET .

    SEMI            reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    CLASS           reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    TYPED           reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    WHILE           reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    FINALLY         reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    IMPORT          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    EXPORT          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    GET             reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    SET             reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    STATIC          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 308 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)


state 354

    (204) funcref -> FUNCTION id template_opt . push_scope LPAREN funcdeflist RPAREN func_type_opt
    (6) push_scope -> .

    LPAREN          reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 407

state 355

    (123) simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt . var_type
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    var_type                       shift and go to state 408
    id                             shift and go to state 208
    id_var_type                    shift and go to state 211

state 356

    (76) template -> lthan_restrict templatedeflist . gthan_restrict
    (74) templatedeflist -> templatedeflist . COMMA var_type
    (75) templatedeflist -> templatedeflist . COMMA var_type ASSIGN var_type
    (91) gthan_restrict -> . TGTHAN

    COMMA           shift and go to state 409
    TGTHAN          shift and go to state 282

    gthan_restrict                 shift and go to state 410

state 357

    (72) templatedeflist -> var_type .
    (73) templatedeflist -> var_type . ASSIGN var_type
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 72 (templatedeflist -> var_type .)
    TGTHAN          reduce using rule 72 (templatedeflist -> var_type .)
    ASSIGN          shift and go to state 411
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 11
    id                             shift and go to state 208
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 358

    (156) class_tail -> class_heritage_opt . LBRACKET class_body_opt RBRACKET

    LBRACKET        shift and go to state 412


state 359

    (161) class_heritage -> EXTENDS . class_list
    (159) class_list -> . class_parent_id
    (160) class_list -> . class_list COMMA class_parent_id
    (157) class_parent_id -> . var_type
    (158) class_parent_id -> . class_parent_id DOT var_type
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    var_type                       shift and go to state 414
    class_parent_id                shift and go to state 413
    id                             shift and go to state 208
    class_list                     shift and go to state 415
    id_var_type                    shift and go to state 211

state 360

    (162) class_heritage_opt -> class_heritage .

    LBRACKET        reduce using rule 162 (class_heritage_opt -> class_heritage .)


state 361

    (154) class -> CLASS id template_opt class_tail .

    SEMI            reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    FUNCTION        reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    CLASS           reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    TYPED           reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    IF              reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    ELSE            reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    WHILE           reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    WITH            reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    DO              reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    FOR             reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    RETURN          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    YIELD           reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    BREAK           reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    CONTINUE        reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    THROW           reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    TRY             reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    CATCH           reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    FINALLY         reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    SWITCH          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    NATIVE          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    IMPORT          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    EXPORT          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    NUMBER          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    DELETE          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    STRINGLIT       reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    ID              reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    GET             reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    SET             reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    LSBRACKET       reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    LPAREN          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    MINUS           reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    NOT             reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    BITINV          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    NEW             reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    INC             reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    DEC             reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    TYPEOF          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    REGEXPR         reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    GLOBAL          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    VAR             reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    STATIC          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    TLTHAN          reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    LBRACKET        reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    $end            reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    RBRACKET        reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    CASE            reduce using rule 154 (class -> CLASS id template_opt class_tail .)
    DEFAULT         reduce using rule 154 (class -> CLASS id template_opt class_tail .)


state 362

    (291) paren_expr -> LPAREN expr RPAREN .

    LBRACKET        reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    FUNCTION        reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    FOR             reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    DO              reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    YIELD           reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    THROW           reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    TRY             reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    CATCH           reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    FINALLY         reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    DELETE          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    STRINGLIT       reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    ID              reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    GET             reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    SET             reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    LSBRACKET       reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    NOT             reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    BITINV          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    NEW             reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    INC             reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    DEC             reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    TYPEOF          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    REGEXPR         reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    VAR             reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    STATIC          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    TLTHAN          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    CLASS           reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    TYPED           reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    WITH            reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    SWITCH          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    NATIVE          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    IMPORT          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    EXPORT          reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    CASE            reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)
    DEFAULT         reduce using rule 291 (paren_expr -> LPAREN expr RPAREN .)


state 363

    (316) case_clause -> CASE . expr COLON statementlist_opt
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 416
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66
    lparen_restrict                shift and go to state 16

state 364

    (321) case_block -> case_clauses .
    (318) case_clauses -> case_clauses . case_clause
    (319) case_clauses_opt -> case_clauses .
    (316) case_clause -> . CASE expr COLON statementlist_opt

    RBRACKET        reduce using rule 321 (case_block -> case_clauses .)
    DEFAULT         reduce using rule 319 (case_clauses_opt -> case_clauses .)
    CASE            shift and go to state 363

    case_clause                    shift and go to state 417

state 365

    (317) case_clauses -> case_clause .

    CASE            reduce using rule 317 (case_clauses -> case_clause .)
    RBRACKET        reduce using rule 317 (case_clauses -> case_clause .)
    DEFAULT         reduce using rule 317 (case_clauses -> case_clause .)


state 366

    (323) switch -> SWITCH paren_expr LBRACKET case_block . RBRACKET

    RBRACKET        shift and go to state 418


state 367

    (322) case_block -> case_clauses_opt . default_case case_clauses_opt
    (313) default_case -> . DEFAULT COLON statementlist

    DEFAULT         shift and go to state 419

    default_case                   shift and go to state 420

state 368

    (44) from_clause -> FROM module_spec .

    SEMI            reduce using rule 44 (from_clause -> FROM module_spec .)


state 369

    (331) export_decl -> EXPORT export_clause from_clause SEMI .

    SEMI            reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    FUNCTION        reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    CLASS           reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    TYPED           reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    IF              reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    ELSE            reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    WHILE           reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    WITH            reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    DO              reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    FOR             reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    RETURN          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    YIELD           reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    BREAK           reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    CONTINUE        reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    THROW           reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    TRY             reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    CATCH           reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    FINALLY         reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    SWITCH          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    NATIVE          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    IMPORT          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    EXPORT          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    NUMBER          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    DELETE          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    STRINGLIT       reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    ID              reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    GET             reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    SET             reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    LSBRACKET       reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    LPAREN          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    MINUS           reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    NOT             reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    BITINV          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    NEW             reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    INC             reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    DEC             reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    TYPEOF          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    REGEXPR         reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    GLOBAL          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    VAR             reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    STATIC          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    TLTHAN          reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    LBRACKET        reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    RBRACKET        reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    CASE            reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    DEFAULT         reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)
    $end            reduce using rule 331 (export_decl -> EXPORT export_clause from_clause SEMI .)


state 370

    (139) assign -> expr cmplx_assign . expr
    (249) expr -> expr cmplx_assign . expr
    (250) expr -> expr cmplx_assign . expr COLON var_type SEMI
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 421
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 371

    (140) assign -> assign cmplx_assign . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 422
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 372

    (341) export_clause -> LBRACKET exports_list COMMA . RBRACKET
    (343) exports_list -> exports_list COMMA . export_spec
    (344) export_spec -> . ID
    (345) export_spec -> . ID ID ID

    RBRACKET        shift and go to state 424
    ID              shift and go to state 303

    export_spec                    shift and go to state 423

state 373

    (340) export_clause -> LBRACKET exports_list RBRACKET .

    SEMI            reduce using rule 340 (export_clause -> LBRACKET exports_list RBRACKET .)
    FROM            reduce using rule 340 (export_clause -> LBRACKET exports_list RBRACKET .)


state 374

    (345) export_spec -> ID ID . ID

    ID              shift and go to state 425


state 375

    (330) export_decl -> EXPORT TIMES from_clause SEMI .

    SEMI            reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    FUNCTION        reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    CLASS           reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    TYPED           reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    IF              reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    ELSE            reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    WHILE           reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    WITH            reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    DO              reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    FOR             reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    RETURN          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    YIELD           reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    BREAK           reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    CONTINUE        reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    THROW           reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    TRY             reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    CATCH           reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    FINALLY         reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    SWITCH          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    NATIVE          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    IMPORT          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    EXPORT          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    NUMBER          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    DELETE          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    STRINGLIT       reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    ID              reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    GET             reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    SET             reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    LSBRACKET       reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    LPAREN          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    MINUS           reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    NOT             reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    BITINV          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    NEW             reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    INC             reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    DEC             reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    TYPEOF          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    REGEXPR         reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    GLOBAL          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    VAR             reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    STATIC          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    TLTHAN          reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    LBRACKET        reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    RBRACKET        reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    CASE            reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    DEFAULT         reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)
    $end            reduce using rule 330 (export_decl -> EXPORT TIMES from_clause SEMI .)


state 376

    (206) function -> FUNCTION id template_opt . push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (6) push_scope -> .

    LPAREN          reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 426

state 377

    (33) import_decl -> IMPORT import_clause from_clause SEMI .

    SEMI            reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    FUNCTION        reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    CLASS           reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    TYPED           reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    IF              reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    ELSE            reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    WHILE           reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    WITH            reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    DO              reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    FOR             reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    RETURN          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    YIELD           reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    BREAK           reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    CONTINUE        reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    THROW           reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    TRY             reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    CATCH           reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    FINALLY         reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    SWITCH          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    NATIVE          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    IMPORT          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    EXPORT          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    NUMBER          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    DELETE          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    STRINGLIT       reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    ID              reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    GET             reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    SET             reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    LSBRACKET       reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    LPAREN          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    MINUS           reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    NOT             reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    BITINV          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    NEW             reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    INC             reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    DEC             reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    TYPEOF          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    REGEXPR         reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    GLOBAL          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    VAR             reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    STATIC          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    TLTHAN          reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    LBRACKET        reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    RBRACKET        reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    $end            reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    CASE            reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)
    DEFAULT         reduce using rule 33 (import_decl -> IMPORT import_clause from_clause SEMI .)


state 378

    (46) import_list -> import_list COMMA . import_spec
    (47) import_spec -> . import_bind
    (48) import_spec -> . ID ID import_bind
    (49) import_bind -> . binding_ident
    (51) binding_ident -> . ID

    ID              shift and go to state 315

    import_bind                    shift and go to state 313
    binding_ident                  shift and go to state 187
    import_spec                    shift and go to state 427

state 379

    (43) named_imports -> LBRACKET import_list RBRACKET .

    FROM            reduce using rule 43 (named_imports -> LBRACKET import_list RBRACKET .)


state 380

    (48) import_spec -> ID ID . import_bind
    (49) import_bind -> . binding_ident
    (51) binding_ident -> . ID

    ID              shift and go to state 185

    import_bind                    shift and go to state 428
    binding_ident                  shift and go to state 187

state 381

    (41) name_space_import -> TIMES ID import_bind .

    FROM            reduce using rule 41 (name_space_import -> TIMES ID import_bind .)


state 382

    (39) import_clause -> import_def_bind COMMA named_imports .

    FROM            reduce using rule 39 (import_clause -> import_def_bind COMMA named_imports .)


state 383

    (38) import_clause -> import_def_bind COMMA name_space_import .

    FROM            reduce using rule 38 (import_clause -> import_def_bind COMMA name_space_import .)


state 384

    (99) var_decl -> var_decl COMMA id ASSIGN . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 429
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 385

    (347) catch -> CATCH paren_expr LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    RBRACKET        shift and go to state 430
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 237
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 238
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    try                            shift and go to state 42
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86

state 386

    (310) dowhile -> DO ctrl_statement WHILE paren_expr .

    SEMI            reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    FUNCTION        reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    CLASS           reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    TYPED           reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    IF              reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    ELSE            reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    WHILE           reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    WITH            reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    DO              reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    FOR             reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    RETURN          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    YIELD           reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    BREAK           reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    CONTINUE        reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    THROW           reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    TRY             reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    CATCH           reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    FINALLY         reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    SWITCH          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    NATIVE          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    IMPORT          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    EXPORT          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    NUMBER          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    DELETE          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    STRINGLIT       reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    ID              reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    GET             reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    SET             reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    LSBRACKET       reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    LPAREN          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    MINUS           reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    NOT             reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    BITINV          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    NEW             reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    INC             reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    DEC             reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    TYPEOF          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    REGEXPR         reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    GLOBAL          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    VAR             reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    STATIC          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    TLTHAN          reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    LBRACKET        reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    RBRACKET        reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    CASE            reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    DEFAULT         reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    $end            reduce using rule 310 (dowhile -> DO ctrl_statement WHILE paren_expr .)


state 387

    (206) function -> FUNCTION id template_opt push_scope . LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (204) funcref -> FUNCTION id template_opt push_scope . LPAREN funcdeflist RPAREN func_type_opt

    LPAREN          shift and go to state 431


state 388

    (215) exprfunction -> FUNCTION func_name_opt template_opt push_scope . LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> FUNCTION func_name_opt template_opt push_scope . LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict

    LPAREN          shift and go to state 432


state 389

    (223) obj_lit_list -> id_str_or_num COLON . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 433
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 390

    (224) obj_lit_list -> obj_lit_list COMMA . id_str_or_num COLON expr
    (225) obj_lit_list -> obj_lit_list COMMA .
    (219) id_str_or_num -> . id
    (220) id_str_or_num -> . NUMBER
    (221) id_str_or_num -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    COMMA           reduce using rule 225 (obj_lit_list -> obj_lit_list COMMA .)
    RBRACKET        reduce using rule 225 (obj_lit_list -> obj_lit_list COMMA .)
    NUMBER          shift and go to state 327
    STRINGLIT       shift and go to state 330
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id_str_or_num                  shift and go to state 434
    id                             shift and go to state 329

state 391

    (226) obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .

    SEMI            reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RSHIFT          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LSHIFT          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LLSHIFT         reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RRSHIFT         reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    COND_DOT        reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    DOT             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LAND            reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LOR             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    BOR             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    INSTANCEOF      reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    BXOR            reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    BAND            reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    EQUAL           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    EQUAL_STRICT    reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    GTHAN           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    GTHANEQ         reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LTHAN           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    MOD             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LTHANEQ         reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    NOTEQUAL        reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    PLUS            reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    MINUS           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    DIVIDE          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    TIMES           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    IN              reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    QEST            reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    COMMA           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    INC             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    DEC             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNPLUS      reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNMINUS     reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNTIMES     reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNBOR       reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNBAND      reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNBXOR      reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNLSHIFT    reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNRSHIFT    reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNRRSHIFT   reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNLLSHIFT   reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGN          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LSBRACKET       reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    TLTHAN          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LPAREN          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RPAREN          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RSBRACKET       reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    COLON           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    FUNCTION        reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    CLASS           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    TYPED           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    IF              reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ELSE            reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    WHILE           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    WITH            reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    DO              reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    FOR             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RETURN          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    YIELD           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    BREAK           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    CONTINUE        reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    THROW           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    TRY             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    CATCH           reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    FINALLY         reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    SWITCH          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    NATIVE          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    IMPORT          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    EXPORT          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    NUMBER          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    DELETE          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    STRINGLIT       reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ID              reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    GET             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    SET             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    NOT             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    BITINV          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    NEW             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    TYPEOF          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    REGEXPR         reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    GLOBAL          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    VAR             reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    STATIC          reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LBRACKET        reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    $end            reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RBRACKET        reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    CASE            reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    DEFAULT         reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    OF              reduce using rule 226 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)


state 392

    (143) exprlist -> exprlist COMMA expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    RPAREN          reduce using rule 143 (exprlist -> exprlist COMMA expr .)
    COMMA           reduce using rule 143 (exprlist -> exprlist COMMA expr .)
    RSBRACKET       reduce using rule 143 (exprlist -> exprlist COMMA expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! COMMA           [ shift and go to state 107 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 393

    (329) finally -> FINALLY LBRACKET statementlist_opt RBRACKET .

    SEMI            reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    CLASS           reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    TYPED           reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    WHILE           reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    FINALLY         reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    IMPORT          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    EXPORT          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    GET             reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    SET             reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    STATIC          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 329 (finally -> FINALLY LBRACKET statementlist_opt RBRACKET .)


state 394

    (144) typed_class -> TYPED CLASS id template_opt . typed_class_tail
    (145) typed_class_tail -> . typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET
    (152) typed_inherit_opt -> . EXTENDS id
    (153) typed_inherit_opt -> .

    EXTENDS         shift and go to state 436
    LBRACKET        reduce using rule 153 (typed_inherit_opt -> .)

    typed_inherit_opt              shift and go to state 435
    typed_class_tail               shift and go to state 437

state 395

    (299) for_var_decl -> id ASSIGN . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 438
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 396

    (305) for -> FOR LPAREN for_decl RPAREN . statement_nonctrl
    (306) for -> FOR LPAREN for_decl RPAREN . LBRACKET statementlist_opt RBRACKET
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 439
    SEMI            shift and go to state 44
    NUMBER          shift and go to state 29
    FUNCTION        shift and go to state 150
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    FOR             shift and go to state 68
    DO              shift and go to state 41
    WHILE           shift and go to state 73
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21

    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 2
    delete                         shift and go to state 51
    yield                          shift and go to state 152
    for                            shift and go to state 141
    else                           shift and go to state 157
    re_lit                         shift and go to state 8
    return                         shift and go to state 142
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 440
    while                          shift and go to state 143
    type_modifiers                 shift and go to state 53
    not                            shift and go to state 15
    dec                            shift and go to state 66
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 144
    new                            shift and go to state 48
    catch                          shift and go to state 155
    funcref                        shift and go to state 24
    throw                          shift and go to state 145
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    break                          shift and go to state 156
    finally                        shift and go to state 146
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 140
    bitinv                         shift and go to state 32
    continue                       shift and go to state 149
    strlit                         shift and go to state 79
    var_decl                       shift and go to state 37
    typeof                         shift and go to state 81
    try                            shift and go to state 154
    inc                            shift and go to state 86

state 397

    (304) for_decl -> for_var_decl in_or_of . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 441
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 398

    (301) in_or_of -> IN .

    NUMBER          reduce using rule 301 (in_or_of -> IN .)
    STRINGLIT       reduce using rule 301 (in_or_of -> IN .)
    ID              reduce using rule 301 (in_or_of -> IN .)
    GET             reduce using rule 301 (in_or_of -> IN .)
    SET             reduce using rule 301 (in_or_of -> IN .)
    LSBRACKET       reduce using rule 301 (in_or_of -> IN .)
    FUNCTION        reduce using rule 301 (in_or_of -> IN .)
    LPAREN          reduce using rule 301 (in_or_of -> IN .)
    MINUS           reduce using rule 301 (in_or_of -> IN .)
    NOT             reduce using rule 301 (in_or_of -> IN .)
    BITINV          reduce using rule 301 (in_or_of -> IN .)
    NEW             reduce using rule 301 (in_or_of -> IN .)
    INC             reduce using rule 301 (in_or_of -> IN .)
    DEC             reduce using rule 301 (in_or_of -> IN .)
    TYPEOF          reduce using rule 301 (in_or_of -> IN .)
    REGEXPR         reduce using rule 301 (in_or_of -> IN .)
    TLTHAN          reduce using rule 301 (in_or_of -> IN .)
    LBRACKET        reduce using rule 301 (in_or_of -> IN .)


state 399

    (303) for_decl -> for_var_decl SEMI . expr_opt SEMI expr_opt
    (295) expr_opt -> . expr
    (296) expr_opt -> .
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    SEMI            reduce using rule 296 (expr_opt -> .)
    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 442
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    lthan_restrict                 shift and go to state 11
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    expr_opt                       shift and go to state 443
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 400

    (302) in_or_of -> OF .

    NUMBER          reduce using rule 302 (in_or_of -> OF .)
    STRINGLIT       reduce using rule 302 (in_or_of -> OF .)
    ID              reduce using rule 302 (in_or_of -> OF .)
    GET             reduce using rule 302 (in_or_of -> OF .)
    SET             reduce using rule 302 (in_or_of -> OF .)
    LSBRACKET       reduce using rule 302 (in_or_of -> OF .)
    FUNCTION        reduce using rule 302 (in_or_of -> OF .)
    LPAREN          reduce using rule 302 (in_or_of -> OF .)
    MINUS           reduce using rule 302 (in_or_of -> OF .)
    NOT             reduce using rule 302 (in_or_of -> OF .)
    BITINV          reduce using rule 302 (in_or_of -> OF .)
    NEW             reduce using rule 302 (in_or_of -> OF .)
    INC             reduce using rule 302 (in_or_of -> OF .)
    DEC             reduce using rule 302 (in_or_of -> OF .)
    TYPEOF          reduce using rule 302 (in_or_of -> OF .)
    REGEXPR         reduce using rule 302 (in_or_of -> OF .)
    TLTHAN          reduce using rule 302 (in_or_of -> OF .)
    LBRACKET        reduce using rule 302 (in_or_of -> OF .)


state 401

    (205) func_native -> NATIVE push_scope FUNCTION id . template_opt LPAREN funcdeflist RPAREN func_type_opt
    (200) template_opt -> . template
    (201) template_opt -> .
    (76) template -> . lthan_restrict templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 201 (template_opt -> .)
    TLTHAN          shift and go to state 21

    template                       shift and go to state 288
    lthan_restrict                 shift and go to state 289
    template_opt                   shift and go to state 444

state 402

    (312) while -> WHILE paren_expr LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 445


state 403

    (327) try -> TRY LBRACKET statementlist RBRACKET .

    SEMI            reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    FUNCTION        reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    CLASS           reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    TYPED           reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    WHILE           reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    WITH            reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    DO              reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    YIELD           reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    THROW           reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    TRY             reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    CATCH           reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    FINALLY         reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    SWITCH          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    NATIVE          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    IMPORT          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    EXPORT          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    DELETE          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    GET             reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    SET             reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    BITINV          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    TYPEOF          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    REGEXPR         reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    GLOBAL          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    VAR             reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    STATIC          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    TLTHAN          reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    RBRACKET        reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    CASE            reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)
    DEFAULT         reduce using rule 327 (try -> TRY LBRACKET statementlist RBRACKET .)


state 404

    (250) expr -> expr cmplx_assign expr COLON var_type . SEMI
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    SEMI            shift and go to state 446
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 11
    id                             shift and go to state 208
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 405

    (195) func_call -> template_ref_opt LPAREN exprlist RPAREN .

    RSHIFT          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LSHIFT          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LLSHIFT         reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RRSHIFT         reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    COND_DOT        reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    DOT             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LAND            reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LOR             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    BOR             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    INSTANCEOF      reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    BXOR            reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    BAND            reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    EQUAL           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    EQUAL_STRICT    reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    NOTEQUAL_STRICT reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    GTHAN           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    GTHANEQ         reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LTHAN           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    MOD             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LTHANEQ         reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    NOTEQUAL        reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    PLUS            reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    IN              reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    QEST            reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    INC             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    DEC             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNPLUS      reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNMINUS     reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNDIVIDE    reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNTIMES     reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNBOR       reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNBAND      reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNBXOR      reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNLSHIFT    reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNRSHIFT    reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNRRSHIFT   reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNLLSHIFT   reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGN          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LSBRACKET       reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    TLTHAN          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LPAREN          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    SEMI            reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RSBRACKET       reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    COLON           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    FUNCTION        reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    CLASS           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    TYPED           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    IF              reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ELSE            reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    WHILE           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    WITH            reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    DO              reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    FOR             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RETURN          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    YIELD           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    BREAK           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    CONTINUE        reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    THROW           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    TRY             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    CATCH           reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    FINALLY         reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    SWITCH          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    NATIVE          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    IMPORT          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    EXPORT          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    NUMBER          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    DELETE          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    STRINGLIT       reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ID              reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    GET             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    SET             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    NOT             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    BITINV          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    NEW             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    TYPEOF          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    REGEXPR         reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    GLOBAL          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    VAR             reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    STATIC          reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LBRACKET        reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    $end            reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    CASE            reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    DEFAULT         reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    OF              reduce using rule 195 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)


state 406

    (280) expr -> expr QEST expr COLON expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 194 (template_ref_opt -> .)
    COLON           reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    MOD             reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    QEST            reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    COMMA           reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ASSIGNPLUS      reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ASSIGNMINUS     reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ASSIGNDIVIDE    reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ASSIGNTIMES     reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ASSIGNBOR       reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ASSIGNBAND      reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ASSIGNBXOR      reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ASSIGNLSHIFT    reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ASSIGNRSHIFT    reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ASSIGNRRSHIFT   reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ASSIGNLLSHIFT   reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ASSIGN          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    TLTHAN          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    SEMI            reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    RPAREN          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    RSBRACKET       reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    FUNCTION        reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    CLASS           reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    TYPED           reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    IF              reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ELSE            reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    WHILE           reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    WITH            reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    DO              reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    FOR             reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    RETURN          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    YIELD           reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    BREAK           reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    CONTINUE        reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    THROW           reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    TRY             reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    CATCH           reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    FINALLY         reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    SWITCH          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    NATIVE          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    IMPORT          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    EXPORT          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    NUMBER          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    DELETE          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    STRINGLIT       reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    ID              reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    GET             reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    SET             reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    NOT             reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    BITINV          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    NEW             reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    TYPEOF          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    REGEXPR         reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    GLOBAL          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    VAR             reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    STATIC          reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    LBRACKET        reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    $end            reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    RBRACKET        reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    CASE            reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    DEFAULT         reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    OF              reduce using rule 280 (expr -> expr QEST expr COLON expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    INC             shift and go to state 128
    DEC             shift and go to state 137
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! LSHIFT          [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! LLSHIFT         [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! RRSHIFT         [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! COND_DOT        [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! DOT             [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! LAND            [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! LOR             [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! BOR             [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! INSTANCEOF      [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! BXOR            [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! BAND            [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! EQUAL           [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! GTHAN           [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! GTHANEQ         [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! LTHAN           [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! LTHANEQ         [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! NOTEQUAL        [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! PLUS            [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! MINUS           [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! TIMES           [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! IN              [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! INC             [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! DEC             [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! LSBRACKET       [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! LPAREN          [ reduce using rule 280 (expr -> expr QEST expr COLON expr .) ]
  ! MOD             [ shift and go to state 113 ]
  ! QEST            [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGNPLUS      [ shift and go to state 123 ]
  ! ASSIGNMINUS     [ shift and go to state 125 ]
  ! ASSIGNDIVIDE    [ shift and go to state 114 ]
  ! ASSIGNTIMES     [ shift and go to state 138 ]
  ! ASSIGNBOR       [ shift and go to state 103 ]
  ! ASSIGNBAND      [ shift and go to state 95 ]
  ! ASSIGNBXOR      [ shift and go to state 112 ]
  ! ASSIGNLSHIFT    [ shift and go to state 127 ]
  ! ASSIGNRSHIFT    [ shift and go to state 126 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 96 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 134 ]
  ! ASSIGN          [ shift and go to state 116 ]
  ! TLTHAN          [ shift and go to state 21 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 407

    (204) funcref -> FUNCTION id template_opt push_scope . LPAREN funcdeflist RPAREN func_type_opt

    LPAREN          shift and go to state 447


state 408

    (123) simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type .
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 123 (simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type .)
    TGTHAN          reduce using rule 123 (simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type .)
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 11
    id                             shift and go to state 208
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 409

    (74) templatedeflist -> templatedeflist COMMA . var_type
    (75) templatedeflist -> templatedeflist COMMA . var_type ASSIGN var_type
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 208
    id_var_type                    shift and go to state 211
    var_type                       shift and go to state 448

state 410

    (76) template -> lthan_restrict templatedeflist gthan_restrict .

    LPAREN          reduce using rule 76 (template -> lthan_restrict templatedeflist gthan_restrict .)
    EXTENDS         reduce using rule 76 (template -> lthan_restrict templatedeflist gthan_restrict .)
    LBRACKET        reduce using rule 76 (template -> lthan_restrict templatedeflist gthan_restrict .)


state 411

    (73) templatedeflist -> var_type ASSIGN . var_type
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 208
    id_var_type                    shift and go to state 211
    var_type                       shift and go to state 449

state 412

    (156) class_tail -> class_heritage_opt LBRACKET . class_body_opt RBRACKET
    (164) class_body_opt -> . class_element_list
    (165) class_body_opt -> .
    (166) class_element_list -> . class_element
    (167) class_element_list -> . class_element_list class_element
    (168) class_element -> . STATIC method_def
    (169) class_element -> . method_def
    (170) class_element -> . class_property SEMI
    (175) method_def -> . method
    (176) method_def -> . GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (177) method_def -> . SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (187) class_property -> . var_type2 id
    (188) class_property -> . class_property ASSIGN expr
    (189) class_property -> . class_property COMMA id
    (190) class_property -> . class_property COMMA id ASSIGN expr
    (172) method -> . id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (186) var_type2 -> . var_element
    (171) id_right -> . id
    (178) var_element -> . id
    (179) var_element -> . INT
    (180) var_element -> . SHORT
    (181) var_element -> . FLOAT
    (182) var_element -> . DOUBLE
    (183) var_element -> . CHAR
    (184) var_element -> . BYTE
    (185) var_element -> . id template_ref
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    RBRACKET        reduce using rule 165 (class_body_opt -> .)
    STATIC          shift and go to state 452
    GET             shift and go to state 465
    SET             shift and go to state 459
    INT             shift and go to state 455
    SHORT           shift and go to state 454
    FLOAT           shift and go to state 456
    DOUBLE          shift and go to state 462
    CHAR            shift and go to state 463
    BYTE            shift and go to state 468
    ID              shift and go to state 38

    class_element                  shift and go to state 450
    class_body_opt                 shift and go to state 451
    class_element_list             shift and go to state 464
    var_element                    shift and go to state 466
    id                             shift and go to state 460
    class_property                 shift and go to state 457
    method_def                     shift and go to state 458
    id_right                       shift and go to state 461
    method                         shift and go to state 453
    var_type2                      shift and go to state 467

state 413

    (159) class_list -> class_parent_id .
    (158) class_parent_id -> class_parent_id . DOT var_type

    COMMA           reduce using rule 159 (class_list -> class_parent_id .)
    LBRACKET        reduce using rule 159 (class_list -> class_parent_id .)
    DOT             shift and go to state 469


state 414

    (157) class_parent_id -> var_type .
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    DOT             reduce using rule 157 (class_parent_id -> var_type .)
    COMMA           reduce using rule 157 (class_parent_id -> var_type .)
    LBRACKET        reduce using rule 157 (class_parent_id -> var_type .)
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 11
    id                             shift and go to state 208
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 415

    (161) class_heritage -> EXTENDS class_list .
    (160) class_list -> class_list . COMMA class_parent_id

    LBRACKET        reduce using rule 161 (class_heritage -> EXTENDS class_list .)
    COMMA           shift and go to state 470


state 416

    (316) case_clause -> CASE expr . COLON statementlist_opt
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    COLON           shift and go to state 471
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref_opt               shift and go to state 108
    template_ref                   shift and go to state 111
    func_call                      shift and go to state 132

state 417

    (318) case_clauses -> case_clauses case_clause .

    CASE            reduce using rule 318 (case_clauses -> case_clauses case_clause .)
    RBRACKET        reduce using rule 318 (case_clauses -> case_clauses case_clause .)
    DEFAULT         reduce using rule 318 (case_clauses -> case_clauses case_clause .)


state 418

    (323) switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .

    SEMI            reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    FUNCTION        reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    CLASS           reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    TYPED           reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    IF              reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    ELSE            reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    WHILE           reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    WITH            reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    DO              reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    FOR             reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    RETURN          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    YIELD           reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    BREAK           reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    CONTINUE        reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    THROW           reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    TRY             reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    CATCH           reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    FINALLY         reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    SWITCH          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    NATIVE          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    IMPORT          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    EXPORT          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    NUMBER          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    DELETE          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    STRINGLIT       reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    ID              reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    GET             reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    SET             reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    LSBRACKET       reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    LPAREN          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    MINUS           reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    NOT             reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    BITINV          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    NEW             reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    INC             reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    DEC             reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    TYPEOF          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    REGEXPR         reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    GLOBAL          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    VAR             reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    STATIC          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    TLTHAN          reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    LBRACKET        reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    RBRACKET        reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    $end            reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    CASE            reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    DEFAULT         reduce using rule 323 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)


state 419

    (313) default_case -> DEFAULT . COLON statementlist

    COLON           shift and go to state 472


state 420

    (322) case_block -> case_clauses_opt default_case . case_clauses_opt
    (319) case_clauses_opt -> . case_clauses
    (320) case_clauses_opt -> .
    (317) case_clauses -> . case_clause
    (318) case_clauses -> . case_clauses case_clause
    (316) case_clause -> . CASE expr COLON statementlist_opt

    RBRACKET        reduce using rule 320 (case_clauses_opt -> .)
    CASE            shift and go to state 363

    case_clause                    shift and go to state 365
    case_clauses_opt               shift and go to state 473
    case_clauses                   shift and go to state 474

state 421

    (139) assign -> expr cmplx_assign expr .
    (249) expr -> expr cmplx_assign expr .
    (250) expr -> expr cmplx_assign expr . COLON var_type SEMI
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for MINUS resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for INC resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for DEC resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ASSIGNPLUS resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ASSIGNMINUS resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ASSIGNDIVIDE resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ASSIGNTIMES resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ASSIGNBOR resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ASSIGNBAND resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ASSIGNBXOR resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ASSIGNLSHIFT resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ASSIGNRSHIFT resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ASSIGNRRSHIFT resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ASSIGNLLSHIFT resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for LPAREN resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for SEMI resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for CLASS resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for TYPED resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for IF resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ELSE resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for WHILE resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for WITH resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for DO resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for FOR resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for RETURN resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for YIELD resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for BREAK resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for THROW resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for TRY resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for CATCH resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for FINALLY resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for SWITCH resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for NATIVE resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for IMPORT resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for EXPORT resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for NUMBER resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for DELETE resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for ID resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for GET resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for SET resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for NOT resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for BITINV resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for NEW resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for VAR resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for STATIC resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for $end resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for CASE resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for LLSHIFT resolved as shift
  ! shift/reduce conflict for RRSHIFT resolved as shift
  ! shift/reduce conflict for COND_DOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for INSTANCEOF resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_STRICT resolved as shift
  ! shift/reduce conflict for NOTEQUAL_STRICT resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for QEST resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for ASSIGNPLUS resolved as shift
  ! shift/reduce conflict for ASSIGNMINUS resolved as shift
  ! shift/reduce conflict for ASSIGNDIVIDE resolved as shift
  ! shift/reduce conflict for ASSIGNTIMES resolved as shift
  ! shift/reduce conflict for ASSIGNBOR resolved as shift
  ! shift/reduce conflict for ASSIGNBAND resolved as shift
  ! shift/reduce conflict for ASSIGNBXOR resolved as shift
  ! shift/reduce conflict for ASSIGNLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNLLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 139 (assign -> expr cmplx_assign expr .)
  ! shift/reduce conflict for TLTHAN resolved as shift
    SEMI            reduce using rule 139 (assign -> expr cmplx_assign expr .)
    FUNCTION        reduce using rule 139 (assign -> expr cmplx_assign expr .)
    CLASS           reduce using rule 139 (assign -> expr cmplx_assign expr .)
    TYPED           reduce using rule 139 (assign -> expr cmplx_assign expr .)
    IF              reduce using rule 139 (assign -> expr cmplx_assign expr .)
    ELSE            reduce using rule 139 (assign -> expr cmplx_assign expr .)
    WHILE           reduce using rule 139 (assign -> expr cmplx_assign expr .)
    WITH            reduce using rule 139 (assign -> expr cmplx_assign expr .)
    DO              reduce using rule 139 (assign -> expr cmplx_assign expr .)
    FOR             reduce using rule 139 (assign -> expr cmplx_assign expr .)
    RETURN          reduce using rule 139 (assign -> expr cmplx_assign expr .)
    YIELD           reduce using rule 139 (assign -> expr cmplx_assign expr .)
    BREAK           reduce using rule 139 (assign -> expr cmplx_assign expr .)
    CONTINUE        reduce using rule 139 (assign -> expr cmplx_assign expr .)
    THROW           reduce using rule 139 (assign -> expr cmplx_assign expr .)
    TRY             reduce using rule 139 (assign -> expr cmplx_assign expr .)
    CATCH           reduce using rule 139 (assign -> expr cmplx_assign expr .)
    FINALLY         reduce using rule 139 (assign -> expr cmplx_assign expr .)
    SWITCH          reduce using rule 139 (assign -> expr cmplx_assign expr .)
    NATIVE          reduce using rule 139 (assign -> expr cmplx_assign expr .)
    IMPORT          reduce using rule 139 (assign -> expr cmplx_assign expr .)
    EXPORT          reduce using rule 139 (assign -> expr cmplx_assign expr .)
    NUMBER          reduce using rule 139 (assign -> expr cmplx_assign expr .)
    DELETE          reduce using rule 139 (assign -> expr cmplx_assign expr .)
    STRINGLIT       reduce using rule 139 (assign -> expr cmplx_assign expr .)
    ID              reduce using rule 139 (assign -> expr cmplx_assign expr .)
    GET             reduce using rule 139 (assign -> expr cmplx_assign expr .)
    SET             reduce using rule 139 (assign -> expr cmplx_assign expr .)
    LPAREN          reduce using rule 139 (assign -> expr cmplx_assign expr .)
    NOT             reduce using rule 139 (assign -> expr cmplx_assign expr .)
    BITINV          reduce using rule 139 (assign -> expr cmplx_assign expr .)
    NEW             reduce using rule 139 (assign -> expr cmplx_assign expr .)
    TYPEOF          reduce using rule 139 (assign -> expr cmplx_assign expr .)
    REGEXPR         reduce using rule 139 (assign -> expr cmplx_assign expr .)
    GLOBAL          reduce using rule 139 (assign -> expr cmplx_assign expr .)
    VAR             reduce using rule 139 (assign -> expr cmplx_assign expr .)
    STATIC          reduce using rule 139 (assign -> expr cmplx_assign expr .)
    LBRACKET        reduce using rule 139 (assign -> expr cmplx_assign expr .)
    $end            reduce using rule 139 (assign -> expr cmplx_assign expr .)
    RBRACKET        reduce using rule 139 (assign -> expr cmplx_assign expr .)
    CASE            reduce using rule 139 (assign -> expr cmplx_assign expr .)
    DEFAULT         reduce using rule 139 (assign -> expr cmplx_assign expr .)
    COLON           shift and go to state 347
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    TLTHAN          shift and go to state 21

  ! ASSIGNPLUS      [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! ASSIGNBOR       [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! ASSIGNBAND      [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! ASSIGNLSHIFT    [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! ASSIGNRSHIFT    [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! ASSIGNRRSHIFT   [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! ASSIGNLLSHIFT   [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! ASSIGN          [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! LSBRACKET       [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! MINUS           [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! INC             [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! DEC             [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! TLTHAN          [ reduce using rule 139 (assign -> expr cmplx_assign expr .) ]
  ! RSHIFT          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LSHIFT          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LLSHIFT         [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! RRSHIFT         [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! COND_DOT        [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! DOT             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LAND            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LOR             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! BOR             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! INSTANCEOF      [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! BXOR            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! BAND            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! EQUAL           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! GTHAN           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! GTHANEQ         [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LTHAN           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! MOD             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LTHANEQ         [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! NOTEQUAL        [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! PLUS            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! MINUS           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! DIVIDE          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! TIMES           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! IN              [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! QEST            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! COMMA           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! INC             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! DEC             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNPLUS      [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNBOR       [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNBAND      [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNLSHIFT    [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNRSHIFT    [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNRRSHIFT   [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNLLSHIFT   [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGN          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LSBRACKET       [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! TLTHAN          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LPAREN          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! SEMI            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! FUNCTION        [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! CLASS           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! TYPED           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! IF              [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ELSE            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! WHILE           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! WITH            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! DO              [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! FOR             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! RETURN          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! YIELD           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! BREAK           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! CONTINUE        [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! THROW           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! TRY             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! CATCH           [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! FINALLY         [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! SWITCH          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! NATIVE          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! IMPORT          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! EXPORT          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! NUMBER          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! DELETE          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! STRINGLIT       [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! ID              [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! GET             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! SET             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! NOT             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! BITINV          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! NEW             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! TYPEOF          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! REGEXPR         [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! GLOBAL          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! VAR             [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! STATIC          [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LBRACKET        [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! $end            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! RBRACKET        [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! CASE            [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! DEFAULT         [ reduce using rule 249 (expr -> expr cmplx_assign expr .) ]
  ! LPAREN          [ reduce using rule 194 (template_ref_opt -> .) ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 422

    (140) assign -> assign cmplx_assign expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for ASSIGNPLUS resolved as shift
  ! shift/reduce conflict for ASSIGNMINUS resolved as shift
  ! shift/reduce conflict for ASSIGNDIVIDE resolved as shift
  ! shift/reduce conflict for ASSIGNTIMES resolved as shift
  ! shift/reduce conflict for ASSIGNBOR resolved as shift
  ! shift/reduce conflict for ASSIGNBAND resolved as shift
  ! shift/reduce conflict for ASSIGNBXOR resolved as shift
  ! shift/reduce conflict for ASSIGNLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNLLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 140 (assign -> assign cmplx_assign expr .)
  ! shift/reduce conflict for TLTHAN resolved as shift
    SEMI            reduce using rule 140 (assign -> assign cmplx_assign expr .)
    FUNCTION        reduce using rule 140 (assign -> assign cmplx_assign expr .)
    CLASS           reduce using rule 140 (assign -> assign cmplx_assign expr .)
    TYPED           reduce using rule 140 (assign -> assign cmplx_assign expr .)
    IF              reduce using rule 140 (assign -> assign cmplx_assign expr .)
    ELSE            reduce using rule 140 (assign -> assign cmplx_assign expr .)
    WHILE           reduce using rule 140 (assign -> assign cmplx_assign expr .)
    WITH            reduce using rule 140 (assign -> assign cmplx_assign expr .)
    DO              reduce using rule 140 (assign -> assign cmplx_assign expr .)
    FOR             reduce using rule 140 (assign -> assign cmplx_assign expr .)
    RETURN          reduce using rule 140 (assign -> assign cmplx_assign expr .)
    YIELD           reduce using rule 140 (assign -> assign cmplx_assign expr .)
    BREAK           reduce using rule 140 (assign -> assign cmplx_assign expr .)
    CONTINUE        reduce using rule 140 (assign -> assign cmplx_assign expr .)
    THROW           reduce using rule 140 (assign -> assign cmplx_assign expr .)
    TRY             reduce using rule 140 (assign -> assign cmplx_assign expr .)
    CATCH           reduce using rule 140 (assign -> assign cmplx_assign expr .)
    FINALLY         reduce using rule 140 (assign -> assign cmplx_assign expr .)
    SWITCH          reduce using rule 140 (assign -> assign cmplx_assign expr .)
    NATIVE          reduce using rule 140 (assign -> assign cmplx_assign expr .)
    IMPORT          reduce using rule 140 (assign -> assign cmplx_assign expr .)
    EXPORT          reduce using rule 140 (assign -> assign cmplx_assign expr .)
    NUMBER          reduce using rule 140 (assign -> assign cmplx_assign expr .)
    DELETE          reduce using rule 140 (assign -> assign cmplx_assign expr .)
    STRINGLIT       reduce using rule 140 (assign -> assign cmplx_assign expr .)
    ID              reduce using rule 140 (assign -> assign cmplx_assign expr .)
    GET             reduce using rule 140 (assign -> assign cmplx_assign expr .)
    SET             reduce using rule 140 (assign -> assign cmplx_assign expr .)
    LPAREN          reduce using rule 140 (assign -> assign cmplx_assign expr .)
    NOT             reduce using rule 140 (assign -> assign cmplx_assign expr .)
    BITINV          reduce using rule 140 (assign -> assign cmplx_assign expr .)
    NEW             reduce using rule 140 (assign -> assign cmplx_assign expr .)
    TYPEOF          reduce using rule 140 (assign -> assign cmplx_assign expr .)
    REGEXPR         reduce using rule 140 (assign -> assign cmplx_assign expr .)
    GLOBAL          reduce using rule 140 (assign -> assign cmplx_assign expr .)
    VAR             reduce using rule 140 (assign -> assign cmplx_assign expr .)
    STATIC          reduce using rule 140 (assign -> assign cmplx_assign expr .)
    LBRACKET        reduce using rule 140 (assign -> assign cmplx_assign expr .)
    $end            reduce using rule 140 (assign -> assign cmplx_assign expr .)
    RBRACKET        reduce using rule 140 (assign -> assign cmplx_assign expr .)
    CASE            reduce using rule 140 (assign -> assign cmplx_assign expr .)
    DEFAULT         reduce using rule 140 (assign -> assign cmplx_assign expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    TLTHAN          shift and go to state 21

  ! ASSIGNPLUS      [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! ASSIGNBOR       [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! ASSIGNBAND      [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! ASSIGNLSHIFT    [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! ASSIGNRSHIFT    [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! ASSIGNRRSHIFT   [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! ASSIGNLLSHIFT   [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! ASSIGN          [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! LSBRACKET       [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! MINUS           [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! INC             [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! DEC             [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! TLTHAN          [ reduce using rule 140 (assign -> assign cmplx_assign expr .) ]
  ! LPAREN          [ reduce using rule 194 (template_ref_opt -> .) ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref_opt               shift and go to state 108
    template_ref                   shift and go to state 111
    func_call                      shift and go to state 132

state 423

    (343) exports_list -> exports_list COMMA export_spec .

    RBRACKET        reduce using rule 343 (exports_list -> exports_list COMMA export_spec .)
    COMMA           reduce using rule 343 (exports_list -> exports_list COMMA export_spec .)


state 424

    (341) export_clause -> LBRACKET exports_list COMMA RBRACKET .

    SEMI            reduce using rule 341 (export_clause -> LBRACKET exports_list COMMA RBRACKET .)
    FROM            reduce using rule 341 (export_clause -> LBRACKET exports_list COMMA RBRACKET .)


state 425

    (345) export_spec -> ID ID ID .

    RBRACKET        reduce using rule 345 (export_spec -> ID ID ID .)
    COMMA           reduce using rule 345 (export_spec -> ID ID ID .)


state 426

    (206) function -> FUNCTION id template_opt push_scope . LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET

    LPAREN          shift and go to state 475


state 427

    (46) import_list -> import_list COMMA import_spec .

    RBRACKET        reduce using rule 46 (import_list -> import_list COMMA import_spec .)
    COMMA           reduce using rule 46 (import_list -> import_list COMMA import_spec .)


state 428

    (48) import_spec -> ID ID import_bind .

    RBRACKET        reduce using rule 48 (import_spec -> ID ID import_bind .)
    COMMA           reduce using rule 48 (import_spec -> ID ID import_bind .)


state 429

    (99) var_decl -> var_decl COMMA id ASSIGN expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 99 (var_decl -> var_decl COMMA id ASSIGN expr .)
    ASSIGN          reduce using rule 99 (var_decl -> var_decl COMMA id ASSIGN expr .)
    COMMA           reduce using rule 99 (var_decl -> var_decl COMMA id ASSIGN expr .)
    OF              reduce using rule 99 (var_decl -> var_decl COMMA id ASSIGN expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! IN              [ reduce using rule 99 (var_decl -> var_decl COMMA id ASSIGN expr .) ]
  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGN          [ shift and go to state 116 ]

    lsbracket_restrict             shift and go to state 105
    cmplx_assign                   shift and go to state 92
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    lthan_restrict                 shift and go to state 11
    func_call                      shift and go to state 132

state 430

    (347) catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .

    RBRACKET        reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    SEMI            reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    FUNCTION        reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    CLASS           reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    TYPED           reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    WHILE           reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    WITH            reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    DO              reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    YIELD           reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    THROW           reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    TRY             reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    CATCH           reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    FINALLY         reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    SWITCH          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    NATIVE          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    IMPORT          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    EXPORT          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    DELETE          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    GET             reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    SET             reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    BITINV          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    TYPEOF          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    REGEXPR         reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    GLOBAL          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    VAR             reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    STATIC          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    TLTHAN          reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    CASE            reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    DEFAULT         reduce using rule 347 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)


state 431

    (206) function -> FUNCTION id template_opt push_scope LPAREN . funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (204) funcref -> FUNCTION id template_opt push_scope LPAREN . funcdeflist RPAREN func_type_opt
    (197) funcdeflist -> . var_decl_no_list
    (198) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (199) funcdeflist -> .
    (93) var_decl_no_list -> . var_type
    (94) var_decl_no_list -> . type_modifiers var_decl_no_list
    (95) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    RPAREN          reduce using rule 199 (funcdeflist -> .)
    COMMA           reduce using rule 199 (funcdeflist -> .)
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    var_decl_no_list               shift and go to state 476
    id_var_type                    shift and go to state 211
    funcdeflist                    shift and go to state 477
    id                             shift and go to state 208
    var_type                       shift and go to state 478
    type_modifiers                 shift and go to state 479

state 432

    (215) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN . funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN . RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (197) funcdeflist -> . var_decl_no_list
    (198) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (199) funcdeflist -> .
    (93) var_decl_no_list -> . var_type
    (94) var_decl_no_list -> . type_modifiers var_decl_no_list
    (95) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 481
    COMMA           reduce using rule 199 (funcdeflist -> .)
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

  ! RPAREN          [ reduce using rule 199 (funcdeflist -> .) ]

    var_decl_no_list               shift and go to state 476
    funcdeflist                    shift and go to state 480
    id_var_type                    shift and go to state 211
    id                             shift and go to state 208
    type_modifiers                 shift and go to state 479
    var_type                       shift and go to state 478

state 433

    (223) obj_lit_list -> id_str_or_num COLON expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 223 (obj_lit_list -> id_str_or_num COLON expr .)
    RBRACKET        reduce using rule 223 (obj_lit_list -> id_str_or_num COLON expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! COMMA           [ shift and go to state 107 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref_opt               shift and go to state 108
    template_ref                   shift and go to state 111
    func_call                      shift and go to state 132

state 434

    (224) obj_lit_list -> obj_lit_list COMMA id_str_or_num . COLON expr

    COLON           shift and go to state 482


state 435

    (145) typed_class_tail -> typed_inherit_opt . LBRACKET typed_class_body_opt RBRACKET

    LBRACKET        shift and go to state 483


state 436

    (152) typed_inherit_opt -> EXTENDS . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 484

state 437

    (144) typed_class -> TYPED CLASS id template_opt typed_class_tail .

    SEMI            reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    FUNCTION        reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    CLASS           reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    TYPED           reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    IF              reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    ELSE            reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    WHILE           reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    WITH            reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    DO              reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    FOR             reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    RETURN          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    YIELD           reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    BREAK           reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    CONTINUE        reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    THROW           reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    TRY             reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    CATCH           reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    FINALLY         reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    SWITCH          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    NATIVE          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    IMPORT          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    EXPORT          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    NUMBER          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    DELETE          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    STRINGLIT       reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    ID              reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    GET             reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    SET             reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    LSBRACKET       reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    LPAREN          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    MINUS           reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    NOT             reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    BITINV          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    NEW             reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    INC             reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    DEC             reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    TYPEOF          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    REGEXPR         reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    GLOBAL          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    VAR             reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    STATIC          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    TLTHAN          reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    LBRACKET        reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    RBRACKET        reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    $end            reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    CASE            reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)
    DEFAULT         reduce using rule 144 (typed_class -> TYPED CLASS id template_opt typed_class_tail .)


state 438

    (299) for_var_decl -> id ASSIGN expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 299 (for_var_decl -> id ASSIGN expr .)
    OF              reduce using rule 299 (for_var_decl -> id ASSIGN expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! IN              [ reduce using rule 299 (for_var_decl -> id ASSIGN expr .) ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref_opt               shift and go to state 108
    template_ref                   shift and go to state 111
    func_call                      shift and go to state 132

state 439

    (306) for -> FOR LPAREN for_decl RPAREN LBRACKET . statementlist_opt RBRACKET
    (207) lbracket_restrict -> LBRACKET .
    (314) statementlist_opt -> . statementlist
    (315) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 207 (lbracket_restrict -> LBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for GET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for SET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! RBRACKET        [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! GET             [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! SET             [ reduce using rule 207 (lbracket_restrict -> LBRACKET .) ]
  ! RBRACKET        [ reduce using rule 315 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 485
    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    try                            shift and go to state 42
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 276

state 440

    (305) for -> FOR LPAREN for_decl RPAREN statement_nonctrl .

    SEMI            reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    FUNCTION        reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    CLASS           reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    TYPED           reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    IF              reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    ELSE            reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    WHILE           reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    WITH            reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    DO              reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    FOR             reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    RETURN          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    YIELD           reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    BREAK           reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    CONTINUE        reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    THROW           reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    TRY             reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    CATCH           reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    FINALLY         reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    SWITCH          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    NATIVE          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    IMPORT          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    EXPORT          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    NUMBER          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    DELETE          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    STRINGLIT       reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    ID              reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    GET             reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    SET             reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    LSBRACKET       reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    LPAREN          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    MINUS           reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    NOT             reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    BITINV          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    NEW             reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    INC             reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    DEC             reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    TYPEOF          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    REGEXPR         reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    GLOBAL          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    VAR             reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    STATIC          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    TLTHAN          reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    LBRACKET        reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    RBRACKET        reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    CASE            reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    $end            reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    DEFAULT         reduce using rule 305 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)


state 441

    (304) for_decl -> for_var_decl in_or_of expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    RPAREN          reduce using rule 304 (for_decl -> for_var_decl in_or_of expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

    cmplx_assign                   shift and go to state 92
    template_ref                   shift and go to state 111
    lsbracket_restrict             shift and go to state 105
    template_ref_opt               shift and go to state 108
    lthan_restrict                 shift and go to state 11
    func_call                      shift and go to state 132

state 442

    (295) expr_opt -> expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    RPAREN          reduce using rule 295 (expr_opt -> expr .)
    SEMI            reduce using rule 295 (expr_opt -> expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    COMMA           shift and go to state 107
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref                   shift and go to state 111
    template_ref_opt               shift and go to state 108
    func_call                      shift and go to state 132

state 443

    (303) for_decl -> for_var_decl SEMI expr_opt . SEMI expr_opt

    SEMI            shift and go to state 486


state 444

    (205) func_native -> NATIVE push_scope FUNCTION id template_opt . LPAREN funcdeflist RPAREN func_type_opt

    LPAREN          shift and go to state 487


state 445

    (312) while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .

    SEMI            reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    CLASS           reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    TYPED           reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    WHILE           reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    FINALLY         reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    IMPORT          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    EXPORT          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    GET             reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    SET             reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    STATIC          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 312 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)


state 446

    (250) expr -> expr cmplx_assign expr COLON var_type SEMI .

    COLON           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RSHIFT          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LSHIFT          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LLSHIFT         reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RRSHIFT         reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    COND_DOT        reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    DOT             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LAND            reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LOR             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    BOR             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    INSTANCEOF      reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    BXOR            reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    BAND            reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    EQUAL           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    EQUAL_STRICT    reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    NOTEQUAL_STRICT reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    GTHAN           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    GTHANEQ         reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LTHAN           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    MOD             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LTHANEQ         reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    NOTEQUAL        reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    PLUS            reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    MINUS           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    DIVIDE          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    TIMES           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    IN              reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    QEST            reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    COMMA           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    INC             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    DEC             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNPLUS      reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNMINUS     reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNDIVIDE    reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNTIMES     reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNBOR       reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNBAND      reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNBXOR      reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNLSHIFT    reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNRSHIFT    reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNRRSHIFT   reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNLLSHIFT   reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGN          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LSBRACKET       reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    TLTHAN          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LPAREN          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    SEMI            reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RPAREN          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RSBRACKET       reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    FUNCTION        reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    CLASS           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    TYPED           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    IF              reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ELSE            reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    WHILE           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    WITH            reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    DO              reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    FOR             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RETURN          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    YIELD           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    BREAK           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    CONTINUE        reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    THROW           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    TRY             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    CATCH           reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    FINALLY         reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    SWITCH          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    NATIVE          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    IMPORT          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    EXPORT          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    NUMBER          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    DELETE          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    STRINGLIT       reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ID              reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    GET             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    SET             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    NOT             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    BITINV          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    NEW             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    TYPEOF          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    REGEXPR         reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    GLOBAL          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    VAR             reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    STATIC          reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LBRACKET        reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    $end            reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RBRACKET        reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    CASE            reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    DEFAULT         reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    OF              reduce using rule 250 (expr -> expr cmplx_assign expr COLON var_type SEMI .)


state 447

    (204) funcref -> FUNCTION id template_opt push_scope LPAREN . funcdeflist RPAREN func_type_opt
    (197) funcdeflist -> . var_decl_no_list
    (198) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (199) funcdeflist -> .
    (93) var_decl_no_list -> . var_type
    (94) var_decl_no_list -> . type_modifiers var_decl_no_list
    (95) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    RPAREN          reduce using rule 199 (funcdeflist -> .)
    COMMA           reduce using rule 199 (funcdeflist -> .)
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id_var_type                    shift and go to state 211
    type_modifiers                 shift and go to state 479
    var_decl_no_list               shift and go to state 476
    var_type                       shift and go to state 478
    id                             shift and go to state 208
    funcdeflist                    shift and go to state 488

state 448

    (74) templatedeflist -> templatedeflist COMMA var_type .
    (75) templatedeflist -> templatedeflist COMMA var_type . ASSIGN var_type
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 74 (templatedeflist -> templatedeflist COMMA var_type .)
    TGTHAN          reduce using rule 74 (templatedeflist -> templatedeflist COMMA var_type .)
    ASSIGN          shift and go to state 489
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 11
    id                             shift and go to state 208
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 449

    (73) templatedeflist -> var_type ASSIGN var_type .
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 73 (templatedeflist -> var_type ASSIGN var_type .)
    TGTHAN          reduce using rule 73 (templatedeflist -> var_type ASSIGN var_type .)
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 11
    id                             shift and go to state 208
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 450

    (166) class_element_list -> class_element .

    STATIC          reduce using rule 166 (class_element_list -> class_element .)
    GET             reduce using rule 166 (class_element_list -> class_element .)
    SET             reduce using rule 166 (class_element_list -> class_element .)
    INT             reduce using rule 166 (class_element_list -> class_element .)
    SHORT           reduce using rule 166 (class_element_list -> class_element .)
    FLOAT           reduce using rule 166 (class_element_list -> class_element .)
    DOUBLE          reduce using rule 166 (class_element_list -> class_element .)
    CHAR            reduce using rule 166 (class_element_list -> class_element .)
    BYTE            reduce using rule 166 (class_element_list -> class_element .)
    ID              reduce using rule 166 (class_element_list -> class_element .)
    RBRACKET        reduce using rule 166 (class_element_list -> class_element .)


state 451

    (156) class_tail -> class_heritage_opt LBRACKET class_body_opt . RBRACKET

    RBRACKET        shift and go to state 490


state 452

    (168) class_element -> STATIC . method_def
    (175) method_def -> . method
    (176) method_def -> . GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (177) method_def -> . SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (172) method -> . id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (171) id_right -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    GET             shift and go to state 465
    SET             shift and go to state 459
    ID              shift and go to state 38

    id                             shift and go to state 491
    method_def                     shift and go to state 492
    method                         shift and go to state 453
    id_right                       shift and go to state 461

state 453

    (175) method_def -> method .

    STATIC          reduce using rule 175 (method_def -> method .)
    GET             reduce using rule 175 (method_def -> method .)
    SET             reduce using rule 175 (method_def -> method .)
    INT             reduce using rule 175 (method_def -> method .)
    SHORT           reduce using rule 175 (method_def -> method .)
    FLOAT           reduce using rule 175 (method_def -> method .)
    DOUBLE          reduce using rule 175 (method_def -> method .)
    CHAR            reduce using rule 175 (method_def -> method .)
    BYTE            reduce using rule 175 (method_def -> method .)
    ID              reduce using rule 175 (method_def -> method .)
    RBRACKET        reduce using rule 175 (method_def -> method .)
    GLOBAL          reduce using rule 175 (method_def -> method .)
    VAR             reduce using rule 175 (method_def -> method .)


state 454

    (180) var_element -> SHORT .

    ID              reduce using rule 180 (var_element -> SHORT .)
    GET             reduce using rule 180 (var_element -> SHORT .)
    SET             reduce using rule 180 (var_element -> SHORT .)


state 455

    (179) var_element -> INT .

    ID              reduce using rule 179 (var_element -> INT .)
    GET             reduce using rule 179 (var_element -> INT .)
    SET             reduce using rule 179 (var_element -> INT .)


state 456

    (181) var_element -> FLOAT .

    ID              reduce using rule 181 (var_element -> FLOAT .)
    GET             reduce using rule 181 (var_element -> FLOAT .)
    SET             reduce using rule 181 (var_element -> FLOAT .)


state 457

    (170) class_element -> class_property . SEMI
    (188) class_property -> class_property . ASSIGN expr
    (189) class_property -> class_property . COMMA id
    (190) class_property -> class_property . COMMA id ASSIGN expr

    SEMI            shift and go to state 494
    ASSIGN          shift and go to state 495
    COMMA           shift and go to state 493


state 458

    (169) class_element -> method_def .

    STATIC          reduce using rule 169 (class_element -> method_def .)
    GET             reduce using rule 169 (class_element -> method_def .)
    SET             reduce using rule 169 (class_element -> method_def .)
    INT             reduce using rule 169 (class_element -> method_def .)
    SHORT           reduce using rule 169 (class_element -> method_def .)
    FLOAT           reduce using rule 169 (class_element -> method_def .)
    DOUBLE          reduce using rule 169 (class_element -> method_def .)
    CHAR            reduce using rule 169 (class_element -> method_def .)
    BYTE            reduce using rule 169 (class_element -> method_def .)
    ID              reduce using rule 169 (class_element -> method_def .)
    RBRACKET        reduce using rule 169 (class_element -> method_def .)
    GLOBAL          reduce using rule 169 (class_element -> method_def .)
    VAR             reduce using rule 169 (class_element -> method_def .)


state 459

    (177) method_def -> SET . getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (357) id -> SET .
    (173) getset_id -> . id
    (174) getset_id -> . NUMBER
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
    TLTHAN          reduce using rule 357 (id -> SET .)
    LPAREN          reduce using rule 357 (id -> SET .)
    NUMBER          shift and go to state 496
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

  ! ID              [ reduce using rule 357 (id -> SET .) ]
  ! GET             [ reduce using rule 357 (id -> SET .) ]
  ! SET             [ reduce using rule 357 (id -> SET .) ]

    getset_id                      shift and go to state 497
    id                             shift and go to state 498

state 460

    (171) id_right -> id .
    (178) var_element -> id .
    (185) var_element -> id . template_ref
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 171 (id_right -> id .)
    ID              reduce using rule 178 (var_element -> id .)
    GET             reduce using rule 178 (var_element -> id .)
    SET             reduce using rule 178 (var_element -> id .)
    TLTHAN          shift and go to state 21

    template_ref                   shift and go to state 499
    lthan_restrict                 shift and go to state 11

state 461

    (172) method -> id_right . LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET

    LPAREN          shift and go to state 500


state 462

    (182) var_element -> DOUBLE .

    ID              reduce using rule 182 (var_element -> DOUBLE .)
    GET             reduce using rule 182 (var_element -> DOUBLE .)
    SET             reduce using rule 182 (var_element -> DOUBLE .)


state 463

    (183) var_element -> CHAR .

    ID              reduce using rule 183 (var_element -> CHAR .)
    GET             reduce using rule 183 (var_element -> CHAR .)
    SET             reduce using rule 183 (var_element -> CHAR .)


state 464

    (164) class_body_opt -> class_element_list .
    (167) class_element_list -> class_element_list . class_element
    (168) class_element -> . STATIC method_def
    (169) class_element -> . method_def
    (170) class_element -> . class_property SEMI
    (175) method_def -> . method
    (176) method_def -> . GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (177) method_def -> . SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (187) class_property -> . var_type2 id
    (188) class_property -> . class_property ASSIGN expr
    (189) class_property -> . class_property COMMA id
    (190) class_property -> . class_property COMMA id ASSIGN expr
    (172) method -> . id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (186) var_type2 -> . var_element
    (171) id_right -> . id
    (178) var_element -> . id
    (179) var_element -> . INT
    (180) var_element -> . SHORT
    (181) var_element -> . FLOAT
    (182) var_element -> . DOUBLE
    (183) var_element -> . CHAR
    (184) var_element -> . BYTE
    (185) var_element -> . id template_ref
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    RBRACKET        reduce using rule 164 (class_body_opt -> class_element_list .)
    STATIC          shift and go to state 452
    GET             shift and go to state 465
    SET             shift and go to state 459
    INT             shift and go to state 455
    SHORT           shift and go to state 454
    FLOAT           shift and go to state 456
    DOUBLE          shift and go to state 462
    CHAR            shift and go to state 463
    BYTE            shift and go to state 468
    ID              shift and go to state 38

    class_element                  shift and go to state 501
    var_element                    shift and go to state 466
    method                         shift and go to state 453
    class_property                 shift and go to state 457
    method_def                     shift and go to state 458
    id_right                       shift and go to state 461
    id                             shift and go to state 460
    var_type2                      shift and go to state 467

state 465

    (176) method_def -> GET . getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (356) id -> GET .
    (173) getset_id -> . id
    (174) getset_id -> . NUMBER
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
    TLTHAN          reduce using rule 356 (id -> GET .)
    LPAREN          reduce using rule 356 (id -> GET .)
    NUMBER          shift and go to state 496
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

  ! ID              [ reduce using rule 356 (id -> GET .) ]
  ! GET             [ reduce using rule 356 (id -> GET .) ]
  ! SET             [ reduce using rule 356 (id -> GET .) ]

    getset_id                      shift and go to state 502
    id                             shift and go to state 498

state 466

    (186) var_type2 -> var_element .

    ID              reduce using rule 186 (var_type2 -> var_element .)
    GET             reduce using rule 186 (var_type2 -> var_element .)
    SET             reduce using rule 186 (var_type2 -> var_element .)


state 467

    (187) class_property -> var_type2 . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 503

state 468

    (184) var_element -> BYTE .

    ID              reduce using rule 184 (var_element -> BYTE .)
    GET             reduce using rule 184 (var_element -> BYTE .)
    SET             reduce using rule 184 (var_element -> BYTE .)


state 469

    (158) class_parent_id -> class_parent_id DOT . var_type
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 208
    var_type                       shift and go to state 504
    id_var_type                    shift and go to state 211

state 470

    (160) class_list -> class_list COMMA . class_parent_id
    (157) class_parent_id -> . var_type
    (158) class_parent_id -> . class_parent_id DOT var_type
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    var_type                       shift and go to state 414
    class_parent_id                shift and go to state 505
    id                             shift and go to state 208
    id_var_type                    shift and go to state 211

state 471

    (316) case_clause -> CASE expr COLON . statementlist_opt
    (314) statementlist_opt -> . statementlist
    (315) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for CASE resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CASE            reduce using rule 5 (statementlist -> .)
    RBRACKET        reduce using rule 5 (statementlist -> .)
    DEFAULT         reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! CASE            [ reduce using rule 315 (statementlist_opt -> .) ]
  ! RBRACKET        [ reduce using rule 315 (statementlist_opt -> .) ]
  ! DEFAULT         [ reduce using rule 315 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 506
    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    try                            shift and go to state 42
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 276

state 472

    (313) default_case -> DEFAULT COLON . statementlist
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CASE            reduce using rule 5 (statementlist -> .)
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    try                            shift and go to state 42
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 507

state 473

    (322) case_block -> case_clauses_opt default_case case_clauses_opt .

    RBRACKET        reduce using rule 322 (case_block -> case_clauses_opt default_case case_clauses_opt .)


state 474

    (319) case_clauses_opt -> case_clauses .
    (318) case_clauses -> case_clauses . case_clause
    (316) case_clause -> . CASE expr COLON statementlist_opt

    RBRACKET        reduce using rule 319 (case_clauses_opt -> case_clauses .)
    CASE            shift and go to state 363

    case_clause                    shift and go to state 417

state 475

    (206) function -> FUNCTION id template_opt push_scope LPAREN . funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (197) funcdeflist -> . var_decl_no_list
    (198) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (199) funcdeflist -> .
    (93) var_decl_no_list -> . var_type
    (94) var_decl_no_list -> . type_modifiers var_decl_no_list
    (95) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    RPAREN          reduce using rule 199 (funcdeflist -> .)
    COMMA           reduce using rule 199 (funcdeflist -> .)
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    var_decl_no_list               shift and go to state 476
    id_var_type                    shift and go to state 211
    funcdeflist                    shift and go to state 508
    id                             shift and go to state 208
    var_type                       shift and go to state 478
    type_modifiers                 shift and go to state 479

state 476

    (197) funcdeflist -> var_decl_no_list .
    (95) var_decl_no_list -> var_decl_no_list . ASSIGN expr

    RPAREN          reduce using rule 197 (funcdeflist -> var_decl_no_list .)
    COMMA           reduce using rule 197 (funcdeflist -> var_decl_no_list .)
    ASSIGN          shift and go to state 509


state 477

    (206) function -> FUNCTION id template_opt push_scope LPAREN funcdeflist . RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (204) funcref -> FUNCTION id template_opt push_scope LPAREN funcdeflist . RPAREN func_type_opt
    (198) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 511
    COMMA           shift and go to state 510


state 478

    (93) var_decl_no_list -> var_type .
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    ASSIGN          reduce using rule 93 (var_decl_no_list -> var_type .)
    RPAREN          reduce using rule 93 (var_decl_no_list -> var_type .)
    COMMA           reduce using rule 93 (var_decl_no_list -> var_type .)
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 11
    id                             shift and go to state 208
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 479

    (94) var_decl_no_list -> type_modifiers . var_decl_no_list
    (77) type_modifiers -> type_modifiers . UNSIGNED
    (78) type_modifiers -> type_modifiers . SIGNED
    (79) type_modifiers -> type_modifiers . CONST
    (93) var_decl_no_list -> . var_type
    (94) var_decl_no_list -> . type_modifiers var_decl_no_list
    (95) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    UNSIGNED        shift and go to state 217
    SIGNED          shift and go to state 218
    CONST           shift and go to state 214
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 208
    var_decl_no_list               shift and go to state 512
    var_type                       shift and go to state 478
    type_modifiers                 shift and go to state 479
    id_var_type                    shift and go to state 211

state 480

    (215) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist . RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (198) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 513
    COMMA           shift and go to state 510


state 481

    (216) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN . colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (211) colon_opt -> . COLON
    (212) colon_opt -> .

    COLON           shift and go to state 514
    INT             reduce using rule 212 (colon_opt -> .)
    SHORT           reduce using rule 212 (colon_opt -> .)
    FLOAT           reduce using rule 212 (colon_opt -> .)
    DOUBLE          reduce using rule 212 (colon_opt -> .)
    CHAR            reduce using rule 212 (colon_opt -> .)
    BYTE            reduce using rule 212 (colon_opt -> .)
    INFERRED        reduce using rule 212 (colon_opt -> .)
    ID              reduce using rule 212 (colon_opt -> .)
    GET             reduce using rule 212 (colon_opt -> .)
    SET             reduce using rule 212 (colon_opt -> .)
    LBRACKET        reduce using rule 212 (colon_opt -> .)

    colon_opt                      shift and go to state 515

state 482

    (224) obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 516
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 483

    (145) typed_class_tail -> typed_inherit_opt LBRACKET . typed_class_body_opt RBRACKET
    (146) typed_class_body_opt -> . typed_class_list
    (147) typed_class_body_opt -> .
    (148) typed_class_list -> . typed_class_element
    (149) typed_class_list -> . typed_class_list typed_class_element
    (150) typed_class_element -> . class_element
    (151) typed_class_element -> . var_decl_with_arr SEMI
    (168) class_element -> . STATIC method_def
    (169) class_element -> . method_def
    (170) class_element -> . class_property SEMI
    (102) var_decl_with_arr -> . type_modifiers var_type ident_arr
    (103) var_decl_with_arr -> . var_decl_with_arr ASSIGN expr
    (104) var_decl_with_arr -> . var_decl_with_arr COMMA ident_arr
    (105) var_decl_with_arr -> . var_decl_with_arr COMMA ident_arr ASSIGN expr
    (175) method_def -> . method
    (176) method_def -> . GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (177) method_def -> . SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (187) class_property -> . var_type2 id
    (188) class_property -> . class_property ASSIGN expr
    (189) class_property -> . class_property COMMA id
    (190) class_property -> . class_property COMMA id ASSIGN expr
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (172) method -> . id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (186) var_type2 -> . var_element
    (171) id_right -> . id
    (178) var_element -> . id
    (179) var_element -> . INT
    (180) var_element -> . SHORT
    (181) var_element -> . FLOAT
    (182) var_element -> . DOUBLE
    (183) var_element -> . CHAR
    (184) var_element -> . BYTE
    (185) var_element -> . id template_ref
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    RBRACKET        reduce using rule 147 (typed_class_body_opt -> .)
    STATIC          shift and go to state 519
    GET             shift and go to state 465
    SET             shift and go to state 459
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    INT             shift and go to state 455
    SHORT           shift and go to state 454
    FLOAT           shift and go to state 456
    DOUBLE          shift and go to state 462
    CHAR            shift and go to state 463
    BYTE            shift and go to state 468
    ID              shift and go to state 38

    class_element                  shift and go to state 517
    var_element                    shift and go to state 466
    typed_class_list               shift and go to state 520
    typed_class_element            shift and go to state 518
    method                         shift and go to state 453
    class_property                 shift and go to state 457
    method_def                     shift and go to state 458
    id                             shift and go to state 460
    id_right                       shift and go to state 461
    typed_class_body_opt           shift and go to state 522
    var_decl_with_arr              shift and go to state 523
    type_modifiers                 shift and go to state 521
    var_type2                      shift and go to state 467

state 484

    (152) typed_inherit_opt -> EXTENDS id .

    LBRACKET        reduce using rule 152 (typed_inherit_opt -> EXTENDS id .)


state 485

    (306) for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 524


state 486

    (303) for_decl -> for_var_decl SEMI expr_opt SEMI . expr_opt
    (295) expr_opt -> . expr
    (296) expr_opt -> .
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    RPAREN          reduce using rule 296 (expr_opt -> .)
    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 442
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    lthan_restrict                 shift and go to state 11
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    expr_opt                       shift and go to state 525
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 487

    (205) func_native -> NATIVE push_scope FUNCTION id template_opt LPAREN . funcdeflist RPAREN func_type_opt
    (197) funcdeflist -> . var_decl_no_list
    (198) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (199) funcdeflist -> .
    (93) var_decl_no_list -> . var_type
    (94) var_decl_no_list -> . type_modifiers var_decl_no_list
    (95) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    RPAREN          reduce using rule 199 (funcdeflist -> .)
    COMMA           reduce using rule 199 (funcdeflist -> .)
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id_var_type                    shift and go to state 211
    type_modifiers                 shift and go to state 479
    var_decl_no_list               shift and go to state 476
    var_type                       shift and go to state 478
    id                             shift and go to state 208
    funcdeflist                    shift and go to state 526

state 488

    (204) funcref -> FUNCTION id template_opt push_scope LPAREN funcdeflist . RPAREN func_type_opt
    (198) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 527
    COMMA           shift and go to state 510


state 489

    (75) templatedeflist -> templatedeflist COMMA var_type ASSIGN . var_type
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 208
    id_var_type                    shift and go to state 211
    var_type                       shift and go to state 528

state 490

    (156) class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .

    SEMI            reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    FUNCTION        reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    CLASS           reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    TYPED           reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    IF              reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    ELSE            reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    WHILE           reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    WITH            reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    DO              reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    FOR             reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    RETURN          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    YIELD           reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    BREAK           reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    CONTINUE        reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    THROW           reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    TRY             reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    CATCH           reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    FINALLY         reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    SWITCH          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    NATIVE          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    IMPORT          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    EXPORT          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    NUMBER          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    DELETE          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    STRINGLIT       reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    ID              reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    GET             reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    SET             reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    LSBRACKET       reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    LPAREN          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    MINUS           reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    NOT             reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    BITINV          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    NEW             reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    INC             reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    DEC             reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    TYPEOF          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    REGEXPR         reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    GLOBAL          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    VAR             reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    STATIC          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    TLTHAN          reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    LBRACKET        reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    $end            reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    RBRACKET        reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    CASE            reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    DEFAULT         reduce using rule 156 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)


state 491

    (171) id_right -> id .

    LPAREN          reduce using rule 171 (id_right -> id .)


state 492

    (168) class_element -> STATIC method_def .

    STATIC          reduce using rule 168 (class_element -> STATIC method_def .)
    GET             reduce using rule 168 (class_element -> STATIC method_def .)
    SET             reduce using rule 168 (class_element -> STATIC method_def .)
    INT             reduce using rule 168 (class_element -> STATIC method_def .)
    SHORT           reduce using rule 168 (class_element -> STATIC method_def .)
    FLOAT           reduce using rule 168 (class_element -> STATIC method_def .)
    DOUBLE          reduce using rule 168 (class_element -> STATIC method_def .)
    CHAR            reduce using rule 168 (class_element -> STATIC method_def .)
    BYTE            reduce using rule 168 (class_element -> STATIC method_def .)
    ID              reduce using rule 168 (class_element -> STATIC method_def .)
    RBRACKET        reduce using rule 168 (class_element -> STATIC method_def .)
    GLOBAL          reduce using rule 168 (class_element -> STATIC method_def .)
    VAR             reduce using rule 168 (class_element -> STATIC method_def .)


state 493

    (189) class_property -> class_property COMMA . id
    (190) class_property -> class_property COMMA . id ASSIGN expr
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 529

state 494

    (170) class_element -> class_property SEMI .

    STATIC          reduce using rule 170 (class_element -> class_property SEMI .)
    GET             reduce using rule 170 (class_element -> class_property SEMI .)
    SET             reduce using rule 170 (class_element -> class_property SEMI .)
    INT             reduce using rule 170 (class_element -> class_property SEMI .)
    SHORT           reduce using rule 170 (class_element -> class_property SEMI .)
    FLOAT           reduce using rule 170 (class_element -> class_property SEMI .)
    DOUBLE          reduce using rule 170 (class_element -> class_property SEMI .)
    CHAR            reduce using rule 170 (class_element -> class_property SEMI .)
    BYTE            reduce using rule 170 (class_element -> class_property SEMI .)
    ID              reduce using rule 170 (class_element -> class_property SEMI .)
    RBRACKET        reduce using rule 170 (class_element -> class_property SEMI .)
    GLOBAL          reduce using rule 170 (class_element -> class_property SEMI .)
    VAR             reduce using rule 170 (class_element -> class_property SEMI .)


state 495

    (188) class_property -> class_property ASSIGN . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 530
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lbracket_restrict              shift and go to state 50
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 496

    (174) getset_id -> NUMBER .

    LPAREN          reduce using rule 174 (getset_id -> NUMBER .)


state 497

    (177) method_def -> SET getset_id . LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET

    LPAREN          shift and go to state 531


state 498

    (173) getset_id -> id .

    LPAREN          reduce using rule 173 (getset_id -> id .)


state 499

    (185) var_element -> id template_ref .

    ID              reduce using rule 185 (var_element -> id template_ref .)
    GET             reduce using rule 185 (var_element -> id template_ref .)
    SET             reduce using rule 185 (var_element -> id template_ref .)


state 500

    (172) method -> id_right LPAREN . funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (197) funcdeflist -> . var_decl_no_list
    (198) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (199) funcdeflist -> .
    (93) var_decl_no_list -> . var_type
    (94) var_decl_no_list -> . type_modifiers var_decl_no_list
    (95) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    RPAREN          reduce using rule 199 (funcdeflist -> .)
    COMMA           reduce using rule 199 (funcdeflist -> .)
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 208
    var_decl_no_list               shift and go to state 476
    var_type                       shift and go to state 478
    type_modifiers                 shift and go to state 479
    id_var_type                    shift and go to state 211
    funcdeflist                    shift and go to state 532

state 501

    (167) class_element_list -> class_element_list class_element .

    STATIC          reduce using rule 167 (class_element_list -> class_element_list class_element .)
    GET             reduce using rule 167 (class_element_list -> class_element_list class_element .)
    SET             reduce using rule 167 (class_element_list -> class_element_list class_element .)
    INT             reduce using rule 167 (class_element_list -> class_element_list class_element .)
    SHORT           reduce using rule 167 (class_element_list -> class_element_list class_element .)
    FLOAT           reduce using rule 167 (class_element_list -> class_element_list class_element .)
    DOUBLE          reduce using rule 167 (class_element_list -> class_element_list class_element .)
    CHAR            reduce using rule 167 (class_element_list -> class_element_list class_element .)
    BYTE            reduce using rule 167 (class_element_list -> class_element_list class_element .)
    ID              reduce using rule 167 (class_element_list -> class_element_list class_element .)
    RBRACKET        reduce using rule 167 (class_element_list -> class_element_list class_element .)


state 502

    (176) method_def -> GET getset_id . LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET

    LPAREN          shift and go to state 533


state 503

    (187) class_property -> var_type2 id .

    SEMI            reduce using rule 187 (class_property -> var_type2 id .)
    ASSIGN          reduce using rule 187 (class_property -> var_type2 id .)
    COMMA           reduce using rule 187 (class_property -> var_type2 id .)


state 504

    (158) class_parent_id -> class_parent_id DOT var_type .
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    DOT             reduce using rule 158 (class_parent_id -> class_parent_id DOT var_type .)
    COMMA           reduce using rule 158 (class_parent_id -> class_parent_id DOT var_type .)
    LBRACKET        reduce using rule 158 (class_parent_id -> class_parent_id DOT var_type .)
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 11
    id                             shift and go to state 208
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 505

    (160) class_list -> class_list COMMA class_parent_id .
    (158) class_parent_id -> class_parent_id . DOT var_type

    COMMA           reduce using rule 160 (class_list -> class_list COMMA class_parent_id .)
    LBRACKET        reduce using rule 160 (class_list -> class_list COMMA class_parent_id .)
    DOT             shift and go to state 469


state 506

    (316) case_clause -> CASE expr COLON statementlist_opt .

    CASE            reduce using rule 316 (case_clause -> CASE expr COLON statementlist_opt .)
    RBRACKET        reduce using rule 316 (case_clause -> CASE expr COLON statementlist_opt .)
    DEFAULT         reduce using rule 316 (case_clause -> CASE expr COLON statementlist_opt .)


state 507

    (313) default_case -> DEFAULT COLON statementlist .
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    CASE            reduce using rule 313 (default_case -> DEFAULT COLON statementlist .)
    RBRACKET        reduce using rule 313 (default_case -> DEFAULT COLON statementlist .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 237
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 238
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    try                            shift and go to state 42
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86

state 508

    (206) function -> FUNCTION id template_opt push_scope LPAREN funcdeflist . RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (198) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 534
    COMMA           shift and go to state 510


state 509

    (95) var_decl_no_list -> var_decl_no_list ASSIGN . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 535
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 510

    (198) funcdeflist -> funcdeflist COMMA . var_decl_no_list
    (93) var_decl_no_list -> . var_type
    (94) var_decl_no_list -> . type_modifiers var_decl_no_list
    (95) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 208
    var_decl_no_list               shift and go to state 536
    var_type                       shift and go to state 478
    type_modifiers                 shift and go to state 479
    id_var_type                    shift and go to state 211

state 511

    (206) function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN . func_type_opt LBRACKET statementlist_opt RBRACKET
    (204) funcref -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN . func_type_opt
    (202) func_type_opt -> . COLON var_type_opt
    (203) func_type_opt -> .

    COLON           shift and go to state 537
    LBRACKET        reduce using rule 203 (func_type_opt -> .)
    SEMI            reduce using rule 203 (func_type_opt -> .)

    func_type_opt                  shift and go to state 538

state 512

    (94) var_decl_no_list -> type_modifiers var_decl_no_list .
    (95) var_decl_no_list -> var_decl_no_list . ASSIGN expr

  ! shift/reduce conflict for ASSIGN resolved as shift
    RPAREN          reduce using rule 94 (var_decl_no_list -> type_modifiers var_decl_no_list .)
    COMMA           reduce using rule 94 (var_decl_no_list -> type_modifiers var_decl_no_list .)
    ASSIGN          shift and go to state 509

  ! ASSIGN          [ reduce using rule 94 (var_decl_no_list -> type_modifiers var_decl_no_list .) ]


state 513

    (215) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN . colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (211) colon_opt -> . COLON
    (212) colon_opt -> .

    COLON           shift and go to state 514
    INT             reduce using rule 212 (colon_opt -> .)
    SHORT           reduce using rule 212 (colon_opt -> .)
    FLOAT           reduce using rule 212 (colon_opt -> .)
    DOUBLE          reduce using rule 212 (colon_opt -> .)
    CHAR            reduce using rule 212 (colon_opt -> .)
    BYTE            reduce using rule 212 (colon_opt -> .)
    INFERRED        reduce using rule 212 (colon_opt -> .)
    ID              reduce using rule 212 (colon_opt -> .)
    GET             reduce using rule 212 (colon_opt -> .)
    SET             reduce using rule 212 (colon_opt -> .)
    LBRACKET        reduce using rule 212 (colon_opt -> .)

    colon_opt                      shift and go to state 539

state 514

    (211) colon_opt -> COLON .

    INT             reduce using rule 211 (colon_opt -> COLON .)
    SHORT           reduce using rule 211 (colon_opt -> COLON .)
    FLOAT           reduce using rule 211 (colon_opt -> COLON .)
    DOUBLE          reduce using rule 211 (colon_opt -> COLON .)
    CHAR            reduce using rule 211 (colon_opt -> COLON .)
    BYTE            reduce using rule 211 (colon_opt -> COLON .)
    INFERRED        reduce using rule 211 (colon_opt -> COLON .)
    ID              reduce using rule 211 (colon_opt -> COLON .)
    GET             reduce using rule 211 (colon_opt -> COLON .)
    SET             reduce using rule 211 (colon_opt -> COLON .)
    LBRACKET        reduce using rule 211 (colon_opt -> COLON .)


state 515

    (216) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt . var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (209) var_type_opt -> . var_type
    (210) var_type_opt -> .
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    LBRACKET        reduce using rule 210 (var_type_opt -> .)
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id_var_type                    shift and go to state 211
    id                             shift and go to state 208
    var_type                       shift and go to state 541
    var_type_opt                   shift and go to state 540

state 516

    (224) obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 224 (obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON expr .)
    RBRACKET        reduce using rule 224 (obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    ASSIGN          shift and go to state 116
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! COMMA           [ shift and go to state 107 ]

    func_call                      shift and go to state 132
    template_ref                   shift and go to state 111
    lsbracket_restrict             shift and go to state 105
    template_ref_opt               shift and go to state 108
    lthan_restrict                 shift and go to state 11
    cmplx_assign                   shift and go to state 92

state 517

    (150) typed_class_element -> class_element .

    STATIC          reduce using rule 150 (typed_class_element -> class_element .)
    GET             reduce using rule 150 (typed_class_element -> class_element .)
    SET             reduce using rule 150 (typed_class_element -> class_element .)
    GLOBAL          reduce using rule 150 (typed_class_element -> class_element .)
    VAR             reduce using rule 150 (typed_class_element -> class_element .)
    INT             reduce using rule 150 (typed_class_element -> class_element .)
    SHORT           reduce using rule 150 (typed_class_element -> class_element .)
    FLOAT           reduce using rule 150 (typed_class_element -> class_element .)
    DOUBLE          reduce using rule 150 (typed_class_element -> class_element .)
    CHAR            reduce using rule 150 (typed_class_element -> class_element .)
    BYTE            reduce using rule 150 (typed_class_element -> class_element .)
    ID              reduce using rule 150 (typed_class_element -> class_element .)
    RBRACKET        reduce using rule 150 (typed_class_element -> class_element .)


state 518

    (148) typed_class_list -> typed_class_element .

    STATIC          reduce using rule 148 (typed_class_list -> typed_class_element .)
    GET             reduce using rule 148 (typed_class_list -> typed_class_element .)
    SET             reduce using rule 148 (typed_class_list -> typed_class_element .)
    GLOBAL          reduce using rule 148 (typed_class_list -> typed_class_element .)
    VAR             reduce using rule 148 (typed_class_list -> typed_class_element .)
    INT             reduce using rule 148 (typed_class_list -> typed_class_element .)
    SHORT           reduce using rule 148 (typed_class_list -> typed_class_element .)
    FLOAT           reduce using rule 148 (typed_class_list -> typed_class_element .)
    DOUBLE          reduce using rule 148 (typed_class_list -> typed_class_element .)
    CHAR            reduce using rule 148 (typed_class_list -> typed_class_element .)
    BYTE            reduce using rule 148 (typed_class_list -> typed_class_element .)
    ID              reduce using rule 148 (typed_class_list -> typed_class_element .)
    RBRACKET        reduce using rule 148 (typed_class_list -> typed_class_element .)


state 519

    (168) class_element -> STATIC . method_def
    (82) type_modifiers -> STATIC .
    (175) method_def -> . method
    (176) method_def -> . GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (177) method_def -> . SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (172) method -> . id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (171) id_right -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    UNSIGNED        reduce using rule 82 (type_modifiers -> STATIC .)
    SIGNED          reduce using rule 82 (type_modifiers -> STATIC .)
    CONST           reduce using rule 82 (type_modifiers -> STATIC .)
    INT             reduce using rule 82 (type_modifiers -> STATIC .)
    SHORT           reduce using rule 82 (type_modifiers -> STATIC .)
    FLOAT           reduce using rule 82 (type_modifiers -> STATIC .)
    DOUBLE          reduce using rule 82 (type_modifiers -> STATIC .)
    CHAR            reduce using rule 82 (type_modifiers -> STATIC .)
    BYTE            reduce using rule 82 (type_modifiers -> STATIC .)
    INFERRED        reduce using rule 82 (type_modifiers -> STATIC .)
    GET             shift and go to state 465
    SET             shift and go to state 459
    ID              shift and go to state 38

  ! ID              [ reduce using rule 82 (type_modifiers -> STATIC .) ]
  ! GET             [ reduce using rule 82 (type_modifiers -> STATIC .) ]
  ! SET             [ reduce using rule 82 (type_modifiers -> STATIC .) ]

    id                             shift and go to state 491
    method_def                     shift and go to state 492
    method                         shift and go to state 453
    id_right                       shift and go to state 461

state 520

    (146) typed_class_body_opt -> typed_class_list .
    (149) typed_class_list -> typed_class_list . typed_class_element
    (150) typed_class_element -> . class_element
    (151) typed_class_element -> . var_decl_with_arr SEMI
    (168) class_element -> . STATIC method_def
    (169) class_element -> . method_def
    (170) class_element -> . class_property SEMI
    (102) var_decl_with_arr -> . type_modifiers var_type ident_arr
    (103) var_decl_with_arr -> . var_decl_with_arr ASSIGN expr
    (104) var_decl_with_arr -> . var_decl_with_arr COMMA ident_arr
    (105) var_decl_with_arr -> . var_decl_with_arr COMMA ident_arr ASSIGN expr
    (175) method_def -> . method
    (176) method_def -> . GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (177) method_def -> . SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (187) class_property -> . var_type2 id
    (188) class_property -> . class_property ASSIGN expr
    (189) class_property -> . class_property COMMA id
    (190) class_property -> . class_property COMMA id ASSIGN expr
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (172) method -> . id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (186) var_type2 -> . var_element
    (171) id_right -> . id
    (178) var_element -> . id
    (179) var_element -> . INT
    (180) var_element -> . SHORT
    (181) var_element -> . FLOAT
    (182) var_element -> . DOUBLE
    (183) var_element -> . CHAR
    (184) var_element -> . BYTE
    (185) var_element -> . id template_ref
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    RBRACKET        reduce using rule 146 (typed_class_body_opt -> typed_class_list .)
    STATIC          shift and go to state 519
    GET             shift and go to state 465
    SET             shift and go to state 459
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    INT             shift and go to state 455
    SHORT           shift and go to state 454
    FLOAT           shift and go to state 456
    DOUBLE          shift and go to state 462
    CHAR            shift and go to state 463
    BYTE            shift and go to state 468
    ID              shift and go to state 38

    id                             shift and go to state 460
    class_element                  shift and go to state 517
    var_element                    shift and go to state 466
    typed_class_element            shift and go to state 542
    type_modifiers                 shift and go to state 521
    class_property                 shift and go to state 457
    method_def                     shift and go to state 458
    id_right                       shift and go to state 461
    method                         shift and go to state 453
    var_type2                      shift and go to state 467
    var_decl_with_arr              shift and go to state 523

state 521

    (102) var_decl_with_arr -> type_modifiers . var_type ident_arr
    (77) type_modifiers -> type_modifiers . UNSIGNED
    (78) type_modifiers -> type_modifiers . SIGNED
    (79) type_modifiers -> type_modifiers . CONST
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    UNSIGNED        shift and go to state 217
    SIGNED          shift and go to state 218
    CONST           shift and go to state 214
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 208
    var_type                       shift and go to state 543
    id_var_type                    shift and go to state 211

state 522

    (145) typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt . RBRACKET

    RBRACKET        shift and go to state 544


state 523

    (151) typed_class_element -> var_decl_with_arr . SEMI
    (103) var_decl_with_arr -> var_decl_with_arr . ASSIGN expr
    (104) var_decl_with_arr -> var_decl_with_arr . COMMA ident_arr
    (105) var_decl_with_arr -> var_decl_with_arr . COMMA ident_arr ASSIGN expr

    SEMI            shift and go to state 546
    ASSIGN          shift and go to state 547
    COMMA           shift and go to state 545


state 524

    (306) for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .

    SEMI            reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    CLASS           reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    TYPED           reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    WHILE           reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    FINALLY         reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    IMPORT          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    EXPORT          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    GET             reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    SET             reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    STATIC          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 306 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)


state 525

    (303) for_decl -> for_var_decl SEMI expr_opt SEMI expr_opt .

    RPAREN          reduce using rule 303 (for_decl -> for_var_decl SEMI expr_opt SEMI expr_opt .)


state 526

    (205) func_native -> NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist . RPAREN func_type_opt
    (198) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 548
    COMMA           shift and go to state 510


state 527

    (204) funcref -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN . func_type_opt
    (202) func_type_opt -> . COLON var_type_opt
    (203) func_type_opt -> .

    COLON           shift and go to state 537
    SEMI            reduce using rule 203 (func_type_opt -> .)

    func_type_opt                  shift and go to state 549

state 528

    (75) templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type .
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 75 (templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type .)
    TGTHAN          reduce using rule 75 (templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type .)
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 11
    id                             shift and go to state 208
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 529

    (189) class_property -> class_property COMMA id .
    (190) class_property -> class_property COMMA id . ASSIGN expr

    SEMI            reduce using rule 189 (class_property -> class_property COMMA id .)
    COMMA           reduce using rule 189 (class_property -> class_property COMMA id .)
    ASSIGN          shift and go to state 550

  ! ASSIGN          [ reduce using rule 189 (class_property -> class_property COMMA id .) ]


state 530

    (188) class_property -> class_property ASSIGN expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 188 (class_property -> class_property ASSIGN expr .)
    ASSIGN          reduce using rule 188 (class_property -> class_property ASSIGN expr .)
    COMMA           reduce using rule 188 (class_property -> class_property ASSIGN expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGN          [ shift and go to state 116 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref_opt               shift and go to state 108
    template_ref                   shift and go to state 111
    func_call                      shift and go to state 132

state 531

    (177) method_def -> SET getset_id LPAREN . setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (191) setter_param_list -> . var_type_opt id
    (192) setter_param_list -> . var_type
    (209) var_type_opt -> . var_type
    (210) var_type_opt -> .
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

  ! ID              [ reduce using rule 210 (var_type_opt -> .) ]
  ! GET             [ reduce using rule 210 (var_type_opt -> .) ]
  ! SET             [ reduce using rule 210 (var_type_opt -> .) ]

    setter_param_list              shift and go to state 552
    var_type                       shift and go to state 553
    id                             shift and go to state 208
    id_var_type                    shift and go to state 211
    var_type_opt                   shift and go to state 551

state 532

    (172) method -> id_right LPAREN funcdeflist . RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (198) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 554
    COMMA           shift and go to state 510


state 533

    (176) method_def -> GET getset_id LPAREN . RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET

    RPAREN          shift and go to state 555


state 534

    (206) function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN . func_type_opt LBRACKET statementlist_opt RBRACKET
    (202) func_type_opt -> . COLON var_type_opt
    (203) func_type_opt -> .

    COLON           shift and go to state 537
    LBRACKET        reduce using rule 203 (func_type_opt -> .)

    func_type_opt                  shift and go to state 556

state 535

    (95) var_decl_no_list -> var_decl_no_list ASSIGN expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    ASSIGN          reduce using rule 95 (var_decl_no_list -> var_decl_no_list ASSIGN expr .)
    RPAREN          reduce using rule 95 (var_decl_no_list -> var_decl_no_list ASSIGN expr .)
    COMMA           reduce using rule 95 (var_decl_no_list -> var_decl_no_list ASSIGN expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGN          [ shift and go to state 116 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref_opt               shift and go to state 108
    template_ref                   shift and go to state 111
    func_call                      shift and go to state 132

state 536

    (198) funcdeflist -> funcdeflist COMMA var_decl_no_list .
    (95) var_decl_no_list -> var_decl_no_list . ASSIGN expr

    RPAREN          reduce using rule 198 (funcdeflist -> funcdeflist COMMA var_decl_no_list .)
    COMMA           reduce using rule 198 (funcdeflist -> funcdeflist COMMA var_decl_no_list .)
    ASSIGN          shift and go to state 509


state 537

    (202) func_type_opt -> COLON . var_type_opt
    (209) var_type_opt -> . var_type
    (210) var_type_opt -> .
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    LBRACKET        reduce using rule 210 (var_type_opt -> .)
    SEMI            reduce using rule 210 (var_type_opt -> .)
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 208
    id_var_type                    shift and go to state 211
    var_type                       shift and go to state 541
    var_type_opt                   shift and go to state 557

state 538

    (206) function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt . LBRACKET statementlist_opt RBRACKET
    (204) funcref -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt .

    LBRACKET        shift and go to state 558
    SEMI            reduce using rule 204 (funcref -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt .)


state 539

    (215) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt . var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (209) var_type_opt -> . var_type
    (210) var_type_opt -> .
    (110) var_type -> . var_type id_var_type
    (111) var_type -> . id_var_type
    (112) var_type -> . INT
    (113) var_type -> . SHORT
    (114) var_type -> . FLOAT
    (115) var_type -> . DOUBLE
    (116) var_type -> . CHAR
    (117) var_type -> . BYTE
    (118) var_type -> . INFERRED
    (119) var_type -> . var_type template_ref
    (106) id_var_type -> . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    LBRACKET        reduce using rule 210 (var_type_opt -> .)
    INT             shift and go to state 212
    SHORT           shift and go to state 216
    FLOAT           shift and go to state 213
    DOUBLE          shift and go to state 219
    CHAR            shift and go to state 209
    BYTE            shift and go to state 220
    INFERRED        shift and go to state 210
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id_var_type                    shift and go to state 211
    id                             shift and go to state 208
    var_type                       shift and go to state 541
    var_type_opt                   shift and go to state 559

state 540

    (216) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt . lbracket_restrict statementlist_opt rbracket_restrict
    (207) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 33

    lbracket_restrict              shift and go to state 560

state 541

    (209) var_type_opt -> var_type .
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    LBRACKET        reduce using rule 209 (var_type_opt -> var_type .)
    SEMI            reduce using rule 209 (var_type_opt -> var_type .)
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    lthan_restrict                 shift and go to state 11
    id                             shift and go to state 208
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 542

    (149) typed_class_list -> typed_class_list typed_class_element .

    STATIC          reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)
    GET             reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)
    SET             reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)
    GLOBAL          reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)
    VAR             reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)
    INT             reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)
    SHORT           reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)
    FLOAT           reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)
    DOUBLE          reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)
    CHAR            reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)
    BYTE            reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)
    ID              reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)
    RBRACKET        reduce using rule 149 (typed_class_list -> typed_class_list typed_class_element .)


state 543

    (102) var_decl_with_arr -> type_modifiers var_type . ident_arr
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (100) ident_arr -> . id
    (101) ident_arr -> . ident_arr LSBRACKET NUMBER RSBRACKET
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

    id                             shift and go to state 561
    lthan_restrict                 shift and go to state 11
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331
    ident_arr                      shift and go to state 562

state 544

    (145) typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .

    SEMI            reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    FUNCTION        reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    CLASS           reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    TYPED           reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    IF              reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    ELSE            reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    WHILE           reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    WITH            reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    DO              reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    FOR             reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    RETURN          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    YIELD           reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    BREAK           reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    CONTINUE        reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    THROW           reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    TRY             reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    CATCH           reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    FINALLY         reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    SWITCH          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    NATIVE          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    IMPORT          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    EXPORT          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    NUMBER          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    DELETE          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    STRINGLIT       reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    ID              reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    GET             reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    SET             reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    LSBRACKET       reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    LPAREN          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    MINUS           reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    NOT             reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    BITINV          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    NEW             reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    INC             reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    DEC             reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    TYPEOF          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    REGEXPR         reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    GLOBAL          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    VAR             reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    STATIC          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    TLTHAN          reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    LBRACKET        reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    $end            reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    RBRACKET        reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    CASE            reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)
    DEFAULT         reduce using rule 145 (typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET .)


state 545

    (104) var_decl_with_arr -> var_decl_with_arr COMMA . ident_arr
    (105) var_decl_with_arr -> var_decl_with_arr COMMA . ident_arr ASSIGN expr
    (100) ident_arr -> . id
    (101) ident_arr -> . ident_arr LSBRACKET NUMBER RSBRACKET
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 563
    ident_arr                      shift and go to state 564

state 546

    (151) typed_class_element -> var_decl_with_arr SEMI .

    STATIC          reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)
    GET             reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)
    SET             reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)
    GLOBAL          reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)
    VAR             reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)
    INT             reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)
    SHORT           reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)
    FLOAT           reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)
    DOUBLE          reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)
    CHAR            reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)
    BYTE            reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)
    ID              reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)
    RBRACKET        reduce using rule 151 (typed_class_element -> var_decl_with_arr SEMI .)


state 547

    (103) var_decl_with_arr -> var_decl_with_arr ASSIGN . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 565
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 548

    (205) func_native -> NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN . func_type_opt
    (202) func_type_opt -> . COLON var_type_opt
    (203) func_type_opt -> .

    COLON           shift and go to state 537
    SEMI            reduce using rule 203 (func_type_opt -> .)

    func_type_opt                  shift and go to state 566

state 549

    (204) funcref -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt .

    SEMI            reduce using rule 204 (funcref -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt .)


state 550

    (190) class_property -> class_property COMMA id ASSIGN . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 567
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lbracket_restrict              shift and go to state 50
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 551

    (191) setter_param_list -> var_type_opt . id
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET

    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27

    id                             shift and go to state 568

state 552

    (177) method_def -> SET getset_id LPAREN setter_param_list . RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET

    RPAREN          shift and go to state 569


state 553

    (192) setter_param_list -> var_type .
    (209) var_type_opt -> var_type .
    (110) var_type -> var_type . id_var_type
    (119) var_type -> var_type . template_ref
    (106) id_var_type -> . id
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (90) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
    RPAREN          reduce using rule 192 (setter_param_list -> var_type .)
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    TLTHAN          shift and go to state 21

  ! ID              [ reduce using rule 209 (var_type_opt -> var_type .) ]
  ! GET             [ reduce using rule 209 (var_type_opt -> var_type .) ]
  ! SET             [ reduce using rule 209 (var_type_opt -> var_type .) ]

    lthan_restrict                 shift and go to state 11
    id                             shift and go to state 208
    template_ref                   shift and go to state 332
    id_var_type                    shift and go to state 331

state 554

    (172) method -> id_right LPAREN funcdeflist RPAREN . func_type_opt LBRACKET statementlist_opt RBRACKET
    (202) func_type_opt -> . COLON var_type_opt
    (203) func_type_opt -> .

    COLON           shift and go to state 537
    LBRACKET        reduce using rule 203 (func_type_opt -> .)

    func_type_opt                  shift and go to state 570

state 555

    (176) method_def -> GET getset_id LPAREN RPAREN . func_type_opt LBRACKET statementlist_opt RBRACKET
    (202) func_type_opt -> . COLON var_type_opt
    (203) func_type_opt -> .

    COLON           shift and go to state 537
    LBRACKET        reduce using rule 203 (func_type_opt -> .)

    func_type_opt                  shift and go to state 571

state 556

    (206) function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt . LBRACKET statementlist_opt RBRACKET

    LBRACKET        shift and go to state 558


state 557

    (202) func_type_opt -> COLON var_type_opt .

    SEMI            reduce using rule 202 (func_type_opt -> COLON var_type_opt .)
    LBRACKET        reduce using rule 202 (func_type_opt -> COLON var_type_opt .)


state 558

    (206) function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET . statementlist_opt RBRACKET
    (314) statementlist_opt -> . statementlist
    (315) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! RBRACKET        [ reduce using rule 315 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 572
    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    if                             shift and go to state 76
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    try                            shift and go to state 42
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 276

state 559

    (215) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt . lbracket_restrict statementlist_opt rbracket_restrict
    (207) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 33

    lbracket_restrict              shift and go to state 573

state 560

    (216) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict . statementlist_opt rbracket_restrict
    (314) statementlist_opt -> . statementlist
    (315) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! RBRACKET        [ reduce using rule 315 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 574
    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    switch                         shift and go to state 5
    dec                            shift and go to state 66
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    if                             shift and go to state 76
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    funcref                        shift and go to state 24
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    not                            shift and go to state 15
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    lbracket_restrict              shift and go to state 50
    try                            shift and go to state 42
    lthan_restrict                 shift and go to state 11
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 276

state 561

    (100) ident_arr -> id .
    (106) id_var_type -> id .

    LSBRACKET       reduce using rule 100 (ident_arr -> id .)
    SEMI            reduce using rule 100 (ident_arr -> id .)
    ASSIGN          reduce using rule 100 (ident_arr -> id .)
    COMMA           reduce using rule 100 (ident_arr -> id .)
    ID              reduce using rule 106 (id_var_type -> id .)
    GET             reduce using rule 106 (id_var_type -> id .)
    SET             reduce using rule 106 (id_var_type -> id .)
    TLTHAN          reduce using rule 106 (id_var_type -> id .)


state 562

    (102) var_decl_with_arr -> type_modifiers var_type ident_arr .
    (101) ident_arr -> ident_arr . LSBRACKET NUMBER RSBRACKET

    SEMI            reduce using rule 102 (var_decl_with_arr -> type_modifiers var_type ident_arr .)
    ASSIGN          reduce using rule 102 (var_decl_with_arr -> type_modifiers var_type ident_arr .)
    COMMA           reduce using rule 102 (var_decl_with_arr -> type_modifiers var_type ident_arr .)
    LSBRACKET       shift and go to state 575


state 563

    (100) ident_arr -> id .

    ASSIGN          reduce using rule 100 (ident_arr -> id .)
    LSBRACKET       reduce using rule 100 (ident_arr -> id .)
    SEMI            reduce using rule 100 (ident_arr -> id .)
    COMMA           reduce using rule 100 (ident_arr -> id .)


state 564

    (104) var_decl_with_arr -> var_decl_with_arr COMMA ident_arr .
    (105) var_decl_with_arr -> var_decl_with_arr COMMA ident_arr . ASSIGN expr
    (101) ident_arr -> ident_arr . LSBRACKET NUMBER RSBRACKET

    SEMI            reduce using rule 104 (var_decl_with_arr -> var_decl_with_arr COMMA ident_arr .)
    COMMA           reduce using rule 104 (var_decl_with_arr -> var_decl_with_arr COMMA ident_arr .)
    ASSIGN          shift and go to state 576
    LSBRACKET       shift and go to state 575

  ! ASSIGN          [ reduce using rule 104 (var_decl_with_arr -> var_decl_with_arr COMMA ident_arr .) ]


state 565

    (103) var_decl_with_arr -> var_decl_with_arr ASSIGN expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 103 (var_decl_with_arr -> var_decl_with_arr ASSIGN expr .)
    ASSIGN          reduce using rule 103 (var_decl_with_arr -> var_decl_with_arr ASSIGN expr .)
    COMMA           reduce using rule 103 (var_decl_with_arr -> var_decl_with_arr ASSIGN expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGN          [ shift and go to state 116 ]

    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    lsbracket_restrict             shift and go to state 105
    template_ref_opt               shift and go to state 108
    template_ref                   shift and go to state 111
    func_call                      shift and go to state 132

state 566

    (205) func_native -> NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt .

    SEMI            reduce using rule 205 (func_native -> NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt .)


state 567

    (190) class_property -> class_property COMMA id ASSIGN expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 190 (class_property -> class_property COMMA id ASSIGN expr .)
    ASSIGN          reduce using rule 190 (class_property -> class_property COMMA id ASSIGN expr .)
    COMMA           reduce using rule 190 (class_property -> class_property COMMA id ASSIGN expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGN          [ shift and go to state 116 ]

    cmplx_assign                   shift and go to state 92
    template_ref                   shift and go to state 111
    lsbracket_restrict             shift and go to state 105
    template_ref_opt               shift and go to state 108
    lthan_restrict                 shift and go to state 11
    func_call                      shift and go to state 132

state 568

    (191) setter_param_list -> var_type_opt id .

    RPAREN          reduce using rule 191 (setter_param_list -> var_type_opt id .)


state 569

    (177) method_def -> SET getset_id LPAREN setter_param_list RPAREN . func_type_opt LBRACKET statementlist_opt RBRACKET
    (202) func_type_opt -> . COLON var_type_opt
    (203) func_type_opt -> .

    COLON           shift and go to state 537
    LBRACKET        reduce using rule 203 (func_type_opt -> .)

    func_type_opt                  shift and go to state 577

state 570

    (172) method -> id_right LPAREN funcdeflist RPAREN func_type_opt . LBRACKET statementlist_opt RBRACKET

    LBRACKET        shift and go to state 578


state 571

    (176) method_def -> GET getset_id LPAREN RPAREN func_type_opt . LBRACKET statementlist_opt RBRACKET

    LBRACKET        shift and go to state 579


state 572

    (206) function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 580


state 573

    (215) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict . statementlist_opt rbracket_restrict
    (314) statementlist_opt -> . statementlist
    (315) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! RBRACKET        [ reduce using rule 315 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 581
    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    switch                         shift and go to state 5
    dec                            shift and go to state 66
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    type_modifiers                 shift and go to state 53
    if                             shift and go to state 76
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    funcref                        shift and go to state 24
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    catch                          shift and go to state 23
    not                            shift and go to state 15
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    lbracket_restrict              shift and go to state 50
    try                            shift and go to state 42
    lthan_restrict                 shift and go to state 11
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 276

state 574

    (216) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt . rbracket_restrict
    (208) rbracket_restrict -> . RBRACKET

    RBRACKET        shift and go to state 204

    rbracket_restrict              shift and go to state 582

state 575

    (101) ident_arr -> ident_arr LSBRACKET . NUMBER RSBRACKET

    NUMBER          shift and go to state 583


state 576

    (105) var_decl_with_arr -> var_decl_with_arr COMMA ident_arr ASSIGN . expr
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 29
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    FUNCTION        shift and go to state 159
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

    expr_uminus                    shift and go to state 67
    array_literal                  shift and go to state 46
    template_ref                   shift and go to state 13
    expr                           shift and go to state 584
    bitinv                         shift and go to state 32
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 50
    exprfunction                   shift and go to state 25
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    strlit                         shift and go to state 79
    re_lit                         shift and go to state 8
    typeof                         shift and go to state 81
    lparen_restrict                shift and go to state 16
    lthan_restrict                 shift and go to state 11
    inc                            shift and go to state 86
    not                            shift and go to state 15
    dec                            shift and go to state 66

state 577

    (177) method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt . LBRACKET statementlist_opt RBRACKET

    LBRACKET        shift and go to state 585


state 578

    (172) method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET . statementlist_opt RBRACKET
    (314) statementlist_opt -> . statementlist
    (315) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! RBRACKET        [ reduce using rule 315 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 586
    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    lbracket_restrict              shift and go to state 50
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    finally                        shift and go to state 1
    id                             shift and go to state 3
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    try                            shift and go to state 42
    typed_class                    shift and go to state 85
    obj_literal                    shift and go to state 30
    inc                            shift and go to state 86
    statementlist                  shift and go to state 276
    break                          shift and go to state 26

state 579

    (176) method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET . statementlist_opt RBRACKET
    (314) statementlist_opt -> . statementlist
    (315) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! RBRACKET        [ reduce using rule 315 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    lbracket_restrict              shift and go to state 50
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    try                            shift and go to state 42
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    statementlist_opt              shift and go to state 587
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 276

state 580

    (206) function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .

    SEMI            reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CLASS           reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    TYPED           reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    WHILE           reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    FINALLY         reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    IMPORT          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    EXPORT          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    GET             reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    SET             reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    STATIC          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 206 (function -> FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)


state 581

    (215) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt . rbracket_restrict
    (208) rbracket_restrict -> . RBRACKET

    RBRACKET        shift and go to state 204

    rbracket_restrict              shift and go to state 588

state 582

    (216) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .

    SEMI            reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RSHIFT          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LSHIFT          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LLSHIFT         reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RRSHIFT         reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COND_DOT        reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DOT             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LAND            reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LOR             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BOR             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    INSTANCEOF      reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BXOR            reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BAND            reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EQUAL           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EQUAL_STRICT    reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GTHAN           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GTHANEQ         reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LTHAN           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    MOD             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LTHANEQ         reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOTEQUAL        reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    PLUS            reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    MINUS           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DIVIDE          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TIMES           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    IN              reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    QEST            reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COMMA           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    INC             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DEC             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNPLUS      reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNMINUS     reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNTIMES     reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBOR       reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBAND      reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBXOR      reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNLSHIFT    reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNRSHIFT    reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNRRSHIFT   reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNLLSHIFT   reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGN          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LSBRACKET       reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TLTHAN          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LPAREN          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RPAREN          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RSBRACKET       reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COLON           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    FUNCTION        reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    CLASS           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TYPED           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    IF              reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ELSE            reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    WHILE           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    WITH            reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DO              reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    FOR             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RETURN          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    YIELD           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BREAK           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    CONTINUE        reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    THROW           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TRY             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    CATCH           reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    FINALLY         reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    SWITCH          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NATIVE          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    IMPORT          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EXPORT          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NUMBER          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DELETE          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    STRINGLIT       reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ID              reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GET             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    SET             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOT             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BITINV          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NEW             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TYPEOF          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    REGEXPR         reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GLOBAL          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    VAR             reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    STATIC          reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LBRACKET        reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    $end            reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RBRACKET        reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    CASE            reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DEFAULT         reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    OF              reduce using rule 216 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)


state 583

    (101) ident_arr -> ident_arr LSBRACKET NUMBER . RSBRACKET

    RSBRACKET       shift and go to state 589


state 584

    (105) var_decl_with_arr -> var_decl_with_arr COMMA ident_arr ASSIGN expr .
    (249) expr -> expr . cmplx_assign expr
    (250) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (251) expr -> expr . RSHIFT expr
    (252) expr -> expr . LSHIFT expr
    (253) expr -> expr . LLSHIFT expr
    (254) expr -> expr . RRSHIFT expr
    (255) expr -> expr . COND_DOT expr
    (256) expr -> expr . DOT expr
    (257) expr -> expr . LAND expr
    (258) expr -> expr . LOR expr
    (259) expr -> expr . BOR expr
    (260) expr -> expr . INSTANCEOF expr
    (261) expr -> expr . BXOR expr
    (262) expr -> expr . BAND expr
    (263) expr -> expr . EQUAL expr
    (264) expr -> expr . EQUAL_STRICT expr
    (265) expr -> expr . NOTEQUAL_STRICT expr
    (266) expr -> expr . GTHAN expr
    (267) expr -> expr . GTHANEQ expr
    (268) expr -> expr . LTHAN expr
    (269) expr -> expr . MOD expr
    (270) expr -> expr . LTHANEQ expr
    (271) expr -> expr . NOTEQUAL expr
    (272) expr -> expr . PLUS expr
    (273) expr -> expr . MINUS expr
    (274) expr -> expr . DIVIDE expr
    (275) expr -> expr . TIMES expr
    (276) expr -> expr . IN expr
    (278) expr -> expr . func_call
    (279) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (280) expr -> expr . QEST expr COLON expr
    (289) expr -> expr . COMMA expr
    (230) inc -> expr . INC
    (232) dec -> expr . DEC
    (126) cmplx_assign -> . ASSIGNPLUS
    (127) cmplx_assign -> . ASSIGNMINUS
    (128) cmplx_assign -> . ASSIGNDIVIDE
    (129) cmplx_assign -> . ASSIGNTIMES
    (130) cmplx_assign -> . ASSIGNBOR
    (131) cmplx_assign -> . ASSIGNBAND
    (132) cmplx_assign -> . ASSIGNBXOR
    (133) cmplx_assign -> . ASSIGNLSHIFT
    (134) cmplx_assign -> . ASSIGNRSHIFT
    (135) cmplx_assign -> . ASSIGNRRSHIFT
    (136) cmplx_assign -> . ASSIGNLLSHIFT
    (137) cmplx_assign -> . ASSIGN
    (195) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (196) func_call -> . template_ref_opt LPAREN RPAREN
    (239) lsbracket_restrict -> . LSBRACKET
    (193) template_ref_opt -> . template_ref
    (194) template_ref_opt -> .
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (90) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 105 (var_decl_with_arr -> var_decl_with_arr COMMA ident_arr ASSIGN expr .)
    ASSIGN          reduce using rule 105 (var_decl_with_arr -> var_decl_with_arr COMMA ident_arr ASSIGN expr .)
    COMMA           reduce using rule 105 (var_decl_with_arr -> var_decl_with_arr COMMA ident_arr ASSIGN expr .)
    RSHIFT          shift and go to state 101
    LSHIFT          shift and go to state 97
    LLSHIFT         shift and go to state 110
    RRSHIFT         shift and go to state 135
    COND_DOT        shift and go to state 115
    DOT             shift and go to state 119
    LAND            shift and go to state 93
    LOR             shift and go to state 102
    BOR             shift and go to state 136
    INSTANCEOF      shift and go to state 98
    BXOR            shift and go to state 129
    BAND            shift and go to state 91
    EQUAL           shift and go to state 99
    EQUAL_STRICT    shift and go to state 109
    NOTEQUAL_STRICT shift and go to state 121
    GTHAN           shift and go to state 120
    GTHANEQ         shift and go to state 130
    LTHAN           shift and go to state 124
    MOD             shift and go to state 113
    LTHANEQ         shift and go to state 106
    NOTEQUAL        shift and go to state 117
    PLUS            shift and go to state 94
    MINUS           shift and go to state 118
    DIVIDE          shift and go to state 131
    TIMES           shift and go to state 104
    IN              shift and go to state 122
    QEST            shift and go to state 133
    INC             shift and go to state 128
    DEC             shift and go to state 137
    ASSIGNPLUS      shift and go to state 123
    ASSIGNMINUS     shift and go to state 125
    ASSIGNDIVIDE    shift and go to state 114
    ASSIGNTIMES     shift and go to state 138
    ASSIGNBOR       shift and go to state 103
    ASSIGNBAND      shift and go to state 95
    ASSIGNBXOR      shift and go to state 112
    ASSIGNLSHIFT    shift and go to state 127
    ASSIGNRSHIFT    shift and go to state 126
    ASSIGNRRSHIFT   shift and go to state 96
    ASSIGNLLSHIFT   shift and go to state 134
    LSBRACKET       shift and go to state 100
    LPAREN          reduce using rule 194 (template_ref_opt -> .)
    TLTHAN          shift and go to state 21

  ! COMMA           [ shift and go to state 107 ]
  ! ASSIGN          [ shift and go to state 116 ]

    template_ref                   shift and go to state 111
    lsbracket_restrict             shift and go to state 105
    template_ref_opt               shift and go to state 108
    cmplx_assign                   shift and go to state 92
    lthan_restrict                 shift and go to state 11
    func_call                      shift and go to state 132

state 585

    (177) method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET . statementlist_opt RBRACKET
    (314) statementlist_opt -> . statementlist
    (315) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . typed_class
    (15) statement -> . if
    (16) statement -> . else
    (17) statement -> . while
    (18) statement -> . with
    (19) statement -> . dowhile
    (20) statement -> . for
    (21) statement -> . return SEMI
    (22) statement -> . yield SEMI
    (23) statement -> . break SEMI
    (24) statement -> . continue SEMI
    (25) statement -> . throw SEMI
    (26) statement -> . try
    (27) statement -> . catch
    (28) statement -> . finally
    (29) statement -> . switch
    (30) statement -> . func_native SEMI
    (31) statement -> . import_decl
    (32) statement -> . export_decl
    (52) statement_nonctrl -> . expr SEMI
    (53) statement_nonctrl -> . var_decl SEMI
    (54) statement_nonctrl -> . funcref SEMI
    (55) statement_nonctrl -> . SEMI
    (56) statement_nonctrl -> . if
    (57) statement_nonctrl -> . else
    (58) statement_nonctrl -> . for
    (59) statement_nonctrl -> . dowhile
    (60) statement_nonctrl -> . while
    (61) statement_nonctrl -> . return SEMI
    (62) statement_nonctrl -> . yield SEMI
    (63) statement_nonctrl -> . break SEMI
    (64) statement_nonctrl -> . continue SEMI
    (65) statement_nonctrl -> . throw SEMI
    (66) statement_nonctrl -> . try
    (67) statement_nonctrl -> . catch
    (68) statement_nonctrl -> . finally
    (69) statement_nonctrl -> . delete SEMI
    (206) function -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (154) class -> . CLASS id template_opt class_tail
    (144) typed_class -> . TYPED CLASS id template_opt typed_class_tail
    (325) if -> . IF paren_expr ctrl_statement
    (348) else -> . ELSE ctrl_statement
    (311) while -> . WHILE paren_expr statement_nonctrl
    (312) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (324) with -> . WITH paren_expr ctrl_statement
    (310) dowhile -> . DO ctrl_statement WHILE paren_expr
    (305) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (306) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (351) return -> . RETURN expr
    (352) return -> . RETURN
    (353) yield -> . YIELD expr
    (354) yield -> . YIELD
    (349) break -> . BREAK
    (350) continue -> . CONTINUE
    (138) throw -> . THROW expr
    (326) try -> . TRY statement_nonctrl
    (327) try -> . TRY LBRACKET statementlist RBRACKET
    (328) try -> . TRY LBRACKET RBRACKET
    (346) catch -> . CATCH paren_expr statement_nonctrl
    (347) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (329) finally -> . FINALLY LBRACKET statementlist_opt RBRACKET
    (323) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (205) func_native -> . NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt
    (33) import_decl -> . IMPORT import_clause from_clause SEMI
    (34) import_decl -> . IMPORT module_spec SEMI
    (330) export_decl -> . EXPORT TIMES from_clause SEMI
    (331) export_decl -> . EXPORT export_clause from_clause SEMI
    (332) export_decl -> . EXPORT export_clause SEMI
    (333) export_decl -> . EXPORT var_decl SEMI
    (334) export_decl -> . EXPORT function
    (335) export_decl -> . EXPORT class
    (336) export_decl -> . EXPORT DEFAULT function
    (337) export_decl -> . EXPORT DEFAULT class
    (338) export_decl -> . EXPORT DEFAULT assign
    (241) expr -> . NUMBER
    (242) expr -> . strlit
    (243) expr -> . id
    (244) expr -> . id template_ref
    (245) expr -> . template_ref
    (246) expr -> . array_literal
    (247) expr -> . exprfunction
    (248) expr -> . obj_literal
    (249) expr -> . expr cmplx_assign expr
    (250) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (251) expr -> . expr RSHIFT expr
    (252) expr -> . expr LSHIFT expr
    (253) expr -> . expr LLSHIFT expr
    (254) expr -> . expr RRSHIFT expr
    (255) expr -> . expr COND_DOT expr
    (256) expr -> . expr DOT expr
    (257) expr -> . expr LAND expr
    (258) expr -> . expr LOR expr
    (259) expr -> . expr BOR expr
    (260) expr -> . expr INSTANCEOF expr
    (261) expr -> . expr BXOR expr
    (262) expr -> . expr BAND expr
    (263) expr -> . expr EQUAL expr
    (264) expr -> . expr EQUAL_STRICT expr
    (265) expr -> . expr NOTEQUAL_STRICT expr
    (266) expr -> . expr GTHAN expr
    (267) expr -> . expr GTHANEQ expr
    (268) expr -> . expr LTHAN expr
    (269) expr -> . expr MOD expr
    (270) expr -> . expr LTHANEQ expr
    (271) expr -> . expr NOTEQUAL expr
    (272) expr -> . expr PLUS expr
    (273) expr -> . expr MINUS expr
    (274) expr -> . expr DIVIDE expr
    (275) expr -> . expr TIMES expr
    (276) expr -> . expr IN expr
    (277) expr -> . lparen_restrict expr rparen_restrict
    (278) expr -> . expr func_call
    (279) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (280) expr -> . expr QEST expr COLON expr
    (281) expr -> . expr_uminus
    (282) expr -> . not
    (283) expr -> . bitinv
    (284) expr -> . new
    (285) expr -> . inc
    (286) expr -> . dec
    (287) expr -> . typeof
    (288) expr -> . re_lit
    (289) expr -> . expr COMMA expr
    (96) var_decl -> . type_modifiers var_type
    (97) var_decl -> . var_decl ASSIGN expr
    (98) var_decl -> . var_decl COMMA id
    (99) var_decl -> . var_decl COMMA id ASSIGN expr
    (204) funcref -> . FUNCTION id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (228) delete -> . DELETE expr
    (236) strlit -> . STRINGLIT
    (355) id -> . ID
    (356) id -> . GET
    (357) id -> . SET
    (86) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (217) array_literal -> . LSBRACKET exprlist RSBRACKET
    (218) array_literal -> . LSBRACKET RSBRACKET
    (215) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (216) exprfunction -> . FUNCTION func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (226) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (227) obj_literal -> . lbracket_restrict rbracket_restrict
    (237) lparen_restrict -> . LPAREN
    (290) expr_uminus -> . MINUS expr
    (234) not -> . NOT expr
    (235) bitinv -> . BITINV expr
    (229) new -> . NEW expr
    (230) inc -> . expr INC
    (231) inc -> . INC expr
    (232) dec -> . expr DEC
    (233) dec -> . DEC expr
    (222) typeof -> . TYPEOF expr
    (297) re_lit -> . REGEXPR
    (77) type_modifiers -> . type_modifiers UNSIGNED
    (78) type_modifiers -> . type_modifiers SIGNED
    (79) type_modifiers -> . type_modifiers CONST
    (80) type_modifiers -> . GLOBAL
    (81) type_modifiers -> . VAR
    (82) type_modifiers -> . STATIC
    (90) lthan_restrict -> . TLTHAN
    (207) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for TYPED resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for EXPORT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 44
    FUNCTION        shift and go to state 49
    CLASS           shift and go to state 20
    TYPED           shift and go to state 64
    IF              shift and go to state 75
    ELSE            shift and go to state 7
    WHILE           shift and go to state 73
    WITH            shift and go to state 47
    DO              shift and go to state 41
    FOR             shift and go to state 68
    RETURN          shift and go to state 82
    YIELD           shift and go to state 14
    BREAK           shift and go to state 61
    CONTINUE        shift and go to state 78
    THROW           shift and go to state 74
    TRY             shift and go to state 89
    CATCH           shift and go to state 39
    FINALLY         shift and go to state 62
    SWITCH          shift and go to state 28
    NATIVE          shift and go to state 71
    IMPORT          shift and go to state 36
    EXPORT          shift and go to state 35
    NUMBER          shift and go to state 29
    DELETE          shift and go to state 10
    STRINGLIT       shift and go to state 54
    ID              shift and go to state 38
    GET             shift and go to state 59
    SET             shift and go to state 27
    LSBRACKET       shift and go to state 57
    LPAREN          shift and go to state 84
    MINUS           shift and go to state 69
    NOT             shift and go to state 77
    BITINV          shift and go to state 19
    NEW             shift and go to state 83
    INC             shift and go to state 88
    DEC             shift and go to state 43
    TYPEOF          shift and go to state 40
    REGEXPR         shift and go to state 9
    GLOBAL          shift and go to state 45
    VAR             shift and go to state 65
    STATIC          shift and go to state 17
    TLTHAN          shift and go to state 21
    LBRACKET        shift and go to state 33

  ! RBRACKET        [ reduce using rule 315 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! TYPED           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! FINALLY         [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! IMPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! EXPORT          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! GET             [ reduce using rule 5 (statementlist -> .) ]
  ! SET             [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 590
    array_literal                  shift and go to state 46
    expr                           shift and go to state 2
    function                       shift and go to state 4
    switch                         shift and go to state 5
    delete                         shift and go to state 51
    yield                          shift and go to state 52
    export_decl                    shift and go to state 55
    else                           shift and go to state 56
    re_lit                         shift and go to state 8
    template_ref                   shift and go to state 13
    return                         shift and go to state 58
    lthan_restrict                 shift and go to state 11
    statement_nonctrl              shift and go to state 60
    lbracket_restrict              shift and go to state 50
    func_native                    shift and go to state 12
    while                          shift and go to state 22
    throw                          shift and go to state 63
    not                            shift and go to state 15
    lparen_restrict                shift and go to state 16
    expr_uminus                    shift and go to state 67
    dowhile                        shift and go to state 18
    with                           shift and go to state 70
    catch                          shift and go to state 23
    funcref                        shift and go to state 24
    type_modifiers                 shift and go to state 53
    new                            shift and go to state 48
    statement                      shift and go to state 72
    exprfunction                   shift and go to state 25
    break                          shift and go to state 26
    finally                        shift and go to state 1
    id                             shift and go to state 3
    obj_literal                    shift and go to state 30
    if                             shift and go to state 76
    import_decl                    shift and go to state 31
    bitinv                         shift and go to state 32
    continue                       shift and go to state 34
    strlit                         shift and go to state 79
    class                          shift and go to state 80
    var_decl                       shift and go to state 37
    dec                            shift and go to state 66
    typeof                         shift and go to state 81
    for                            shift and go to state 6
    try                            shift and go to state 42
    typed_class                    shift and go to state 85
    inc                            shift and go to state 86
    statementlist                  shift and go to state 276

state 586

    (172) method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 591


state 587

    (176) method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 592


state 588

    (215) exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .

    SEMI            reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RSHIFT          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LSHIFT          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LLSHIFT         reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RRSHIFT         reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COND_DOT        reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DOT             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LAND            reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LOR             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BOR             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    INSTANCEOF      reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BXOR            reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BAND            reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EQUAL           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EQUAL_STRICT    reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GTHAN           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GTHANEQ         reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LTHAN           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    MOD             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LTHANEQ         reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOTEQUAL        reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    PLUS            reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    MINUS           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DIVIDE          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TIMES           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    IN              reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    QEST            reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COMMA           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    INC             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DEC             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNPLUS      reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNMINUS     reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNTIMES     reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBOR       reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBAND      reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBXOR      reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNLSHIFT    reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNRSHIFT    reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNRRSHIFT   reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNLLSHIFT   reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGN          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LSBRACKET       reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TLTHAN          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LPAREN          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RPAREN          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RSBRACKET       reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COLON           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    FUNCTION        reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    CLASS           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TYPED           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    IF              reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ELSE            reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    WHILE           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    WITH            reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DO              reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    FOR             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RETURN          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    YIELD           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BREAK           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    CONTINUE        reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    THROW           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TRY             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    CATCH           reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    FINALLY         reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    SWITCH          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NATIVE          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    IMPORT          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EXPORT          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NUMBER          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DELETE          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    STRINGLIT       reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ID              reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GET             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    SET             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOT             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BITINV          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NEW             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TYPEOF          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    REGEXPR         reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GLOBAL          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    VAR             reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    STATIC          reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LBRACKET        reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    $end            reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RBRACKET        reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    CASE            reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DEFAULT         reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    OF              reduce using rule 215 (exprfunction -> FUNCTION func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)


state 589

    (101) ident_arr -> ident_arr LSBRACKET NUMBER RSBRACKET .

    ASSIGN          reduce using rule 101 (ident_arr -> ident_arr LSBRACKET NUMBER RSBRACKET .)
    LSBRACKET       reduce using rule 101 (ident_arr -> ident_arr LSBRACKET NUMBER RSBRACKET .)
    SEMI            reduce using rule 101 (ident_arr -> ident_arr LSBRACKET NUMBER RSBRACKET .)
    COMMA           reduce using rule 101 (ident_arr -> ident_arr LSBRACKET NUMBER RSBRACKET .)


state 590

    (177) method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 593


state 591

    (172) method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .

    STATIC          reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    GET             reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    SET             reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    INT             reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    SHORT           reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    FLOAT           reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DOUBLE          reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CHAR            reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    BYTE            reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 172 (method -> id_right LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)


state 592

    (176) method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .

    STATIC          reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    GET             reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    SET             reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    INT             reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    SHORT           reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    FLOAT           reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DOUBLE          reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CHAR            reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    BYTE            reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 176 (method_def -> GET getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)


state 593

    (177) method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .

    STATIC          reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    GET             reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    SET             reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    INT             reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    SHORT           reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    FLOAT           reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DOUBLE          reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CHAR            reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    BYTE            reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 177 (method_def -> SET getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMI in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for WITH in state 0 resolved as shift
WARNING: shift/reduce conflict for DO in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 0 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 0 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 0 resolved as shift
WARNING: shift/reduce conflict for THROW in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 0 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 0 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 0 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 0 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 0 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for GET in state 0 resolved as shift
WARNING: shift/reduce conflict for SET in state 0 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 0 resolved as shift
WARNING: shift/reduce conflict for NEW in state 0 resolved as shift
WARNING: shift/reduce conflict for INC in state 0 resolved as shift
WARNING: shift/reduce conflict for DEC in state 0 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 0 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 0 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 0 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 3 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 147 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 147 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 147 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 147 resolved as shift
WARNING: shift/reduce conflict for IF in state 147 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 147 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 147 resolved as shift
WARNING: shift/reduce conflict for WITH in state 147 resolved as shift
WARNING: shift/reduce conflict for DO in state 147 resolved as shift
WARNING: shift/reduce conflict for FOR in state 147 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 147 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 147 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 147 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 147 resolved as shift
WARNING: shift/reduce conflict for THROW in state 147 resolved as shift
WARNING: shift/reduce conflict for TRY in state 147 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 147 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 147 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 147 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 147 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 147 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 147 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 147 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 147 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 147 resolved as shift
WARNING: shift/reduce conflict for ID in state 147 resolved as shift
WARNING: shift/reduce conflict for GET in state 147 resolved as shift
WARNING: shift/reduce conflict for SET in state 147 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 147 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 147 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 147 resolved as shift
WARNING: shift/reduce conflict for NOT in state 147 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 147 resolved as shift
WARNING: shift/reduce conflict for NEW in state 147 resolved as shift
WARNING: shift/reduce conflict for INC in state 147 resolved as shift
WARNING: shift/reduce conflict for DEC in state 147 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 147 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 147 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 147 resolved as shift
WARNING: shift/reduce conflict for VAR in state 147 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 147 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 147 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 147 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 221 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 225 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 225 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 225 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 225 resolved as shift
WARNING: shift/reduce conflict for IF in state 225 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 225 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 225 resolved as shift
WARNING: shift/reduce conflict for WITH in state 225 resolved as shift
WARNING: shift/reduce conflict for DO in state 225 resolved as shift
WARNING: shift/reduce conflict for FOR in state 225 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 225 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 225 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 225 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 225 resolved as shift
WARNING: shift/reduce conflict for THROW in state 225 resolved as shift
WARNING: shift/reduce conflict for TRY in state 225 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 225 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 225 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 225 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 225 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 225 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 225 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 225 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 225 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 225 resolved as shift
WARNING: shift/reduce conflict for ID in state 225 resolved as shift
WARNING: shift/reduce conflict for GET in state 225 resolved as shift
WARNING: shift/reduce conflict for SET in state 225 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 225 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 225 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 225 resolved as shift
WARNING: shift/reduce conflict for NOT in state 225 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 225 resolved as shift
WARNING: shift/reduce conflict for NEW in state 225 resolved as shift
WARNING: shift/reduce conflict for INC in state 225 resolved as shift
WARNING: shift/reduce conflict for DEC in state 225 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 225 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 225 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 225 resolved as shift
WARNING: shift/reduce conflict for VAR in state 225 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 225 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 225 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 225 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 240 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 240 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 240 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 240 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 240 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 240 resolved as shift
WARNING: shift/reduce conflict for IF in state 240 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 240 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 240 resolved as shift
WARNING: shift/reduce conflict for WITH in state 240 resolved as shift
WARNING: shift/reduce conflict for DO in state 240 resolved as shift
WARNING: shift/reduce conflict for FOR in state 240 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 240 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 240 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 240 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 240 resolved as shift
WARNING: shift/reduce conflict for THROW in state 240 resolved as shift
WARNING: shift/reduce conflict for TRY in state 240 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 240 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 240 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 240 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 240 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 240 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 240 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 240 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 240 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 240 resolved as shift
WARNING: shift/reduce conflict for ID in state 240 resolved as shift
WARNING: shift/reduce conflict for GET in state 240 resolved as shift
WARNING: shift/reduce conflict for SET in state 240 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 240 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 240 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 240 resolved as shift
WARNING: shift/reduce conflict for NOT in state 240 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 240 resolved as shift
WARNING: shift/reduce conflict for NEW in state 240 resolved as shift
WARNING: shift/reduce conflict for INC in state 240 resolved as shift
WARNING: shift/reduce conflict for DEC in state 240 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 240 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 240 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 240 resolved as shift
WARNING: shift/reduce conflict for VAR in state 240 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 240 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 240 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 240 resolved as shift
WARNING: shift/reduce conflict for COLON in state 243 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 243 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 243 resolved as shift
WARNING: shift/reduce conflict for LLSHIFT in state 243 resolved as shift
WARNING: shift/reduce conflict for RRSHIFT in state 243 resolved as shift
WARNING: shift/reduce conflict for COND_DOT in state 243 resolved as shift
WARNING: shift/reduce conflict for DOT in state 243 resolved as shift
WARNING: shift/reduce conflict for LAND in state 243 resolved as shift
WARNING: shift/reduce conflict for LOR in state 243 resolved as shift
WARNING: shift/reduce conflict for BOR in state 243 resolved as shift
WARNING: shift/reduce conflict for INSTANCEOF in state 243 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 243 resolved as shift
WARNING: shift/reduce conflict for BAND in state 243 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 243 resolved as shift
WARNING: shift/reduce conflict for EQUAL_STRICT in state 243 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL_STRICT in state 243 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 243 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 243 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 243 resolved as shift
WARNING: shift/reduce conflict for MOD in state 243 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 243 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 243 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 243 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 243 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 243 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 243 resolved as shift
WARNING: shift/reduce conflict for IN in state 243 resolved as shift
WARNING: shift/reduce conflict for QEST in state 243 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 243 resolved as shift
WARNING: shift/reduce conflict for INC in state 243 resolved as shift
WARNING: shift/reduce conflict for DEC in state 243 resolved as shift
WARNING: shift/reduce conflict for ASSIGNPLUS in state 243 resolved as shift
WARNING: shift/reduce conflict for ASSIGNMINUS in state 243 resolved as shift
WARNING: shift/reduce conflict for ASSIGNDIVIDE in state 243 resolved as shift
WARNING: shift/reduce conflict for ASSIGNTIMES in state 243 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBOR in state 243 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBAND in state 243 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBXOR in state 243 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLSHIFT in state 243 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRSHIFT in state 243 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRRSHIFT in state 243 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLLSHIFT in state 243 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 243 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 243 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 243 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 258 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 258 resolved as shift
WARNING: shift/reduce conflict for LLSHIFT in state 258 resolved as shift
WARNING: shift/reduce conflict for RRSHIFT in state 258 resolved as shift
WARNING: shift/reduce conflict for COND_DOT in state 258 resolved as shift
WARNING: shift/reduce conflict for DOT in state 258 resolved as shift
WARNING: shift/reduce conflict for LAND in state 258 resolved as shift
WARNING: shift/reduce conflict for LOR in state 258 resolved as shift
WARNING: shift/reduce conflict for BOR in state 258 resolved as shift
WARNING: shift/reduce conflict for INSTANCEOF in state 258 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 258 resolved as shift
WARNING: shift/reduce conflict for BAND in state 258 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 258 resolved as shift
WARNING: shift/reduce conflict for EQUAL_STRICT in state 258 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL_STRICT in state 258 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 258 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 258 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 258 resolved as shift
WARNING: shift/reduce conflict for MOD in state 258 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 258 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 258 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 258 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 258 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 258 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 258 resolved as shift
WARNING: shift/reduce conflict for IN in state 258 resolved as shift
WARNING: shift/reduce conflict for QEST in state 258 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 258 resolved as shift
WARNING: shift/reduce conflict for INC in state 258 resolved as shift
WARNING: shift/reduce conflict for DEC in state 258 resolved as shift
WARNING: shift/reduce conflict for ASSIGNPLUS in state 258 resolved as shift
WARNING: shift/reduce conflict for ASSIGNMINUS in state 258 resolved as shift
WARNING: shift/reduce conflict for ASSIGNDIVIDE in state 258 resolved as shift
WARNING: shift/reduce conflict for ASSIGNTIMES in state 258 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBOR in state 258 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBAND in state 258 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBXOR in state 258 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLSHIFT in state 258 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRSHIFT in state 258 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRRSHIFT in state 258 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLLSHIFT in state 258 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 258 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 258 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 258 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 297 resolved as shift
WARNING: shift/reduce conflict for INC in state 297 resolved as shift
WARNING: shift/reduce conflict for DEC in state 297 resolved as shift
WARNING: shift/reduce conflict for ASSIGNPLUS in state 297 resolved as shift
WARNING: shift/reduce conflict for ASSIGNMINUS in state 297 resolved as shift
WARNING: shift/reduce conflict for ASSIGNDIVIDE in state 297 resolved as shift
WARNING: shift/reduce conflict for ASSIGNTIMES in state 297 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBOR in state 297 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBAND in state 297 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBXOR in state 297 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLSHIFT in state 297 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRSHIFT in state 297 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRRSHIFT in state 297 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLLSHIFT in state 297 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 297 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 297 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 297 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 320 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 320 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 320 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 320 resolved as shift
WARNING: shift/reduce conflict for IF in state 320 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 320 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 320 resolved as shift
WARNING: shift/reduce conflict for WITH in state 320 resolved as shift
WARNING: shift/reduce conflict for DO in state 320 resolved as shift
WARNING: shift/reduce conflict for FOR in state 320 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 320 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 320 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 320 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 320 resolved as shift
WARNING: shift/reduce conflict for THROW in state 320 resolved as shift
WARNING: shift/reduce conflict for TRY in state 320 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 320 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 320 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 320 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 320 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 320 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 320 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 320 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 320 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 320 resolved as shift
WARNING: shift/reduce conflict for ID in state 320 resolved as shift
WARNING: shift/reduce conflict for GET in state 320 resolved as shift
WARNING: shift/reduce conflict for SET in state 320 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 320 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 320 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 320 resolved as shift
WARNING: shift/reduce conflict for NOT in state 320 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 320 resolved as shift
WARNING: shift/reduce conflict for NEW in state 320 resolved as shift
WARNING: shift/reduce conflict for INC in state 320 resolved as shift
WARNING: shift/reduce conflict for DEC in state 320 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 320 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 320 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 320 resolved as shift
WARNING: shift/reduce conflict for VAR in state 320 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 320 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 320 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 320 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 342 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 342 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 342 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 342 resolved as shift
WARNING: shift/reduce conflict for IF in state 342 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 342 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 342 resolved as shift
WARNING: shift/reduce conflict for WITH in state 342 resolved as shift
WARNING: shift/reduce conflict for DO in state 342 resolved as shift
WARNING: shift/reduce conflict for FOR in state 342 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 342 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 342 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 342 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 342 resolved as shift
WARNING: shift/reduce conflict for THROW in state 342 resolved as shift
WARNING: shift/reduce conflict for TRY in state 342 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 342 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 342 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 342 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 342 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 342 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 342 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 342 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 342 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 342 resolved as shift
WARNING: shift/reduce conflict for ID in state 342 resolved as shift
WARNING: shift/reduce conflict for GET in state 342 resolved as shift
WARNING: shift/reduce conflict for SET in state 342 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 342 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 342 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 342 resolved as shift
WARNING: shift/reduce conflict for NOT in state 342 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 342 resolved as shift
WARNING: shift/reduce conflict for NEW in state 342 resolved as shift
WARNING: shift/reduce conflict for INC in state 342 resolved as shift
WARNING: shift/reduce conflict for DEC in state 342 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 342 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 342 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 342 resolved as shift
WARNING: shift/reduce conflict for VAR in state 342 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 342 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 342 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 342 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 421 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 421 resolved as shift
WARNING: shift/reduce conflict for LLSHIFT in state 421 resolved as shift
WARNING: shift/reduce conflict for RRSHIFT in state 421 resolved as shift
WARNING: shift/reduce conflict for COND_DOT in state 421 resolved as shift
WARNING: shift/reduce conflict for DOT in state 421 resolved as shift
WARNING: shift/reduce conflict for LAND in state 421 resolved as shift
WARNING: shift/reduce conflict for LOR in state 421 resolved as shift
WARNING: shift/reduce conflict for BOR in state 421 resolved as shift
WARNING: shift/reduce conflict for INSTANCEOF in state 421 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 421 resolved as shift
WARNING: shift/reduce conflict for BAND in state 421 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 421 resolved as shift
WARNING: shift/reduce conflict for EQUAL_STRICT in state 421 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL_STRICT in state 421 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 421 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 421 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 421 resolved as shift
WARNING: shift/reduce conflict for MOD in state 421 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 421 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 421 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 421 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 421 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 421 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 421 resolved as shift
WARNING: shift/reduce conflict for IN in state 421 resolved as shift
WARNING: shift/reduce conflict for QEST in state 421 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 421 resolved as shift
WARNING: shift/reduce conflict for INC in state 421 resolved as shift
WARNING: shift/reduce conflict for DEC in state 421 resolved as shift
WARNING: shift/reduce conflict for ASSIGNPLUS in state 421 resolved as shift
WARNING: shift/reduce conflict for ASSIGNMINUS in state 421 resolved as shift
WARNING: shift/reduce conflict for ASSIGNDIVIDE in state 421 resolved as shift
WARNING: shift/reduce conflict for ASSIGNTIMES in state 421 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBOR in state 421 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBAND in state 421 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBXOR in state 421 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLSHIFT in state 421 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRSHIFT in state 421 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRRSHIFT in state 421 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLLSHIFT in state 421 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 421 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 421 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 421 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 422 resolved as shift
WARNING: shift/reduce conflict for INC in state 422 resolved as shift
WARNING: shift/reduce conflict for DEC in state 422 resolved as shift
WARNING: shift/reduce conflict for ASSIGNPLUS in state 422 resolved as shift
WARNING: shift/reduce conflict for ASSIGNMINUS in state 422 resolved as shift
WARNING: shift/reduce conflict for ASSIGNDIVIDE in state 422 resolved as shift
WARNING: shift/reduce conflict for ASSIGNTIMES in state 422 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBOR in state 422 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBAND in state 422 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBXOR in state 422 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLSHIFT in state 422 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRSHIFT in state 422 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRRSHIFT in state 422 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLLSHIFT in state 422 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 422 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 422 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 422 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 432 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 439 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 439 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 439 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 439 resolved as shift
WARNING: shift/reduce conflict for IF in state 439 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 439 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 439 resolved as shift
WARNING: shift/reduce conflict for WITH in state 439 resolved as shift
WARNING: shift/reduce conflict for DO in state 439 resolved as shift
WARNING: shift/reduce conflict for FOR in state 439 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 439 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 439 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 439 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 439 resolved as shift
WARNING: shift/reduce conflict for THROW in state 439 resolved as shift
WARNING: shift/reduce conflict for TRY in state 439 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 439 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 439 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 439 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 439 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 439 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 439 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 439 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 439 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 439 resolved as shift
WARNING: shift/reduce conflict for ID in state 439 resolved as shift
WARNING: shift/reduce conflict for GET in state 439 resolved as shift
WARNING: shift/reduce conflict for SET in state 439 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 439 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 439 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 439 resolved as shift
WARNING: shift/reduce conflict for NOT in state 439 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 439 resolved as shift
WARNING: shift/reduce conflict for NEW in state 439 resolved as shift
WARNING: shift/reduce conflict for INC in state 439 resolved as shift
WARNING: shift/reduce conflict for DEC in state 439 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 439 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 439 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 439 resolved as shift
WARNING: shift/reduce conflict for VAR in state 439 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 439 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 439 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 439 resolved as shift
WARNING: shift/reduce conflict for ID in state 459 resolved as shift
WARNING: shift/reduce conflict for GET in state 459 resolved as shift
WARNING: shift/reduce conflict for SET in state 459 resolved as shift
WARNING: shift/reduce conflict for ID in state 465 resolved as shift
WARNING: shift/reduce conflict for GET in state 465 resolved as shift
WARNING: shift/reduce conflict for SET in state 465 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 471 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 471 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 471 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 471 resolved as shift
WARNING: shift/reduce conflict for IF in state 471 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 471 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 471 resolved as shift
WARNING: shift/reduce conflict for WITH in state 471 resolved as shift
WARNING: shift/reduce conflict for DO in state 471 resolved as shift
WARNING: shift/reduce conflict for FOR in state 471 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 471 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 471 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 471 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 471 resolved as shift
WARNING: shift/reduce conflict for THROW in state 471 resolved as shift
WARNING: shift/reduce conflict for TRY in state 471 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 471 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 471 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 471 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 471 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 471 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 471 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 471 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 471 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 471 resolved as shift
WARNING: shift/reduce conflict for ID in state 471 resolved as shift
WARNING: shift/reduce conflict for GET in state 471 resolved as shift
WARNING: shift/reduce conflict for SET in state 471 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 471 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 471 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 471 resolved as shift
WARNING: shift/reduce conflict for NOT in state 471 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 471 resolved as shift
WARNING: shift/reduce conflict for NEW in state 471 resolved as shift
WARNING: shift/reduce conflict for INC in state 471 resolved as shift
WARNING: shift/reduce conflict for DEC in state 471 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 471 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 471 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 471 resolved as shift
WARNING: shift/reduce conflict for VAR in state 471 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 471 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 471 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 471 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 472 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 472 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 472 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 472 resolved as shift
WARNING: shift/reduce conflict for IF in state 472 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 472 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 472 resolved as shift
WARNING: shift/reduce conflict for WITH in state 472 resolved as shift
WARNING: shift/reduce conflict for DO in state 472 resolved as shift
WARNING: shift/reduce conflict for FOR in state 472 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 472 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 472 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 472 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 472 resolved as shift
WARNING: shift/reduce conflict for THROW in state 472 resolved as shift
WARNING: shift/reduce conflict for TRY in state 472 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 472 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 472 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 472 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 472 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 472 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 472 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 472 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 472 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 472 resolved as shift
WARNING: shift/reduce conflict for ID in state 472 resolved as shift
WARNING: shift/reduce conflict for GET in state 472 resolved as shift
WARNING: shift/reduce conflict for SET in state 472 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 472 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 472 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 472 resolved as shift
WARNING: shift/reduce conflict for NOT in state 472 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 472 resolved as shift
WARNING: shift/reduce conflict for NEW in state 472 resolved as shift
WARNING: shift/reduce conflict for INC in state 472 resolved as shift
WARNING: shift/reduce conflict for DEC in state 472 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 472 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 472 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 472 resolved as shift
WARNING: shift/reduce conflict for VAR in state 472 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 472 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 472 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 472 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 512 resolved as shift
WARNING: shift/reduce conflict for GET in state 519 resolved as shift
WARNING: shift/reduce conflict for SET in state 519 resolved as shift
WARNING: shift/reduce conflict for ID in state 519 resolved as shift
WARNING: shift/reduce conflict for ID in state 531 resolved as shift
WARNING: shift/reduce conflict for GET in state 531 resolved as shift
WARNING: shift/reduce conflict for SET in state 531 resolved as shift
WARNING: shift/reduce conflict for ID in state 553 resolved as shift
WARNING: shift/reduce conflict for GET in state 553 resolved as shift
WARNING: shift/reduce conflict for SET in state 553 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 558 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 558 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 558 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 558 resolved as shift
WARNING: shift/reduce conflict for IF in state 558 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 558 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 558 resolved as shift
WARNING: shift/reduce conflict for WITH in state 558 resolved as shift
WARNING: shift/reduce conflict for DO in state 558 resolved as shift
WARNING: shift/reduce conflict for FOR in state 558 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 558 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 558 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 558 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 558 resolved as shift
WARNING: shift/reduce conflict for THROW in state 558 resolved as shift
WARNING: shift/reduce conflict for TRY in state 558 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 558 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 558 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 558 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 558 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 558 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 558 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 558 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 558 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 558 resolved as shift
WARNING: shift/reduce conflict for ID in state 558 resolved as shift
WARNING: shift/reduce conflict for GET in state 558 resolved as shift
WARNING: shift/reduce conflict for SET in state 558 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 558 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 558 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 558 resolved as shift
WARNING: shift/reduce conflict for NOT in state 558 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 558 resolved as shift
WARNING: shift/reduce conflict for NEW in state 558 resolved as shift
WARNING: shift/reduce conflict for INC in state 558 resolved as shift
WARNING: shift/reduce conflict for DEC in state 558 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 558 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 558 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 558 resolved as shift
WARNING: shift/reduce conflict for VAR in state 558 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 558 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 558 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 558 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 560 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 560 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 560 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 560 resolved as shift
WARNING: shift/reduce conflict for IF in state 560 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 560 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 560 resolved as shift
WARNING: shift/reduce conflict for WITH in state 560 resolved as shift
WARNING: shift/reduce conflict for DO in state 560 resolved as shift
WARNING: shift/reduce conflict for FOR in state 560 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 560 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 560 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 560 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 560 resolved as shift
WARNING: shift/reduce conflict for THROW in state 560 resolved as shift
WARNING: shift/reduce conflict for TRY in state 560 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 560 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 560 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 560 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 560 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 560 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 560 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 560 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 560 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 560 resolved as shift
WARNING: shift/reduce conflict for ID in state 560 resolved as shift
WARNING: shift/reduce conflict for GET in state 560 resolved as shift
WARNING: shift/reduce conflict for SET in state 560 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 560 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 560 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 560 resolved as shift
WARNING: shift/reduce conflict for NOT in state 560 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 560 resolved as shift
WARNING: shift/reduce conflict for NEW in state 560 resolved as shift
WARNING: shift/reduce conflict for INC in state 560 resolved as shift
WARNING: shift/reduce conflict for DEC in state 560 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 560 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 560 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 560 resolved as shift
WARNING: shift/reduce conflict for VAR in state 560 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 560 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 560 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 560 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 573 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 573 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 573 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 573 resolved as shift
WARNING: shift/reduce conflict for IF in state 573 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 573 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 573 resolved as shift
WARNING: shift/reduce conflict for WITH in state 573 resolved as shift
WARNING: shift/reduce conflict for DO in state 573 resolved as shift
WARNING: shift/reduce conflict for FOR in state 573 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 573 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 573 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 573 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 573 resolved as shift
WARNING: shift/reduce conflict for THROW in state 573 resolved as shift
WARNING: shift/reduce conflict for TRY in state 573 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 573 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 573 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 573 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 573 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 573 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 573 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 573 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 573 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 573 resolved as shift
WARNING: shift/reduce conflict for ID in state 573 resolved as shift
WARNING: shift/reduce conflict for GET in state 573 resolved as shift
WARNING: shift/reduce conflict for SET in state 573 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 573 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 573 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 573 resolved as shift
WARNING: shift/reduce conflict for NOT in state 573 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 573 resolved as shift
WARNING: shift/reduce conflict for NEW in state 573 resolved as shift
WARNING: shift/reduce conflict for INC in state 573 resolved as shift
WARNING: shift/reduce conflict for DEC in state 573 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 573 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 573 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 573 resolved as shift
WARNING: shift/reduce conflict for VAR in state 573 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 573 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 573 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 573 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 578 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 578 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 578 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 578 resolved as shift
WARNING: shift/reduce conflict for IF in state 578 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 578 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 578 resolved as shift
WARNING: shift/reduce conflict for WITH in state 578 resolved as shift
WARNING: shift/reduce conflict for DO in state 578 resolved as shift
WARNING: shift/reduce conflict for FOR in state 578 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 578 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 578 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 578 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 578 resolved as shift
WARNING: shift/reduce conflict for THROW in state 578 resolved as shift
WARNING: shift/reduce conflict for TRY in state 578 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 578 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 578 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 578 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 578 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 578 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 578 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 578 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 578 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 578 resolved as shift
WARNING: shift/reduce conflict for ID in state 578 resolved as shift
WARNING: shift/reduce conflict for GET in state 578 resolved as shift
WARNING: shift/reduce conflict for SET in state 578 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 578 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 578 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 578 resolved as shift
WARNING: shift/reduce conflict for NOT in state 578 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 578 resolved as shift
WARNING: shift/reduce conflict for NEW in state 578 resolved as shift
WARNING: shift/reduce conflict for INC in state 578 resolved as shift
WARNING: shift/reduce conflict for DEC in state 578 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 578 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 578 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 578 resolved as shift
WARNING: shift/reduce conflict for VAR in state 578 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 578 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 578 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 578 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 579 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 579 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 579 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 579 resolved as shift
WARNING: shift/reduce conflict for IF in state 579 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 579 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 579 resolved as shift
WARNING: shift/reduce conflict for WITH in state 579 resolved as shift
WARNING: shift/reduce conflict for DO in state 579 resolved as shift
WARNING: shift/reduce conflict for FOR in state 579 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 579 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 579 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 579 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 579 resolved as shift
WARNING: shift/reduce conflict for THROW in state 579 resolved as shift
WARNING: shift/reduce conflict for TRY in state 579 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 579 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 579 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 579 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 579 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 579 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 579 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 579 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 579 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 579 resolved as shift
WARNING: shift/reduce conflict for ID in state 579 resolved as shift
WARNING: shift/reduce conflict for GET in state 579 resolved as shift
WARNING: shift/reduce conflict for SET in state 579 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 579 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 579 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 579 resolved as shift
WARNING: shift/reduce conflict for NOT in state 579 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 579 resolved as shift
WARNING: shift/reduce conflict for NEW in state 579 resolved as shift
WARNING: shift/reduce conflict for INC in state 579 resolved as shift
WARNING: shift/reduce conflict for DEC in state 579 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 579 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 579 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 579 resolved as shift
WARNING: shift/reduce conflict for VAR in state 579 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 579 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 579 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 579 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 585 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 585 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 585 resolved as shift
WARNING: shift/reduce conflict for TYPED in state 585 resolved as shift
WARNING: shift/reduce conflict for IF in state 585 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 585 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 585 resolved as shift
WARNING: shift/reduce conflict for WITH in state 585 resolved as shift
WARNING: shift/reduce conflict for DO in state 585 resolved as shift
WARNING: shift/reduce conflict for FOR in state 585 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 585 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 585 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 585 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 585 resolved as shift
WARNING: shift/reduce conflict for THROW in state 585 resolved as shift
WARNING: shift/reduce conflict for TRY in state 585 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 585 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 585 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 585 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 585 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 585 resolved as shift
WARNING: shift/reduce conflict for EXPORT in state 585 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 585 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 585 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 585 resolved as shift
WARNING: shift/reduce conflict for ID in state 585 resolved as shift
WARNING: shift/reduce conflict for GET in state 585 resolved as shift
WARNING: shift/reduce conflict for SET in state 585 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 585 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 585 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 585 resolved as shift
WARNING: shift/reduce conflict for NOT in state 585 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 585 resolved as shift
WARNING: shift/reduce conflict for NEW in state 585 resolved as shift
WARNING: shift/reduce conflict for INC in state 585 resolved as shift
WARNING: shift/reduce conflict for DEC in state 585 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 585 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 585 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 585 resolved as shift
WARNING: shift/reduce conflict for VAR in state 585 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 585 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 585 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 585 resolved as shift
WARNING: reduce/reduce conflict in state 1 resolved using rule (statement -> finally)
WARNING: rejected rule (statement_nonctrl -> finally) in state 1
WARNING: reduce/reduce conflict in state 6 resolved using rule (statement -> for)
WARNING: rejected rule (statement_nonctrl -> for) in state 6
WARNING: reduce/reduce conflict in state 18 resolved using rule (statement -> dowhile)
WARNING: rejected rule (statement_nonctrl -> dowhile) in state 18
WARNING: reduce/reduce conflict in state 22 resolved using rule (statement -> while)
WARNING: rejected rule (statement_nonctrl -> while) in state 22
WARNING: reduce/reduce conflict in state 23 resolved using rule (statement -> catch)
WARNING: rejected rule (statement_nonctrl -> catch) in state 23
WARNING: reduce/reduce conflict in state 42 resolved using rule (statement -> try)
WARNING: rejected rule (statement_nonctrl -> try) in state 42
WARNING: reduce/reduce conflict in state 56 resolved using rule (statement -> else)
WARNING: rejected rule (statement_nonctrl -> else) in state 56
WARNING: reduce/reduce conflict in state 76 resolved using rule (statement -> if)
WARNING: rejected rule (statement_nonctrl -> if) in state 76
WARNING: reduce/reduce conflict in state 147 resolved using rule (lbracket_restrict -> LBRACKET)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 147
WARNING: reduce/reduce conflict in state 147 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 147
WARNING: reduce/reduce conflict in state 151 resolved using rule (statement_nonctrl -> SEMI)
WARNING: rejected rule (ctrl_statement -> SEMI) in state 151
WARNING: reduce/reduce conflict in state 166 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (bitinv -> BITINV expr) in state 166
WARNING: reduce/reduce conflict in state 169 resolved using rule (statement -> break SEMI)
WARNING: rejected rule (statement_nonctrl -> break SEMI) in state 169
WARNING: reduce/reduce conflict in state 172 resolved using rule (statement -> continue SEMI)
WARNING: rejected rule (statement_nonctrl -> continue SEMI) in state 172
WARNING: reduce/reduce conflict in state 196 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (typeof -> TYPEOF expr) in state 196
WARNING: reduce/reduce conflict in state 198 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (dec -> DEC expr) in state 198
WARNING: reduce/reduce conflict in state 200 resolved using rule (func_name_opt -> ID)
WARNING: rejected rule (id -> ID) in state 200
WARNING: reduce/reduce conflict in state 207 resolved using rule (statement -> yield SEMI)
WARNING: rejected rule (statement_nonctrl -> yield SEMI) in state 207
WARNING: reduce/reduce conflict in state 224 resolved using rule (statement -> return SEMI)
WARNING: rejected rule (statement_nonctrl -> return SEMI) in state 224
WARNING: reduce/reduce conflict in state 225 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 225
WARNING: reduce/reduce conflict in state 226 resolved using rule (statement -> throw SEMI)
WARNING: rejected rule (statement_nonctrl -> throw SEMI) in state 226
WARNING: reduce/reduce conflict in state 229 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr_uminus -> MINUS expr) in state 229
WARNING: reduce/reduce conflict in state 234 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (not -> NOT expr) in state 234
WARNING: reduce/reduce conflict in state 236 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (new -> NEW expr) in state 236
WARNING: reduce/reduce conflict in state 239 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (inc -> INC expr) in state 239
WARNING: reduce/reduce conflict in state 240 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 240
WARNING: reduce/reduce conflict in state 242 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr BAND expr) in state 242
WARNING: reduce/reduce conflict in state 243 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr cmplx_assign expr) in state 243
WARNING: reduce/reduce conflict in state 244 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LAND expr) in state 244
WARNING: reduce/reduce conflict in state 245 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr PLUS expr) in state 245
WARNING: reduce/reduce conflict in state 246 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LSHIFT expr) in state 246
WARNING: reduce/reduce conflict in state 247 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr INSTANCEOF expr) in state 247
WARNING: reduce/reduce conflict in state 248 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr EQUAL expr) in state 248
WARNING: reduce/reduce conflict in state 249 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr RSHIFT expr) in state 249
WARNING: reduce/reduce conflict in state 250 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LOR expr) in state 250
WARNING: reduce/reduce conflict in state 251 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr TIMES expr) in state 251
WARNING: reduce/reduce conflict in state 253 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LTHANEQ expr) in state 253
WARNING: reduce/reduce conflict in state 254 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr COMMA expr) in state 254
WARNING: reduce/reduce conflict in state 256 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr EQUAL_STRICT expr) in state 256
WARNING: reduce/reduce conflict in state 257 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LLSHIFT expr) in state 257
WARNING: reduce/reduce conflict in state 258 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr MOD expr) in state 258
WARNING: reduce/reduce conflict in state 259 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr COND_DOT expr) in state 259
WARNING: reduce/reduce conflict in state 260 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr NOTEQUAL expr) in state 260
WARNING: reduce/reduce conflict in state 261 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr MINUS expr) in state 261
WARNING: reduce/reduce conflict in state 262 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr DOT expr) in state 262
WARNING: reduce/reduce conflict in state 263 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr GTHAN expr) in state 263
WARNING: reduce/reduce conflict in state 264 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr NOTEQUAL_STRICT expr) in state 264
WARNING: reduce/reduce conflict in state 265 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr IN expr) in state 265
WARNING: reduce/reduce conflict in state 266 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LTHAN expr) in state 266
WARNING: reduce/reduce conflict in state 267 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr BXOR expr) in state 267
WARNING: reduce/reduce conflict in state 268 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr GTHANEQ expr) in state 268
WARNING: reduce/reduce conflict in state 269 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr DIVIDE expr) in state 269
WARNING: reduce/reduce conflict in state 271 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr RRSHIFT expr) in state 271
WARNING: reduce/reduce conflict in state 272 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr BOR expr) in state 272
WARNING: reduce/reduce conflict in state 297 resolved using rule (assign -> expr)
WARNING: rejected rule (template_ref_opt -> <empty>) in state 297
WARNING: reduce/reduce conflict in state 320 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 320
WARNING: reduce/reduce conflict in state 342 resolved using rule (lbracket_restrict -> LBRACKET)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 342
WARNING: reduce/reduce conflict in state 342 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 342
WARNING: reduce/reduce conflict in state 406 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr QEST expr COLON expr) in state 406
WARNING: reduce/reduce conflict in state 421 resolved using rule (assign -> expr cmplx_assign expr)
WARNING: rejected rule (expr -> expr cmplx_assign expr) in state 421
WARNING: reduce/reduce conflict in state 421 resolved using rule (assign -> expr cmplx_assign expr)
WARNING: rejected rule (template_ref_opt -> <empty>) in state 421
WARNING: reduce/reduce conflict in state 422 resolved using rule (assign -> assign cmplx_assign expr)
WARNING: rejected rule (template_ref_opt -> <empty>) in state 422
WARNING: reduce/reduce conflict in state 439 resolved using rule (lbracket_restrict -> LBRACKET)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 439
WARNING: reduce/reduce conflict in state 439 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 439
WARNING: reduce/reduce conflict in state 471 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 471
WARNING: reduce/reduce conflict in state 558 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 558
WARNING: reduce/reduce conflict in state 560 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 560
WARNING: reduce/reduce conflict in state 573 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 573
WARNING: reduce/reduce conflict in state 578 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 578
WARNING: reduce/reduce conflict in state 579 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 579
WARNING: reduce/reduce conflict in state 585 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 585
WARNING: Rule (statementlist_opt -> <empty>) is never reduced
WARNING: Rule (ctrl_statement -> SEMI) is never reduced
