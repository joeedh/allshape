
function test_obj() {
  this.a = 0;
  this.b = "c";
}

for (var i in test_obj) {
  console.log(i);
}

throw 'yeek';
t = typeof 1 instanceof 2;
a = {a: b, 1: 2, '"enable"': 3,};
a = ~1<<2;
b = 2>>3
b = a === b in c
b = b !== a + 0xff

while (a = b) {
}

a = 1/1;
a =/[ \t]+/g
a = 1.39e-23
/*ss*/
with (Math) {
  console.log(pi);
}

switch (a) {
  case 0:
    a = 1;
    b = 2
    break
  case 2:
  case 3:
    b = 3
    break
  default:
    b = -1;
    break
}

while (1);

function a(a, b, c) {
  return function() {
    b = c;
  }
  return 1;
}

if (!b1 && !b2) {
/*we're connecting verts between two holes.
  theoretically, we should join the holes
  along a single edge*/
  
} else {
  
}

if (a == 1)
  return a

2 + 1

for (var i=0; i<1; i++) {
  a = 1;
}

/*
function generator_next() { //(a, b) {
  pos = this.pos;
  
  function frame_1() {
    function frame_1_1() {
      var frame_1.i = this.a + 1;
      if (frame_1.i == 0) frame_1.i = 1;
      
      frame_1.iter = this.a.__iterator__();
    }
    
    function frame_1_2() {
        try {
           var item = iter.next();
           yield item;
        } catch (StopIteration) {
          return loopbreak();
        }
      }
    }
    
    if (frame_1.pos == 0) {
      frame_1.pos++;
      var ret = frame_1_1(); if (ret) return ret.value();
    }
    
    if (frame_1.pos == 1) {
      frame_1.pos++;
      while (1) {
        var ret = frame_1_2(); 
        
        if (ret == "break") break;
        else if (ret) return ret.value();
      }
    }
  }
  
  if (this.pos == 0) {
    this.pos++;
    if (typeof a == "object") {
      var ret = frame_1(); if (ret); return ret.value;
    }
  }
  
  function frame_2() {
  }
  
  if (this.pos == 1) {
    this.i = 0;
    this.pos++;
  }
  
  if (this.pos == 2) {
    for (; this.i<3; this.i++) {
      var ret = frame_2(); 
        
      if (ret == "break") break;
      else if (ret) return ret.value();
    }
  }
  
  throw StopIteration;
}
*/