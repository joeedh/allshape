Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    SLASHR
    BACKSLASH
    DO
    BYTE
    OPENCOM
    SHORT
    CLOSECOM
    newline
    UNION
    FUNCTION
    COMMENT
    THEN
    WHILE
    BNEGATE
    ALL
    VAR
    EMPTYLINE

Grammar

Rule 0     S' -> statementlist
Rule 1     statementlist -> statement
Rule 2     statementlist -> statement_local
Rule 3     statementlist -> statementlist statement
Rule 4     statementlist -> statementlist statement_local
Rule 5     statement -> if
Rule 6     statement -> function
Rule 7     statement -> builtin_func SEMI
Rule 8     statement -> builtin_global SEMI
Rule 9     statement -> else
Rule 10    statement -> for
Rule 11    statement -> expr SEMI
Rule 12    statement -> return SEMI
Rule 13    statement -> break SEMI
Rule 14    statement -> continue SEMI
Rule 15    statement -> struct SEMI
Rule 16    statement -> assign SEMI
Rule 17    statement -> var_decl SEMI
Rule 18    statement -> SEMI
Rule 19    statement_local -> assign SEMI
Rule 20    statement_local -> if
Rule 21    statement_local -> else
Rule 22    statement_local -> for
Rule 23    statement_local -> return SEMI
Rule 24    statement_local -> break SEMI
Rule 25    statement_local -> continue SEMI
Rule 26    statement_local -> var_decl SEMI
Rule 27    statement_local -> struct SEMI
Rule 28    statement_local -> SEMI
Rule 29    modifier -> UNIFORM
Rule 30    modifier -> ATTRIBUTE
Rule 31    modifier -> VARYING
Rule 32    modifier -> INPUT
Rule 33    modifier -> OUTPUT
Rule 34    modifier -> HIGHP
Rule 35    modifier -> MEDIUMP
Rule 36    modifier -> LOWP
Rule 37    type_decl -> INT
Rule 38    type_decl -> FLOAT
Rule 39    type_decl -> BOOL
Rule 40    type_decl -> FLOAT16
Rule 41    type_decl -> DOUBLE
Rule 42    type_decl -> VOID
Rule 43    type_decl -> ID
Rule 44    type_decl -> modifier type_decl
Rule 45    arr_decl -> LSBRACKET NUMBER RSBRACKET
Rule 46    arr_decl -> LSBRACKET RSBRACKET
Rule 47    arr_decl -> arr_decl LSBRACKET NUMBER RSBRACKET
Rule 48    arr_decl -> arr_decl LSBRACKET RSBRACKET
Rule 49    var_basic -> type_decl ID arr_decl
Rule 50    var_basic -> type_decl ID
Rule 51    var_decl -> var_basic
Rule 52    var_decl -> var_basic ASSIGN expr
Rule 53    cmplx_assign -> ASSIGNPLUS
Rule 54    cmplx_assign -> ASSIGNMINUS
Rule 55    cmplx_assign -> ASSIGNDIVIDE
Rule 56    cmplx_assign -> ASSIGNTIMES
Rule 57    cmplx_assign -> ASSIGNBOR
Rule 58    cmplx_assign -> ASSIGNBAND
Rule 59    cmplx_assign -> ASSIGNBXOR
Rule 60    cmplx_assign -> ASSIGN
Rule 61    assign_expr -> ID
Rule 62    assign_expr -> assign_expr DOT assign_expr
Rule 63    assign_expr -> assign_expr LSBRACKET expr RSBRACKET
Rule 64    assign_expr -> assign_expr INC
Rule 65    assign_expr -> assign_expr DEC
Rule 66    assign_expr -> INC assign_expr
Rule 67    assign_expr -> DEC assign_expr
Rule 68    assign -> assign_expr cmplx_assign expr
Rule 69    assign -> assign cmplx_assign expr
Rule 70    assign -> INC assign_expr
Rule 71    assign -> DEC assign_expr
Rule 72    assign -> assign_expr INC
Rule 73    assign -> assign_expr DEC
Rule 74    exprlist -> expr
Rule 75    exprlist -> ID ASSIGN expr
Rule 76    exprlist -> exprlist COMMA expr
Rule 77    exprlist -> exprlist COMMA ID ASSIGN expr
Rule 78    func_call -> LPAREN exprlist RPAREN
Rule 79    func_call -> LPAREN RPAREN
Rule 80    funcdeflist -> type_decl ID
Rule 81    funcdeflist -> type_decl ID arr_decl
Rule 82    funcdeflist -> funcdeflist COMMA type_decl ID arr_decl
Rule 83    funcdeflist -> funcdeflist COMMA type_decl ID
Rule 84    structlist -> var_basic SEMI
Rule 85    structlist -> struct
Rule 86    structlist -> structlist var_basic SEMI
Rule 87    structlist -> structlist struct
Rule 88    struct -> STRUCT ID LBRACKET structlist RBRACKET
Rule 89    struct -> STRUCT LBRACKET structlist RBRACKET ID
Rule 90    function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
Rule 91    function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
Rule 92    function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
Rule 93    function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
Rule 94    builtin_id -> ID
Rule 95    builtin_id -> FLOAT
Rule 96    builtin_id -> INT
Rule 97    builtin_id -> BOOL
Rule 98    builtin_func -> BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
Rule 99    builtin_func -> BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
Rule 100   builtin_global -> BUILTIN type_decl ID arr_decl
Rule 101   builtin_global -> BUILTIN type_decl ID
Rule 102   array_literal -> LSBRACKET exprlist RSBRACKET
Rule 103   array_literal -> LSBRACKET RSBRACKET
Rule 104   obj_lit_list -> ID COLON expr
Rule 105   obj_lit_list -> obj_lit_list COMMA ID COLON expr
Rule 106   obj_literal -> LBRACKET obj_lit_list RBRACKET
Rule 107   obj_literal -> LBRACKET RBRACKET
Rule 108   new -> NEW expr
Rule 109   inc -> expr INC
Rule 110   inc -> INC expr
Rule 111   dec -> expr DEC
Rule 112   dec -> DEC expr
Rule 113   not -> NOT expr
Rule 114   strlit -> STRINGLIT
Rule 115   expr -> NUMBER
Rule 116   expr -> TRUE
Rule 117   expr -> FALSE
Rule 118   expr -> strlit
Rule 119   expr -> ID
Rule 120   expr -> array_literal
Rule 121   expr -> obj_literal
Rule 122   expr -> expr DOT expr
Rule 123   expr -> expr LAND expr
Rule 124   expr -> expr LOR expr
Rule 125   expr -> expr BOR expr
Rule 126   expr -> expr BXOR expr
Rule 127   expr -> expr BAND expr
Rule 128   expr -> expr EQUAL expr
Rule 129   expr -> expr NOTEQUAL expr
Rule 130   expr -> expr GTHAN expr
Rule 131   expr -> expr GTHANEQ expr
Rule 132   expr -> expr LTHAN expr
Rule 133   expr -> expr MOD expr
Rule 134   expr -> expr LTHANEQ expr
Rule 135   expr -> expr PLUS expr
Rule 136   expr -> expr MINUS expr
Rule 137   expr -> expr DIVIDE expr
Rule 138   expr -> expr TIMES expr
Rule 139   expr -> LPAREN expr RPAREN
Rule 140   expr -> expr func_call
Rule 141   expr -> expr LSBRACKET expr RSBRACKET
Rule 142   expr -> expr QEST expr COLON expr
Rule 143   expr -> expr_uminus
Rule 144   expr -> assign2
Rule 145   expr -> not
Rule 146   expr -> new
Rule 147   expr -> inc
Rule 148   expr -> dec
Rule 149   assign_expr2 -> ID
Rule 150   assign_expr2 -> assign_expr2 DOT assign_expr2
Rule 151   assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET
Rule 152   assign2 -> assign_expr2 cmplx_assign expr
Rule 153   assign2 -> assign2 cmplx_assign expr
Rule 154   assign2 -> INC assign_expr2
Rule 155   assign2 -> DEC assign_expr2
Rule 156   assign2 -> assign_expr2 INC
Rule 157   assign2 -> assign_expr2 DEC
Rule 158   expr_uminus -> MINUS expr
Rule 159   paren_expr -> LPAREN expr RPAREN
Rule 160   paren_expr -> LPAREN RPAREN
Rule 161   for_decl -> var_decl SEMI expr SEMI assign
Rule 162   for -> FOR LPAREN for_decl RPAREN statement_local
Rule 163   for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
Rule 164   if -> IF paren_expr statement_local
Rule 165   if -> IF paren_expr LBRACKET statementlist RBRACKET
Rule 166   else -> ELSE statement_local
Rule 167   else -> ELSE LBRACKET statementlist RBRACKET
Rule 168   break -> BREAK
Rule 169   continue -> CONTINUE
Rule 170   return -> RETURN expr
Rule 171   return -> RETURN

Terminals, with rules where they appear

ALL                  : 
ASSIGN               : 52 60 75 77 98 99
ASSIGNBAND           : 58
ASSIGNBOR            : 57
ASSIGNBXOR           : 59
ASSIGNDIVIDE         : 55
ASSIGNMINUS          : 54
ASSIGNPLUS           : 53
ASSIGNTIMES          : 56
ATTRIBUTE            : 30
BACKSLASH            : 
BAND                 : 127
BNEGATE              : 
BOOL                 : 39 97
BOR                  : 125
BREAK                : 168
BUILTIN              : 98 99 100 101
BXOR                 : 126
BYTE                 : 
CLOSECOM             : 
COLON                : 92 93 104 105 142
COMMA                : 76 77 82 83 105
COMMENT              : 
CONTINUE             : 169
DEC                  : 65 67 71 73 111 112 155 157
DIVIDE               : 137
DO                   : 
DOT                  : 62 122 150
DOUBLE               : 41
ELSE                 : 166 167
EMPTYLINE            : 
EQUAL                : 128
FALSE                : 117
FLOAT                : 38 95
FLOAT16              : 40
FOR                  : 162 163
FUNCTION             : 
GTHAN                : 130
GTHANEQ              : 131
HIGHP                : 34
ID                   : 43 49 50 61 75 77 80 81 82 83 88 89 90 91 92 92 93 93 94 98 99 100 101 104 105 119 149
IF                   : 164 165
INC                  : 64 66 70 72 109 110 154 156
INPUT                : 32
INT                  : 37 96
LAND                 : 123
LBRACKET             : 88 89 90 91 92 93 106 107 163 165 167
LOR                  : 124
LOWP                 : 36
LPAREN               : 78 79 90 91 92 93 98 99 139 159 160 162 163
LSBRACKET            : 45 46 47 48 63 102 103 141 151
LTHAN                : 132
LTHANEQ              : 134
MEDIUMP              : 35
MINUS                : 136 158
MOD                  : 133
NEW                  : 108
NOT                  : 113
NOTEQUAL             : 129
NUMBER               : 45 47 115
OPENCOM              : 
OUTPUT               : 33
PLUS                 : 135
QEST                 : 142
RBRACKET             : 88 89 90 91 92 93 106 107 163 165 167
RETURN               : 170 171
RPAREN               : 78 79 90 91 92 93 98 99 139 159 160 162 163
RSBRACKET            : 45 46 47 48 63 102 103 141 151
SEMI                 : 7 8 11 12 13 14 15 16 17 18 19 23 24 25 26 27 28 84 86 161 161
SHORT                : 
SLASHR               : 
STRINGLIT            : 114
STRUCT               : 88 89
THEN                 : 
TIMES                : 138
TRUE                 : 116
UNIFORM              : 29
UNION                : 
VAR                  : 
VARYING              : 31
VOID                 : 42
WHILE                : 
error                : 
newline              : 

Nonterminals, with rules where they appear

arr_decl             : 47 48 49 81 82 100
array_literal        : 120
assign               : 16 19 69 161
assign2              : 144 153
assign_expr          : 62 62 63 64 65 66 67 68 70 71 72 73
assign_expr2         : 150 150 151 152 154 155 156 157
break                : 13 24
builtin_func         : 7
builtin_global       : 8
builtin_id           : 98 99
cmplx_assign         : 68 69 152 153
continue             : 14 25
dec                  : 148
else                 : 9 21
expr                 : 11 52 63 68 69 74 75 76 77 104 105 108 109 110 111 112 113 122 122 123 123 124 124 125 125 126 126 127 127 128 128 129 129 130 130 131 131 132 132 133 133 134 134 135 135 136 136 137 137 138 138 139 140 141 141 142 142 142 151 152 153 158 159 161 170
expr_uminus          : 143
exprlist             : 76 77 78 102
for                  : 10 22
for_decl             : 162 163
func_call            : 140
funcdeflist          : 82 83 90 92 98
function             : 6
if                   : 5 20
inc                  : 147
modifier             : 44
new                  : 146
not                  : 145
obj_lit_list         : 105 106
obj_literal          : 121
paren_expr           : 164 165
return               : 12 23
statement            : 1 3
statement_local      : 2 4 162 164 166
statementlist        : 3 4 90 91 92 93 163 165 167 0
strlit               : 118
struct               : 15 27 85 87
structlist           : 86 87 88 89
type_decl            : 44 49 50 80 81 82 83 90 91 92 93 98 99 100 101
var_basic            : 51 52 84 86
var_decl             : 17 26 161

Parsing method: LALR

state 0

    (0) S' -> . statementlist
    (1) statementlist -> . statement
    (2) statementlist -> . statement_local
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    statementlist                  shift and go to state 32
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 55
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 65
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 1

    (114) strlit -> STRINGLIT .

    DOT             reduce using rule 114 (strlit -> STRINGLIT .)
    LAND            reduce using rule 114 (strlit -> STRINGLIT .)
    LOR             reduce using rule 114 (strlit -> STRINGLIT .)
    BOR             reduce using rule 114 (strlit -> STRINGLIT .)
    BXOR            reduce using rule 114 (strlit -> STRINGLIT .)
    BAND            reduce using rule 114 (strlit -> STRINGLIT .)
    EQUAL           reduce using rule 114 (strlit -> STRINGLIT .)
    NOTEQUAL        reduce using rule 114 (strlit -> STRINGLIT .)
    GTHAN           reduce using rule 114 (strlit -> STRINGLIT .)
    GTHANEQ         reduce using rule 114 (strlit -> STRINGLIT .)
    LTHAN           reduce using rule 114 (strlit -> STRINGLIT .)
    MOD             reduce using rule 114 (strlit -> STRINGLIT .)
    LTHANEQ         reduce using rule 114 (strlit -> STRINGLIT .)
    PLUS            reduce using rule 114 (strlit -> STRINGLIT .)
    MINUS           reduce using rule 114 (strlit -> STRINGLIT .)
    DIVIDE          reduce using rule 114 (strlit -> STRINGLIT .)
    TIMES           reduce using rule 114 (strlit -> STRINGLIT .)
    LSBRACKET       reduce using rule 114 (strlit -> STRINGLIT .)
    QEST            reduce using rule 114 (strlit -> STRINGLIT .)
    INC             reduce using rule 114 (strlit -> STRINGLIT .)
    DEC             reduce using rule 114 (strlit -> STRINGLIT .)
    LPAREN          reduce using rule 114 (strlit -> STRINGLIT .)
    SEMI            reduce using rule 114 (strlit -> STRINGLIT .)
    RPAREN          reduce using rule 114 (strlit -> STRINGLIT .)
    RSBRACKET       reduce using rule 114 (strlit -> STRINGLIT .)
    COMMA           reduce using rule 114 (strlit -> STRINGLIT .)
    COLON           reduce using rule 114 (strlit -> STRINGLIT .)
    ASSIGNPLUS      reduce using rule 114 (strlit -> STRINGLIT .)
    ASSIGNMINUS     reduce using rule 114 (strlit -> STRINGLIT .)
    ASSIGNDIVIDE    reduce using rule 114 (strlit -> STRINGLIT .)
    ASSIGNTIMES     reduce using rule 114 (strlit -> STRINGLIT .)
    ASSIGNBOR       reduce using rule 114 (strlit -> STRINGLIT .)
    ASSIGNBAND      reduce using rule 114 (strlit -> STRINGLIT .)
    ASSIGNBXOR      reduce using rule 114 (strlit -> STRINGLIT .)
    ASSIGN          reduce using rule 114 (strlit -> STRINGLIT .)
    RBRACKET        reduce using rule 114 (strlit -> STRINGLIT .)


state 2

    (166) else -> ELSE . statement_local
    (167) else -> ELSE . LBRACKET statementlist RBRACKET
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    LBRACKET        shift and go to state 74
    SEMI            shift and go to state 80
    INC             shift and go to state 78
    DEC             shift and go to state 75
    IF              shift and go to state 54
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    ID              shift and go to state 73
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    modifier                       shift and go to state 51
    else                           shift and go to state 67
    continue                       shift and go to state 71
    assign                         shift and go to state 70
    if                             shift and go to state 79
    break                          shift and go to state 81
    for                            shift and go to state 72
    struct                         shift and go to state 69
    type_decl                      shift and go to state 77
    statement_local                shift and go to state 68
    assign_expr                    shift and go to state 20
    return                         shift and go to state 76
    var_basic                      shift and go to state 45
    var_decl                       shift and go to state 82

state 3

    (14) statement -> continue . SEMI
    (25) statement_local -> continue . SEMI

    SEMI            shift and go to state 83


state 4

    (11) statement -> expr . SEMI
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    SEMI            shift and go to state 92
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 5

    (115) expr -> NUMBER .

    DOT             reduce using rule 115 (expr -> NUMBER .)
    LAND            reduce using rule 115 (expr -> NUMBER .)
    LOR             reduce using rule 115 (expr -> NUMBER .)
    BOR             reduce using rule 115 (expr -> NUMBER .)
    BXOR            reduce using rule 115 (expr -> NUMBER .)
    BAND            reduce using rule 115 (expr -> NUMBER .)
    EQUAL           reduce using rule 115 (expr -> NUMBER .)
    NOTEQUAL        reduce using rule 115 (expr -> NUMBER .)
    GTHAN           reduce using rule 115 (expr -> NUMBER .)
    GTHANEQ         reduce using rule 115 (expr -> NUMBER .)
    LTHAN           reduce using rule 115 (expr -> NUMBER .)
    MOD             reduce using rule 115 (expr -> NUMBER .)
    LTHANEQ         reduce using rule 115 (expr -> NUMBER .)
    PLUS            reduce using rule 115 (expr -> NUMBER .)
    MINUS           reduce using rule 115 (expr -> NUMBER .)
    DIVIDE          reduce using rule 115 (expr -> NUMBER .)
    TIMES           reduce using rule 115 (expr -> NUMBER .)
    LSBRACKET       reduce using rule 115 (expr -> NUMBER .)
    QEST            reduce using rule 115 (expr -> NUMBER .)
    INC             reduce using rule 115 (expr -> NUMBER .)
    DEC             reduce using rule 115 (expr -> NUMBER .)
    LPAREN          reduce using rule 115 (expr -> NUMBER .)
    SEMI            reduce using rule 115 (expr -> NUMBER .)
    RPAREN          reduce using rule 115 (expr -> NUMBER .)
    RSBRACKET       reduce using rule 115 (expr -> NUMBER .)
    COMMA           reduce using rule 115 (expr -> NUMBER .)
    COLON           reduce using rule 115 (expr -> NUMBER .)
    ASSIGNPLUS      reduce using rule 115 (expr -> NUMBER .)
    ASSIGNMINUS     reduce using rule 115 (expr -> NUMBER .)
    ASSIGNDIVIDE    reduce using rule 115 (expr -> NUMBER .)
    ASSIGNTIMES     reduce using rule 115 (expr -> NUMBER .)
    ASSIGNBOR       reduce using rule 115 (expr -> NUMBER .)
    ASSIGNBAND      reduce using rule 115 (expr -> NUMBER .)
    ASSIGNBXOR      reduce using rule 115 (expr -> NUMBER .)
    ASSIGN          reduce using rule 115 (expr -> NUMBER .)
    RBRACKET        reduce using rule 115 (expr -> NUMBER .)


state 6

    (30) modifier -> ATTRIBUTE .

    INT             reduce using rule 30 (modifier -> ATTRIBUTE .)
    FLOAT           reduce using rule 30 (modifier -> ATTRIBUTE .)
    BOOL            reduce using rule 30 (modifier -> ATTRIBUTE .)
    FLOAT16         reduce using rule 30 (modifier -> ATTRIBUTE .)
    DOUBLE          reduce using rule 30 (modifier -> ATTRIBUTE .)
    VOID            reduce using rule 30 (modifier -> ATTRIBUTE .)
    ID              reduce using rule 30 (modifier -> ATTRIBUTE .)
    UNIFORM         reduce using rule 30 (modifier -> ATTRIBUTE .)
    ATTRIBUTE       reduce using rule 30 (modifier -> ATTRIBUTE .)
    VARYING         reduce using rule 30 (modifier -> ATTRIBUTE .)
    INPUT           reduce using rule 30 (modifier -> ATTRIBUTE .)
    OUTPUT          reduce using rule 30 (modifier -> ATTRIBUTE .)
    HIGHP           reduce using rule 30 (modifier -> ATTRIBUTE .)
    MEDIUMP         reduce using rule 30 (modifier -> ATTRIBUTE .)
    LOWP            reduce using rule 30 (modifier -> ATTRIBUTE .)


state 7

    (34) modifier -> HIGHP .

    INT             reduce using rule 34 (modifier -> HIGHP .)
    FLOAT           reduce using rule 34 (modifier -> HIGHP .)
    BOOL            reduce using rule 34 (modifier -> HIGHP .)
    FLOAT16         reduce using rule 34 (modifier -> HIGHP .)
    DOUBLE          reduce using rule 34 (modifier -> HIGHP .)
    VOID            reduce using rule 34 (modifier -> HIGHP .)
    ID              reduce using rule 34 (modifier -> HIGHP .)
    UNIFORM         reduce using rule 34 (modifier -> HIGHP .)
    ATTRIBUTE       reduce using rule 34 (modifier -> HIGHP .)
    VARYING         reduce using rule 34 (modifier -> HIGHP .)
    INPUT           reduce using rule 34 (modifier -> HIGHP .)
    OUTPUT          reduce using rule 34 (modifier -> HIGHP .)
    HIGHP           reduce using rule 34 (modifier -> HIGHP .)
    MEDIUMP         reduce using rule 34 (modifier -> HIGHP .)
    LOWP            reduce using rule 34 (modifier -> HIGHP .)


state 8

    (120) expr -> array_literal .

    DOT             reduce using rule 120 (expr -> array_literal .)
    LAND            reduce using rule 120 (expr -> array_literal .)
    LOR             reduce using rule 120 (expr -> array_literal .)
    BOR             reduce using rule 120 (expr -> array_literal .)
    BXOR            reduce using rule 120 (expr -> array_literal .)
    BAND            reduce using rule 120 (expr -> array_literal .)
    EQUAL           reduce using rule 120 (expr -> array_literal .)
    NOTEQUAL        reduce using rule 120 (expr -> array_literal .)
    GTHAN           reduce using rule 120 (expr -> array_literal .)
    GTHANEQ         reduce using rule 120 (expr -> array_literal .)
    LTHAN           reduce using rule 120 (expr -> array_literal .)
    MOD             reduce using rule 120 (expr -> array_literal .)
    LTHANEQ         reduce using rule 120 (expr -> array_literal .)
    PLUS            reduce using rule 120 (expr -> array_literal .)
    MINUS           reduce using rule 120 (expr -> array_literal .)
    DIVIDE          reduce using rule 120 (expr -> array_literal .)
    TIMES           reduce using rule 120 (expr -> array_literal .)
    LSBRACKET       reduce using rule 120 (expr -> array_literal .)
    QEST            reduce using rule 120 (expr -> array_literal .)
    INC             reduce using rule 120 (expr -> array_literal .)
    DEC             reduce using rule 120 (expr -> array_literal .)
    LPAREN          reduce using rule 120 (expr -> array_literal .)
    SEMI            reduce using rule 120 (expr -> array_literal .)
    RPAREN          reduce using rule 120 (expr -> array_literal .)
    RSBRACKET       reduce using rule 120 (expr -> array_literal .)
    COMMA           reduce using rule 120 (expr -> array_literal .)
    COLON           reduce using rule 120 (expr -> array_literal .)
    ASSIGNPLUS      reduce using rule 120 (expr -> array_literal .)
    ASSIGNMINUS     reduce using rule 120 (expr -> array_literal .)
    ASSIGNDIVIDE    reduce using rule 120 (expr -> array_literal .)
    ASSIGNTIMES     reduce using rule 120 (expr -> array_literal .)
    ASSIGNBOR       reduce using rule 120 (expr -> array_literal .)
    ASSIGNBAND      reduce using rule 120 (expr -> array_literal .)
    ASSIGNBXOR      reduce using rule 120 (expr -> array_literal .)
    ASSIGN          reduce using rule 120 (expr -> array_literal .)
    RBRACKET        reduce using rule 120 (expr -> array_literal .)


state 9

    (145) expr -> not .

    DOT             reduce using rule 145 (expr -> not .)
    LAND            reduce using rule 145 (expr -> not .)
    LOR             reduce using rule 145 (expr -> not .)
    BOR             reduce using rule 145 (expr -> not .)
    BXOR            reduce using rule 145 (expr -> not .)
    BAND            reduce using rule 145 (expr -> not .)
    EQUAL           reduce using rule 145 (expr -> not .)
    NOTEQUAL        reduce using rule 145 (expr -> not .)
    GTHAN           reduce using rule 145 (expr -> not .)
    GTHANEQ         reduce using rule 145 (expr -> not .)
    LTHAN           reduce using rule 145 (expr -> not .)
    MOD             reduce using rule 145 (expr -> not .)
    LTHANEQ         reduce using rule 145 (expr -> not .)
    PLUS            reduce using rule 145 (expr -> not .)
    MINUS           reduce using rule 145 (expr -> not .)
    DIVIDE          reduce using rule 145 (expr -> not .)
    TIMES           reduce using rule 145 (expr -> not .)
    LSBRACKET       reduce using rule 145 (expr -> not .)
    QEST            reduce using rule 145 (expr -> not .)
    INC             reduce using rule 145 (expr -> not .)
    DEC             reduce using rule 145 (expr -> not .)
    LPAREN          reduce using rule 145 (expr -> not .)
    SEMI            reduce using rule 145 (expr -> not .)
    RPAREN          reduce using rule 145 (expr -> not .)
    RSBRACKET       reduce using rule 145 (expr -> not .)
    COMMA           reduce using rule 145 (expr -> not .)
    COLON           reduce using rule 145 (expr -> not .)
    ASSIGNPLUS      reduce using rule 145 (expr -> not .)
    ASSIGNMINUS     reduce using rule 145 (expr -> not .)
    ASSIGNDIVIDE    reduce using rule 145 (expr -> not .)
    ASSIGNTIMES     reduce using rule 145 (expr -> not .)
    ASSIGNBOR       reduce using rule 145 (expr -> not .)
    ASSIGNBAND      reduce using rule 145 (expr -> not .)
    ASSIGNBXOR      reduce using rule 145 (expr -> not .)
    ASSIGN          reduce using rule 145 (expr -> not .)
    RBRACKET        reduce using rule 145 (expr -> not .)


state 10

    (10) statement -> for .
    (22) statement_local -> for .

  ! reduce/reduce conflict for RBRACKET resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for SEMI resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for IF resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for BUILTIN resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for ELSE resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for NUMBER resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for TRUE resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for FALSE resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for ID resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for LPAREN resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for RETURN resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for BREAK resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for STRUCT resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for INC resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for DEC resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for INT resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for FLOAT resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for BOOL resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for FLOAT16 resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for VOID resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for MINUS resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for NOT resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for NEW resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for UNIFORM resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for ATTRIBUTE resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for VARYING resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for INPUT resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for HIGHP resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for MEDIUMP resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for LOWP resolved using rule 10 (statement -> for .)
  ! reduce/reduce conflict for $end resolved using rule 10 (statement -> for .)
    RBRACKET        reduce using rule 10 (statement -> for .)
    SEMI            reduce using rule 10 (statement -> for .)
    IF              reduce using rule 10 (statement -> for .)
    BUILTIN         reduce using rule 10 (statement -> for .)
    ELSE            reduce using rule 10 (statement -> for .)
    FOR             reduce using rule 10 (statement -> for .)
    NUMBER          reduce using rule 10 (statement -> for .)
    TRUE            reduce using rule 10 (statement -> for .)
    FALSE           reduce using rule 10 (statement -> for .)
    ID              reduce using rule 10 (statement -> for .)
    LPAREN          reduce using rule 10 (statement -> for .)
    RETURN          reduce using rule 10 (statement -> for .)
    BREAK           reduce using rule 10 (statement -> for .)
    CONTINUE        reduce using rule 10 (statement -> for .)
    STRUCT          reduce using rule 10 (statement -> for .)
    INC             reduce using rule 10 (statement -> for .)
    DEC             reduce using rule 10 (statement -> for .)
    INT             reduce using rule 10 (statement -> for .)
    FLOAT           reduce using rule 10 (statement -> for .)
    BOOL            reduce using rule 10 (statement -> for .)
    FLOAT16         reduce using rule 10 (statement -> for .)
    DOUBLE          reduce using rule 10 (statement -> for .)
    VOID            reduce using rule 10 (statement -> for .)
    STRINGLIT       reduce using rule 10 (statement -> for .)
    LSBRACKET       reduce using rule 10 (statement -> for .)
    LBRACKET        reduce using rule 10 (statement -> for .)
    MINUS           reduce using rule 10 (statement -> for .)
    NOT             reduce using rule 10 (statement -> for .)
    NEW             reduce using rule 10 (statement -> for .)
    UNIFORM         reduce using rule 10 (statement -> for .)
    ATTRIBUTE       reduce using rule 10 (statement -> for .)
    VARYING         reduce using rule 10 (statement -> for .)
    INPUT           reduce using rule 10 (statement -> for .)
    OUTPUT          reduce using rule 10 (statement -> for .)
    HIGHP           reduce using rule 10 (statement -> for .)
    MEDIUMP         reduce using rule 10 (statement -> for .)
    LOWP            reduce using rule 10 (statement -> for .)
    $end            reduce using rule 10 (statement -> for .)

  ! RBRACKET        [ reduce using rule 22 (statement_local -> for .) ]
  ! SEMI            [ reduce using rule 22 (statement_local -> for .) ]
  ! IF              [ reduce using rule 22 (statement_local -> for .) ]
  ! BUILTIN         [ reduce using rule 22 (statement_local -> for .) ]
  ! ELSE            [ reduce using rule 22 (statement_local -> for .) ]
  ! FOR             [ reduce using rule 22 (statement_local -> for .) ]
  ! NUMBER          [ reduce using rule 22 (statement_local -> for .) ]
  ! TRUE            [ reduce using rule 22 (statement_local -> for .) ]
  ! FALSE           [ reduce using rule 22 (statement_local -> for .) ]
  ! ID              [ reduce using rule 22 (statement_local -> for .) ]
  ! LPAREN          [ reduce using rule 22 (statement_local -> for .) ]
  ! RETURN          [ reduce using rule 22 (statement_local -> for .) ]
  ! BREAK           [ reduce using rule 22 (statement_local -> for .) ]
  ! CONTINUE        [ reduce using rule 22 (statement_local -> for .) ]
  ! STRUCT          [ reduce using rule 22 (statement_local -> for .) ]
  ! INC             [ reduce using rule 22 (statement_local -> for .) ]
  ! DEC             [ reduce using rule 22 (statement_local -> for .) ]
  ! INT             [ reduce using rule 22 (statement_local -> for .) ]
  ! FLOAT           [ reduce using rule 22 (statement_local -> for .) ]
  ! BOOL            [ reduce using rule 22 (statement_local -> for .) ]
  ! FLOAT16         [ reduce using rule 22 (statement_local -> for .) ]
  ! DOUBLE          [ reduce using rule 22 (statement_local -> for .) ]
  ! VOID            [ reduce using rule 22 (statement_local -> for .) ]
  ! STRINGLIT       [ reduce using rule 22 (statement_local -> for .) ]
  ! LSBRACKET       [ reduce using rule 22 (statement_local -> for .) ]
  ! LBRACKET        [ reduce using rule 22 (statement_local -> for .) ]
  ! MINUS           [ reduce using rule 22 (statement_local -> for .) ]
  ! NOT             [ reduce using rule 22 (statement_local -> for .) ]
  ! NEW             [ reduce using rule 22 (statement_local -> for .) ]
  ! UNIFORM         [ reduce using rule 22 (statement_local -> for .) ]
  ! ATTRIBUTE       [ reduce using rule 22 (statement_local -> for .) ]
  ! VARYING         [ reduce using rule 22 (statement_local -> for .) ]
  ! INPUT           [ reduce using rule 22 (statement_local -> for .) ]
  ! OUTPUT          [ reduce using rule 22 (statement_local -> for .) ]
  ! HIGHP           [ reduce using rule 22 (statement_local -> for .) ]
  ! MEDIUMP         [ reduce using rule 22 (statement_local -> for .) ]
  ! LOWP            [ reduce using rule 22 (statement_local -> for .) ]
  ! $end            [ reduce using rule 22 (statement_local -> for .) ]


state 11

    (88) struct -> STRUCT . ID LBRACKET structlist RBRACKET
    (89) struct -> STRUCT . LBRACKET structlist RBRACKET ID

    ID              shift and go to state 109
    LBRACKET        shift and go to state 108


state 12

    (41) type_decl -> DOUBLE .

    ID              reduce using rule 41 (type_decl -> DOUBLE .)


state 13

    (17) statement -> var_decl . SEMI
    (26) statement_local -> var_decl . SEMI

    SEMI            shift and go to state 110


state 14

    (39) type_decl -> BOOL .

    ID              reduce using rule 39 (type_decl -> BOOL .)


state 15

    (71) assign -> DEC . assign_expr
    (155) assign2 -> DEC . assign_expr2
    (112) dec -> DEC . expr
    (67) assign_expr -> DEC . assign_expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr

    ID              shift and go to state 113
    INC             shift and go to state 111
    DEC             shift and go to state 114
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 112
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 116
    not                            shift and go to state 9
    assign_expr                    shift and go to state 115
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 16

    (12) statement -> return . SEMI
    (23) statement_local -> return . SEMI

    SEMI            shift and go to state 117


state 17

    (35) modifier -> MEDIUMP .

    INT             reduce using rule 35 (modifier -> MEDIUMP .)
    FLOAT           reduce using rule 35 (modifier -> MEDIUMP .)
    BOOL            reduce using rule 35 (modifier -> MEDIUMP .)
    FLOAT16         reduce using rule 35 (modifier -> MEDIUMP .)
    DOUBLE          reduce using rule 35 (modifier -> MEDIUMP .)
    VOID            reduce using rule 35 (modifier -> MEDIUMP .)
    ID              reduce using rule 35 (modifier -> MEDIUMP .)
    UNIFORM         reduce using rule 35 (modifier -> MEDIUMP .)
    ATTRIBUTE       reduce using rule 35 (modifier -> MEDIUMP .)
    VARYING         reduce using rule 35 (modifier -> MEDIUMP .)
    INPUT           reduce using rule 35 (modifier -> MEDIUMP .)
    OUTPUT          reduce using rule 35 (modifier -> MEDIUMP .)
    HIGHP           reduce using rule 35 (modifier -> MEDIUMP .)
    MEDIUMP         reduce using rule 35 (modifier -> MEDIUMP .)
    LOWP            reduce using rule 35 (modifier -> MEDIUMP .)


state 18

    (5) statement -> if .
    (20) statement_local -> if .

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for SEMI resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for IF resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for BUILTIN resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for ELSE resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for FOR resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for TRUE resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for FALSE resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for RETURN resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for BREAK resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for STRUCT resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for INC resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for DEC resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for INT resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for BOOL resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for FLOAT16 resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for VOID resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for MINUS resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for NOT resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for NEW resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for UNIFORM resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for ATTRIBUTE resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for VARYING resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for INPUT resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for HIGHP resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for MEDIUMP resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for LOWP resolved using rule 5 (statement -> if .)
  ! reduce/reduce conflict for $end resolved using rule 5 (statement -> if .)
    RBRACKET        reduce using rule 5 (statement -> if .)
    SEMI            reduce using rule 5 (statement -> if .)
    IF              reduce using rule 5 (statement -> if .)
    BUILTIN         reduce using rule 5 (statement -> if .)
    ELSE            reduce using rule 5 (statement -> if .)
    FOR             reduce using rule 5 (statement -> if .)
    NUMBER          reduce using rule 5 (statement -> if .)
    TRUE            reduce using rule 5 (statement -> if .)
    FALSE           reduce using rule 5 (statement -> if .)
    ID              reduce using rule 5 (statement -> if .)
    LPAREN          reduce using rule 5 (statement -> if .)
    RETURN          reduce using rule 5 (statement -> if .)
    BREAK           reduce using rule 5 (statement -> if .)
    CONTINUE        reduce using rule 5 (statement -> if .)
    STRUCT          reduce using rule 5 (statement -> if .)
    INC             reduce using rule 5 (statement -> if .)
    DEC             reduce using rule 5 (statement -> if .)
    INT             reduce using rule 5 (statement -> if .)
    FLOAT           reduce using rule 5 (statement -> if .)
    BOOL            reduce using rule 5 (statement -> if .)
    FLOAT16         reduce using rule 5 (statement -> if .)
    DOUBLE          reduce using rule 5 (statement -> if .)
    VOID            reduce using rule 5 (statement -> if .)
    STRINGLIT       reduce using rule 5 (statement -> if .)
    LSBRACKET       reduce using rule 5 (statement -> if .)
    LBRACKET        reduce using rule 5 (statement -> if .)
    MINUS           reduce using rule 5 (statement -> if .)
    NOT             reduce using rule 5 (statement -> if .)
    NEW             reduce using rule 5 (statement -> if .)
    UNIFORM         reduce using rule 5 (statement -> if .)
    ATTRIBUTE       reduce using rule 5 (statement -> if .)
    VARYING         reduce using rule 5 (statement -> if .)
    INPUT           reduce using rule 5 (statement -> if .)
    OUTPUT          reduce using rule 5 (statement -> if .)
    HIGHP           reduce using rule 5 (statement -> if .)
    MEDIUMP         reduce using rule 5 (statement -> if .)
    LOWP            reduce using rule 5 (statement -> if .)
    $end            reduce using rule 5 (statement -> if .)

  ! RBRACKET        [ reduce using rule 20 (statement_local -> if .) ]
  ! SEMI            [ reduce using rule 20 (statement_local -> if .) ]
  ! IF              [ reduce using rule 20 (statement_local -> if .) ]
  ! BUILTIN         [ reduce using rule 20 (statement_local -> if .) ]
  ! ELSE            [ reduce using rule 20 (statement_local -> if .) ]
  ! FOR             [ reduce using rule 20 (statement_local -> if .) ]
  ! NUMBER          [ reduce using rule 20 (statement_local -> if .) ]
  ! TRUE            [ reduce using rule 20 (statement_local -> if .) ]
  ! FALSE           [ reduce using rule 20 (statement_local -> if .) ]
  ! ID              [ reduce using rule 20 (statement_local -> if .) ]
  ! LPAREN          [ reduce using rule 20 (statement_local -> if .) ]
  ! RETURN          [ reduce using rule 20 (statement_local -> if .) ]
  ! BREAK           [ reduce using rule 20 (statement_local -> if .) ]
  ! CONTINUE        [ reduce using rule 20 (statement_local -> if .) ]
  ! STRUCT          [ reduce using rule 20 (statement_local -> if .) ]
  ! INC             [ reduce using rule 20 (statement_local -> if .) ]
  ! DEC             [ reduce using rule 20 (statement_local -> if .) ]
  ! INT             [ reduce using rule 20 (statement_local -> if .) ]
  ! FLOAT           [ reduce using rule 20 (statement_local -> if .) ]
  ! BOOL            [ reduce using rule 20 (statement_local -> if .) ]
  ! FLOAT16         [ reduce using rule 20 (statement_local -> if .) ]
  ! DOUBLE          [ reduce using rule 20 (statement_local -> if .) ]
  ! VOID            [ reduce using rule 20 (statement_local -> if .) ]
  ! STRINGLIT       [ reduce using rule 20 (statement_local -> if .) ]
  ! LSBRACKET       [ reduce using rule 20 (statement_local -> if .) ]
  ! LBRACKET        [ reduce using rule 20 (statement_local -> if .) ]
  ! MINUS           [ reduce using rule 20 (statement_local -> if .) ]
  ! NOT             [ reduce using rule 20 (statement_local -> if .) ]
  ! NEW             [ reduce using rule 20 (statement_local -> if .) ]
  ! UNIFORM         [ reduce using rule 20 (statement_local -> if .) ]
  ! ATTRIBUTE       [ reduce using rule 20 (statement_local -> if .) ]
  ! VARYING         [ reduce using rule 20 (statement_local -> if .) ]
  ! INPUT           [ reduce using rule 20 (statement_local -> if .) ]
  ! OUTPUT          [ reduce using rule 20 (statement_local -> if .) ]
  ! HIGHP           [ reduce using rule 20 (statement_local -> if .) ]
  ! MEDIUMP         [ reduce using rule 20 (statement_local -> if .) ]
  ! LOWP            [ reduce using rule 20 (statement_local -> if .) ]
  ! $end            [ reduce using rule 20 (statement_local -> if .) ]


state 19

    (168) break -> BREAK .

    SEMI            reduce using rule 168 (break -> BREAK .)


state 20

    (68) assign -> assign_expr . cmplx_assign expr
    (72) assign -> assign_expr . INC
    (73) assign -> assign_expr . DEC
    (62) assign_expr -> assign_expr . DOT assign_expr
    (63) assign_expr -> assign_expr . LSBRACKET expr RSBRACKET
    (64) assign_expr -> assign_expr . INC
    (65) assign_expr -> assign_expr . DEC
    (53) cmplx_assign -> . ASSIGNPLUS
    (54) cmplx_assign -> . ASSIGNMINUS
    (55) cmplx_assign -> . ASSIGNDIVIDE
    (56) cmplx_assign -> . ASSIGNTIMES
    (57) cmplx_assign -> . ASSIGNBOR
    (58) cmplx_assign -> . ASSIGNBAND
    (59) cmplx_assign -> . ASSIGNBXOR
    (60) cmplx_assign -> . ASSIGN

    INC             shift and go to state 127
    DEC             shift and go to state 119
    DOT             shift and go to state 118
    LSBRACKET       shift and go to state 130
    ASSIGNPLUS      shift and go to state 122
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 124
    ASSIGNTIMES     shift and go to state 123
    ASSIGNBOR       shift and go to state 125
    ASSIGNBAND      shift and go to state 128
    ASSIGNBXOR      shift and go to state 129
    ASSIGN          shift and go to state 121

    cmplx_assign                   shift and go to state 120

state 21

    (32) modifier -> INPUT .

    INT             reduce using rule 32 (modifier -> INPUT .)
    FLOAT           reduce using rule 32 (modifier -> INPUT .)
    BOOL            reduce using rule 32 (modifier -> INPUT .)
    FLOAT16         reduce using rule 32 (modifier -> INPUT .)
    DOUBLE          reduce using rule 32 (modifier -> INPUT .)
    VOID            reduce using rule 32 (modifier -> INPUT .)
    ID              reduce using rule 32 (modifier -> INPUT .)
    UNIFORM         reduce using rule 32 (modifier -> INPUT .)
    ATTRIBUTE       reduce using rule 32 (modifier -> INPUT .)
    VARYING         reduce using rule 32 (modifier -> INPUT .)
    INPUT           reduce using rule 32 (modifier -> INPUT .)
    OUTPUT          reduce using rule 32 (modifier -> INPUT .)
    HIGHP           reduce using rule 32 (modifier -> INPUT .)
    MEDIUMP         reduce using rule 32 (modifier -> INPUT .)
    LOWP            reduce using rule 32 (modifier -> INPUT .)


state 22

    (18) statement -> SEMI .
    (28) statement_local -> SEMI .

  ! reduce/reduce conflict for RBRACKET resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for BUILTIN resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for TRUE resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for FALSE resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for STRUCT resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for INT resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for FLOAT resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for BOOL resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for FLOAT16 resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for VOID resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for UNIFORM resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for ATTRIBUTE resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for VARYING resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for INPUT resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for HIGHP resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for MEDIUMP resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for LOWP resolved using rule 18 (statement -> SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 18 (statement -> SEMI .)
    RBRACKET        reduce using rule 18 (statement -> SEMI .)
    SEMI            reduce using rule 18 (statement -> SEMI .)
    IF              reduce using rule 18 (statement -> SEMI .)
    BUILTIN         reduce using rule 18 (statement -> SEMI .)
    ELSE            reduce using rule 18 (statement -> SEMI .)
    FOR             reduce using rule 18 (statement -> SEMI .)
    NUMBER          reduce using rule 18 (statement -> SEMI .)
    TRUE            reduce using rule 18 (statement -> SEMI .)
    FALSE           reduce using rule 18 (statement -> SEMI .)
    ID              reduce using rule 18 (statement -> SEMI .)
    LPAREN          reduce using rule 18 (statement -> SEMI .)
    RETURN          reduce using rule 18 (statement -> SEMI .)
    BREAK           reduce using rule 18 (statement -> SEMI .)
    CONTINUE        reduce using rule 18 (statement -> SEMI .)
    STRUCT          reduce using rule 18 (statement -> SEMI .)
    INC             reduce using rule 18 (statement -> SEMI .)
    DEC             reduce using rule 18 (statement -> SEMI .)
    INT             reduce using rule 18 (statement -> SEMI .)
    FLOAT           reduce using rule 18 (statement -> SEMI .)
    BOOL            reduce using rule 18 (statement -> SEMI .)
    FLOAT16         reduce using rule 18 (statement -> SEMI .)
    DOUBLE          reduce using rule 18 (statement -> SEMI .)
    VOID            reduce using rule 18 (statement -> SEMI .)
    STRINGLIT       reduce using rule 18 (statement -> SEMI .)
    LSBRACKET       reduce using rule 18 (statement -> SEMI .)
    LBRACKET        reduce using rule 18 (statement -> SEMI .)
    MINUS           reduce using rule 18 (statement -> SEMI .)
    NOT             reduce using rule 18 (statement -> SEMI .)
    NEW             reduce using rule 18 (statement -> SEMI .)
    UNIFORM         reduce using rule 18 (statement -> SEMI .)
    ATTRIBUTE       reduce using rule 18 (statement -> SEMI .)
    VARYING         reduce using rule 18 (statement -> SEMI .)
    INPUT           reduce using rule 18 (statement -> SEMI .)
    OUTPUT          reduce using rule 18 (statement -> SEMI .)
    HIGHP           reduce using rule 18 (statement -> SEMI .)
    MEDIUMP         reduce using rule 18 (statement -> SEMI .)
    LOWP            reduce using rule 18 (statement -> SEMI .)
    $end            reduce using rule 18 (statement -> SEMI .)

  ! RBRACKET        [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! SEMI            [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! IF              [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! BUILTIN         [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! ELSE            [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! FOR             [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! NUMBER          [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! TRUE            [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! FALSE           [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! ID              [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! LPAREN          [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! RETURN          [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! BREAK           [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! CONTINUE        [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! STRUCT          [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! INC             [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! DEC             [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! INT             [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! FLOAT           [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! BOOL            [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! FLOAT16         [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! DOUBLE          [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! VOID            [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! STRINGLIT       [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! LSBRACKET       [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! LBRACKET        [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! MINUS           [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! NOT             [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! NEW             [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! UNIFORM         [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! ATTRIBUTE       [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! VARYING         [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! INPUT           [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! OUTPUT          [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! HIGHP           [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! MEDIUMP         [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! LOWP            [ reduce using rule 28 (statement_local -> SEMI .) ]
  ! $end            [ reduce using rule 28 (statement_local -> SEMI .) ]


state 23

    (116) expr -> TRUE .

    DOT             reduce using rule 116 (expr -> TRUE .)
    LAND            reduce using rule 116 (expr -> TRUE .)
    LOR             reduce using rule 116 (expr -> TRUE .)
    BOR             reduce using rule 116 (expr -> TRUE .)
    BXOR            reduce using rule 116 (expr -> TRUE .)
    BAND            reduce using rule 116 (expr -> TRUE .)
    EQUAL           reduce using rule 116 (expr -> TRUE .)
    NOTEQUAL        reduce using rule 116 (expr -> TRUE .)
    GTHAN           reduce using rule 116 (expr -> TRUE .)
    GTHANEQ         reduce using rule 116 (expr -> TRUE .)
    LTHAN           reduce using rule 116 (expr -> TRUE .)
    MOD             reduce using rule 116 (expr -> TRUE .)
    LTHANEQ         reduce using rule 116 (expr -> TRUE .)
    PLUS            reduce using rule 116 (expr -> TRUE .)
    MINUS           reduce using rule 116 (expr -> TRUE .)
    DIVIDE          reduce using rule 116 (expr -> TRUE .)
    TIMES           reduce using rule 116 (expr -> TRUE .)
    LSBRACKET       reduce using rule 116 (expr -> TRUE .)
    QEST            reduce using rule 116 (expr -> TRUE .)
    INC             reduce using rule 116 (expr -> TRUE .)
    DEC             reduce using rule 116 (expr -> TRUE .)
    LPAREN          reduce using rule 116 (expr -> TRUE .)
    SEMI            reduce using rule 116 (expr -> TRUE .)
    RPAREN          reduce using rule 116 (expr -> TRUE .)
    RSBRACKET       reduce using rule 116 (expr -> TRUE .)
    COMMA           reduce using rule 116 (expr -> TRUE .)
    COLON           reduce using rule 116 (expr -> TRUE .)
    ASSIGNPLUS      reduce using rule 116 (expr -> TRUE .)
    ASSIGNMINUS     reduce using rule 116 (expr -> TRUE .)
    ASSIGNDIVIDE    reduce using rule 116 (expr -> TRUE .)
    ASSIGNTIMES     reduce using rule 116 (expr -> TRUE .)
    ASSIGNBOR       reduce using rule 116 (expr -> TRUE .)
    ASSIGNBAND      reduce using rule 116 (expr -> TRUE .)
    ASSIGNBXOR      reduce using rule 116 (expr -> TRUE .)
    ASSIGN          reduce using rule 116 (expr -> TRUE .)
    RBRACKET        reduce using rule 116 (expr -> TRUE .)


state 24

    (121) expr -> obj_literal .

    DOT             reduce using rule 121 (expr -> obj_literal .)
    LAND            reduce using rule 121 (expr -> obj_literal .)
    LOR             reduce using rule 121 (expr -> obj_literal .)
    BOR             reduce using rule 121 (expr -> obj_literal .)
    BXOR            reduce using rule 121 (expr -> obj_literal .)
    BAND            reduce using rule 121 (expr -> obj_literal .)
    EQUAL           reduce using rule 121 (expr -> obj_literal .)
    NOTEQUAL        reduce using rule 121 (expr -> obj_literal .)
    GTHAN           reduce using rule 121 (expr -> obj_literal .)
    GTHANEQ         reduce using rule 121 (expr -> obj_literal .)
    LTHAN           reduce using rule 121 (expr -> obj_literal .)
    MOD             reduce using rule 121 (expr -> obj_literal .)
    LTHANEQ         reduce using rule 121 (expr -> obj_literal .)
    PLUS            reduce using rule 121 (expr -> obj_literal .)
    MINUS           reduce using rule 121 (expr -> obj_literal .)
    DIVIDE          reduce using rule 121 (expr -> obj_literal .)
    TIMES           reduce using rule 121 (expr -> obj_literal .)
    LSBRACKET       reduce using rule 121 (expr -> obj_literal .)
    QEST            reduce using rule 121 (expr -> obj_literal .)
    INC             reduce using rule 121 (expr -> obj_literal .)
    DEC             reduce using rule 121 (expr -> obj_literal .)
    LPAREN          reduce using rule 121 (expr -> obj_literal .)
    SEMI            reduce using rule 121 (expr -> obj_literal .)
    RPAREN          reduce using rule 121 (expr -> obj_literal .)
    RSBRACKET       reduce using rule 121 (expr -> obj_literal .)
    COMMA           reduce using rule 121 (expr -> obj_literal .)
    COLON           reduce using rule 121 (expr -> obj_literal .)
    ASSIGNPLUS      reduce using rule 121 (expr -> obj_literal .)
    ASSIGNMINUS     reduce using rule 121 (expr -> obj_literal .)
    ASSIGNDIVIDE    reduce using rule 121 (expr -> obj_literal .)
    ASSIGNTIMES     reduce using rule 121 (expr -> obj_literal .)
    ASSIGNBOR       reduce using rule 121 (expr -> obj_literal .)
    ASSIGNBAND      reduce using rule 121 (expr -> obj_literal .)
    ASSIGNBXOR      reduce using rule 121 (expr -> obj_literal .)
    ASSIGN          reduce using rule 121 (expr -> obj_literal .)
    RBRACKET        reduce using rule 121 (expr -> obj_literal .)


state 25

    (13) statement -> break . SEMI
    (24) statement_local -> break . SEMI

    SEMI            shift and go to state 131


state 26

    (158) expr_uminus -> MINUS . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 133
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 27

    (6) statement -> function .

    RBRACKET        reduce using rule 6 (statement -> function .)
    SEMI            reduce using rule 6 (statement -> function .)
    IF              reduce using rule 6 (statement -> function .)
    BUILTIN         reduce using rule 6 (statement -> function .)
    ELSE            reduce using rule 6 (statement -> function .)
    FOR             reduce using rule 6 (statement -> function .)
    NUMBER          reduce using rule 6 (statement -> function .)
    TRUE            reduce using rule 6 (statement -> function .)
    FALSE           reduce using rule 6 (statement -> function .)
    ID              reduce using rule 6 (statement -> function .)
    LPAREN          reduce using rule 6 (statement -> function .)
    RETURN          reduce using rule 6 (statement -> function .)
    BREAK           reduce using rule 6 (statement -> function .)
    CONTINUE        reduce using rule 6 (statement -> function .)
    STRUCT          reduce using rule 6 (statement -> function .)
    INC             reduce using rule 6 (statement -> function .)
    DEC             reduce using rule 6 (statement -> function .)
    INT             reduce using rule 6 (statement -> function .)
    FLOAT           reduce using rule 6 (statement -> function .)
    BOOL            reduce using rule 6 (statement -> function .)
    FLOAT16         reduce using rule 6 (statement -> function .)
    DOUBLE          reduce using rule 6 (statement -> function .)
    VOID            reduce using rule 6 (statement -> function .)
    STRINGLIT       reduce using rule 6 (statement -> function .)
    LSBRACKET       reduce using rule 6 (statement -> function .)
    LBRACKET        reduce using rule 6 (statement -> function .)
    MINUS           reduce using rule 6 (statement -> function .)
    NOT             reduce using rule 6 (statement -> function .)
    NEW             reduce using rule 6 (statement -> function .)
    UNIFORM         reduce using rule 6 (statement -> function .)
    ATTRIBUTE       reduce using rule 6 (statement -> function .)
    VARYING         reduce using rule 6 (statement -> function .)
    INPUT           reduce using rule 6 (statement -> function .)
    OUTPUT          reduce using rule 6 (statement -> function .)
    HIGHP           reduce using rule 6 (statement -> function .)
    MEDIUMP         reduce using rule 6 (statement -> function .)
    LOWP            reduce using rule 6 (statement -> function .)
    $end            reduce using rule 6 (statement -> function .)


state 28

    (147) expr -> inc .

    DOT             reduce using rule 147 (expr -> inc .)
    LAND            reduce using rule 147 (expr -> inc .)
    LOR             reduce using rule 147 (expr -> inc .)
    BOR             reduce using rule 147 (expr -> inc .)
    BXOR            reduce using rule 147 (expr -> inc .)
    BAND            reduce using rule 147 (expr -> inc .)
    EQUAL           reduce using rule 147 (expr -> inc .)
    NOTEQUAL        reduce using rule 147 (expr -> inc .)
    GTHAN           reduce using rule 147 (expr -> inc .)
    GTHANEQ         reduce using rule 147 (expr -> inc .)
    LTHAN           reduce using rule 147 (expr -> inc .)
    MOD             reduce using rule 147 (expr -> inc .)
    LTHANEQ         reduce using rule 147 (expr -> inc .)
    PLUS            reduce using rule 147 (expr -> inc .)
    MINUS           reduce using rule 147 (expr -> inc .)
    DIVIDE          reduce using rule 147 (expr -> inc .)
    TIMES           reduce using rule 147 (expr -> inc .)
    LSBRACKET       reduce using rule 147 (expr -> inc .)
    QEST            reduce using rule 147 (expr -> inc .)
    INC             reduce using rule 147 (expr -> inc .)
    DEC             reduce using rule 147 (expr -> inc .)
    LPAREN          reduce using rule 147 (expr -> inc .)
    SEMI            reduce using rule 147 (expr -> inc .)
    RPAREN          reduce using rule 147 (expr -> inc .)
    RSBRACKET       reduce using rule 147 (expr -> inc .)
    COMMA           reduce using rule 147 (expr -> inc .)
    COLON           reduce using rule 147 (expr -> inc .)
    ASSIGNPLUS      reduce using rule 147 (expr -> inc .)
    ASSIGNMINUS     reduce using rule 147 (expr -> inc .)
    ASSIGNDIVIDE    reduce using rule 147 (expr -> inc .)
    ASSIGNTIMES     reduce using rule 147 (expr -> inc .)
    ASSIGNBOR       reduce using rule 147 (expr -> inc .)
    ASSIGNBAND      reduce using rule 147 (expr -> inc .)
    ASSIGNBXOR      reduce using rule 147 (expr -> inc .)
    ASSIGN          reduce using rule 147 (expr -> inc .)
    RBRACKET        reduce using rule 147 (expr -> inc .)


state 29

    (29) modifier -> UNIFORM .

    INT             reduce using rule 29 (modifier -> UNIFORM .)
    FLOAT           reduce using rule 29 (modifier -> UNIFORM .)
    BOOL            reduce using rule 29 (modifier -> UNIFORM .)
    FLOAT16         reduce using rule 29 (modifier -> UNIFORM .)
    DOUBLE          reduce using rule 29 (modifier -> UNIFORM .)
    VOID            reduce using rule 29 (modifier -> UNIFORM .)
    ID              reduce using rule 29 (modifier -> UNIFORM .)
    UNIFORM         reduce using rule 29 (modifier -> UNIFORM .)
    ATTRIBUTE       reduce using rule 29 (modifier -> UNIFORM .)
    VARYING         reduce using rule 29 (modifier -> UNIFORM .)
    INPUT           reduce using rule 29 (modifier -> UNIFORM .)
    OUTPUT          reduce using rule 29 (modifier -> UNIFORM .)
    HIGHP           reduce using rule 29 (modifier -> UNIFORM .)
    MEDIUMP         reduce using rule 29 (modifier -> UNIFORM .)
    LOWP            reduce using rule 29 (modifier -> UNIFORM .)


state 30

    (106) obj_literal -> LBRACKET . obj_lit_list RBRACKET
    (107) obj_literal -> LBRACKET . RBRACKET
    (104) obj_lit_list -> . ID COLON expr
    (105) obj_lit_list -> . obj_lit_list COMMA ID COLON expr

    RBRACKET        shift and go to state 136
    ID              shift and go to state 137

    obj_lit_list                   shift and go to state 138

state 31

    (117) expr -> FALSE .

    DOT             reduce using rule 117 (expr -> FALSE .)
    LAND            reduce using rule 117 (expr -> FALSE .)
    LOR             reduce using rule 117 (expr -> FALSE .)
    BOR             reduce using rule 117 (expr -> FALSE .)
    BXOR            reduce using rule 117 (expr -> FALSE .)
    BAND            reduce using rule 117 (expr -> FALSE .)
    EQUAL           reduce using rule 117 (expr -> FALSE .)
    NOTEQUAL        reduce using rule 117 (expr -> FALSE .)
    GTHAN           reduce using rule 117 (expr -> FALSE .)
    GTHANEQ         reduce using rule 117 (expr -> FALSE .)
    LTHAN           reduce using rule 117 (expr -> FALSE .)
    MOD             reduce using rule 117 (expr -> FALSE .)
    LTHANEQ         reduce using rule 117 (expr -> FALSE .)
    PLUS            reduce using rule 117 (expr -> FALSE .)
    MINUS           reduce using rule 117 (expr -> FALSE .)
    DIVIDE          reduce using rule 117 (expr -> FALSE .)
    TIMES           reduce using rule 117 (expr -> FALSE .)
    LSBRACKET       reduce using rule 117 (expr -> FALSE .)
    QEST            reduce using rule 117 (expr -> FALSE .)
    INC             reduce using rule 117 (expr -> FALSE .)
    DEC             reduce using rule 117 (expr -> FALSE .)
    LPAREN          reduce using rule 117 (expr -> FALSE .)
    SEMI            reduce using rule 117 (expr -> FALSE .)
    RPAREN          reduce using rule 117 (expr -> FALSE .)
    RSBRACKET       reduce using rule 117 (expr -> FALSE .)
    COMMA           reduce using rule 117 (expr -> FALSE .)
    COLON           reduce using rule 117 (expr -> FALSE .)
    ASSIGNPLUS      reduce using rule 117 (expr -> FALSE .)
    ASSIGNMINUS     reduce using rule 117 (expr -> FALSE .)
    ASSIGNDIVIDE    reduce using rule 117 (expr -> FALSE .)
    ASSIGNTIMES     reduce using rule 117 (expr -> FALSE .)
    ASSIGNBOR       reduce using rule 117 (expr -> FALSE .)
    ASSIGNBAND      reduce using rule 117 (expr -> FALSE .)
    ASSIGNBXOR      reduce using rule 117 (expr -> FALSE .)
    ASSIGN          reduce using rule 117 (expr -> FALSE .)
    RBRACKET        reduce using rule 117 (expr -> FALSE .)


state 32

    (0) S' -> statementlist .
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 139
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 140
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 33

    (169) continue -> CONTINUE .

    SEMI            reduce using rule 169 (continue -> CONTINUE .)


state 34

    (8) statement -> builtin_global . SEMI

    SEMI            shift and go to state 141


state 35

    (144) expr -> assign2 .
    (153) assign2 -> assign2 . cmplx_assign expr
    (53) cmplx_assign -> . ASSIGNPLUS
    (54) cmplx_assign -> . ASSIGNMINUS
    (55) cmplx_assign -> . ASSIGNDIVIDE
    (56) cmplx_assign -> . ASSIGNTIMES
    (57) cmplx_assign -> . ASSIGNBOR
    (58) cmplx_assign -> . ASSIGNBAND
    (59) cmplx_assign -> . ASSIGNBXOR
    (60) cmplx_assign -> . ASSIGN

  ! shift/reduce conflict for ASSIGNPLUS resolved as shift
  ! shift/reduce conflict for ASSIGNMINUS resolved as shift
  ! shift/reduce conflict for ASSIGNDIVIDE resolved as shift
  ! shift/reduce conflict for ASSIGNTIMES resolved as shift
  ! shift/reduce conflict for ASSIGNBOR resolved as shift
  ! shift/reduce conflict for ASSIGNBAND resolved as shift
  ! shift/reduce conflict for ASSIGNBXOR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    DOT             reduce using rule 144 (expr -> assign2 .)
    LAND            reduce using rule 144 (expr -> assign2 .)
    LOR             reduce using rule 144 (expr -> assign2 .)
    BOR             reduce using rule 144 (expr -> assign2 .)
    BXOR            reduce using rule 144 (expr -> assign2 .)
    BAND            reduce using rule 144 (expr -> assign2 .)
    EQUAL           reduce using rule 144 (expr -> assign2 .)
    NOTEQUAL        reduce using rule 144 (expr -> assign2 .)
    GTHAN           reduce using rule 144 (expr -> assign2 .)
    GTHANEQ         reduce using rule 144 (expr -> assign2 .)
    LTHAN           reduce using rule 144 (expr -> assign2 .)
    MOD             reduce using rule 144 (expr -> assign2 .)
    LTHANEQ         reduce using rule 144 (expr -> assign2 .)
    PLUS            reduce using rule 144 (expr -> assign2 .)
    MINUS           reduce using rule 144 (expr -> assign2 .)
    DIVIDE          reduce using rule 144 (expr -> assign2 .)
    TIMES           reduce using rule 144 (expr -> assign2 .)
    LSBRACKET       reduce using rule 144 (expr -> assign2 .)
    QEST            reduce using rule 144 (expr -> assign2 .)
    INC             reduce using rule 144 (expr -> assign2 .)
    DEC             reduce using rule 144 (expr -> assign2 .)
    LPAREN          reduce using rule 144 (expr -> assign2 .)
    SEMI            reduce using rule 144 (expr -> assign2 .)
    RPAREN          reduce using rule 144 (expr -> assign2 .)
    RSBRACKET       reduce using rule 144 (expr -> assign2 .)
    COMMA           reduce using rule 144 (expr -> assign2 .)
    COLON           reduce using rule 144 (expr -> assign2 .)
    RBRACKET        reduce using rule 144 (expr -> assign2 .)
    ASSIGNPLUS      shift and go to state 122
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 124
    ASSIGNTIMES     shift and go to state 123
    ASSIGNBOR       shift and go to state 125
    ASSIGNBAND      shift and go to state 128
    ASSIGNBXOR      shift and go to state 129
    ASSIGN          shift and go to state 121

  ! ASSIGNPLUS      [ reduce using rule 144 (expr -> assign2 .) ]
  ! ASSIGNMINUS     [ reduce using rule 144 (expr -> assign2 .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 144 (expr -> assign2 .) ]
  ! ASSIGNTIMES     [ reduce using rule 144 (expr -> assign2 .) ]
  ! ASSIGNBOR       [ reduce using rule 144 (expr -> assign2 .) ]
  ! ASSIGNBAND      [ reduce using rule 144 (expr -> assign2 .) ]
  ! ASSIGNBXOR      [ reduce using rule 144 (expr -> assign2 .) ]
  ! ASSIGN          [ reduce using rule 144 (expr -> assign2 .) ]

    cmplx_assign                   shift and go to state 142

state 36

    (7) statement -> builtin_func . SEMI

    SEMI            shift and go to state 143


state 37

    (9) statement -> else .
    (21) statement_local -> else .

  ! reduce/reduce conflict for RBRACKET resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for SEMI resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for IF resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for BUILTIN resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for ELSE resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for FOR resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for NUMBER resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for TRUE resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for FALSE resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for ID resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for LPAREN resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for RETURN resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for BREAK resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for STRUCT resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for INC resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for DEC resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for INT resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for FLOAT resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for BOOL resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for FLOAT16 resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for VOID resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for MINUS resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for NOT resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for NEW resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for UNIFORM resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for ATTRIBUTE resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for VARYING resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for INPUT resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for HIGHP resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for MEDIUMP resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for LOWP resolved using rule 9 (statement -> else .)
  ! reduce/reduce conflict for $end resolved using rule 9 (statement -> else .)
    RBRACKET        reduce using rule 9 (statement -> else .)
    SEMI            reduce using rule 9 (statement -> else .)
    IF              reduce using rule 9 (statement -> else .)
    BUILTIN         reduce using rule 9 (statement -> else .)
    ELSE            reduce using rule 9 (statement -> else .)
    FOR             reduce using rule 9 (statement -> else .)
    NUMBER          reduce using rule 9 (statement -> else .)
    TRUE            reduce using rule 9 (statement -> else .)
    FALSE           reduce using rule 9 (statement -> else .)
    ID              reduce using rule 9 (statement -> else .)
    LPAREN          reduce using rule 9 (statement -> else .)
    RETURN          reduce using rule 9 (statement -> else .)
    BREAK           reduce using rule 9 (statement -> else .)
    CONTINUE        reduce using rule 9 (statement -> else .)
    STRUCT          reduce using rule 9 (statement -> else .)
    INC             reduce using rule 9 (statement -> else .)
    DEC             reduce using rule 9 (statement -> else .)
    INT             reduce using rule 9 (statement -> else .)
    FLOAT           reduce using rule 9 (statement -> else .)
    BOOL            reduce using rule 9 (statement -> else .)
    FLOAT16         reduce using rule 9 (statement -> else .)
    DOUBLE          reduce using rule 9 (statement -> else .)
    VOID            reduce using rule 9 (statement -> else .)
    STRINGLIT       reduce using rule 9 (statement -> else .)
    LSBRACKET       reduce using rule 9 (statement -> else .)
    LBRACKET        reduce using rule 9 (statement -> else .)
    MINUS           reduce using rule 9 (statement -> else .)
    NOT             reduce using rule 9 (statement -> else .)
    NEW             reduce using rule 9 (statement -> else .)
    UNIFORM         reduce using rule 9 (statement -> else .)
    ATTRIBUTE       reduce using rule 9 (statement -> else .)
    VARYING         reduce using rule 9 (statement -> else .)
    INPUT           reduce using rule 9 (statement -> else .)
    OUTPUT          reduce using rule 9 (statement -> else .)
    HIGHP           reduce using rule 9 (statement -> else .)
    MEDIUMP         reduce using rule 9 (statement -> else .)
    LOWP            reduce using rule 9 (statement -> else .)
    $end            reduce using rule 9 (statement -> else .)

  ! RBRACKET        [ reduce using rule 21 (statement_local -> else .) ]
  ! SEMI            [ reduce using rule 21 (statement_local -> else .) ]
  ! IF              [ reduce using rule 21 (statement_local -> else .) ]
  ! BUILTIN         [ reduce using rule 21 (statement_local -> else .) ]
  ! ELSE            [ reduce using rule 21 (statement_local -> else .) ]
  ! FOR             [ reduce using rule 21 (statement_local -> else .) ]
  ! NUMBER          [ reduce using rule 21 (statement_local -> else .) ]
  ! TRUE            [ reduce using rule 21 (statement_local -> else .) ]
  ! FALSE           [ reduce using rule 21 (statement_local -> else .) ]
  ! ID              [ reduce using rule 21 (statement_local -> else .) ]
  ! LPAREN          [ reduce using rule 21 (statement_local -> else .) ]
  ! RETURN          [ reduce using rule 21 (statement_local -> else .) ]
  ! BREAK           [ reduce using rule 21 (statement_local -> else .) ]
  ! CONTINUE        [ reduce using rule 21 (statement_local -> else .) ]
  ! STRUCT          [ reduce using rule 21 (statement_local -> else .) ]
  ! INC             [ reduce using rule 21 (statement_local -> else .) ]
  ! DEC             [ reduce using rule 21 (statement_local -> else .) ]
  ! INT             [ reduce using rule 21 (statement_local -> else .) ]
  ! FLOAT           [ reduce using rule 21 (statement_local -> else .) ]
  ! BOOL            [ reduce using rule 21 (statement_local -> else .) ]
  ! FLOAT16         [ reduce using rule 21 (statement_local -> else .) ]
  ! DOUBLE          [ reduce using rule 21 (statement_local -> else .) ]
  ! VOID            [ reduce using rule 21 (statement_local -> else .) ]
  ! STRINGLIT       [ reduce using rule 21 (statement_local -> else .) ]
  ! LSBRACKET       [ reduce using rule 21 (statement_local -> else .) ]
  ! LBRACKET        [ reduce using rule 21 (statement_local -> else .) ]
  ! MINUS           [ reduce using rule 21 (statement_local -> else .) ]
  ! NOT             [ reduce using rule 21 (statement_local -> else .) ]
  ! NEW             [ reduce using rule 21 (statement_local -> else .) ]
  ! UNIFORM         [ reduce using rule 21 (statement_local -> else .) ]
  ! ATTRIBUTE       [ reduce using rule 21 (statement_local -> else .) ]
  ! VARYING         [ reduce using rule 21 (statement_local -> else .) ]
  ! INPUT           [ reduce using rule 21 (statement_local -> else .) ]
  ! OUTPUT          [ reduce using rule 21 (statement_local -> else .) ]
  ! HIGHP           [ reduce using rule 21 (statement_local -> else .) ]
  ! MEDIUMP         [ reduce using rule 21 (statement_local -> else .) ]
  ! LOWP            [ reduce using rule 21 (statement_local -> else .) ]
  ! $end            [ reduce using rule 21 (statement_local -> else .) ]


state 38

    (139) expr -> LPAREN . expr RPAREN
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 144
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 39

    (170) return -> RETURN . expr
    (171) return -> RETURN .
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    SEMI            reduce using rule 171 (return -> RETURN .)
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 145
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 40

    (33) modifier -> OUTPUT .

    INT             reduce using rule 33 (modifier -> OUTPUT .)
    FLOAT           reduce using rule 33 (modifier -> OUTPUT .)
    BOOL            reduce using rule 33 (modifier -> OUTPUT .)
    FLOAT16         reduce using rule 33 (modifier -> OUTPUT .)
    DOUBLE          reduce using rule 33 (modifier -> OUTPUT .)
    VOID            reduce using rule 33 (modifier -> OUTPUT .)
    ID              reduce using rule 33 (modifier -> OUTPUT .)
    UNIFORM         reduce using rule 33 (modifier -> OUTPUT .)
    ATTRIBUTE       reduce using rule 33 (modifier -> OUTPUT .)
    VARYING         reduce using rule 33 (modifier -> OUTPUT .)
    INPUT           reduce using rule 33 (modifier -> OUTPUT .)
    OUTPUT          reduce using rule 33 (modifier -> OUTPUT .)
    HIGHP           reduce using rule 33 (modifier -> OUTPUT .)
    MEDIUMP         reduce using rule 33 (modifier -> OUTPUT .)
    LOWP            reduce using rule 33 (modifier -> OUTPUT .)


state 41

    (148) expr -> dec .

    DOT             reduce using rule 148 (expr -> dec .)
    LAND            reduce using rule 148 (expr -> dec .)
    LOR             reduce using rule 148 (expr -> dec .)
    BOR             reduce using rule 148 (expr -> dec .)
    BXOR            reduce using rule 148 (expr -> dec .)
    BAND            reduce using rule 148 (expr -> dec .)
    EQUAL           reduce using rule 148 (expr -> dec .)
    NOTEQUAL        reduce using rule 148 (expr -> dec .)
    GTHAN           reduce using rule 148 (expr -> dec .)
    GTHANEQ         reduce using rule 148 (expr -> dec .)
    LTHAN           reduce using rule 148 (expr -> dec .)
    MOD             reduce using rule 148 (expr -> dec .)
    LTHANEQ         reduce using rule 148 (expr -> dec .)
    PLUS            reduce using rule 148 (expr -> dec .)
    MINUS           reduce using rule 148 (expr -> dec .)
    DIVIDE          reduce using rule 148 (expr -> dec .)
    TIMES           reduce using rule 148 (expr -> dec .)
    LSBRACKET       reduce using rule 148 (expr -> dec .)
    QEST            reduce using rule 148 (expr -> dec .)
    INC             reduce using rule 148 (expr -> dec .)
    DEC             reduce using rule 148 (expr -> dec .)
    LPAREN          reduce using rule 148 (expr -> dec .)
    SEMI            reduce using rule 148 (expr -> dec .)
    RPAREN          reduce using rule 148 (expr -> dec .)
    RSBRACKET       reduce using rule 148 (expr -> dec .)
    COMMA           reduce using rule 148 (expr -> dec .)
    COLON           reduce using rule 148 (expr -> dec .)
    ASSIGNPLUS      reduce using rule 148 (expr -> dec .)
    ASSIGNMINUS     reduce using rule 148 (expr -> dec .)
    ASSIGNDIVIDE    reduce using rule 148 (expr -> dec .)
    ASSIGNTIMES     reduce using rule 148 (expr -> dec .)
    ASSIGNBOR       reduce using rule 148 (expr -> dec .)
    ASSIGNBAND      reduce using rule 148 (expr -> dec .)
    ASSIGNBXOR      reduce using rule 148 (expr -> dec .)
    ASSIGN          reduce using rule 148 (expr -> dec .)
    RBRACKET        reduce using rule 148 (expr -> dec .)


state 42

    (36) modifier -> LOWP .

    INT             reduce using rule 36 (modifier -> LOWP .)
    FLOAT           reduce using rule 36 (modifier -> LOWP .)
    BOOL            reduce using rule 36 (modifier -> LOWP .)
    FLOAT16         reduce using rule 36 (modifier -> LOWP .)
    DOUBLE          reduce using rule 36 (modifier -> LOWP .)
    VOID            reduce using rule 36 (modifier -> LOWP .)
    ID              reduce using rule 36 (modifier -> LOWP .)
    UNIFORM         reduce using rule 36 (modifier -> LOWP .)
    ATTRIBUTE       reduce using rule 36 (modifier -> LOWP .)
    VARYING         reduce using rule 36 (modifier -> LOWP .)
    INPUT           reduce using rule 36 (modifier -> LOWP .)
    OUTPUT          reduce using rule 36 (modifier -> LOWP .)
    HIGHP           reduce using rule 36 (modifier -> LOWP .)
    MEDIUMP         reduce using rule 36 (modifier -> LOWP .)
    LOWP            reduce using rule 36 (modifier -> LOWP .)


state 43

    (16) statement -> assign . SEMI
    (19) statement_local -> assign . SEMI
    (69) assign -> assign . cmplx_assign expr
    (53) cmplx_assign -> . ASSIGNPLUS
    (54) cmplx_assign -> . ASSIGNMINUS
    (55) cmplx_assign -> . ASSIGNDIVIDE
    (56) cmplx_assign -> . ASSIGNTIMES
    (57) cmplx_assign -> . ASSIGNBOR
    (58) cmplx_assign -> . ASSIGNBAND
    (59) cmplx_assign -> . ASSIGNBXOR
    (60) cmplx_assign -> . ASSIGN

    SEMI            shift and go to state 147
    ASSIGNPLUS      shift and go to state 122
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 124
    ASSIGNTIMES     shift and go to state 123
    ASSIGNBOR       shift and go to state 125
    ASSIGNBAND      shift and go to state 128
    ASSIGNBXOR      shift and go to state 129
    ASSIGN          shift and go to state 121

    cmplx_assign                   shift and go to state 146

state 44

    (108) new -> NEW . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 148
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 45

    (51) var_decl -> var_basic .
    (52) var_decl -> var_basic . ASSIGN expr

    SEMI            reduce using rule 51 (var_decl -> var_basic .)
    ASSIGN          shift and go to state 149


state 46

    (15) statement -> struct . SEMI
    (27) statement_local -> struct . SEMI

    SEMI            shift and go to state 150


state 47

    (143) expr -> expr_uminus .

    DOT             reduce using rule 143 (expr -> expr_uminus .)
    LAND            reduce using rule 143 (expr -> expr_uminus .)
    LOR             reduce using rule 143 (expr -> expr_uminus .)
    BOR             reduce using rule 143 (expr -> expr_uminus .)
    BXOR            reduce using rule 143 (expr -> expr_uminus .)
    BAND            reduce using rule 143 (expr -> expr_uminus .)
    EQUAL           reduce using rule 143 (expr -> expr_uminus .)
    NOTEQUAL        reduce using rule 143 (expr -> expr_uminus .)
    GTHAN           reduce using rule 143 (expr -> expr_uminus .)
    GTHANEQ         reduce using rule 143 (expr -> expr_uminus .)
    LTHAN           reduce using rule 143 (expr -> expr_uminus .)
    MOD             reduce using rule 143 (expr -> expr_uminus .)
    LTHANEQ         reduce using rule 143 (expr -> expr_uminus .)
    PLUS            reduce using rule 143 (expr -> expr_uminus .)
    MINUS           reduce using rule 143 (expr -> expr_uminus .)
    DIVIDE          reduce using rule 143 (expr -> expr_uminus .)
    TIMES           reduce using rule 143 (expr -> expr_uminus .)
    LSBRACKET       reduce using rule 143 (expr -> expr_uminus .)
    QEST            reduce using rule 143 (expr -> expr_uminus .)
    INC             reduce using rule 143 (expr -> expr_uminus .)
    DEC             reduce using rule 143 (expr -> expr_uminus .)
    LPAREN          reduce using rule 143 (expr -> expr_uminus .)
    SEMI            reduce using rule 143 (expr -> expr_uminus .)
    RPAREN          reduce using rule 143 (expr -> expr_uminus .)
    RSBRACKET       reduce using rule 143 (expr -> expr_uminus .)
    COMMA           reduce using rule 143 (expr -> expr_uminus .)
    COLON           reduce using rule 143 (expr -> expr_uminus .)
    ASSIGNPLUS      reduce using rule 143 (expr -> expr_uminus .)
    ASSIGNMINUS     reduce using rule 143 (expr -> expr_uminus .)
    ASSIGNDIVIDE    reduce using rule 143 (expr -> expr_uminus .)
    ASSIGNTIMES     reduce using rule 143 (expr -> expr_uminus .)
    ASSIGNBOR       reduce using rule 143 (expr -> expr_uminus .)
    ASSIGNBAND      reduce using rule 143 (expr -> expr_uminus .)
    ASSIGNBXOR      reduce using rule 143 (expr -> expr_uminus .)
    ASSIGN          reduce using rule 143 (expr -> expr_uminus .)
    RBRACKET        reduce using rule 143 (expr -> expr_uminus .)


state 48

    (102) array_literal -> LSBRACKET . exprlist RSBRACKET
    (103) array_literal -> LSBRACKET . RSBRACKET
    (74) exprlist -> . expr
    (75) exprlist -> . ID ASSIGN expr
    (76) exprlist -> . exprlist COMMA expr
    (77) exprlist -> . exprlist COMMA ID ASSIGN expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    RSBRACKET       shift and go to state 151
    ID              shift and go to state 153
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 152
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    exprlist                       shift and go to state 154
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 49

    (38) type_decl -> FLOAT .

    ID              reduce using rule 38 (type_decl -> FLOAT .)


state 50

    (146) expr -> new .

    DOT             reduce using rule 146 (expr -> new .)
    LAND            reduce using rule 146 (expr -> new .)
    LOR             reduce using rule 146 (expr -> new .)
    BOR             reduce using rule 146 (expr -> new .)
    BXOR            reduce using rule 146 (expr -> new .)
    BAND            reduce using rule 146 (expr -> new .)
    EQUAL           reduce using rule 146 (expr -> new .)
    NOTEQUAL        reduce using rule 146 (expr -> new .)
    GTHAN           reduce using rule 146 (expr -> new .)
    GTHANEQ         reduce using rule 146 (expr -> new .)
    LTHAN           reduce using rule 146 (expr -> new .)
    MOD             reduce using rule 146 (expr -> new .)
    LTHANEQ         reduce using rule 146 (expr -> new .)
    PLUS            reduce using rule 146 (expr -> new .)
    MINUS           reduce using rule 146 (expr -> new .)
    DIVIDE          reduce using rule 146 (expr -> new .)
    TIMES           reduce using rule 146 (expr -> new .)
    LSBRACKET       reduce using rule 146 (expr -> new .)
    QEST            reduce using rule 146 (expr -> new .)
    INC             reduce using rule 146 (expr -> new .)
    DEC             reduce using rule 146 (expr -> new .)
    LPAREN          reduce using rule 146 (expr -> new .)
    SEMI            reduce using rule 146 (expr -> new .)
    RPAREN          reduce using rule 146 (expr -> new .)
    RSBRACKET       reduce using rule 146 (expr -> new .)
    COMMA           reduce using rule 146 (expr -> new .)
    COLON           reduce using rule 146 (expr -> new .)
    ASSIGNPLUS      reduce using rule 146 (expr -> new .)
    ASSIGNMINUS     reduce using rule 146 (expr -> new .)
    ASSIGNDIVIDE    reduce using rule 146 (expr -> new .)
    ASSIGNTIMES     reduce using rule 146 (expr -> new .)
    ASSIGNBOR       reduce using rule 146 (expr -> new .)
    ASSIGNBAND      reduce using rule 146 (expr -> new .)
    ASSIGNBXOR      reduce using rule 146 (expr -> new .)
    ASSIGN          reduce using rule 146 (expr -> new .)
    RBRACKET        reduce using rule 146 (expr -> new .)


state 51

    (44) type_decl -> modifier . type_decl
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    ID              shift and go to state 156
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    type_decl                      shift and go to state 155
    modifier                       shift and go to state 51

state 52

    (90) function -> type_decl . ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> type_decl . ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> type_decl . ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> type_decl . ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (49) var_basic -> type_decl . ID arr_decl
    (50) var_basic -> type_decl . ID

    ID              shift and go to state 157


state 53

    (70) assign -> INC . assign_expr
    (154) assign2 -> INC . assign_expr2
    (110) inc -> INC . expr
    (66) assign_expr -> INC . assign_expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr

    ID              shift and go to state 113
    INC             shift and go to state 111
    DEC             shift and go to state 114
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 158
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 160
    not                            shift and go to state 9
    assign_expr                    shift and go to state 159
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 54

    (164) if -> IF . paren_expr statement_local
    (165) if -> IF . paren_expr LBRACKET statementlist RBRACKET
    (159) paren_expr -> . LPAREN expr RPAREN
    (160) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 161

    paren_expr                     shift and go to state 162

state 55

    (1) statementlist -> statement .

    RBRACKET        reduce using rule 1 (statementlist -> statement .)
    SEMI            reduce using rule 1 (statementlist -> statement .)
    IF              reduce using rule 1 (statementlist -> statement .)
    BUILTIN         reduce using rule 1 (statementlist -> statement .)
    ELSE            reduce using rule 1 (statementlist -> statement .)
    FOR             reduce using rule 1 (statementlist -> statement .)
    NUMBER          reduce using rule 1 (statementlist -> statement .)
    TRUE            reduce using rule 1 (statementlist -> statement .)
    FALSE           reduce using rule 1 (statementlist -> statement .)
    ID              reduce using rule 1 (statementlist -> statement .)
    LPAREN          reduce using rule 1 (statementlist -> statement .)
    RETURN          reduce using rule 1 (statementlist -> statement .)
    BREAK           reduce using rule 1 (statementlist -> statement .)
    CONTINUE        reduce using rule 1 (statementlist -> statement .)
    STRUCT          reduce using rule 1 (statementlist -> statement .)
    INC             reduce using rule 1 (statementlist -> statement .)
    DEC             reduce using rule 1 (statementlist -> statement .)
    INT             reduce using rule 1 (statementlist -> statement .)
    FLOAT           reduce using rule 1 (statementlist -> statement .)
    BOOL            reduce using rule 1 (statementlist -> statement .)
    FLOAT16         reduce using rule 1 (statementlist -> statement .)
    DOUBLE          reduce using rule 1 (statementlist -> statement .)
    VOID            reduce using rule 1 (statementlist -> statement .)
    STRINGLIT       reduce using rule 1 (statementlist -> statement .)
    LSBRACKET       reduce using rule 1 (statementlist -> statement .)
    LBRACKET        reduce using rule 1 (statementlist -> statement .)
    MINUS           reduce using rule 1 (statementlist -> statement .)
    NOT             reduce using rule 1 (statementlist -> statement .)
    NEW             reduce using rule 1 (statementlist -> statement .)
    UNIFORM         reduce using rule 1 (statementlist -> statement .)
    ATTRIBUTE       reduce using rule 1 (statementlist -> statement .)
    VARYING         reduce using rule 1 (statementlist -> statement .)
    INPUT           reduce using rule 1 (statementlist -> statement .)
    OUTPUT          reduce using rule 1 (statementlist -> statement .)
    HIGHP           reduce using rule 1 (statementlist -> statement .)
    MEDIUMP         reduce using rule 1 (statementlist -> statement .)
    LOWP            reduce using rule 1 (statementlist -> statement .)
    $end            reduce using rule 1 (statementlist -> statement .)


state 56

    (113) not -> NOT . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 163
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 57

    (98) builtin_func -> BUILTIN . type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> BUILTIN . type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> BUILTIN . type_decl ID arr_decl
    (101) builtin_global -> BUILTIN . type_decl ID
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    ID              shift and go to state 156
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    type_decl                      shift and go to state 164
    modifier                       shift and go to state 51

state 58

    (119) expr -> ID .
    (43) type_decl -> ID .
    (61) assign_expr -> ID .
    (149) assign_expr2 -> ID .

  ! reduce/reduce conflict for INC resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for DEC resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for DOT resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for INC resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for DEC resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for DOT resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNPLUS resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNMINUS resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNDIVIDE resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNTIMES resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNBOR resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNBAND resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNBXOR resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 61 (assign_expr -> ID .)
    SEMI            reduce using rule 119 (expr -> ID .)
    LAND            reduce using rule 119 (expr -> ID .)
    LOR             reduce using rule 119 (expr -> ID .)
    BOR             reduce using rule 119 (expr -> ID .)
    BXOR            reduce using rule 119 (expr -> ID .)
    BAND            reduce using rule 119 (expr -> ID .)
    EQUAL           reduce using rule 119 (expr -> ID .)
    NOTEQUAL        reduce using rule 119 (expr -> ID .)
    GTHAN           reduce using rule 119 (expr -> ID .)
    GTHANEQ         reduce using rule 119 (expr -> ID .)
    LTHAN           reduce using rule 119 (expr -> ID .)
    MOD             reduce using rule 119 (expr -> ID .)
    LTHANEQ         reduce using rule 119 (expr -> ID .)
    PLUS            reduce using rule 119 (expr -> ID .)
    MINUS           reduce using rule 119 (expr -> ID .)
    DIVIDE          reduce using rule 119 (expr -> ID .)
    TIMES           reduce using rule 119 (expr -> ID .)
    QEST            reduce using rule 119 (expr -> ID .)
    LPAREN          reduce using rule 119 (expr -> ID .)
    ID              reduce using rule 43 (type_decl -> ID .)
    INC             reduce using rule 61 (assign_expr -> ID .)
    DEC             reduce using rule 61 (assign_expr -> ID .)
    DOT             reduce using rule 61 (assign_expr -> ID .)
    LSBRACKET       reduce using rule 61 (assign_expr -> ID .)
    ASSIGNPLUS      reduce using rule 61 (assign_expr -> ID .)
    ASSIGNMINUS     reduce using rule 61 (assign_expr -> ID .)
    ASSIGNDIVIDE    reduce using rule 61 (assign_expr -> ID .)
    ASSIGNTIMES     reduce using rule 61 (assign_expr -> ID .)
    ASSIGNBOR       reduce using rule 61 (assign_expr -> ID .)
    ASSIGNBAND      reduce using rule 61 (assign_expr -> ID .)
    ASSIGNBXOR      reduce using rule 61 (assign_expr -> ID .)
    ASSIGN          reduce using rule 61 (assign_expr -> ID .)

  ! DOT             [ reduce using rule 119 (expr -> ID .) ]
  ! LSBRACKET       [ reduce using rule 119 (expr -> ID .) ]
  ! INC             [ reduce using rule 119 (expr -> ID .) ]
  ! DEC             [ reduce using rule 119 (expr -> ID .) ]
  ! INC             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DEC             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DOT             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LSBRACKET       [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNPLUS      [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNMINUS     [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNTIMES     [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNBOR       [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNBAND      [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNBXOR      [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGN          [ reduce using rule 149 (assign_expr2 -> ID .) ]


state 59

    (37) type_decl -> INT .

    ID              reduce using rule 37 (type_decl -> INT .)


state 60

    (162) for -> FOR . LPAREN for_decl RPAREN statement_local
    (163) for -> FOR . LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET

    LPAREN          shift and go to state 165


state 61

    (40) type_decl -> FLOAT16 .

    ID              reduce using rule 40 (type_decl -> FLOAT16 .)


state 62

    (118) expr -> strlit .

    DOT             reduce using rule 118 (expr -> strlit .)
    LAND            reduce using rule 118 (expr -> strlit .)
    LOR             reduce using rule 118 (expr -> strlit .)
    BOR             reduce using rule 118 (expr -> strlit .)
    BXOR            reduce using rule 118 (expr -> strlit .)
    BAND            reduce using rule 118 (expr -> strlit .)
    EQUAL           reduce using rule 118 (expr -> strlit .)
    NOTEQUAL        reduce using rule 118 (expr -> strlit .)
    GTHAN           reduce using rule 118 (expr -> strlit .)
    GTHANEQ         reduce using rule 118 (expr -> strlit .)
    LTHAN           reduce using rule 118 (expr -> strlit .)
    MOD             reduce using rule 118 (expr -> strlit .)
    LTHANEQ         reduce using rule 118 (expr -> strlit .)
    PLUS            reduce using rule 118 (expr -> strlit .)
    MINUS           reduce using rule 118 (expr -> strlit .)
    DIVIDE          reduce using rule 118 (expr -> strlit .)
    TIMES           reduce using rule 118 (expr -> strlit .)
    LSBRACKET       reduce using rule 118 (expr -> strlit .)
    QEST            reduce using rule 118 (expr -> strlit .)
    INC             reduce using rule 118 (expr -> strlit .)
    DEC             reduce using rule 118 (expr -> strlit .)
    LPAREN          reduce using rule 118 (expr -> strlit .)
    SEMI            reduce using rule 118 (expr -> strlit .)
    RPAREN          reduce using rule 118 (expr -> strlit .)
    RSBRACKET       reduce using rule 118 (expr -> strlit .)
    COMMA           reduce using rule 118 (expr -> strlit .)
    COLON           reduce using rule 118 (expr -> strlit .)
    ASSIGNPLUS      reduce using rule 118 (expr -> strlit .)
    ASSIGNMINUS     reduce using rule 118 (expr -> strlit .)
    ASSIGNDIVIDE    reduce using rule 118 (expr -> strlit .)
    ASSIGNTIMES     reduce using rule 118 (expr -> strlit .)
    ASSIGNBOR       reduce using rule 118 (expr -> strlit .)
    ASSIGNBAND      reduce using rule 118 (expr -> strlit .)
    ASSIGNBXOR      reduce using rule 118 (expr -> strlit .)
    ASSIGN          reduce using rule 118 (expr -> strlit .)
    RBRACKET        reduce using rule 118 (expr -> strlit .)


state 63

    (31) modifier -> VARYING .

    INT             reduce using rule 31 (modifier -> VARYING .)
    FLOAT           reduce using rule 31 (modifier -> VARYING .)
    BOOL            reduce using rule 31 (modifier -> VARYING .)
    FLOAT16         reduce using rule 31 (modifier -> VARYING .)
    DOUBLE          reduce using rule 31 (modifier -> VARYING .)
    VOID            reduce using rule 31 (modifier -> VARYING .)
    ID              reduce using rule 31 (modifier -> VARYING .)
    UNIFORM         reduce using rule 31 (modifier -> VARYING .)
    ATTRIBUTE       reduce using rule 31 (modifier -> VARYING .)
    VARYING         reduce using rule 31 (modifier -> VARYING .)
    INPUT           reduce using rule 31 (modifier -> VARYING .)
    OUTPUT          reduce using rule 31 (modifier -> VARYING .)
    HIGHP           reduce using rule 31 (modifier -> VARYING .)
    MEDIUMP         reduce using rule 31 (modifier -> VARYING .)
    LOWP            reduce using rule 31 (modifier -> VARYING .)


state 64

    (42) type_decl -> VOID .

    ID              reduce using rule 42 (type_decl -> VOID .)


state 65

    (2) statementlist -> statement_local .

    RBRACKET        reduce using rule 2 (statementlist -> statement_local .)
    SEMI            reduce using rule 2 (statementlist -> statement_local .)
    IF              reduce using rule 2 (statementlist -> statement_local .)
    BUILTIN         reduce using rule 2 (statementlist -> statement_local .)
    ELSE            reduce using rule 2 (statementlist -> statement_local .)
    FOR             reduce using rule 2 (statementlist -> statement_local .)
    NUMBER          reduce using rule 2 (statementlist -> statement_local .)
    TRUE            reduce using rule 2 (statementlist -> statement_local .)
    FALSE           reduce using rule 2 (statementlist -> statement_local .)
    ID              reduce using rule 2 (statementlist -> statement_local .)
    LPAREN          reduce using rule 2 (statementlist -> statement_local .)
    RETURN          reduce using rule 2 (statementlist -> statement_local .)
    BREAK           reduce using rule 2 (statementlist -> statement_local .)
    CONTINUE        reduce using rule 2 (statementlist -> statement_local .)
    STRUCT          reduce using rule 2 (statementlist -> statement_local .)
    INC             reduce using rule 2 (statementlist -> statement_local .)
    DEC             reduce using rule 2 (statementlist -> statement_local .)
    INT             reduce using rule 2 (statementlist -> statement_local .)
    FLOAT           reduce using rule 2 (statementlist -> statement_local .)
    BOOL            reduce using rule 2 (statementlist -> statement_local .)
    FLOAT16         reduce using rule 2 (statementlist -> statement_local .)
    DOUBLE          reduce using rule 2 (statementlist -> statement_local .)
    VOID            reduce using rule 2 (statementlist -> statement_local .)
    STRINGLIT       reduce using rule 2 (statementlist -> statement_local .)
    LSBRACKET       reduce using rule 2 (statementlist -> statement_local .)
    LBRACKET        reduce using rule 2 (statementlist -> statement_local .)
    MINUS           reduce using rule 2 (statementlist -> statement_local .)
    NOT             reduce using rule 2 (statementlist -> statement_local .)
    NEW             reduce using rule 2 (statementlist -> statement_local .)
    UNIFORM         reduce using rule 2 (statementlist -> statement_local .)
    ATTRIBUTE       reduce using rule 2 (statementlist -> statement_local .)
    VARYING         reduce using rule 2 (statementlist -> statement_local .)
    INPUT           reduce using rule 2 (statementlist -> statement_local .)
    OUTPUT          reduce using rule 2 (statementlist -> statement_local .)
    HIGHP           reduce using rule 2 (statementlist -> statement_local .)
    MEDIUMP         reduce using rule 2 (statementlist -> statement_local .)
    LOWP            reduce using rule 2 (statementlist -> statement_local .)
    $end            reduce using rule 2 (statementlist -> statement_local .)


state 66

    (152) assign2 -> assign_expr2 . cmplx_assign expr
    (156) assign2 -> assign_expr2 . INC
    (157) assign2 -> assign_expr2 . DEC
    (150) assign_expr2 -> assign_expr2 . DOT assign_expr2
    (151) assign_expr2 -> assign_expr2 . LSBRACKET expr RSBRACKET
    (53) cmplx_assign -> . ASSIGNPLUS
    (54) cmplx_assign -> . ASSIGNMINUS
    (55) cmplx_assign -> . ASSIGNDIVIDE
    (56) cmplx_assign -> . ASSIGNTIMES
    (57) cmplx_assign -> . ASSIGNBOR
    (58) cmplx_assign -> . ASSIGNBAND
    (59) cmplx_assign -> . ASSIGNBXOR
    (60) cmplx_assign -> . ASSIGN

    INC             shift and go to state 169
    DEC             shift and go to state 167
    DOT             shift and go to state 166
    LSBRACKET       shift and go to state 170
    ASSIGNPLUS      shift and go to state 122
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 124
    ASSIGNTIMES     shift and go to state 123
    ASSIGNBOR       shift and go to state 125
    ASSIGNBAND      shift and go to state 128
    ASSIGNBXOR      shift and go to state 129
    ASSIGN          shift and go to state 121

    cmplx_assign                   shift and go to state 168

state 67

    (21) statement_local -> else .

    SEMI            reduce using rule 21 (statement_local -> else .)
    IF              reduce using rule 21 (statement_local -> else .)
    BUILTIN         reduce using rule 21 (statement_local -> else .)
    ELSE            reduce using rule 21 (statement_local -> else .)
    FOR             reduce using rule 21 (statement_local -> else .)
    NUMBER          reduce using rule 21 (statement_local -> else .)
    TRUE            reduce using rule 21 (statement_local -> else .)
    FALSE           reduce using rule 21 (statement_local -> else .)
    ID              reduce using rule 21 (statement_local -> else .)
    LPAREN          reduce using rule 21 (statement_local -> else .)
    RETURN          reduce using rule 21 (statement_local -> else .)
    BREAK           reduce using rule 21 (statement_local -> else .)
    CONTINUE        reduce using rule 21 (statement_local -> else .)
    STRUCT          reduce using rule 21 (statement_local -> else .)
    INC             reduce using rule 21 (statement_local -> else .)
    DEC             reduce using rule 21 (statement_local -> else .)
    INT             reduce using rule 21 (statement_local -> else .)
    FLOAT           reduce using rule 21 (statement_local -> else .)
    BOOL            reduce using rule 21 (statement_local -> else .)
    FLOAT16         reduce using rule 21 (statement_local -> else .)
    DOUBLE          reduce using rule 21 (statement_local -> else .)
    VOID            reduce using rule 21 (statement_local -> else .)
    STRINGLIT       reduce using rule 21 (statement_local -> else .)
    LSBRACKET       reduce using rule 21 (statement_local -> else .)
    LBRACKET        reduce using rule 21 (statement_local -> else .)
    MINUS           reduce using rule 21 (statement_local -> else .)
    NOT             reduce using rule 21 (statement_local -> else .)
    NEW             reduce using rule 21 (statement_local -> else .)
    UNIFORM         reduce using rule 21 (statement_local -> else .)
    ATTRIBUTE       reduce using rule 21 (statement_local -> else .)
    VARYING         reduce using rule 21 (statement_local -> else .)
    INPUT           reduce using rule 21 (statement_local -> else .)
    OUTPUT          reduce using rule 21 (statement_local -> else .)
    HIGHP           reduce using rule 21 (statement_local -> else .)
    MEDIUMP         reduce using rule 21 (statement_local -> else .)
    LOWP            reduce using rule 21 (statement_local -> else .)
    $end            reduce using rule 21 (statement_local -> else .)
    RBRACKET        reduce using rule 21 (statement_local -> else .)


state 68

    (166) else -> ELSE statement_local .

    SEMI            reduce using rule 166 (else -> ELSE statement_local .)
    IF              reduce using rule 166 (else -> ELSE statement_local .)
    BUILTIN         reduce using rule 166 (else -> ELSE statement_local .)
    ELSE            reduce using rule 166 (else -> ELSE statement_local .)
    FOR             reduce using rule 166 (else -> ELSE statement_local .)
    NUMBER          reduce using rule 166 (else -> ELSE statement_local .)
    TRUE            reduce using rule 166 (else -> ELSE statement_local .)
    FALSE           reduce using rule 166 (else -> ELSE statement_local .)
    ID              reduce using rule 166 (else -> ELSE statement_local .)
    LPAREN          reduce using rule 166 (else -> ELSE statement_local .)
    RETURN          reduce using rule 166 (else -> ELSE statement_local .)
    BREAK           reduce using rule 166 (else -> ELSE statement_local .)
    CONTINUE        reduce using rule 166 (else -> ELSE statement_local .)
    STRUCT          reduce using rule 166 (else -> ELSE statement_local .)
    INC             reduce using rule 166 (else -> ELSE statement_local .)
    DEC             reduce using rule 166 (else -> ELSE statement_local .)
    INT             reduce using rule 166 (else -> ELSE statement_local .)
    FLOAT           reduce using rule 166 (else -> ELSE statement_local .)
    BOOL            reduce using rule 166 (else -> ELSE statement_local .)
    FLOAT16         reduce using rule 166 (else -> ELSE statement_local .)
    DOUBLE          reduce using rule 166 (else -> ELSE statement_local .)
    VOID            reduce using rule 166 (else -> ELSE statement_local .)
    STRINGLIT       reduce using rule 166 (else -> ELSE statement_local .)
    LSBRACKET       reduce using rule 166 (else -> ELSE statement_local .)
    LBRACKET        reduce using rule 166 (else -> ELSE statement_local .)
    MINUS           reduce using rule 166 (else -> ELSE statement_local .)
    NOT             reduce using rule 166 (else -> ELSE statement_local .)
    NEW             reduce using rule 166 (else -> ELSE statement_local .)
    UNIFORM         reduce using rule 166 (else -> ELSE statement_local .)
    ATTRIBUTE       reduce using rule 166 (else -> ELSE statement_local .)
    VARYING         reduce using rule 166 (else -> ELSE statement_local .)
    INPUT           reduce using rule 166 (else -> ELSE statement_local .)
    OUTPUT          reduce using rule 166 (else -> ELSE statement_local .)
    HIGHP           reduce using rule 166 (else -> ELSE statement_local .)
    MEDIUMP         reduce using rule 166 (else -> ELSE statement_local .)
    LOWP            reduce using rule 166 (else -> ELSE statement_local .)
    $end            reduce using rule 166 (else -> ELSE statement_local .)
    RBRACKET        reduce using rule 166 (else -> ELSE statement_local .)


state 69

    (27) statement_local -> struct . SEMI

    SEMI            shift and go to state 171


state 70

    (19) statement_local -> assign . SEMI
    (69) assign -> assign . cmplx_assign expr
    (53) cmplx_assign -> . ASSIGNPLUS
    (54) cmplx_assign -> . ASSIGNMINUS
    (55) cmplx_assign -> . ASSIGNDIVIDE
    (56) cmplx_assign -> . ASSIGNTIMES
    (57) cmplx_assign -> . ASSIGNBOR
    (58) cmplx_assign -> . ASSIGNBAND
    (59) cmplx_assign -> . ASSIGNBXOR
    (60) cmplx_assign -> . ASSIGN

    SEMI            shift and go to state 172
    ASSIGNPLUS      shift and go to state 122
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 124
    ASSIGNTIMES     shift and go to state 123
    ASSIGNBOR       shift and go to state 125
    ASSIGNBAND      shift and go to state 128
    ASSIGNBXOR      shift and go to state 129
    ASSIGN          shift and go to state 121

    cmplx_assign                   shift and go to state 146

state 71

    (25) statement_local -> continue . SEMI

    SEMI            shift and go to state 173


state 72

    (22) statement_local -> for .

    SEMI            reduce using rule 22 (statement_local -> for .)
    IF              reduce using rule 22 (statement_local -> for .)
    BUILTIN         reduce using rule 22 (statement_local -> for .)
    ELSE            reduce using rule 22 (statement_local -> for .)
    FOR             reduce using rule 22 (statement_local -> for .)
    NUMBER          reduce using rule 22 (statement_local -> for .)
    TRUE            reduce using rule 22 (statement_local -> for .)
    FALSE           reduce using rule 22 (statement_local -> for .)
    ID              reduce using rule 22 (statement_local -> for .)
    LPAREN          reduce using rule 22 (statement_local -> for .)
    RETURN          reduce using rule 22 (statement_local -> for .)
    BREAK           reduce using rule 22 (statement_local -> for .)
    CONTINUE        reduce using rule 22 (statement_local -> for .)
    STRUCT          reduce using rule 22 (statement_local -> for .)
    INC             reduce using rule 22 (statement_local -> for .)
    DEC             reduce using rule 22 (statement_local -> for .)
    INT             reduce using rule 22 (statement_local -> for .)
    FLOAT           reduce using rule 22 (statement_local -> for .)
    BOOL            reduce using rule 22 (statement_local -> for .)
    FLOAT16         reduce using rule 22 (statement_local -> for .)
    DOUBLE          reduce using rule 22 (statement_local -> for .)
    VOID            reduce using rule 22 (statement_local -> for .)
    STRINGLIT       reduce using rule 22 (statement_local -> for .)
    LSBRACKET       reduce using rule 22 (statement_local -> for .)
    LBRACKET        reduce using rule 22 (statement_local -> for .)
    MINUS           reduce using rule 22 (statement_local -> for .)
    NOT             reduce using rule 22 (statement_local -> for .)
    NEW             reduce using rule 22 (statement_local -> for .)
    UNIFORM         reduce using rule 22 (statement_local -> for .)
    ATTRIBUTE       reduce using rule 22 (statement_local -> for .)
    VARYING         reduce using rule 22 (statement_local -> for .)
    INPUT           reduce using rule 22 (statement_local -> for .)
    OUTPUT          reduce using rule 22 (statement_local -> for .)
    HIGHP           reduce using rule 22 (statement_local -> for .)
    MEDIUMP         reduce using rule 22 (statement_local -> for .)
    LOWP            reduce using rule 22 (statement_local -> for .)
    $end            reduce using rule 22 (statement_local -> for .)
    RBRACKET        reduce using rule 22 (statement_local -> for .)


state 73

    (61) assign_expr -> ID .
    (43) type_decl -> ID .

    INC             reduce using rule 61 (assign_expr -> ID .)
    DEC             reduce using rule 61 (assign_expr -> ID .)
    DOT             reduce using rule 61 (assign_expr -> ID .)
    LSBRACKET       reduce using rule 61 (assign_expr -> ID .)
    ASSIGNPLUS      reduce using rule 61 (assign_expr -> ID .)
    ASSIGNMINUS     reduce using rule 61 (assign_expr -> ID .)
    ASSIGNDIVIDE    reduce using rule 61 (assign_expr -> ID .)
    ASSIGNTIMES     reduce using rule 61 (assign_expr -> ID .)
    ASSIGNBOR       reduce using rule 61 (assign_expr -> ID .)
    ASSIGNBAND      reduce using rule 61 (assign_expr -> ID .)
    ASSIGNBXOR      reduce using rule 61 (assign_expr -> ID .)
    ASSIGN          reduce using rule 61 (assign_expr -> ID .)
    ID              reduce using rule 43 (type_decl -> ID .)


state 74

    (167) else -> ELSE LBRACKET . statementlist RBRACKET
    (1) statementlist -> . statement
    (2) statementlist -> . statement_local
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    statementlist                  shift and go to state 174
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 55
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 65
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 75

    (71) assign -> DEC . assign_expr
    (67) assign_expr -> DEC . assign_expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr

    ID              shift and go to state 177
    INC             shift and go to state 176
    DEC             shift and go to state 175

    assign_expr                    shift and go to state 115

state 76

    (23) statement_local -> return . SEMI

    SEMI            shift and go to state 178


state 77

    (49) var_basic -> type_decl . ID arr_decl
    (50) var_basic -> type_decl . ID

    ID              shift and go to state 179


state 78

    (70) assign -> INC . assign_expr
    (66) assign_expr -> INC . assign_expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr

    ID              shift and go to state 177
    INC             shift and go to state 176
    DEC             shift and go to state 175

    assign_expr                    shift and go to state 159

state 79

    (20) statement_local -> if .

    SEMI            reduce using rule 20 (statement_local -> if .)
    IF              reduce using rule 20 (statement_local -> if .)
    BUILTIN         reduce using rule 20 (statement_local -> if .)
    ELSE            reduce using rule 20 (statement_local -> if .)
    FOR             reduce using rule 20 (statement_local -> if .)
    NUMBER          reduce using rule 20 (statement_local -> if .)
    TRUE            reduce using rule 20 (statement_local -> if .)
    FALSE           reduce using rule 20 (statement_local -> if .)
    ID              reduce using rule 20 (statement_local -> if .)
    LPAREN          reduce using rule 20 (statement_local -> if .)
    RETURN          reduce using rule 20 (statement_local -> if .)
    BREAK           reduce using rule 20 (statement_local -> if .)
    CONTINUE        reduce using rule 20 (statement_local -> if .)
    STRUCT          reduce using rule 20 (statement_local -> if .)
    INC             reduce using rule 20 (statement_local -> if .)
    DEC             reduce using rule 20 (statement_local -> if .)
    INT             reduce using rule 20 (statement_local -> if .)
    FLOAT           reduce using rule 20 (statement_local -> if .)
    BOOL            reduce using rule 20 (statement_local -> if .)
    FLOAT16         reduce using rule 20 (statement_local -> if .)
    DOUBLE          reduce using rule 20 (statement_local -> if .)
    VOID            reduce using rule 20 (statement_local -> if .)
    STRINGLIT       reduce using rule 20 (statement_local -> if .)
    LSBRACKET       reduce using rule 20 (statement_local -> if .)
    LBRACKET        reduce using rule 20 (statement_local -> if .)
    MINUS           reduce using rule 20 (statement_local -> if .)
    NOT             reduce using rule 20 (statement_local -> if .)
    NEW             reduce using rule 20 (statement_local -> if .)
    UNIFORM         reduce using rule 20 (statement_local -> if .)
    ATTRIBUTE       reduce using rule 20 (statement_local -> if .)
    VARYING         reduce using rule 20 (statement_local -> if .)
    INPUT           reduce using rule 20 (statement_local -> if .)
    OUTPUT          reduce using rule 20 (statement_local -> if .)
    HIGHP           reduce using rule 20 (statement_local -> if .)
    MEDIUMP         reduce using rule 20 (statement_local -> if .)
    LOWP            reduce using rule 20 (statement_local -> if .)
    $end            reduce using rule 20 (statement_local -> if .)
    RBRACKET        reduce using rule 20 (statement_local -> if .)


state 80

    (28) statement_local -> SEMI .

    SEMI            reduce using rule 28 (statement_local -> SEMI .)
    IF              reduce using rule 28 (statement_local -> SEMI .)
    BUILTIN         reduce using rule 28 (statement_local -> SEMI .)
    ELSE            reduce using rule 28 (statement_local -> SEMI .)
    FOR             reduce using rule 28 (statement_local -> SEMI .)
    NUMBER          reduce using rule 28 (statement_local -> SEMI .)
    TRUE            reduce using rule 28 (statement_local -> SEMI .)
    FALSE           reduce using rule 28 (statement_local -> SEMI .)
    ID              reduce using rule 28 (statement_local -> SEMI .)
    LPAREN          reduce using rule 28 (statement_local -> SEMI .)
    RETURN          reduce using rule 28 (statement_local -> SEMI .)
    BREAK           reduce using rule 28 (statement_local -> SEMI .)
    CONTINUE        reduce using rule 28 (statement_local -> SEMI .)
    STRUCT          reduce using rule 28 (statement_local -> SEMI .)
    INC             reduce using rule 28 (statement_local -> SEMI .)
    DEC             reduce using rule 28 (statement_local -> SEMI .)
    INT             reduce using rule 28 (statement_local -> SEMI .)
    FLOAT           reduce using rule 28 (statement_local -> SEMI .)
    BOOL            reduce using rule 28 (statement_local -> SEMI .)
    FLOAT16         reduce using rule 28 (statement_local -> SEMI .)
    DOUBLE          reduce using rule 28 (statement_local -> SEMI .)
    VOID            reduce using rule 28 (statement_local -> SEMI .)
    STRINGLIT       reduce using rule 28 (statement_local -> SEMI .)
    LSBRACKET       reduce using rule 28 (statement_local -> SEMI .)
    LBRACKET        reduce using rule 28 (statement_local -> SEMI .)
    MINUS           reduce using rule 28 (statement_local -> SEMI .)
    NOT             reduce using rule 28 (statement_local -> SEMI .)
    NEW             reduce using rule 28 (statement_local -> SEMI .)
    UNIFORM         reduce using rule 28 (statement_local -> SEMI .)
    ATTRIBUTE       reduce using rule 28 (statement_local -> SEMI .)
    VARYING         reduce using rule 28 (statement_local -> SEMI .)
    INPUT           reduce using rule 28 (statement_local -> SEMI .)
    OUTPUT          reduce using rule 28 (statement_local -> SEMI .)
    HIGHP           reduce using rule 28 (statement_local -> SEMI .)
    MEDIUMP         reduce using rule 28 (statement_local -> SEMI .)
    LOWP            reduce using rule 28 (statement_local -> SEMI .)
    $end            reduce using rule 28 (statement_local -> SEMI .)
    RBRACKET        reduce using rule 28 (statement_local -> SEMI .)


state 81

    (24) statement_local -> break . SEMI

    SEMI            shift and go to state 180


state 82

    (26) statement_local -> var_decl . SEMI

    SEMI            shift and go to state 181


state 83

    (14) statement -> continue SEMI .
    (25) statement_local -> continue SEMI .

  ! reduce/reduce conflict for RBRACKET resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for BUILTIN resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for TRUE resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for FALSE resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for STRUCT resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for INT resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for FLOAT resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for BOOL resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for FLOAT16 resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for VOID resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for UNIFORM resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for ATTRIBUTE resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for VARYING resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for INPUT resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for HIGHP resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for MEDIUMP resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LOWP resolved using rule 14 (statement -> continue SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 14 (statement -> continue SEMI .)
    RBRACKET        reduce using rule 14 (statement -> continue SEMI .)
    SEMI            reduce using rule 14 (statement -> continue SEMI .)
    IF              reduce using rule 14 (statement -> continue SEMI .)
    BUILTIN         reduce using rule 14 (statement -> continue SEMI .)
    ELSE            reduce using rule 14 (statement -> continue SEMI .)
    FOR             reduce using rule 14 (statement -> continue SEMI .)
    NUMBER          reduce using rule 14 (statement -> continue SEMI .)
    TRUE            reduce using rule 14 (statement -> continue SEMI .)
    FALSE           reduce using rule 14 (statement -> continue SEMI .)
    ID              reduce using rule 14 (statement -> continue SEMI .)
    LPAREN          reduce using rule 14 (statement -> continue SEMI .)
    RETURN          reduce using rule 14 (statement -> continue SEMI .)
    BREAK           reduce using rule 14 (statement -> continue SEMI .)
    CONTINUE        reduce using rule 14 (statement -> continue SEMI .)
    STRUCT          reduce using rule 14 (statement -> continue SEMI .)
    INC             reduce using rule 14 (statement -> continue SEMI .)
    DEC             reduce using rule 14 (statement -> continue SEMI .)
    INT             reduce using rule 14 (statement -> continue SEMI .)
    FLOAT           reduce using rule 14 (statement -> continue SEMI .)
    BOOL            reduce using rule 14 (statement -> continue SEMI .)
    FLOAT16         reduce using rule 14 (statement -> continue SEMI .)
    DOUBLE          reduce using rule 14 (statement -> continue SEMI .)
    VOID            reduce using rule 14 (statement -> continue SEMI .)
    STRINGLIT       reduce using rule 14 (statement -> continue SEMI .)
    LSBRACKET       reduce using rule 14 (statement -> continue SEMI .)
    LBRACKET        reduce using rule 14 (statement -> continue SEMI .)
    MINUS           reduce using rule 14 (statement -> continue SEMI .)
    NOT             reduce using rule 14 (statement -> continue SEMI .)
    NEW             reduce using rule 14 (statement -> continue SEMI .)
    UNIFORM         reduce using rule 14 (statement -> continue SEMI .)
    ATTRIBUTE       reduce using rule 14 (statement -> continue SEMI .)
    VARYING         reduce using rule 14 (statement -> continue SEMI .)
    INPUT           reduce using rule 14 (statement -> continue SEMI .)
    OUTPUT          reduce using rule 14 (statement -> continue SEMI .)
    HIGHP           reduce using rule 14 (statement -> continue SEMI .)
    MEDIUMP         reduce using rule 14 (statement -> continue SEMI .)
    LOWP            reduce using rule 14 (statement -> continue SEMI .)
    $end            reduce using rule 14 (statement -> continue SEMI .)

  ! RBRACKET        [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! SEMI            [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! IF              [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! BUILTIN         [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! ELSE            [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! FOR             [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! NUMBER          [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! TRUE            [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! FALSE           [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! ID              [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! LPAREN          [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! RETURN          [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! BREAK           [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! CONTINUE        [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! STRUCT          [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! INC             [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! DEC             [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! INT             [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! FLOAT           [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! BOOL            [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! FLOAT16         [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! DOUBLE          [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! VOID            [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! STRINGLIT       [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! LSBRACKET       [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! LBRACKET        [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! MINUS           [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! NOT             [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! NEW             [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! UNIFORM         [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! ATTRIBUTE       [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! VARYING         [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! INPUT           [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! OUTPUT          [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! HIGHP           [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! MEDIUMP         [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! LOWP            [ reduce using rule 25 (statement_local -> continue SEMI .) ]
  ! $end            [ reduce using rule 25 (statement_local -> continue SEMI .) ]


state 84

    (111) dec -> expr DEC .

    DOT             reduce using rule 111 (dec -> expr DEC .)
    LAND            reduce using rule 111 (dec -> expr DEC .)
    LOR             reduce using rule 111 (dec -> expr DEC .)
    BOR             reduce using rule 111 (dec -> expr DEC .)
    BXOR            reduce using rule 111 (dec -> expr DEC .)
    BAND            reduce using rule 111 (dec -> expr DEC .)
    EQUAL           reduce using rule 111 (dec -> expr DEC .)
    NOTEQUAL        reduce using rule 111 (dec -> expr DEC .)
    GTHAN           reduce using rule 111 (dec -> expr DEC .)
    GTHANEQ         reduce using rule 111 (dec -> expr DEC .)
    LTHAN           reduce using rule 111 (dec -> expr DEC .)
    MOD             reduce using rule 111 (dec -> expr DEC .)
    LTHANEQ         reduce using rule 111 (dec -> expr DEC .)
    PLUS            reduce using rule 111 (dec -> expr DEC .)
    MINUS           reduce using rule 111 (dec -> expr DEC .)
    DIVIDE          reduce using rule 111 (dec -> expr DEC .)
    TIMES           reduce using rule 111 (dec -> expr DEC .)
    LSBRACKET       reduce using rule 111 (dec -> expr DEC .)
    QEST            reduce using rule 111 (dec -> expr DEC .)
    INC             reduce using rule 111 (dec -> expr DEC .)
    DEC             reduce using rule 111 (dec -> expr DEC .)
    LPAREN          reduce using rule 111 (dec -> expr DEC .)
    SEMI            reduce using rule 111 (dec -> expr DEC .)
    RPAREN          reduce using rule 111 (dec -> expr DEC .)
    RSBRACKET       reduce using rule 111 (dec -> expr DEC .)
    COMMA           reduce using rule 111 (dec -> expr DEC .)
    COLON           reduce using rule 111 (dec -> expr DEC .)
    ASSIGNPLUS      reduce using rule 111 (dec -> expr DEC .)
    ASSIGNMINUS     reduce using rule 111 (dec -> expr DEC .)
    ASSIGNDIVIDE    reduce using rule 111 (dec -> expr DEC .)
    ASSIGNTIMES     reduce using rule 111 (dec -> expr DEC .)
    ASSIGNBOR       reduce using rule 111 (dec -> expr DEC .)
    ASSIGNBAND      reduce using rule 111 (dec -> expr DEC .)
    ASSIGNBXOR      reduce using rule 111 (dec -> expr DEC .)
    ASSIGN          reduce using rule 111 (dec -> expr DEC .)
    RBRACKET        reduce using rule 111 (dec -> expr DEC .)


state 85

    (138) expr -> expr TIMES . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 182
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 86

    (137) expr -> expr DIVIDE . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 183
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 87

    (109) inc -> expr INC .

    DOT             reduce using rule 109 (inc -> expr INC .)
    LAND            reduce using rule 109 (inc -> expr INC .)
    LOR             reduce using rule 109 (inc -> expr INC .)
    BOR             reduce using rule 109 (inc -> expr INC .)
    BXOR            reduce using rule 109 (inc -> expr INC .)
    BAND            reduce using rule 109 (inc -> expr INC .)
    EQUAL           reduce using rule 109 (inc -> expr INC .)
    NOTEQUAL        reduce using rule 109 (inc -> expr INC .)
    GTHAN           reduce using rule 109 (inc -> expr INC .)
    GTHANEQ         reduce using rule 109 (inc -> expr INC .)
    LTHAN           reduce using rule 109 (inc -> expr INC .)
    MOD             reduce using rule 109 (inc -> expr INC .)
    LTHANEQ         reduce using rule 109 (inc -> expr INC .)
    PLUS            reduce using rule 109 (inc -> expr INC .)
    MINUS           reduce using rule 109 (inc -> expr INC .)
    DIVIDE          reduce using rule 109 (inc -> expr INC .)
    TIMES           reduce using rule 109 (inc -> expr INC .)
    LSBRACKET       reduce using rule 109 (inc -> expr INC .)
    QEST            reduce using rule 109 (inc -> expr INC .)
    INC             reduce using rule 109 (inc -> expr INC .)
    DEC             reduce using rule 109 (inc -> expr INC .)
    LPAREN          reduce using rule 109 (inc -> expr INC .)
    SEMI            reduce using rule 109 (inc -> expr INC .)
    RPAREN          reduce using rule 109 (inc -> expr INC .)
    RSBRACKET       reduce using rule 109 (inc -> expr INC .)
    COMMA           reduce using rule 109 (inc -> expr INC .)
    COLON           reduce using rule 109 (inc -> expr INC .)
    ASSIGNPLUS      reduce using rule 109 (inc -> expr INC .)
    ASSIGNMINUS     reduce using rule 109 (inc -> expr INC .)
    ASSIGNDIVIDE    reduce using rule 109 (inc -> expr INC .)
    ASSIGNTIMES     reduce using rule 109 (inc -> expr INC .)
    ASSIGNBOR       reduce using rule 109 (inc -> expr INC .)
    ASSIGNBAND      reduce using rule 109 (inc -> expr INC .)
    ASSIGNBXOR      reduce using rule 109 (inc -> expr INC .)
    ASSIGN          reduce using rule 109 (inc -> expr INC .)
    RBRACKET        reduce using rule 109 (inc -> expr INC .)


state 88

    (133) expr -> expr MOD . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 184
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 89

    (78) func_call -> LPAREN . exprlist RPAREN
    (79) func_call -> LPAREN . RPAREN
    (74) exprlist -> . expr
    (75) exprlist -> . ID ASSIGN expr
    (76) exprlist -> . exprlist COMMA expr
    (77) exprlist -> . exprlist COMMA ID ASSIGN expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    RPAREN          shift and go to state 185
    ID              shift and go to state 153
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 152
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    exprlist                       shift and go to state 186
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 90

    (135) expr -> expr PLUS . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 187
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 91

    (131) expr -> expr GTHANEQ . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 188
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 92

    (11) statement -> expr SEMI .

    RBRACKET        reduce using rule 11 (statement -> expr SEMI .)
    SEMI            reduce using rule 11 (statement -> expr SEMI .)
    IF              reduce using rule 11 (statement -> expr SEMI .)
    BUILTIN         reduce using rule 11 (statement -> expr SEMI .)
    ELSE            reduce using rule 11 (statement -> expr SEMI .)
    FOR             reduce using rule 11 (statement -> expr SEMI .)
    NUMBER          reduce using rule 11 (statement -> expr SEMI .)
    TRUE            reduce using rule 11 (statement -> expr SEMI .)
    FALSE           reduce using rule 11 (statement -> expr SEMI .)
    ID              reduce using rule 11 (statement -> expr SEMI .)
    LPAREN          reduce using rule 11 (statement -> expr SEMI .)
    RETURN          reduce using rule 11 (statement -> expr SEMI .)
    BREAK           reduce using rule 11 (statement -> expr SEMI .)
    CONTINUE        reduce using rule 11 (statement -> expr SEMI .)
    STRUCT          reduce using rule 11 (statement -> expr SEMI .)
    INC             reduce using rule 11 (statement -> expr SEMI .)
    DEC             reduce using rule 11 (statement -> expr SEMI .)
    INT             reduce using rule 11 (statement -> expr SEMI .)
    FLOAT           reduce using rule 11 (statement -> expr SEMI .)
    BOOL            reduce using rule 11 (statement -> expr SEMI .)
    FLOAT16         reduce using rule 11 (statement -> expr SEMI .)
    DOUBLE          reduce using rule 11 (statement -> expr SEMI .)
    VOID            reduce using rule 11 (statement -> expr SEMI .)
    STRINGLIT       reduce using rule 11 (statement -> expr SEMI .)
    LSBRACKET       reduce using rule 11 (statement -> expr SEMI .)
    LBRACKET        reduce using rule 11 (statement -> expr SEMI .)
    MINUS           reduce using rule 11 (statement -> expr SEMI .)
    NOT             reduce using rule 11 (statement -> expr SEMI .)
    NEW             reduce using rule 11 (statement -> expr SEMI .)
    UNIFORM         reduce using rule 11 (statement -> expr SEMI .)
    ATTRIBUTE       reduce using rule 11 (statement -> expr SEMI .)
    VARYING         reduce using rule 11 (statement -> expr SEMI .)
    INPUT           reduce using rule 11 (statement -> expr SEMI .)
    OUTPUT          reduce using rule 11 (statement -> expr SEMI .)
    HIGHP           reduce using rule 11 (statement -> expr SEMI .)
    MEDIUMP         reduce using rule 11 (statement -> expr SEMI .)
    LOWP            reduce using rule 11 (statement -> expr SEMI .)
    $end            reduce using rule 11 (statement -> expr SEMI .)


state 93

    (123) expr -> expr LAND . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 189
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 94

    (122) expr -> expr DOT . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 190
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 95

    (132) expr -> expr LTHAN . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 191
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 96

    (142) expr -> expr QEST . expr COLON expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 192
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 97

    (140) expr -> expr func_call .

    DOT             reduce using rule 140 (expr -> expr func_call .)
    LAND            reduce using rule 140 (expr -> expr func_call .)
    LOR             reduce using rule 140 (expr -> expr func_call .)
    BOR             reduce using rule 140 (expr -> expr func_call .)
    BXOR            reduce using rule 140 (expr -> expr func_call .)
    BAND            reduce using rule 140 (expr -> expr func_call .)
    EQUAL           reduce using rule 140 (expr -> expr func_call .)
    NOTEQUAL        reduce using rule 140 (expr -> expr func_call .)
    GTHAN           reduce using rule 140 (expr -> expr func_call .)
    GTHANEQ         reduce using rule 140 (expr -> expr func_call .)
    LTHAN           reduce using rule 140 (expr -> expr func_call .)
    MOD             reduce using rule 140 (expr -> expr func_call .)
    LTHANEQ         reduce using rule 140 (expr -> expr func_call .)
    PLUS            reduce using rule 140 (expr -> expr func_call .)
    MINUS           reduce using rule 140 (expr -> expr func_call .)
    DIVIDE          reduce using rule 140 (expr -> expr func_call .)
    TIMES           reduce using rule 140 (expr -> expr func_call .)
    LSBRACKET       reduce using rule 140 (expr -> expr func_call .)
    QEST            reduce using rule 140 (expr -> expr func_call .)
    INC             reduce using rule 140 (expr -> expr func_call .)
    DEC             reduce using rule 140 (expr -> expr func_call .)
    LPAREN          reduce using rule 140 (expr -> expr func_call .)
    SEMI            reduce using rule 140 (expr -> expr func_call .)
    RPAREN          reduce using rule 140 (expr -> expr func_call .)
    RSBRACKET       reduce using rule 140 (expr -> expr func_call .)
    COMMA           reduce using rule 140 (expr -> expr func_call .)
    COLON           reduce using rule 140 (expr -> expr func_call .)
    ASSIGNPLUS      reduce using rule 140 (expr -> expr func_call .)
    ASSIGNMINUS     reduce using rule 140 (expr -> expr func_call .)
    ASSIGNDIVIDE    reduce using rule 140 (expr -> expr func_call .)
    ASSIGNTIMES     reduce using rule 140 (expr -> expr func_call .)
    ASSIGNBOR       reduce using rule 140 (expr -> expr func_call .)
    ASSIGNBAND      reduce using rule 140 (expr -> expr func_call .)
    ASSIGNBXOR      reduce using rule 140 (expr -> expr func_call .)
    ASSIGN          reduce using rule 140 (expr -> expr func_call .)
    RBRACKET        reduce using rule 140 (expr -> expr func_call .)


state 98

    (126) expr -> expr BXOR . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 193
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 99

    (136) expr -> expr MINUS . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 194
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 100

    (125) expr -> expr BOR . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 195
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 101

    (124) expr -> expr LOR . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 196
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 102

    (127) expr -> expr BAND . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 197
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 103

    (130) expr -> expr GTHAN . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 198
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 104

    (134) expr -> expr LTHANEQ . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 199
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 105

    (129) expr -> expr NOTEQUAL . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 200
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 106

    (141) expr -> expr LSBRACKET . expr RSBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 201
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 107

    (128) expr -> expr EQUAL . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 202
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 108

    (89) struct -> STRUCT LBRACKET . structlist RBRACKET ID
    (84) structlist -> . var_basic SEMI
    (85) structlist -> . struct
    (86) structlist -> . structlist var_basic SEMI
    (87) structlist -> . structlist struct
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    STRUCT          shift and go to state 11
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    ID              shift and go to state 156
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    struct                         shift and go to state 205
    modifier                       shift and go to state 51
    type_decl                      shift and go to state 77
    structlist                     shift and go to state 203
    var_basic                      shift and go to state 204

state 109

    (88) struct -> STRUCT ID . LBRACKET structlist RBRACKET

    LBRACKET        shift and go to state 206


state 110

    (17) statement -> var_decl SEMI .
    (26) statement_local -> var_decl SEMI .

  ! reduce/reduce conflict for RBRACKET resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for BUILTIN resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for TRUE resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for FALSE resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for STRUCT resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for INT resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for FLOAT resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for BOOL resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for FLOAT16 resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for VOID resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for UNIFORM resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for ATTRIBUTE resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for VARYING resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for INPUT resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for HIGHP resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for MEDIUMP resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for LOWP resolved using rule 17 (statement -> var_decl SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 17 (statement -> var_decl SEMI .)
    RBRACKET        reduce using rule 17 (statement -> var_decl SEMI .)
    SEMI            reduce using rule 17 (statement -> var_decl SEMI .)
    IF              reduce using rule 17 (statement -> var_decl SEMI .)
    BUILTIN         reduce using rule 17 (statement -> var_decl SEMI .)
    ELSE            reduce using rule 17 (statement -> var_decl SEMI .)
    FOR             reduce using rule 17 (statement -> var_decl SEMI .)
    NUMBER          reduce using rule 17 (statement -> var_decl SEMI .)
    TRUE            reduce using rule 17 (statement -> var_decl SEMI .)
    FALSE           reduce using rule 17 (statement -> var_decl SEMI .)
    ID              reduce using rule 17 (statement -> var_decl SEMI .)
    LPAREN          reduce using rule 17 (statement -> var_decl SEMI .)
    RETURN          reduce using rule 17 (statement -> var_decl SEMI .)
    BREAK           reduce using rule 17 (statement -> var_decl SEMI .)
    CONTINUE        reduce using rule 17 (statement -> var_decl SEMI .)
    STRUCT          reduce using rule 17 (statement -> var_decl SEMI .)
    INC             reduce using rule 17 (statement -> var_decl SEMI .)
    DEC             reduce using rule 17 (statement -> var_decl SEMI .)
    INT             reduce using rule 17 (statement -> var_decl SEMI .)
    FLOAT           reduce using rule 17 (statement -> var_decl SEMI .)
    BOOL            reduce using rule 17 (statement -> var_decl SEMI .)
    FLOAT16         reduce using rule 17 (statement -> var_decl SEMI .)
    DOUBLE          reduce using rule 17 (statement -> var_decl SEMI .)
    VOID            reduce using rule 17 (statement -> var_decl SEMI .)
    STRINGLIT       reduce using rule 17 (statement -> var_decl SEMI .)
    LSBRACKET       reduce using rule 17 (statement -> var_decl SEMI .)
    LBRACKET        reduce using rule 17 (statement -> var_decl SEMI .)
    MINUS           reduce using rule 17 (statement -> var_decl SEMI .)
    NOT             reduce using rule 17 (statement -> var_decl SEMI .)
    NEW             reduce using rule 17 (statement -> var_decl SEMI .)
    UNIFORM         reduce using rule 17 (statement -> var_decl SEMI .)
    ATTRIBUTE       reduce using rule 17 (statement -> var_decl SEMI .)
    VARYING         reduce using rule 17 (statement -> var_decl SEMI .)
    INPUT           reduce using rule 17 (statement -> var_decl SEMI .)
    OUTPUT          reduce using rule 17 (statement -> var_decl SEMI .)
    HIGHP           reduce using rule 17 (statement -> var_decl SEMI .)
    MEDIUMP         reduce using rule 17 (statement -> var_decl SEMI .)
    LOWP            reduce using rule 17 (statement -> var_decl SEMI .)
    $end            reduce using rule 17 (statement -> var_decl SEMI .)

  ! RBRACKET        [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! SEMI            [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! IF              [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! BUILTIN         [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! ELSE            [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! FOR             [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! NUMBER          [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! TRUE            [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! FALSE           [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! ID              [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! LPAREN          [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! RETURN          [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! BREAK           [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! CONTINUE        [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! STRUCT          [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! INC             [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! DEC             [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! INT             [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! FLOAT           [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! BOOL            [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! FLOAT16         [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! DOUBLE          [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! VOID            [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! STRINGLIT       [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! LSBRACKET       [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! LBRACKET        [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! MINUS           [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! NOT             [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! NEW             [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! UNIFORM         [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! ATTRIBUTE       [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! VARYING         [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! INPUT           [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! OUTPUT          [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! HIGHP           [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! MEDIUMP         [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! LOWP            [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]
  ! $end            [ reduce using rule 26 (statement_local -> var_decl SEMI .) ]


state 111

    (66) assign_expr -> INC . assign_expr
    (154) assign2 -> INC . assign_expr2
    (110) inc -> INC . expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr

    ID              shift and go to state 113
    INC             shift and go to state 111
    DEC             shift and go to state 114
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 158
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 160
    not                            shift and go to state 9
    assign_expr                    shift and go to state 207
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 112

    (112) dec -> DEC expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 112 (dec -> DEC expr .)
    LOR             reduce using rule 112 (dec -> DEC expr .)
    BOR             reduce using rule 112 (dec -> DEC expr .)
    BXOR            reduce using rule 112 (dec -> DEC expr .)
    BAND            reduce using rule 112 (dec -> DEC expr .)
    EQUAL           reduce using rule 112 (dec -> DEC expr .)
    NOTEQUAL        reduce using rule 112 (dec -> DEC expr .)
    GTHAN           reduce using rule 112 (dec -> DEC expr .)
    GTHANEQ         reduce using rule 112 (dec -> DEC expr .)
    LTHAN           reduce using rule 112 (dec -> DEC expr .)
    MOD             reduce using rule 112 (dec -> DEC expr .)
    LTHANEQ         reduce using rule 112 (dec -> DEC expr .)
    PLUS            reduce using rule 112 (dec -> DEC expr .)
    MINUS           reduce using rule 112 (dec -> DEC expr .)
    DIVIDE          reduce using rule 112 (dec -> DEC expr .)
    TIMES           reduce using rule 112 (dec -> DEC expr .)
    LSBRACKET       reduce using rule 112 (dec -> DEC expr .)
    QEST            reduce using rule 112 (dec -> DEC expr .)
    INC             reduce using rule 112 (dec -> DEC expr .)
    DEC             reduce using rule 112 (dec -> DEC expr .)
    LPAREN          reduce using rule 112 (dec -> DEC expr .)
    SEMI            reduce using rule 112 (dec -> DEC expr .)
    RPAREN          reduce using rule 112 (dec -> DEC expr .)
    RSBRACKET       reduce using rule 112 (dec -> DEC expr .)
    COMMA           reduce using rule 112 (dec -> DEC expr .)
    COLON           reduce using rule 112 (dec -> DEC expr .)
    ASSIGNPLUS      reduce using rule 112 (dec -> DEC expr .)
    ASSIGNMINUS     reduce using rule 112 (dec -> DEC expr .)
    ASSIGNDIVIDE    reduce using rule 112 (dec -> DEC expr .)
    ASSIGNTIMES     reduce using rule 112 (dec -> DEC expr .)
    ASSIGNBOR       reduce using rule 112 (dec -> DEC expr .)
    ASSIGNBAND      reduce using rule 112 (dec -> DEC expr .)
    ASSIGNBXOR      reduce using rule 112 (dec -> DEC expr .)
    ASSIGN          reduce using rule 112 (dec -> DEC expr .)
    RBRACKET        reduce using rule 112 (dec -> DEC expr .)
    DOT             shift and go to state 94

  ! DOT             [ reduce using rule 112 (dec -> DEC expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! MOD             [ shift and go to state 88 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 90 ]
  ! MINUS           [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 86 ]
  ! TIMES           [ shift and go to state 85 ]
  ! LSBRACKET       [ shift and go to state 106 ]
  ! QEST            [ shift and go to state 96 ]
  ! INC             [ shift and go to state 87 ]
  ! DEC             [ shift and go to state 84 ]
  ! LPAREN          [ shift and go to state 89 ]

    func_call                      shift and go to state 97

state 113

    (61) assign_expr -> ID .
    (149) assign_expr2 -> ID .
    (119) expr -> ID .

  ! reduce/reduce conflict for DOT resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for INC resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for DEC resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNPLUS resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNMINUS resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNDIVIDE resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNTIMES resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNBOR resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNBAND resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGNBXOR resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for SEMI resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for DOT resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for LAND resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LOR resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for BOR resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for BXOR resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for BAND resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for EQUAL resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for GTHAN resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for GTHANEQ resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LTHAN resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LTHANEQ resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for QEST resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for INC resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for DEC resolved using rule 61 (assign_expr -> ID .)
  ! reduce/reduce conflict for LPAREN resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for SEMI resolved using rule 61 (assign_expr -> ID .)
    DOT             reduce using rule 61 (assign_expr -> ID .)
    LSBRACKET       reduce using rule 61 (assign_expr -> ID .)
    INC             reduce using rule 61 (assign_expr -> ID .)
    DEC             reduce using rule 61 (assign_expr -> ID .)
    SEMI            reduce using rule 61 (assign_expr -> ID .)
    ASSIGNPLUS      reduce using rule 61 (assign_expr -> ID .)
    ASSIGNMINUS     reduce using rule 61 (assign_expr -> ID .)
    ASSIGNDIVIDE    reduce using rule 61 (assign_expr -> ID .)
    ASSIGNTIMES     reduce using rule 61 (assign_expr -> ID .)
    ASSIGNBOR       reduce using rule 61 (assign_expr -> ID .)
    ASSIGNBAND      reduce using rule 61 (assign_expr -> ID .)
    ASSIGNBXOR      reduce using rule 61 (assign_expr -> ID .)
    ASSIGN          reduce using rule 61 (assign_expr -> ID .)
    LAND            reduce using rule 119 (expr -> ID .)
    LOR             reduce using rule 119 (expr -> ID .)
    BOR             reduce using rule 119 (expr -> ID .)
    BXOR            reduce using rule 119 (expr -> ID .)
    BAND            reduce using rule 119 (expr -> ID .)
    EQUAL           reduce using rule 119 (expr -> ID .)
    NOTEQUAL        reduce using rule 119 (expr -> ID .)
    GTHAN           reduce using rule 119 (expr -> ID .)
    GTHANEQ         reduce using rule 119 (expr -> ID .)
    LTHAN           reduce using rule 119 (expr -> ID .)
    MOD             reduce using rule 119 (expr -> ID .)
    LTHANEQ         reduce using rule 119 (expr -> ID .)
    PLUS            reduce using rule 119 (expr -> ID .)
    MINUS           reduce using rule 119 (expr -> ID .)
    DIVIDE          reduce using rule 119 (expr -> ID .)
    TIMES           reduce using rule 119 (expr -> ID .)
    QEST            reduce using rule 119 (expr -> ID .)
    LPAREN          reduce using rule 119 (expr -> ID .)

  ! DOT             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LSBRACKET       [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! INC             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DEC             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNPLUS      [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNMINUS     [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNTIMES     [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNBOR       [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNBAND      [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNBXOR      [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGN          [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! SEMI            [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LAND            [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LOR             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! BOR             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! BXOR            [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! BAND            [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! EQUAL           [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! NOTEQUAL        [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! GTHAN           [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! GTHANEQ         [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LTHAN           [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! MOD             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LTHANEQ         [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! PLUS            [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! MINUS           [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DIVIDE          [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! TIMES           [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! QEST            [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LPAREN          [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DOT             [ reduce using rule 119 (expr -> ID .) ]
  ! LSBRACKET       [ reduce using rule 119 (expr -> ID .) ]
  ! INC             [ reduce using rule 119 (expr -> ID .) ]
  ! DEC             [ reduce using rule 119 (expr -> ID .) ]
  ! SEMI            [ reduce using rule 119 (expr -> ID .) ]


state 114

    (67) assign_expr -> DEC . assign_expr
    (155) assign2 -> DEC . assign_expr2
    (112) dec -> DEC . expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr

    ID              shift and go to state 113
    INC             shift and go to state 111
    DEC             shift and go to state 114
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 112
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 116
    not                            shift and go to state 9
    assign_expr                    shift and go to state 208
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 115

    (71) assign -> DEC assign_expr .
    (67) assign_expr -> DEC assign_expr .
    (62) assign_expr -> assign_expr . DOT assign_expr
    (63) assign_expr -> assign_expr . LSBRACKET expr RSBRACKET
    (64) assign_expr -> assign_expr . INC
    (65) assign_expr -> assign_expr . DEC

  ! reduce/reduce conflict for ASSIGNPLUS resolved using rule 67 (assign_expr -> DEC assign_expr .)
  ! reduce/reduce conflict for ASSIGNMINUS resolved using rule 67 (assign_expr -> DEC assign_expr .)
  ! reduce/reduce conflict for ASSIGNDIVIDE resolved using rule 67 (assign_expr -> DEC assign_expr .)
  ! reduce/reduce conflict for ASSIGNTIMES resolved using rule 67 (assign_expr -> DEC assign_expr .)
  ! reduce/reduce conflict for ASSIGNBOR resolved using rule 67 (assign_expr -> DEC assign_expr .)
  ! reduce/reduce conflict for ASSIGNBAND resolved using rule 67 (assign_expr -> DEC assign_expr .)
  ! reduce/reduce conflict for ASSIGNBXOR resolved using rule 67 (assign_expr -> DEC assign_expr .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 67 (assign_expr -> DEC assign_expr .)
    SEMI            reduce using rule 71 (assign -> DEC assign_expr .)
    RPAREN          reduce using rule 71 (assign -> DEC assign_expr .)
    INC             reduce using rule 67 (assign_expr -> DEC assign_expr .)
    DEC             reduce using rule 67 (assign_expr -> DEC assign_expr .)
    LSBRACKET       reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNPLUS      reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNMINUS     reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNDIVIDE    reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNTIMES     reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNBOR       reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNBAND      reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNBXOR      reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGN          reduce using rule 67 (assign_expr -> DEC assign_expr .)
    DOT             shift and go to state 118

  ! ASSIGNPLUS      [ reduce using rule 71 (assign -> DEC assign_expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 71 (assign -> DEC assign_expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 71 (assign -> DEC assign_expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 71 (assign -> DEC assign_expr .) ]
  ! ASSIGNBOR       [ reduce using rule 71 (assign -> DEC assign_expr .) ]
  ! ASSIGNBAND      [ reduce using rule 71 (assign -> DEC assign_expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 71 (assign -> DEC assign_expr .) ]
  ! ASSIGN          [ reduce using rule 71 (assign -> DEC assign_expr .) ]
  ! DOT             [ reduce using rule 67 (assign_expr -> DEC assign_expr .) ]
  ! LSBRACKET       [ shift and go to state 130 ]
  ! INC             [ shift and go to state 210 ]
  ! DEC             [ shift and go to state 209 ]


state 116

    (155) assign2 -> DEC assign_expr2 .
    (150) assign_expr2 -> assign_expr2 . DOT assign_expr2
    (151) assign_expr2 -> assign_expr2 . LSBRACKET expr RSBRACKET
    (152) assign2 -> assign_expr2 . cmplx_assign expr
    (156) assign2 -> assign_expr2 . INC
    (157) assign2 -> assign_expr2 . DEC
    (53) cmplx_assign -> . ASSIGNPLUS
    (54) cmplx_assign -> . ASSIGNMINUS
    (55) cmplx_assign -> . ASSIGNDIVIDE
    (56) cmplx_assign -> . ASSIGNTIMES
    (57) cmplx_assign -> . ASSIGNBOR
    (58) cmplx_assign -> . ASSIGNBAND
    (59) cmplx_assign -> . ASSIGNBXOR
    (60) cmplx_assign -> . ASSIGN

    LAND            reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    LOR             reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    BOR             reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    BXOR            reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    BAND            reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    EQUAL           reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    NOTEQUAL        reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    GTHAN           reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    GTHANEQ         reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    LTHAN           reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    MOD             reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    LTHANEQ         reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    PLUS            reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    MINUS           reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    DIVIDE          reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    TIMES           reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    LSBRACKET       reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    QEST            reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    INC             reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    DEC             reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    LPAREN          reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    SEMI            reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    RPAREN          reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    RSBRACKET       reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    COMMA           reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    COLON           reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    ASSIGNPLUS      reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    ASSIGNMINUS     reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    ASSIGNDIVIDE    reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    ASSIGNTIMES     reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    ASSIGNBOR       reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    ASSIGNBAND      reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    ASSIGNBXOR      reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    ASSIGN          reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    RBRACKET        reduce using rule 155 (assign2 -> DEC assign_expr2 .)
    DOT             shift and go to state 166

  ! DOT             [ reduce using rule 155 (assign2 -> DEC assign_expr2 .) ]
  ! LSBRACKET       [ shift and go to state 170 ]
  ! INC             [ shift and go to state 169 ]
  ! DEC             [ shift and go to state 167 ]
  ! ASSIGNPLUS      [ shift and go to state 122 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 124 ]
  ! ASSIGNTIMES     [ shift and go to state 123 ]
  ! ASSIGNBOR       [ shift and go to state 125 ]
  ! ASSIGNBAND      [ shift and go to state 128 ]
  ! ASSIGNBXOR      [ shift and go to state 129 ]
  ! ASSIGN          [ shift and go to state 121 ]

    cmplx_assign                   shift and go to state 168

state 117

    (12) statement -> return SEMI .
    (23) statement_local -> return SEMI .

  ! reduce/reduce conflict for RBRACKET resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for BUILTIN resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for TRUE resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for FALSE resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for STRUCT resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for INT resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for FLOAT resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for BOOL resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for FLOAT16 resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for VOID resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for UNIFORM resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for ATTRIBUTE resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for VARYING resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for INPUT resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for HIGHP resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for MEDIUMP resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for LOWP resolved using rule 12 (statement -> return SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 12 (statement -> return SEMI .)
    RBRACKET        reduce using rule 12 (statement -> return SEMI .)
    SEMI            reduce using rule 12 (statement -> return SEMI .)
    IF              reduce using rule 12 (statement -> return SEMI .)
    BUILTIN         reduce using rule 12 (statement -> return SEMI .)
    ELSE            reduce using rule 12 (statement -> return SEMI .)
    FOR             reduce using rule 12 (statement -> return SEMI .)
    NUMBER          reduce using rule 12 (statement -> return SEMI .)
    TRUE            reduce using rule 12 (statement -> return SEMI .)
    FALSE           reduce using rule 12 (statement -> return SEMI .)
    ID              reduce using rule 12 (statement -> return SEMI .)
    LPAREN          reduce using rule 12 (statement -> return SEMI .)
    RETURN          reduce using rule 12 (statement -> return SEMI .)
    BREAK           reduce using rule 12 (statement -> return SEMI .)
    CONTINUE        reduce using rule 12 (statement -> return SEMI .)
    STRUCT          reduce using rule 12 (statement -> return SEMI .)
    INC             reduce using rule 12 (statement -> return SEMI .)
    DEC             reduce using rule 12 (statement -> return SEMI .)
    INT             reduce using rule 12 (statement -> return SEMI .)
    FLOAT           reduce using rule 12 (statement -> return SEMI .)
    BOOL            reduce using rule 12 (statement -> return SEMI .)
    FLOAT16         reduce using rule 12 (statement -> return SEMI .)
    DOUBLE          reduce using rule 12 (statement -> return SEMI .)
    VOID            reduce using rule 12 (statement -> return SEMI .)
    STRINGLIT       reduce using rule 12 (statement -> return SEMI .)
    LSBRACKET       reduce using rule 12 (statement -> return SEMI .)
    LBRACKET        reduce using rule 12 (statement -> return SEMI .)
    MINUS           reduce using rule 12 (statement -> return SEMI .)
    NOT             reduce using rule 12 (statement -> return SEMI .)
    NEW             reduce using rule 12 (statement -> return SEMI .)
    UNIFORM         reduce using rule 12 (statement -> return SEMI .)
    ATTRIBUTE       reduce using rule 12 (statement -> return SEMI .)
    VARYING         reduce using rule 12 (statement -> return SEMI .)
    INPUT           reduce using rule 12 (statement -> return SEMI .)
    OUTPUT          reduce using rule 12 (statement -> return SEMI .)
    HIGHP           reduce using rule 12 (statement -> return SEMI .)
    MEDIUMP         reduce using rule 12 (statement -> return SEMI .)
    LOWP            reduce using rule 12 (statement -> return SEMI .)
    $end            reduce using rule 12 (statement -> return SEMI .)

  ! RBRACKET        [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! SEMI            [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! IF              [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! BUILTIN         [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! ELSE            [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! FOR             [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! NUMBER          [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! TRUE            [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! FALSE           [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! ID              [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! LPAREN          [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! RETURN          [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! BREAK           [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! CONTINUE        [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! STRUCT          [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! INC             [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! DEC             [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! INT             [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! FLOAT           [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! BOOL            [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! FLOAT16         [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! DOUBLE          [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! VOID            [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! STRINGLIT       [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! LSBRACKET       [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! LBRACKET        [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! MINUS           [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! NOT             [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! NEW             [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! UNIFORM         [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! ATTRIBUTE       [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! VARYING         [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! INPUT           [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! OUTPUT          [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! HIGHP           [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! MEDIUMP         [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! LOWP            [ reduce using rule 23 (statement_local -> return SEMI .) ]
  ! $end            [ reduce using rule 23 (statement_local -> return SEMI .) ]


state 118

    (62) assign_expr -> assign_expr DOT . assign_expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr

    ID              shift and go to state 177
    INC             shift and go to state 176
    DEC             shift and go to state 175

    assign_expr                    shift and go to state 211

state 119

    (73) assign -> assign_expr DEC .
    (65) assign_expr -> assign_expr DEC .

  ! reduce/reduce conflict for ASSIGNPLUS resolved using rule 65 (assign_expr -> assign_expr DEC .)
  ! reduce/reduce conflict for ASSIGNMINUS resolved using rule 65 (assign_expr -> assign_expr DEC .)
  ! reduce/reduce conflict for ASSIGNDIVIDE resolved using rule 65 (assign_expr -> assign_expr DEC .)
  ! reduce/reduce conflict for ASSIGNTIMES resolved using rule 65 (assign_expr -> assign_expr DEC .)
  ! reduce/reduce conflict for ASSIGNBOR resolved using rule 65 (assign_expr -> assign_expr DEC .)
  ! reduce/reduce conflict for ASSIGNBAND resolved using rule 65 (assign_expr -> assign_expr DEC .)
  ! reduce/reduce conflict for ASSIGNBXOR resolved using rule 65 (assign_expr -> assign_expr DEC .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 65 (assign_expr -> assign_expr DEC .)
    SEMI            reduce using rule 73 (assign -> assign_expr DEC .)
    RPAREN          reduce using rule 73 (assign -> assign_expr DEC .)
    INC             reduce using rule 65 (assign_expr -> assign_expr DEC .)
    DEC             reduce using rule 65 (assign_expr -> assign_expr DEC .)
    DOT             reduce using rule 65 (assign_expr -> assign_expr DEC .)
    LSBRACKET       reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNPLUS      reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNMINUS     reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNDIVIDE    reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNTIMES     reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNBOR       reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNBAND      reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNBXOR      reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGN          reduce using rule 65 (assign_expr -> assign_expr DEC .)

  ! ASSIGNPLUS      [ reduce using rule 73 (assign -> assign_expr DEC .) ]
  ! ASSIGNMINUS     [ reduce using rule 73 (assign -> assign_expr DEC .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 73 (assign -> assign_expr DEC .) ]
  ! ASSIGNTIMES     [ reduce using rule 73 (assign -> assign_expr DEC .) ]
  ! ASSIGNBOR       [ reduce using rule 73 (assign -> assign_expr DEC .) ]
  ! ASSIGNBAND      [ reduce using rule 73 (assign -> assign_expr DEC .) ]
  ! ASSIGNBXOR      [ reduce using rule 73 (assign -> assign_expr DEC .) ]
  ! ASSIGN          [ reduce using rule 73 (assign -> assign_expr DEC .) ]


state 120

    (68) assign -> assign_expr cmplx_assign . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 212
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 121

    (60) cmplx_assign -> ASSIGN .

    NUMBER          reduce using rule 60 (cmplx_assign -> ASSIGN .)
    TRUE            reduce using rule 60 (cmplx_assign -> ASSIGN .)
    FALSE           reduce using rule 60 (cmplx_assign -> ASSIGN .)
    ID              reduce using rule 60 (cmplx_assign -> ASSIGN .)
    LPAREN          reduce using rule 60 (cmplx_assign -> ASSIGN .)
    STRINGLIT       reduce using rule 60 (cmplx_assign -> ASSIGN .)
    LSBRACKET       reduce using rule 60 (cmplx_assign -> ASSIGN .)
    LBRACKET        reduce using rule 60 (cmplx_assign -> ASSIGN .)
    MINUS           reduce using rule 60 (cmplx_assign -> ASSIGN .)
    INC             reduce using rule 60 (cmplx_assign -> ASSIGN .)
    DEC             reduce using rule 60 (cmplx_assign -> ASSIGN .)
    NOT             reduce using rule 60 (cmplx_assign -> ASSIGN .)
    NEW             reduce using rule 60 (cmplx_assign -> ASSIGN .)


state 122

    (53) cmplx_assign -> ASSIGNPLUS .

    NUMBER          reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)
    TRUE            reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)
    FALSE           reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)
    ID              reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)
    LPAREN          reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)
    STRINGLIT       reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)
    LSBRACKET       reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)
    LBRACKET        reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)
    MINUS           reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)
    INC             reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)
    DEC             reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)
    NOT             reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)
    NEW             reduce using rule 53 (cmplx_assign -> ASSIGNPLUS .)


state 123

    (56) cmplx_assign -> ASSIGNTIMES .

    NUMBER          reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)
    TRUE            reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)
    FALSE           reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)
    ID              reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)
    LPAREN          reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)
    STRINGLIT       reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)
    LSBRACKET       reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)
    LBRACKET        reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)
    MINUS           reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)
    INC             reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)
    DEC             reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)
    NOT             reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)
    NEW             reduce using rule 56 (cmplx_assign -> ASSIGNTIMES .)


state 124

    (55) cmplx_assign -> ASSIGNDIVIDE .

    NUMBER          reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)
    TRUE            reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)
    FALSE           reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)
    ID              reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)
    LPAREN          reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)
    STRINGLIT       reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)
    LSBRACKET       reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)
    LBRACKET        reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)
    MINUS           reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)
    INC             reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)
    DEC             reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)
    NOT             reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)
    NEW             reduce using rule 55 (cmplx_assign -> ASSIGNDIVIDE .)


state 125

    (57) cmplx_assign -> ASSIGNBOR .

    NUMBER          reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)
    TRUE            reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)
    FALSE           reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)
    ID              reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)
    LPAREN          reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)
    STRINGLIT       reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)
    LSBRACKET       reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)
    LBRACKET        reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)
    MINUS           reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)
    INC             reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)
    DEC             reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)
    NOT             reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)
    NEW             reduce using rule 57 (cmplx_assign -> ASSIGNBOR .)


state 126

    (54) cmplx_assign -> ASSIGNMINUS .

    NUMBER          reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)
    TRUE            reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)
    FALSE           reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)
    ID              reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)
    LPAREN          reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)
    STRINGLIT       reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)
    LSBRACKET       reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)
    LBRACKET        reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)
    MINUS           reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)
    INC             reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)
    DEC             reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)
    NOT             reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)
    NEW             reduce using rule 54 (cmplx_assign -> ASSIGNMINUS .)


state 127

    (72) assign -> assign_expr INC .
    (64) assign_expr -> assign_expr INC .

  ! reduce/reduce conflict for ASSIGNPLUS resolved using rule 64 (assign_expr -> assign_expr INC .)
  ! reduce/reduce conflict for ASSIGNMINUS resolved using rule 64 (assign_expr -> assign_expr INC .)
  ! reduce/reduce conflict for ASSIGNDIVIDE resolved using rule 64 (assign_expr -> assign_expr INC .)
  ! reduce/reduce conflict for ASSIGNTIMES resolved using rule 64 (assign_expr -> assign_expr INC .)
  ! reduce/reduce conflict for ASSIGNBOR resolved using rule 64 (assign_expr -> assign_expr INC .)
  ! reduce/reduce conflict for ASSIGNBAND resolved using rule 64 (assign_expr -> assign_expr INC .)
  ! reduce/reduce conflict for ASSIGNBXOR resolved using rule 64 (assign_expr -> assign_expr INC .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 64 (assign_expr -> assign_expr INC .)
    SEMI            reduce using rule 72 (assign -> assign_expr INC .)
    RPAREN          reduce using rule 72 (assign -> assign_expr INC .)
    INC             reduce using rule 64 (assign_expr -> assign_expr INC .)
    DEC             reduce using rule 64 (assign_expr -> assign_expr INC .)
    DOT             reduce using rule 64 (assign_expr -> assign_expr INC .)
    LSBRACKET       reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNPLUS      reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNMINUS     reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNDIVIDE    reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNTIMES     reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNBOR       reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNBAND      reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNBXOR      reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGN          reduce using rule 64 (assign_expr -> assign_expr INC .)

  ! ASSIGNPLUS      [ reduce using rule 72 (assign -> assign_expr INC .) ]
  ! ASSIGNMINUS     [ reduce using rule 72 (assign -> assign_expr INC .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 72 (assign -> assign_expr INC .) ]
  ! ASSIGNTIMES     [ reduce using rule 72 (assign -> assign_expr INC .) ]
  ! ASSIGNBOR       [ reduce using rule 72 (assign -> assign_expr INC .) ]
  ! ASSIGNBAND      [ reduce using rule 72 (assign -> assign_expr INC .) ]
  ! ASSIGNBXOR      [ reduce using rule 72 (assign -> assign_expr INC .) ]
  ! ASSIGN          [ reduce using rule 72 (assign -> assign_expr INC .) ]


state 128

    (58) cmplx_assign -> ASSIGNBAND .

    NUMBER          reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)
    TRUE            reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)
    FALSE           reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)
    ID              reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)
    LPAREN          reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)
    STRINGLIT       reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)
    LSBRACKET       reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)
    LBRACKET        reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)
    MINUS           reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)
    INC             reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)
    DEC             reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)
    NOT             reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)
    NEW             reduce using rule 58 (cmplx_assign -> ASSIGNBAND .)


state 129

    (59) cmplx_assign -> ASSIGNBXOR .

    NUMBER          reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)
    TRUE            reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)
    FALSE           reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)
    ID              reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)
    LPAREN          reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)
    STRINGLIT       reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)
    LSBRACKET       reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)
    LBRACKET        reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)
    MINUS           reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)
    INC             reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)
    DEC             reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)
    NOT             reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)
    NEW             reduce using rule 59 (cmplx_assign -> ASSIGNBXOR .)


state 130

    (63) assign_expr -> assign_expr LSBRACKET . expr RSBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 213
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 131

    (13) statement -> break SEMI .
    (24) statement_local -> break SEMI .

  ! reduce/reduce conflict for RBRACKET resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for BUILTIN resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for TRUE resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for FALSE resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for STRUCT resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for INT resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for FLOAT resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for BOOL resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for FLOAT16 resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for VOID resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for UNIFORM resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for ATTRIBUTE resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for VARYING resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for INPUT resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for HIGHP resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for MEDIUMP resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for LOWP resolved using rule 13 (statement -> break SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 13 (statement -> break SEMI .)
    RBRACKET        reduce using rule 13 (statement -> break SEMI .)
    SEMI            reduce using rule 13 (statement -> break SEMI .)
    IF              reduce using rule 13 (statement -> break SEMI .)
    BUILTIN         reduce using rule 13 (statement -> break SEMI .)
    ELSE            reduce using rule 13 (statement -> break SEMI .)
    FOR             reduce using rule 13 (statement -> break SEMI .)
    NUMBER          reduce using rule 13 (statement -> break SEMI .)
    TRUE            reduce using rule 13 (statement -> break SEMI .)
    FALSE           reduce using rule 13 (statement -> break SEMI .)
    ID              reduce using rule 13 (statement -> break SEMI .)
    LPAREN          reduce using rule 13 (statement -> break SEMI .)
    RETURN          reduce using rule 13 (statement -> break SEMI .)
    BREAK           reduce using rule 13 (statement -> break SEMI .)
    CONTINUE        reduce using rule 13 (statement -> break SEMI .)
    STRUCT          reduce using rule 13 (statement -> break SEMI .)
    INC             reduce using rule 13 (statement -> break SEMI .)
    DEC             reduce using rule 13 (statement -> break SEMI .)
    INT             reduce using rule 13 (statement -> break SEMI .)
    FLOAT           reduce using rule 13 (statement -> break SEMI .)
    BOOL            reduce using rule 13 (statement -> break SEMI .)
    FLOAT16         reduce using rule 13 (statement -> break SEMI .)
    DOUBLE          reduce using rule 13 (statement -> break SEMI .)
    VOID            reduce using rule 13 (statement -> break SEMI .)
    STRINGLIT       reduce using rule 13 (statement -> break SEMI .)
    LSBRACKET       reduce using rule 13 (statement -> break SEMI .)
    LBRACKET        reduce using rule 13 (statement -> break SEMI .)
    MINUS           reduce using rule 13 (statement -> break SEMI .)
    NOT             reduce using rule 13 (statement -> break SEMI .)
    NEW             reduce using rule 13 (statement -> break SEMI .)
    UNIFORM         reduce using rule 13 (statement -> break SEMI .)
    ATTRIBUTE       reduce using rule 13 (statement -> break SEMI .)
    VARYING         reduce using rule 13 (statement -> break SEMI .)
    INPUT           reduce using rule 13 (statement -> break SEMI .)
    OUTPUT          reduce using rule 13 (statement -> break SEMI .)
    HIGHP           reduce using rule 13 (statement -> break SEMI .)
    MEDIUMP         reduce using rule 13 (statement -> break SEMI .)
    LOWP            reduce using rule 13 (statement -> break SEMI .)
    $end            reduce using rule 13 (statement -> break SEMI .)

  ! RBRACKET        [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! SEMI            [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! IF              [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! BUILTIN         [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! ELSE            [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! FOR             [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! NUMBER          [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! TRUE            [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! FALSE           [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! ID              [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! LPAREN          [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! RETURN          [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! BREAK           [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! CONTINUE        [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! STRUCT          [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! INC             [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! DEC             [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! INT             [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! FLOAT           [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! BOOL            [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! FLOAT16         [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! DOUBLE          [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! VOID            [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! STRINGLIT       [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! LSBRACKET       [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! LBRACKET        [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! MINUS           [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! NOT             [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! NEW             [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! UNIFORM         [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! ATTRIBUTE       [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! VARYING         [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! INPUT           [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! OUTPUT          [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! HIGHP           [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! MEDIUMP         [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! LOWP            [ reduce using rule 24 (statement_local -> break SEMI .) ]
  ! $end            [ reduce using rule 24 (statement_local -> break SEMI .) ]


state 132

    (154) assign2 -> INC . assign_expr2
    (110) inc -> INC . expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr

    ID              shift and go to state 214
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 158
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 160
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 133

    (158) expr_uminus -> MINUS expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 158 (expr_uminus -> MINUS expr .)
    LOR             reduce using rule 158 (expr_uminus -> MINUS expr .)
    BOR             reduce using rule 158 (expr_uminus -> MINUS expr .)
    BXOR            reduce using rule 158 (expr_uminus -> MINUS expr .)
    BAND            reduce using rule 158 (expr_uminus -> MINUS expr .)
    EQUAL           reduce using rule 158 (expr_uminus -> MINUS expr .)
    NOTEQUAL        reduce using rule 158 (expr_uminus -> MINUS expr .)
    GTHAN           reduce using rule 158 (expr_uminus -> MINUS expr .)
    GTHANEQ         reduce using rule 158 (expr_uminus -> MINUS expr .)
    LTHAN           reduce using rule 158 (expr_uminus -> MINUS expr .)
    MOD             reduce using rule 158 (expr_uminus -> MINUS expr .)
    LTHANEQ         reduce using rule 158 (expr_uminus -> MINUS expr .)
    PLUS            reduce using rule 158 (expr_uminus -> MINUS expr .)
    MINUS           reduce using rule 158 (expr_uminus -> MINUS expr .)
    DIVIDE          reduce using rule 158 (expr_uminus -> MINUS expr .)
    TIMES           reduce using rule 158 (expr_uminus -> MINUS expr .)
    QEST            reduce using rule 158 (expr_uminus -> MINUS expr .)
    SEMI            reduce using rule 158 (expr_uminus -> MINUS expr .)
    RPAREN          reduce using rule 158 (expr_uminus -> MINUS expr .)
    RSBRACKET       reduce using rule 158 (expr_uminus -> MINUS expr .)
    COMMA           reduce using rule 158 (expr_uminus -> MINUS expr .)
    COLON           reduce using rule 158 (expr_uminus -> MINUS expr .)
    ASSIGNPLUS      reduce using rule 158 (expr_uminus -> MINUS expr .)
    ASSIGNMINUS     reduce using rule 158 (expr_uminus -> MINUS expr .)
    ASSIGNDIVIDE    reduce using rule 158 (expr_uminus -> MINUS expr .)
    ASSIGNTIMES     reduce using rule 158 (expr_uminus -> MINUS expr .)
    ASSIGNBOR       reduce using rule 158 (expr_uminus -> MINUS expr .)
    ASSIGNBAND      reduce using rule 158 (expr_uminus -> MINUS expr .)
    ASSIGNBXOR      reduce using rule 158 (expr_uminus -> MINUS expr .)
    ASSIGN          reduce using rule 158 (expr_uminus -> MINUS expr .)
    RBRACKET        reduce using rule 158 (expr_uminus -> MINUS expr .)
    DOT             shift and go to state 94
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 158 (expr_uminus -> MINUS expr .) ]
  ! LSBRACKET       [ reduce using rule 158 (expr_uminus -> MINUS expr .) ]
  ! INC             [ reduce using rule 158 (expr_uminus -> MINUS expr .) ]
  ! DEC             [ reduce using rule 158 (expr_uminus -> MINUS expr .) ]
  ! LPAREN          [ reduce using rule 158 (expr_uminus -> MINUS expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! MOD             [ shift and go to state 88 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 90 ]
  ! MINUS           [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 86 ]
  ! TIMES           [ shift and go to state 85 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 134

    (155) assign2 -> DEC . assign_expr2
    (112) dec -> DEC . expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr

    ID              shift and go to state 214
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 112
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 116
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 135

    (119) expr -> ID .
    (149) assign_expr2 -> ID .

  ! reduce/reduce conflict for INC resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for DEC resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for DOT resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNPLUS resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNMINUS resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNDIVIDE resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNTIMES resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNBOR resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNBAND resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNBXOR resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 119 (expr -> ID .)
    DOT             reduce using rule 119 (expr -> ID .)
    LAND            reduce using rule 119 (expr -> ID .)
    LOR             reduce using rule 119 (expr -> ID .)
    BOR             reduce using rule 119 (expr -> ID .)
    BXOR            reduce using rule 119 (expr -> ID .)
    BAND            reduce using rule 119 (expr -> ID .)
    EQUAL           reduce using rule 119 (expr -> ID .)
    NOTEQUAL        reduce using rule 119 (expr -> ID .)
    GTHAN           reduce using rule 119 (expr -> ID .)
    GTHANEQ         reduce using rule 119 (expr -> ID .)
    LTHAN           reduce using rule 119 (expr -> ID .)
    MOD             reduce using rule 119 (expr -> ID .)
    LTHANEQ         reduce using rule 119 (expr -> ID .)
    PLUS            reduce using rule 119 (expr -> ID .)
    MINUS           reduce using rule 119 (expr -> ID .)
    DIVIDE          reduce using rule 119 (expr -> ID .)
    TIMES           reduce using rule 119 (expr -> ID .)
    LSBRACKET       reduce using rule 119 (expr -> ID .)
    QEST            reduce using rule 119 (expr -> ID .)
    INC             reduce using rule 119 (expr -> ID .)
    DEC             reduce using rule 119 (expr -> ID .)
    LPAREN          reduce using rule 119 (expr -> ID .)
    SEMI            reduce using rule 119 (expr -> ID .)
    RPAREN          reduce using rule 119 (expr -> ID .)
    RSBRACKET       reduce using rule 119 (expr -> ID .)
    COMMA           reduce using rule 119 (expr -> ID .)
    COLON           reduce using rule 119 (expr -> ID .)
    ASSIGNPLUS      reduce using rule 119 (expr -> ID .)
    ASSIGNMINUS     reduce using rule 119 (expr -> ID .)
    ASSIGNDIVIDE    reduce using rule 119 (expr -> ID .)
    ASSIGNTIMES     reduce using rule 119 (expr -> ID .)
    ASSIGNBOR       reduce using rule 119 (expr -> ID .)
    ASSIGNBAND      reduce using rule 119 (expr -> ID .)
    ASSIGNBXOR      reduce using rule 119 (expr -> ID .)
    ASSIGN          reduce using rule 119 (expr -> ID .)
    RBRACKET        reduce using rule 119 (expr -> ID .)

  ! INC             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DEC             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DOT             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LSBRACKET       [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNPLUS      [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNMINUS     [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNTIMES     [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNBOR       [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNBAND      [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNBXOR      [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGN          [ reduce using rule 149 (assign_expr2 -> ID .) ]


state 136

    (107) obj_literal -> LBRACKET RBRACKET .

    DOT             reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    LAND            reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    LOR             reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    BOR             reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    BXOR            reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    BAND            reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    EQUAL           reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    NOTEQUAL        reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    GTHAN           reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    GTHANEQ         reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    LTHAN           reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    MOD             reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    LTHANEQ         reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    LSBRACKET       reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    QEST            reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    INC             reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    DEC             reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    SEMI            reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    RSBRACKET       reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    COLON           reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    ASSIGNPLUS      reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    ASSIGNMINUS     reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    ASSIGNDIVIDE    reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    ASSIGNTIMES     reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    ASSIGNBOR       reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    ASSIGNBAND      reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    ASSIGNBXOR      reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 107 (obj_literal -> LBRACKET RBRACKET .)


state 137

    (104) obj_lit_list -> ID . COLON expr

    COLON           shift and go to state 215


state 138

    (106) obj_literal -> LBRACKET obj_lit_list . RBRACKET
    (105) obj_lit_list -> obj_lit_list . COMMA ID COLON expr

    RBRACKET        shift and go to state 217
    COMMA           shift and go to state 216


state 139

    (3) statementlist -> statementlist statement .

    RBRACKET        reduce using rule 3 (statementlist -> statementlist statement .)
    SEMI            reduce using rule 3 (statementlist -> statementlist statement .)
    IF              reduce using rule 3 (statementlist -> statementlist statement .)
    BUILTIN         reduce using rule 3 (statementlist -> statementlist statement .)
    ELSE            reduce using rule 3 (statementlist -> statementlist statement .)
    FOR             reduce using rule 3 (statementlist -> statementlist statement .)
    NUMBER          reduce using rule 3 (statementlist -> statementlist statement .)
    TRUE            reduce using rule 3 (statementlist -> statementlist statement .)
    FALSE           reduce using rule 3 (statementlist -> statementlist statement .)
    ID              reduce using rule 3 (statementlist -> statementlist statement .)
    LPAREN          reduce using rule 3 (statementlist -> statementlist statement .)
    RETURN          reduce using rule 3 (statementlist -> statementlist statement .)
    BREAK           reduce using rule 3 (statementlist -> statementlist statement .)
    CONTINUE        reduce using rule 3 (statementlist -> statementlist statement .)
    STRUCT          reduce using rule 3 (statementlist -> statementlist statement .)
    INC             reduce using rule 3 (statementlist -> statementlist statement .)
    DEC             reduce using rule 3 (statementlist -> statementlist statement .)
    INT             reduce using rule 3 (statementlist -> statementlist statement .)
    FLOAT           reduce using rule 3 (statementlist -> statementlist statement .)
    BOOL            reduce using rule 3 (statementlist -> statementlist statement .)
    FLOAT16         reduce using rule 3 (statementlist -> statementlist statement .)
    DOUBLE          reduce using rule 3 (statementlist -> statementlist statement .)
    VOID            reduce using rule 3 (statementlist -> statementlist statement .)
    STRINGLIT       reduce using rule 3 (statementlist -> statementlist statement .)
    LSBRACKET       reduce using rule 3 (statementlist -> statementlist statement .)
    LBRACKET        reduce using rule 3 (statementlist -> statementlist statement .)
    MINUS           reduce using rule 3 (statementlist -> statementlist statement .)
    NOT             reduce using rule 3 (statementlist -> statementlist statement .)
    NEW             reduce using rule 3 (statementlist -> statementlist statement .)
    UNIFORM         reduce using rule 3 (statementlist -> statementlist statement .)
    ATTRIBUTE       reduce using rule 3 (statementlist -> statementlist statement .)
    VARYING         reduce using rule 3 (statementlist -> statementlist statement .)
    INPUT           reduce using rule 3 (statementlist -> statementlist statement .)
    OUTPUT          reduce using rule 3 (statementlist -> statementlist statement .)
    HIGHP           reduce using rule 3 (statementlist -> statementlist statement .)
    MEDIUMP         reduce using rule 3 (statementlist -> statementlist statement .)
    LOWP            reduce using rule 3 (statementlist -> statementlist statement .)
    $end            reduce using rule 3 (statementlist -> statementlist statement .)


state 140

    (4) statementlist -> statementlist statement_local .

    RBRACKET        reduce using rule 4 (statementlist -> statementlist statement_local .)
    SEMI            reduce using rule 4 (statementlist -> statementlist statement_local .)
    IF              reduce using rule 4 (statementlist -> statementlist statement_local .)
    BUILTIN         reduce using rule 4 (statementlist -> statementlist statement_local .)
    ELSE            reduce using rule 4 (statementlist -> statementlist statement_local .)
    FOR             reduce using rule 4 (statementlist -> statementlist statement_local .)
    NUMBER          reduce using rule 4 (statementlist -> statementlist statement_local .)
    TRUE            reduce using rule 4 (statementlist -> statementlist statement_local .)
    FALSE           reduce using rule 4 (statementlist -> statementlist statement_local .)
    ID              reduce using rule 4 (statementlist -> statementlist statement_local .)
    LPAREN          reduce using rule 4 (statementlist -> statementlist statement_local .)
    RETURN          reduce using rule 4 (statementlist -> statementlist statement_local .)
    BREAK           reduce using rule 4 (statementlist -> statementlist statement_local .)
    CONTINUE        reduce using rule 4 (statementlist -> statementlist statement_local .)
    STRUCT          reduce using rule 4 (statementlist -> statementlist statement_local .)
    INC             reduce using rule 4 (statementlist -> statementlist statement_local .)
    DEC             reduce using rule 4 (statementlist -> statementlist statement_local .)
    INT             reduce using rule 4 (statementlist -> statementlist statement_local .)
    FLOAT           reduce using rule 4 (statementlist -> statementlist statement_local .)
    BOOL            reduce using rule 4 (statementlist -> statementlist statement_local .)
    FLOAT16         reduce using rule 4 (statementlist -> statementlist statement_local .)
    DOUBLE          reduce using rule 4 (statementlist -> statementlist statement_local .)
    VOID            reduce using rule 4 (statementlist -> statementlist statement_local .)
    STRINGLIT       reduce using rule 4 (statementlist -> statementlist statement_local .)
    LSBRACKET       reduce using rule 4 (statementlist -> statementlist statement_local .)
    LBRACKET        reduce using rule 4 (statementlist -> statementlist statement_local .)
    MINUS           reduce using rule 4 (statementlist -> statementlist statement_local .)
    NOT             reduce using rule 4 (statementlist -> statementlist statement_local .)
    NEW             reduce using rule 4 (statementlist -> statementlist statement_local .)
    UNIFORM         reduce using rule 4 (statementlist -> statementlist statement_local .)
    ATTRIBUTE       reduce using rule 4 (statementlist -> statementlist statement_local .)
    VARYING         reduce using rule 4 (statementlist -> statementlist statement_local .)
    INPUT           reduce using rule 4 (statementlist -> statementlist statement_local .)
    OUTPUT          reduce using rule 4 (statementlist -> statementlist statement_local .)
    HIGHP           reduce using rule 4 (statementlist -> statementlist statement_local .)
    MEDIUMP         reduce using rule 4 (statementlist -> statementlist statement_local .)
    LOWP            reduce using rule 4 (statementlist -> statementlist statement_local .)
    $end            reduce using rule 4 (statementlist -> statementlist statement_local .)


state 141

    (8) statement -> builtin_global SEMI .

    RBRACKET        reduce using rule 8 (statement -> builtin_global SEMI .)
    SEMI            reduce using rule 8 (statement -> builtin_global SEMI .)
    IF              reduce using rule 8 (statement -> builtin_global SEMI .)
    BUILTIN         reduce using rule 8 (statement -> builtin_global SEMI .)
    ELSE            reduce using rule 8 (statement -> builtin_global SEMI .)
    FOR             reduce using rule 8 (statement -> builtin_global SEMI .)
    NUMBER          reduce using rule 8 (statement -> builtin_global SEMI .)
    TRUE            reduce using rule 8 (statement -> builtin_global SEMI .)
    FALSE           reduce using rule 8 (statement -> builtin_global SEMI .)
    ID              reduce using rule 8 (statement -> builtin_global SEMI .)
    LPAREN          reduce using rule 8 (statement -> builtin_global SEMI .)
    RETURN          reduce using rule 8 (statement -> builtin_global SEMI .)
    BREAK           reduce using rule 8 (statement -> builtin_global SEMI .)
    CONTINUE        reduce using rule 8 (statement -> builtin_global SEMI .)
    STRUCT          reduce using rule 8 (statement -> builtin_global SEMI .)
    INC             reduce using rule 8 (statement -> builtin_global SEMI .)
    DEC             reduce using rule 8 (statement -> builtin_global SEMI .)
    INT             reduce using rule 8 (statement -> builtin_global SEMI .)
    FLOAT           reduce using rule 8 (statement -> builtin_global SEMI .)
    BOOL            reduce using rule 8 (statement -> builtin_global SEMI .)
    FLOAT16         reduce using rule 8 (statement -> builtin_global SEMI .)
    DOUBLE          reduce using rule 8 (statement -> builtin_global SEMI .)
    VOID            reduce using rule 8 (statement -> builtin_global SEMI .)
    STRINGLIT       reduce using rule 8 (statement -> builtin_global SEMI .)
    LSBRACKET       reduce using rule 8 (statement -> builtin_global SEMI .)
    LBRACKET        reduce using rule 8 (statement -> builtin_global SEMI .)
    MINUS           reduce using rule 8 (statement -> builtin_global SEMI .)
    NOT             reduce using rule 8 (statement -> builtin_global SEMI .)
    NEW             reduce using rule 8 (statement -> builtin_global SEMI .)
    UNIFORM         reduce using rule 8 (statement -> builtin_global SEMI .)
    ATTRIBUTE       reduce using rule 8 (statement -> builtin_global SEMI .)
    VARYING         reduce using rule 8 (statement -> builtin_global SEMI .)
    INPUT           reduce using rule 8 (statement -> builtin_global SEMI .)
    OUTPUT          reduce using rule 8 (statement -> builtin_global SEMI .)
    HIGHP           reduce using rule 8 (statement -> builtin_global SEMI .)
    MEDIUMP         reduce using rule 8 (statement -> builtin_global SEMI .)
    LOWP            reduce using rule 8 (statement -> builtin_global SEMI .)
    $end            reduce using rule 8 (statement -> builtin_global SEMI .)


state 142

    (153) assign2 -> assign2 cmplx_assign . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 218
    not                            shift and go to state 9
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    assign2                        shift and go to state 35
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 143

    (7) statement -> builtin_func SEMI .

    RBRACKET        reduce using rule 7 (statement -> builtin_func SEMI .)
    SEMI            reduce using rule 7 (statement -> builtin_func SEMI .)
    IF              reduce using rule 7 (statement -> builtin_func SEMI .)
    BUILTIN         reduce using rule 7 (statement -> builtin_func SEMI .)
    ELSE            reduce using rule 7 (statement -> builtin_func SEMI .)
    FOR             reduce using rule 7 (statement -> builtin_func SEMI .)
    NUMBER          reduce using rule 7 (statement -> builtin_func SEMI .)
    TRUE            reduce using rule 7 (statement -> builtin_func SEMI .)
    FALSE           reduce using rule 7 (statement -> builtin_func SEMI .)
    ID              reduce using rule 7 (statement -> builtin_func SEMI .)
    LPAREN          reduce using rule 7 (statement -> builtin_func SEMI .)
    RETURN          reduce using rule 7 (statement -> builtin_func SEMI .)
    BREAK           reduce using rule 7 (statement -> builtin_func SEMI .)
    CONTINUE        reduce using rule 7 (statement -> builtin_func SEMI .)
    STRUCT          reduce using rule 7 (statement -> builtin_func SEMI .)
    INC             reduce using rule 7 (statement -> builtin_func SEMI .)
    DEC             reduce using rule 7 (statement -> builtin_func SEMI .)
    INT             reduce using rule 7 (statement -> builtin_func SEMI .)
    FLOAT           reduce using rule 7 (statement -> builtin_func SEMI .)
    BOOL            reduce using rule 7 (statement -> builtin_func SEMI .)
    FLOAT16         reduce using rule 7 (statement -> builtin_func SEMI .)
    DOUBLE          reduce using rule 7 (statement -> builtin_func SEMI .)
    VOID            reduce using rule 7 (statement -> builtin_func SEMI .)
    STRINGLIT       reduce using rule 7 (statement -> builtin_func SEMI .)
    LSBRACKET       reduce using rule 7 (statement -> builtin_func SEMI .)
    LBRACKET        reduce using rule 7 (statement -> builtin_func SEMI .)
    MINUS           reduce using rule 7 (statement -> builtin_func SEMI .)
    NOT             reduce using rule 7 (statement -> builtin_func SEMI .)
    NEW             reduce using rule 7 (statement -> builtin_func SEMI .)
    UNIFORM         reduce using rule 7 (statement -> builtin_func SEMI .)
    ATTRIBUTE       reduce using rule 7 (statement -> builtin_func SEMI .)
    VARYING         reduce using rule 7 (statement -> builtin_func SEMI .)
    INPUT           reduce using rule 7 (statement -> builtin_func SEMI .)
    OUTPUT          reduce using rule 7 (statement -> builtin_func SEMI .)
    HIGHP           reduce using rule 7 (statement -> builtin_func SEMI .)
    MEDIUMP         reduce using rule 7 (statement -> builtin_func SEMI .)
    LOWP            reduce using rule 7 (statement -> builtin_func SEMI .)
    $end            reduce using rule 7 (statement -> builtin_func SEMI .)


state 144

    (139) expr -> LPAREN expr . RPAREN
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    RPAREN          shift and go to state 219
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 145

    (170) return -> RETURN expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    SEMI            reduce using rule 170 (return -> RETURN expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 146

    (69) assign -> assign cmplx_assign . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    new                            shift and go to state 50
    expr                           shift and go to state 220
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    inc                            shift and go to state 28
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 147

    (16) statement -> assign SEMI .
    (19) statement_local -> assign SEMI .

  ! reduce/reduce conflict for RBRACKET resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for BUILTIN resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for TRUE resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for FALSE resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for STRUCT resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for INT resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for FLOAT resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for BOOL resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for FLOAT16 resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for VOID resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for UNIFORM resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for ATTRIBUTE resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for VARYING resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for INPUT resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for HIGHP resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for MEDIUMP resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for LOWP resolved using rule 16 (statement -> assign SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 16 (statement -> assign SEMI .)
    RBRACKET        reduce using rule 16 (statement -> assign SEMI .)
    SEMI            reduce using rule 16 (statement -> assign SEMI .)
    IF              reduce using rule 16 (statement -> assign SEMI .)
    BUILTIN         reduce using rule 16 (statement -> assign SEMI .)
    ELSE            reduce using rule 16 (statement -> assign SEMI .)
    FOR             reduce using rule 16 (statement -> assign SEMI .)
    NUMBER          reduce using rule 16 (statement -> assign SEMI .)
    TRUE            reduce using rule 16 (statement -> assign SEMI .)
    FALSE           reduce using rule 16 (statement -> assign SEMI .)
    ID              reduce using rule 16 (statement -> assign SEMI .)
    LPAREN          reduce using rule 16 (statement -> assign SEMI .)
    RETURN          reduce using rule 16 (statement -> assign SEMI .)
    BREAK           reduce using rule 16 (statement -> assign SEMI .)
    CONTINUE        reduce using rule 16 (statement -> assign SEMI .)
    STRUCT          reduce using rule 16 (statement -> assign SEMI .)
    INC             reduce using rule 16 (statement -> assign SEMI .)
    DEC             reduce using rule 16 (statement -> assign SEMI .)
    INT             reduce using rule 16 (statement -> assign SEMI .)
    FLOAT           reduce using rule 16 (statement -> assign SEMI .)
    BOOL            reduce using rule 16 (statement -> assign SEMI .)
    FLOAT16         reduce using rule 16 (statement -> assign SEMI .)
    DOUBLE          reduce using rule 16 (statement -> assign SEMI .)
    VOID            reduce using rule 16 (statement -> assign SEMI .)
    STRINGLIT       reduce using rule 16 (statement -> assign SEMI .)
    LSBRACKET       reduce using rule 16 (statement -> assign SEMI .)
    LBRACKET        reduce using rule 16 (statement -> assign SEMI .)
    MINUS           reduce using rule 16 (statement -> assign SEMI .)
    NOT             reduce using rule 16 (statement -> assign SEMI .)
    NEW             reduce using rule 16 (statement -> assign SEMI .)
    UNIFORM         reduce using rule 16 (statement -> assign SEMI .)
    ATTRIBUTE       reduce using rule 16 (statement -> assign SEMI .)
    VARYING         reduce using rule 16 (statement -> assign SEMI .)
    INPUT           reduce using rule 16 (statement -> assign SEMI .)
    OUTPUT          reduce using rule 16 (statement -> assign SEMI .)
    HIGHP           reduce using rule 16 (statement -> assign SEMI .)
    MEDIUMP         reduce using rule 16 (statement -> assign SEMI .)
    LOWP            reduce using rule 16 (statement -> assign SEMI .)
    $end            reduce using rule 16 (statement -> assign SEMI .)

  ! RBRACKET        [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! SEMI            [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! IF              [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! BUILTIN         [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! ELSE            [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! FOR             [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! NUMBER          [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! TRUE            [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! FALSE           [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! ID              [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! LPAREN          [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! RETURN          [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! BREAK           [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! CONTINUE        [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! STRUCT          [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! INC             [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! DEC             [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! INT             [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! FLOAT           [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! BOOL            [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! FLOAT16         [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! DOUBLE          [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! VOID            [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! STRINGLIT       [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! LSBRACKET       [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! LBRACKET        [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! MINUS           [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! NOT             [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! NEW             [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! UNIFORM         [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! ATTRIBUTE       [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! VARYING         [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! INPUT           [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! OUTPUT          [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! HIGHP           [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! MEDIUMP         [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! LOWP            [ reduce using rule 19 (statement_local -> assign SEMI .) ]
  ! $end            [ reduce using rule 19 (statement_local -> assign SEMI .) ]


state 148

    (108) new -> NEW expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for QEST resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    SEMI            reduce using rule 108 (new -> NEW expr .)
    RPAREN          reduce using rule 108 (new -> NEW expr .)
    RSBRACKET       reduce using rule 108 (new -> NEW expr .)
    COMMA           reduce using rule 108 (new -> NEW expr .)
    COLON           reduce using rule 108 (new -> NEW expr .)
    ASSIGNPLUS      reduce using rule 108 (new -> NEW expr .)
    ASSIGNMINUS     reduce using rule 108 (new -> NEW expr .)
    ASSIGNDIVIDE    reduce using rule 108 (new -> NEW expr .)
    ASSIGNTIMES     reduce using rule 108 (new -> NEW expr .)
    ASSIGNBOR       reduce using rule 108 (new -> NEW expr .)
    ASSIGNBAND      reduce using rule 108 (new -> NEW expr .)
    ASSIGNBXOR      reduce using rule 108 (new -> NEW expr .)
    ASSIGN          reduce using rule 108 (new -> NEW expr .)
    RBRACKET        reduce using rule 108 (new -> NEW expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 108 (new -> NEW expr .) ]
  ! LAND            [ reduce using rule 108 (new -> NEW expr .) ]
  ! LOR             [ reduce using rule 108 (new -> NEW expr .) ]
  ! BOR             [ reduce using rule 108 (new -> NEW expr .) ]
  ! BXOR            [ reduce using rule 108 (new -> NEW expr .) ]
  ! BAND            [ reduce using rule 108 (new -> NEW expr .) ]
  ! EQUAL           [ reduce using rule 108 (new -> NEW expr .) ]
  ! NOTEQUAL        [ reduce using rule 108 (new -> NEW expr .) ]
  ! GTHAN           [ reduce using rule 108 (new -> NEW expr .) ]
  ! GTHANEQ         [ reduce using rule 108 (new -> NEW expr .) ]
  ! LTHAN           [ reduce using rule 108 (new -> NEW expr .) ]
  ! MOD             [ reduce using rule 108 (new -> NEW expr .) ]
  ! LTHANEQ         [ reduce using rule 108 (new -> NEW expr .) ]
  ! PLUS            [ reduce using rule 108 (new -> NEW expr .) ]
  ! MINUS           [ reduce using rule 108 (new -> NEW expr .) ]
  ! DIVIDE          [ reduce using rule 108 (new -> NEW expr .) ]
  ! TIMES           [ reduce using rule 108 (new -> NEW expr .) ]
  ! LSBRACKET       [ reduce using rule 108 (new -> NEW expr .) ]
  ! QEST            [ reduce using rule 108 (new -> NEW expr .) ]
  ! INC             [ reduce using rule 108 (new -> NEW expr .) ]
  ! DEC             [ reduce using rule 108 (new -> NEW expr .) ]
  ! LPAREN          [ reduce using rule 108 (new -> NEW expr .) ]

    func_call                      shift and go to state 97

state 149

    (52) var_decl -> var_basic ASSIGN . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 221
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 150

    (15) statement -> struct SEMI .
    (27) statement_local -> struct SEMI .

  ! reduce/reduce conflict for RBRACKET resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for BUILTIN resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for TRUE resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for FALSE resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for STRUCT resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for INT resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for FLOAT resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for BOOL resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for FLOAT16 resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for VOID resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for UNIFORM resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for ATTRIBUTE resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for VARYING resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for INPUT resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for HIGHP resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for MEDIUMP resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for LOWP resolved using rule 15 (statement -> struct SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 15 (statement -> struct SEMI .)
    RBRACKET        reduce using rule 15 (statement -> struct SEMI .)
    SEMI            reduce using rule 15 (statement -> struct SEMI .)
    IF              reduce using rule 15 (statement -> struct SEMI .)
    BUILTIN         reduce using rule 15 (statement -> struct SEMI .)
    ELSE            reduce using rule 15 (statement -> struct SEMI .)
    FOR             reduce using rule 15 (statement -> struct SEMI .)
    NUMBER          reduce using rule 15 (statement -> struct SEMI .)
    TRUE            reduce using rule 15 (statement -> struct SEMI .)
    FALSE           reduce using rule 15 (statement -> struct SEMI .)
    ID              reduce using rule 15 (statement -> struct SEMI .)
    LPAREN          reduce using rule 15 (statement -> struct SEMI .)
    RETURN          reduce using rule 15 (statement -> struct SEMI .)
    BREAK           reduce using rule 15 (statement -> struct SEMI .)
    CONTINUE        reduce using rule 15 (statement -> struct SEMI .)
    STRUCT          reduce using rule 15 (statement -> struct SEMI .)
    INC             reduce using rule 15 (statement -> struct SEMI .)
    DEC             reduce using rule 15 (statement -> struct SEMI .)
    INT             reduce using rule 15 (statement -> struct SEMI .)
    FLOAT           reduce using rule 15 (statement -> struct SEMI .)
    BOOL            reduce using rule 15 (statement -> struct SEMI .)
    FLOAT16         reduce using rule 15 (statement -> struct SEMI .)
    DOUBLE          reduce using rule 15 (statement -> struct SEMI .)
    VOID            reduce using rule 15 (statement -> struct SEMI .)
    STRINGLIT       reduce using rule 15 (statement -> struct SEMI .)
    LSBRACKET       reduce using rule 15 (statement -> struct SEMI .)
    LBRACKET        reduce using rule 15 (statement -> struct SEMI .)
    MINUS           reduce using rule 15 (statement -> struct SEMI .)
    NOT             reduce using rule 15 (statement -> struct SEMI .)
    NEW             reduce using rule 15 (statement -> struct SEMI .)
    UNIFORM         reduce using rule 15 (statement -> struct SEMI .)
    ATTRIBUTE       reduce using rule 15 (statement -> struct SEMI .)
    VARYING         reduce using rule 15 (statement -> struct SEMI .)
    INPUT           reduce using rule 15 (statement -> struct SEMI .)
    OUTPUT          reduce using rule 15 (statement -> struct SEMI .)
    HIGHP           reduce using rule 15 (statement -> struct SEMI .)
    MEDIUMP         reduce using rule 15 (statement -> struct SEMI .)
    LOWP            reduce using rule 15 (statement -> struct SEMI .)
    $end            reduce using rule 15 (statement -> struct SEMI .)

  ! RBRACKET        [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! SEMI            [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! IF              [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! BUILTIN         [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! ELSE            [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! FOR             [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! NUMBER          [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! TRUE            [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! FALSE           [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! ID              [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! LPAREN          [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! RETURN          [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! BREAK           [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! CONTINUE        [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! STRUCT          [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! INC             [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! DEC             [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! INT             [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! FLOAT           [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! BOOL            [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! FLOAT16         [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! DOUBLE          [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! VOID            [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! STRINGLIT       [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! LSBRACKET       [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! LBRACKET        [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! MINUS           [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! NOT             [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! NEW             [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! UNIFORM         [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! ATTRIBUTE       [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! VARYING         [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! INPUT           [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! OUTPUT          [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! HIGHP           [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! MEDIUMP         [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! LOWP            [ reduce using rule 27 (statement_local -> struct SEMI .) ]
  ! $end            [ reduce using rule 27 (statement_local -> struct SEMI .) ]


state 151

    (103) array_literal -> LSBRACKET RSBRACKET .

    DOT             reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    LAND            reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    LOR             reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    BOR             reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    BXOR            reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    BAND            reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    EQUAL           reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    NOTEQUAL        reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    GTHAN           reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    GTHANEQ         reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    LTHAN           reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    MOD             reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    LTHANEQ         reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    PLUS            reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    MINUS           reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    DIVIDE          reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    TIMES           reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    LSBRACKET       reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    QEST            reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    INC             reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    DEC             reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    LPAREN          reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    SEMI            reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    RPAREN          reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    RSBRACKET       reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    COMMA           reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    COLON           reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNPLUS      reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNMINUS     reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNTIMES     reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNBOR       reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNBAND      reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNBXOR      reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGN          reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)
    RBRACKET        reduce using rule 103 (array_literal -> LSBRACKET RSBRACKET .)


state 152

    (74) exprlist -> expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    RSBRACKET       reduce using rule 74 (exprlist -> expr .)
    COMMA           reduce using rule 74 (exprlist -> expr .)
    RPAREN          reduce using rule 74 (exprlist -> expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 153

    (75) exprlist -> ID . ASSIGN expr
    (119) expr -> ID .
    (149) assign_expr2 -> ID .

  ! reduce/reduce conflict for INC resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for DEC resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for DOT resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 119 (expr -> ID .)
  ! shift/reduce conflict for ASSIGN resolved as shift
    ASSIGN          shift and go to state 222
    DOT             reduce using rule 119 (expr -> ID .)
    LAND            reduce using rule 119 (expr -> ID .)
    LOR             reduce using rule 119 (expr -> ID .)
    BOR             reduce using rule 119 (expr -> ID .)
    BXOR            reduce using rule 119 (expr -> ID .)
    BAND            reduce using rule 119 (expr -> ID .)
    EQUAL           reduce using rule 119 (expr -> ID .)
    NOTEQUAL        reduce using rule 119 (expr -> ID .)
    GTHAN           reduce using rule 119 (expr -> ID .)
    GTHANEQ         reduce using rule 119 (expr -> ID .)
    LTHAN           reduce using rule 119 (expr -> ID .)
    MOD             reduce using rule 119 (expr -> ID .)
    LTHANEQ         reduce using rule 119 (expr -> ID .)
    PLUS            reduce using rule 119 (expr -> ID .)
    MINUS           reduce using rule 119 (expr -> ID .)
    DIVIDE          reduce using rule 119 (expr -> ID .)
    TIMES           reduce using rule 119 (expr -> ID .)
    LSBRACKET       reduce using rule 119 (expr -> ID .)
    QEST            reduce using rule 119 (expr -> ID .)
    INC             reduce using rule 119 (expr -> ID .)
    DEC             reduce using rule 119 (expr -> ID .)
    LPAREN          reduce using rule 119 (expr -> ID .)
    RSBRACKET       reduce using rule 119 (expr -> ID .)
    COMMA           reduce using rule 119 (expr -> ID .)
    RPAREN          reduce using rule 119 (expr -> ID .)
    ASSIGNPLUS      reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNMINUS     reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNDIVIDE    reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNTIMES     reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNBOR       reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNBAND      reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNBXOR      reduce using rule 149 (assign_expr2 -> ID .)

  ! INC             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DEC             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DOT             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LSBRACKET       [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGN          [ reduce using rule 149 (assign_expr2 -> ID .) ]


state 154

    (102) array_literal -> LSBRACKET exprlist . RSBRACKET
    (76) exprlist -> exprlist . COMMA expr
    (77) exprlist -> exprlist . COMMA ID ASSIGN expr

    RSBRACKET       shift and go to state 224
    COMMA           shift and go to state 223


state 155

    (44) type_decl -> modifier type_decl .

    ID              reduce using rule 44 (type_decl -> modifier type_decl .)


state 156

    (43) type_decl -> ID .

    ID              reduce using rule 43 (type_decl -> ID .)


state 157

    (90) function -> type_decl ID . LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> type_decl ID . LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> type_decl ID . LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> type_decl ID . LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (49) var_basic -> type_decl ID . arr_decl
    (50) var_basic -> type_decl ID .
    (45) arr_decl -> . LSBRACKET NUMBER RSBRACKET
    (46) arr_decl -> . LSBRACKET RSBRACKET
    (47) arr_decl -> . arr_decl LSBRACKET NUMBER RSBRACKET
    (48) arr_decl -> . arr_decl LSBRACKET RSBRACKET

    LPAREN          shift and go to state 226
    ASSIGN          reduce using rule 50 (var_basic -> type_decl ID .)
    SEMI            reduce using rule 50 (var_basic -> type_decl ID .)
    LSBRACKET       shift and go to state 227

    arr_decl                       shift and go to state 225

state 158

    (110) inc -> INC expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 110 (inc -> INC expr .)
    LOR             reduce using rule 110 (inc -> INC expr .)
    BOR             reduce using rule 110 (inc -> INC expr .)
    BXOR            reduce using rule 110 (inc -> INC expr .)
    BAND            reduce using rule 110 (inc -> INC expr .)
    EQUAL           reduce using rule 110 (inc -> INC expr .)
    NOTEQUAL        reduce using rule 110 (inc -> INC expr .)
    GTHAN           reduce using rule 110 (inc -> INC expr .)
    GTHANEQ         reduce using rule 110 (inc -> INC expr .)
    LTHAN           reduce using rule 110 (inc -> INC expr .)
    MOD             reduce using rule 110 (inc -> INC expr .)
    LTHANEQ         reduce using rule 110 (inc -> INC expr .)
    PLUS            reduce using rule 110 (inc -> INC expr .)
    MINUS           reduce using rule 110 (inc -> INC expr .)
    DIVIDE          reduce using rule 110 (inc -> INC expr .)
    TIMES           reduce using rule 110 (inc -> INC expr .)
    LSBRACKET       reduce using rule 110 (inc -> INC expr .)
    QEST            reduce using rule 110 (inc -> INC expr .)
    INC             reduce using rule 110 (inc -> INC expr .)
    DEC             reduce using rule 110 (inc -> INC expr .)
    LPAREN          reduce using rule 110 (inc -> INC expr .)
    SEMI            reduce using rule 110 (inc -> INC expr .)
    RPAREN          reduce using rule 110 (inc -> INC expr .)
    RSBRACKET       reduce using rule 110 (inc -> INC expr .)
    COMMA           reduce using rule 110 (inc -> INC expr .)
    COLON           reduce using rule 110 (inc -> INC expr .)
    ASSIGNPLUS      reduce using rule 110 (inc -> INC expr .)
    ASSIGNMINUS     reduce using rule 110 (inc -> INC expr .)
    ASSIGNDIVIDE    reduce using rule 110 (inc -> INC expr .)
    ASSIGNTIMES     reduce using rule 110 (inc -> INC expr .)
    ASSIGNBOR       reduce using rule 110 (inc -> INC expr .)
    ASSIGNBAND      reduce using rule 110 (inc -> INC expr .)
    ASSIGNBXOR      reduce using rule 110 (inc -> INC expr .)
    ASSIGN          reduce using rule 110 (inc -> INC expr .)
    RBRACKET        reduce using rule 110 (inc -> INC expr .)
    DOT             shift and go to state 94

  ! DOT             [ reduce using rule 110 (inc -> INC expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! MOD             [ shift and go to state 88 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 90 ]
  ! MINUS           [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 86 ]
  ! TIMES           [ shift and go to state 85 ]
  ! LSBRACKET       [ shift and go to state 106 ]
  ! QEST            [ shift and go to state 96 ]
  ! INC             [ shift and go to state 87 ]
  ! DEC             [ shift and go to state 84 ]
  ! LPAREN          [ shift and go to state 89 ]

    func_call                      shift and go to state 97

state 159

    (70) assign -> INC assign_expr .
    (66) assign_expr -> INC assign_expr .
    (62) assign_expr -> assign_expr . DOT assign_expr
    (63) assign_expr -> assign_expr . LSBRACKET expr RSBRACKET
    (64) assign_expr -> assign_expr . INC
    (65) assign_expr -> assign_expr . DEC

  ! reduce/reduce conflict for ASSIGNPLUS resolved using rule 66 (assign_expr -> INC assign_expr .)
  ! reduce/reduce conflict for ASSIGNMINUS resolved using rule 66 (assign_expr -> INC assign_expr .)
  ! reduce/reduce conflict for ASSIGNDIVIDE resolved using rule 66 (assign_expr -> INC assign_expr .)
  ! reduce/reduce conflict for ASSIGNTIMES resolved using rule 66 (assign_expr -> INC assign_expr .)
  ! reduce/reduce conflict for ASSIGNBOR resolved using rule 66 (assign_expr -> INC assign_expr .)
  ! reduce/reduce conflict for ASSIGNBAND resolved using rule 66 (assign_expr -> INC assign_expr .)
  ! reduce/reduce conflict for ASSIGNBXOR resolved using rule 66 (assign_expr -> INC assign_expr .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 66 (assign_expr -> INC assign_expr .)
    SEMI            reduce using rule 70 (assign -> INC assign_expr .)
    RPAREN          reduce using rule 70 (assign -> INC assign_expr .)
    INC             reduce using rule 66 (assign_expr -> INC assign_expr .)
    DEC             reduce using rule 66 (assign_expr -> INC assign_expr .)
    LSBRACKET       reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNPLUS      reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNMINUS     reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNDIVIDE    reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNTIMES     reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNBOR       reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNBAND      reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNBXOR      reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGN          reduce using rule 66 (assign_expr -> INC assign_expr .)
    DOT             shift and go to state 118

  ! ASSIGNPLUS      [ reduce using rule 70 (assign -> INC assign_expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 70 (assign -> INC assign_expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 70 (assign -> INC assign_expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 70 (assign -> INC assign_expr .) ]
  ! ASSIGNBOR       [ reduce using rule 70 (assign -> INC assign_expr .) ]
  ! ASSIGNBAND      [ reduce using rule 70 (assign -> INC assign_expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 70 (assign -> INC assign_expr .) ]
  ! ASSIGN          [ reduce using rule 70 (assign -> INC assign_expr .) ]
  ! DOT             [ reduce using rule 66 (assign_expr -> INC assign_expr .) ]
  ! LSBRACKET       [ shift and go to state 130 ]
  ! INC             [ shift and go to state 210 ]
  ! DEC             [ shift and go to state 209 ]


state 160

    (154) assign2 -> INC assign_expr2 .
    (150) assign_expr2 -> assign_expr2 . DOT assign_expr2
    (151) assign_expr2 -> assign_expr2 . LSBRACKET expr RSBRACKET
    (152) assign2 -> assign_expr2 . cmplx_assign expr
    (156) assign2 -> assign_expr2 . INC
    (157) assign2 -> assign_expr2 . DEC
    (53) cmplx_assign -> . ASSIGNPLUS
    (54) cmplx_assign -> . ASSIGNMINUS
    (55) cmplx_assign -> . ASSIGNDIVIDE
    (56) cmplx_assign -> . ASSIGNTIMES
    (57) cmplx_assign -> . ASSIGNBOR
    (58) cmplx_assign -> . ASSIGNBAND
    (59) cmplx_assign -> . ASSIGNBXOR
    (60) cmplx_assign -> . ASSIGN

    LAND            reduce using rule 154 (assign2 -> INC assign_expr2 .)
    LOR             reduce using rule 154 (assign2 -> INC assign_expr2 .)
    BOR             reduce using rule 154 (assign2 -> INC assign_expr2 .)
    BXOR            reduce using rule 154 (assign2 -> INC assign_expr2 .)
    BAND            reduce using rule 154 (assign2 -> INC assign_expr2 .)
    EQUAL           reduce using rule 154 (assign2 -> INC assign_expr2 .)
    NOTEQUAL        reduce using rule 154 (assign2 -> INC assign_expr2 .)
    GTHAN           reduce using rule 154 (assign2 -> INC assign_expr2 .)
    GTHANEQ         reduce using rule 154 (assign2 -> INC assign_expr2 .)
    LTHAN           reduce using rule 154 (assign2 -> INC assign_expr2 .)
    MOD             reduce using rule 154 (assign2 -> INC assign_expr2 .)
    LTHANEQ         reduce using rule 154 (assign2 -> INC assign_expr2 .)
    PLUS            reduce using rule 154 (assign2 -> INC assign_expr2 .)
    MINUS           reduce using rule 154 (assign2 -> INC assign_expr2 .)
    DIVIDE          reduce using rule 154 (assign2 -> INC assign_expr2 .)
    TIMES           reduce using rule 154 (assign2 -> INC assign_expr2 .)
    LSBRACKET       reduce using rule 154 (assign2 -> INC assign_expr2 .)
    QEST            reduce using rule 154 (assign2 -> INC assign_expr2 .)
    INC             reduce using rule 154 (assign2 -> INC assign_expr2 .)
    DEC             reduce using rule 154 (assign2 -> INC assign_expr2 .)
    LPAREN          reduce using rule 154 (assign2 -> INC assign_expr2 .)
    SEMI            reduce using rule 154 (assign2 -> INC assign_expr2 .)
    RPAREN          reduce using rule 154 (assign2 -> INC assign_expr2 .)
    RSBRACKET       reduce using rule 154 (assign2 -> INC assign_expr2 .)
    COMMA           reduce using rule 154 (assign2 -> INC assign_expr2 .)
    COLON           reduce using rule 154 (assign2 -> INC assign_expr2 .)
    ASSIGNPLUS      reduce using rule 154 (assign2 -> INC assign_expr2 .)
    ASSIGNMINUS     reduce using rule 154 (assign2 -> INC assign_expr2 .)
    ASSIGNDIVIDE    reduce using rule 154 (assign2 -> INC assign_expr2 .)
    ASSIGNTIMES     reduce using rule 154 (assign2 -> INC assign_expr2 .)
    ASSIGNBOR       reduce using rule 154 (assign2 -> INC assign_expr2 .)
    ASSIGNBAND      reduce using rule 154 (assign2 -> INC assign_expr2 .)
    ASSIGNBXOR      reduce using rule 154 (assign2 -> INC assign_expr2 .)
    ASSIGN          reduce using rule 154 (assign2 -> INC assign_expr2 .)
    RBRACKET        reduce using rule 154 (assign2 -> INC assign_expr2 .)
    DOT             shift and go to state 166

  ! DOT             [ reduce using rule 154 (assign2 -> INC assign_expr2 .) ]
  ! LSBRACKET       [ shift and go to state 170 ]
  ! INC             [ shift and go to state 169 ]
  ! DEC             [ shift and go to state 167 ]
  ! ASSIGNPLUS      [ shift and go to state 122 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 124 ]
  ! ASSIGNTIMES     [ shift and go to state 123 ]
  ! ASSIGNBOR       [ shift and go to state 125 ]
  ! ASSIGNBAND      [ shift and go to state 128 ]
  ! ASSIGNBXOR      [ shift and go to state 129 ]
  ! ASSIGN          [ shift and go to state 121 ]

    cmplx_assign                   shift and go to state 168

state 161

    (159) paren_expr -> LPAREN . expr RPAREN
    (160) paren_expr -> LPAREN . RPAREN
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    RPAREN          shift and go to state 228
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 229
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 162

    (164) if -> IF paren_expr . statement_local
    (165) if -> IF paren_expr . LBRACKET statementlist RBRACKET
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    LBRACKET        shift and go to state 230
    SEMI            shift and go to state 80
    INC             shift and go to state 78
    DEC             shift and go to state 75
    IF              shift and go to state 54
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    ID              shift and go to state 73
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    modifier                       shift and go to state 51
    else                           shift and go to state 67
    continue                       shift and go to state 71
    assign                         shift and go to state 70
    if                             shift and go to state 79
    break                          shift and go to state 81
    for                            shift and go to state 72
    struct                         shift and go to state 69
    type_decl                      shift and go to state 77
    statement_local                shift and go to state 231
    assign_expr                    shift and go to state 20
    return                         shift and go to state 76
    var_basic                      shift and go to state 45
    var_decl                       shift and go to state 82

state 163

    (113) not -> NOT expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 113 (not -> NOT expr .)
    LOR             reduce using rule 113 (not -> NOT expr .)
    BOR             reduce using rule 113 (not -> NOT expr .)
    BXOR            reduce using rule 113 (not -> NOT expr .)
    BAND            reduce using rule 113 (not -> NOT expr .)
    EQUAL           reduce using rule 113 (not -> NOT expr .)
    NOTEQUAL        reduce using rule 113 (not -> NOT expr .)
    GTHAN           reduce using rule 113 (not -> NOT expr .)
    GTHANEQ         reduce using rule 113 (not -> NOT expr .)
    LTHAN           reduce using rule 113 (not -> NOT expr .)
    MOD             reduce using rule 113 (not -> NOT expr .)
    LTHANEQ         reduce using rule 113 (not -> NOT expr .)
    PLUS            reduce using rule 113 (not -> NOT expr .)
    MINUS           reduce using rule 113 (not -> NOT expr .)
    DIVIDE          reduce using rule 113 (not -> NOT expr .)
    TIMES           reduce using rule 113 (not -> NOT expr .)
    QEST            reduce using rule 113 (not -> NOT expr .)
    SEMI            reduce using rule 113 (not -> NOT expr .)
    RPAREN          reduce using rule 113 (not -> NOT expr .)
    RSBRACKET       reduce using rule 113 (not -> NOT expr .)
    COMMA           reduce using rule 113 (not -> NOT expr .)
    COLON           reduce using rule 113 (not -> NOT expr .)
    ASSIGNPLUS      reduce using rule 113 (not -> NOT expr .)
    ASSIGNMINUS     reduce using rule 113 (not -> NOT expr .)
    ASSIGNDIVIDE    reduce using rule 113 (not -> NOT expr .)
    ASSIGNTIMES     reduce using rule 113 (not -> NOT expr .)
    ASSIGNBOR       reduce using rule 113 (not -> NOT expr .)
    ASSIGNBAND      reduce using rule 113 (not -> NOT expr .)
    ASSIGNBXOR      reduce using rule 113 (not -> NOT expr .)
    ASSIGN          reduce using rule 113 (not -> NOT expr .)
    RBRACKET        reduce using rule 113 (not -> NOT expr .)
    DOT             shift and go to state 94
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 113 (not -> NOT expr .) ]
  ! LSBRACKET       [ reduce using rule 113 (not -> NOT expr .) ]
  ! INC             [ reduce using rule 113 (not -> NOT expr .) ]
  ! DEC             [ reduce using rule 113 (not -> NOT expr .) ]
  ! LPAREN          [ reduce using rule 113 (not -> NOT expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! MOD             [ shift and go to state 88 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 90 ]
  ! MINUS           [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 86 ]
  ! TIMES           [ shift and go to state 85 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 164

    (98) builtin_func -> BUILTIN type_decl . ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> BUILTIN type_decl . ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> BUILTIN type_decl . ID arr_decl
    (101) builtin_global -> BUILTIN type_decl . ID

    ID              shift and go to state 232


state 165

    (162) for -> FOR LPAREN . for_decl RPAREN statement_local
    (163) for -> FOR LPAREN . for_decl RPAREN LBRACKET statementlist RBRACKET
    (161) for_decl -> . var_decl SEMI expr SEMI assign
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    ID              shift and go to state 156
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    type_decl                      shift and go to state 77
    for_decl                       shift and go to state 233
    modifier                       shift and go to state 51
    var_decl                       shift and go to state 234
    var_basic                      shift and go to state 45

state 166

    (150) assign_expr2 -> assign_expr2 DOT . assign_expr2
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    ID              shift and go to state 236

    assign_expr2                   shift and go to state 235

state 167

    (157) assign2 -> assign_expr2 DEC .

    DOT             reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    LAND            reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    LOR             reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    BOR             reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    BXOR            reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    BAND            reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    EQUAL           reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    NOTEQUAL        reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    GTHAN           reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    GTHANEQ         reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    LTHAN           reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    MOD             reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    LTHANEQ         reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    PLUS            reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    MINUS           reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    DIVIDE          reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    TIMES           reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    LSBRACKET       reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    QEST            reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    INC             reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    DEC             reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    LPAREN          reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    SEMI            reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    RPAREN          reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    RSBRACKET       reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    COMMA           reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    COLON           reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    ASSIGNPLUS      reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    ASSIGNMINUS     reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    ASSIGNDIVIDE    reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    ASSIGNTIMES     reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    ASSIGNBOR       reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    ASSIGNBAND      reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    ASSIGNBXOR      reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    ASSIGN          reduce using rule 157 (assign2 -> assign_expr2 DEC .)
    RBRACKET        reduce using rule 157 (assign2 -> assign_expr2 DEC .)


state 168

    (152) assign2 -> assign_expr2 cmplx_assign . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 237
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 169

    (156) assign2 -> assign_expr2 INC .

    DOT             reduce using rule 156 (assign2 -> assign_expr2 INC .)
    LAND            reduce using rule 156 (assign2 -> assign_expr2 INC .)
    LOR             reduce using rule 156 (assign2 -> assign_expr2 INC .)
    BOR             reduce using rule 156 (assign2 -> assign_expr2 INC .)
    BXOR            reduce using rule 156 (assign2 -> assign_expr2 INC .)
    BAND            reduce using rule 156 (assign2 -> assign_expr2 INC .)
    EQUAL           reduce using rule 156 (assign2 -> assign_expr2 INC .)
    NOTEQUAL        reduce using rule 156 (assign2 -> assign_expr2 INC .)
    GTHAN           reduce using rule 156 (assign2 -> assign_expr2 INC .)
    GTHANEQ         reduce using rule 156 (assign2 -> assign_expr2 INC .)
    LTHAN           reduce using rule 156 (assign2 -> assign_expr2 INC .)
    MOD             reduce using rule 156 (assign2 -> assign_expr2 INC .)
    LTHANEQ         reduce using rule 156 (assign2 -> assign_expr2 INC .)
    PLUS            reduce using rule 156 (assign2 -> assign_expr2 INC .)
    MINUS           reduce using rule 156 (assign2 -> assign_expr2 INC .)
    DIVIDE          reduce using rule 156 (assign2 -> assign_expr2 INC .)
    TIMES           reduce using rule 156 (assign2 -> assign_expr2 INC .)
    LSBRACKET       reduce using rule 156 (assign2 -> assign_expr2 INC .)
    QEST            reduce using rule 156 (assign2 -> assign_expr2 INC .)
    INC             reduce using rule 156 (assign2 -> assign_expr2 INC .)
    DEC             reduce using rule 156 (assign2 -> assign_expr2 INC .)
    LPAREN          reduce using rule 156 (assign2 -> assign_expr2 INC .)
    SEMI            reduce using rule 156 (assign2 -> assign_expr2 INC .)
    RPAREN          reduce using rule 156 (assign2 -> assign_expr2 INC .)
    RSBRACKET       reduce using rule 156 (assign2 -> assign_expr2 INC .)
    COMMA           reduce using rule 156 (assign2 -> assign_expr2 INC .)
    COLON           reduce using rule 156 (assign2 -> assign_expr2 INC .)
    ASSIGNPLUS      reduce using rule 156 (assign2 -> assign_expr2 INC .)
    ASSIGNMINUS     reduce using rule 156 (assign2 -> assign_expr2 INC .)
    ASSIGNDIVIDE    reduce using rule 156 (assign2 -> assign_expr2 INC .)
    ASSIGNTIMES     reduce using rule 156 (assign2 -> assign_expr2 INC .)
    ASSIGNBOR       reduce using rule 156 (assign2 -> assign_expr2 INC .)
    ASSIGNBAND      reduce using rule 156 (assign2 -> assign_expr2 INC .)
    ASSIGNBXOR      reduce using rule 156 (assign2 -> assign_expr2 INC .)
    ASSIGN          reduce using rule 156 (assign2 -> assign_expr2 INC .)
    RBRACKET        reduce using rule 156 (assign2 -> assign_expr2 INC .)


state 170

    (151) assign_expr2 -> assign_expr2 LSBRACKET . expr RSBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 238
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 171

    (27) statement_local -> struct SEMI .

    SEMI            reduce using rule 27 (statement_local -> struct SEMI .)
    IF              reduce using rule 27 (statement_local -> struct SEMI .)
    BUILTIN         reduce using rule 27 (statement_local -> struct SEMI .)
    ELSE            reduce using rule 27 (statement_local -> struct SEMI .)
    FOR             reduce using rule 27 (statement_local -> struct SEMI .)
    NUMBER          reduce using rule 27 (statement_local -> struct SEMI .)
    TRUE            reduce using rule 27 (statement_local -> struct SEMI .)
    FALSE           reduce using rule 27 (statement_local -> struct SEMI .)
    ID              reduce using rule 27 (statement_local -> struct SEMI .)
    LPAREN          reduce using rule 27 (statement_local -> struct SEMI .)
    RETURN          reduce using rule 27 (statement_local -> struct SEMI .)
    BREAK           reduce using rule 27 (statement_local -> struct SEMI .)
    CONTINUE        reduce using rule 27 (statement_local -> struct SEMI .)
    STRUCT          reduce using rule 27 (statement_local -> struct SEMI .)
    INC             reduce using rule 27 (statement_local -> struct SEMI .)
    DEC             reduce using rule 27 (statement_local -> struct SEMI .)
    INT             reduce using rule 27 (statement_local -> struct SEMI .)
    FLOAT           reduce using rule 27 (statement_local -> struct SEMI .)
    BOOL            reduce using rule 27 (statement_local -> struct SEMI .)
    FLOAT16         reduce using rule 27 (statement_local -> struct SEMI .)
    DOUBLE          reduce using rule 27 (statement_local -> struct SEMI .)
    VOID            reduce using rule 27 (statement_local -> struct SEMI .)
    STRINGLIT       reduce using rule 27 (statement_local -> struct SEMI .)
    LSBRACKET       reduce using rule 27 (statement_local -> struct SEMI .)
    LBRACKET        reduce using rule 27 (statement_local -> struct SEMI .)
    MINUS           reduce using rule 27 (statement_local -> struct SEMI .)
    NOT             reduce using rule 27 (statement_local -> struct SEMI .)
    NEW             reduce using rule 27 (statement_local -> struct SEMI .)
    UNIFORM         reduce using rule 27 (statement_local -> struct SEMI .)
    ATTRIBUTE       reduce using rule 27 (statement_local -> struct SEMI .)
    VARYING         reduce using rule 27 (statement_local -> struct SEMI .)
    INPUT           reduce using rule 27 (statement_local -> struct SEMI .)
    OUTPUT          reduce using rule 27 (statement_local -> struct SEMI .)
    HIGHP           reduce using rule 27 (statement_local -> struct SEMI .)
    MEDIUMP         reduce using rule 27 (statement_local -> struct SEMI .)
    LOWP            reduce using rule 27 (statement_local -> struct SEMI .)
    $end            reduce using rule 27 (statement_local -> struct SEMI .)
    RBRACKET        reduce using rule 27 (statement_local -> struct SEMI .)


state 172

    (19) statement_local -> assign SEMI .

    SEMI            reduce using rule 19 (statement_local -> assign SEMI .)
    IF              reduce using rule 19 (statement_local -> assign SEMI .)
    BUILTIN         reduce using rule 19 (statement_local -> assign SEMI .)
    ELSE            reduce using rule 19 (statement_local -> assign SEMI .)
    FOR             reduce using rule 19 (statement_local -> assign SEMI .)
    NUMBER          reduce using rule 19 (statement_local -> assign SEMI .)
    TRUE            reduce using rule 19 (statement_local -> assign SEMI .)
    FALSE           reduce using rule 19 (statement_local -> assign SEMI .)
    ID              reduce using rule 19 (statement_local -> assign SEMI .)
    LPAREN          reduce using rule 19 (statement_local -> assign SEMI .)
    RETURN          reduce using rule 19 (statement_local -> assign SEMI .)
    BREAK           reduce using rule 19 (statement_local -> assign SEMI .)
    CONTINUE        reduce using rule 19 (statement_local -> assign SEMI .)
    STRUCT          reduce using rule 19 (statement_local -> assign SEMI .)
    INC             reduce using rule 19 (statement_local -> assign SEMI .)
    DEC             reduce using rule 19 (statement_local -> assign SEMI .)
    INT             reduce using rule 19 (statement_local -> assign SEMI .)
    FLOAT           reduce using rule 19 (statement_local -> assign SEMI .)
    BOOL            reduce using rule 19 (statement_local -> assign SEMI .)
    FLOAT16         reduce using rule 19 (statement_local -> assign SEMI .)
    DOUBLE          reduce using rule 19 (statement_local -> assign SEMI .)
    VOID            reduce using rule 19 (statement_local -> assign SEMI .)
    STRINGLIT       reduce using rule 19 (statement_local -> assign SEMI .)
    LSBRACKET       reduce using rule 19 (statement_local -> assign SEMI .)
    LBRACKET        reduce using rule 19 (statement_local -> assign SEMI .)
    MINUS           reduce using rule 19 (statement_local -> assign SEMI .)
    NOT             reduce using rule 19 (statement_local -> assign SEMI .)
    NEW             reduce using rule 19 (statement_local -> assign SEMI .)
    UNIFORM         reduce using rule 19 (statement_local -> assign SEMI .)
    ATTRIBUTE       reduce using rule 19 (statement_local -> assign SEMI .)
    VARYING         reduce using rule 19 (statement_local -> assign SEMI .)
    INPUT           reduce using rule 19 (statement_local -> assign SEMI .)
    OUTPUT          reduce using rule 19 (statement_local -> assign SEMI .)
    HIGHP           reduce using rule 19 (statement_local -> assign SEMI .)
    MEDIUMP         reduce using rule 19 (statement_local -> assign SEMI .)
    LOWP            reduce using rule 19 (statement_local -> assign SEMI .)
    $end            reduce using rule 19 (statement_local -> assign SEMI .)
    RBRACKET        reduce using rule 19 (statement_local -> assign SEMI .)


state 173

    (25) statement_local -> continue SEMI .

    SEMI            reduce using rule 25 (statement_local -> continue SEMI .)
    IF              reduce using rule 25 (statement_local -> continue SEMI .)
    BUILTIN         reduce using rule 25 (statement_local -> continue SEMI .)
    ELSE            reduce using rule 25 (statement_local -> continue SEMI .)
    FOR             reduce using rule 25 (statement_local -> continue SEMI .)
    NUMBER          reduce using rule 25 (statement_local -> continue SEMI .)
    TRUE            reduce using rule 25 (statement_local -> continue SEMI .)
    FALSE           reduce using rule 25 (statement_local -> continue SEMI .)
    ID              reduce using rule 25 (statement_local -> continue SEMI .)
    LPAREN          reduce using rule 25 (statement_local -> continue SEMI .)
    RETURN          reduce using rule 25 (statement_local -> continue SEMI .)
    BREAK           reduce using rule 25 (statement_local -> continue SEMI .)
    CONTINUE        reduce using rule 25 (statement_local -> continue SEMI .)
    STRUCT          reduce using rule 25 (statement_local -> continue SEMI .)
    INC             reduce using rule 25 (statement_local -> continue SEMI .)
    DEC             reduce using rule 25 (statement_local -> continue SEMI .)
    INT             reduce using rule 25 (statement_local -> continue SEMI .)
    FLOAT           reduce using rule 25 (statement_local -> continue SEMI .)
    BOOL            reduce using rule 25 (statement_local -> continue SEMI .)
    FLOAT16         reduce using rule 25 (statement_local -> continue SEMI .)
    DOUBLE          reduce using rule 25 (statement_local -> continue SEMI .)
    VOID            reduce using rule 25 (statement_local -> continue SEMI .)
    STRINGLIT       reduce using rule 25 (statement_local -> continue SEMI .)
    LSBRACKET       reduce using rule 25 (statement_local -> continue SEMI .)
    LBRACKET        reduce using rule 25 (statement_local -> continue SEMI .)
    MINUS           reduce using rule 25 (statement_local -> continue SEMI .)
    NOT             reduce using rule 25 (statement_local -> continue SEMI .)
    NEW             reduce using rule 25 (statement_local -> continue SEMI .)
    UNIFORM         reduce using rule 25 (statement_local -> continue SEMI .)
    ATTRIBUTE       reduce using rule 25 (statement_local -> continue SEMI .)
    VARYING         reduce using rule 25 (statement_local -> continue SEMI .)
    INPUT           reduce using rule 25 (statement_local -> continue SEMI .)
    OUTPUT          reduce using rule 25 (statement_local -> continue SEMI .)
    HIGHP           reduce using rule 25 (statement_local -> continue SEMI .)
    MEDIUMP         reduce using rule 25 (statement_local -> continue SEMI .)
    LOWP            reduce using rule 25 (statement_local -> continue SEMI .)
    $end            reduce using rule 25 (statement_local -> continue SEMI .)
    RBRACKET        reduce using rule 25 (statement_local -> continue SEMI .)


state 174

    (167) else -> ELSE LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    RBRACKET        shift and go to state 239
    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 139
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 140
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 175

    (67) assign_expr -> DEC . assign_expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr

    ID              shift and go to state 177
    INC             shift and go to state 176
    DEC             shift and go to state 175

    assign_expr                    shift and go to state 208

state 176

    (66) assign_expr -> INC . assign_expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr

    ID              shift and go to state 177
    INC             shift and go to state 176
    DEC             shift and go to state 175

    assign_expr                    shift and go to state 207

state 177

    (61) assign_expr -> ID .

    DOT             reduce using rule 61 (assign_expr -> ID .)
    LSBRACKET       reduce using rule 61 (assign_expr -> ID .)
    INC             reduce using rule 61 (assign_expr -> ID .)
    DEC             reduce using rule 61 (assign_expr -> ID .)
    SEMI            reduce using rule 61 (assign_expr -> ID .)
    ASSIGNPLUS      reduce using rule 61 (assign_expr -> ID .)
    ASSIGNMINUS     reduce using rule 61 (assign_expr -> ID .)
    ASSIGNDIVIDE    reduce using rule 61 (assign_expr -> ID .)
    ASSIGNTIMES     reduce using rule 61 (assign_expr -> ID .)
    ASSIGNBOR       reduce using rule 61 (assign_expr -> ID .)
    ASSIGNBAND      reduce using rule 61 (assign_expr -> ID .)
    ASSIGNBXOR      reduce using rule 61 (assign_expr -> ID .)
    ASSIGN          reduce using rule 61 (assign_expr -> ID .)
    RPAREN          reduce using rule 61 (assign_expr -> ID .)


state 178

    (23) statement_local -> return SEMI .

    SEMI            reduce using rule 23 (statement_local -> return SEMI .)
    IF              reduce using rule 23 (statement_local -> return SEMI .)
    BUILTIN         reduce using rule 23 (statement_local -> return SEMI .)
    ELSE            reduce using rule 23 (statement_local -> return SEMI .)
    FOR             reduce using rule 23 (statement_local -> return SEMI .)
    NUMBER          reduce using rule 23 (statement_local -> return SEMI .)
    TRUE            reduce using rule 23 (statement_local -> return SEMI .)
    FALSE           reduce using rule 23 (statement_local -> return SEMI .)
    ID              reduce using rule 23 (statement_local -> return SEMI .)
    LPAREN          reduce using rule 23 (statement_local -> return SEMI .)
    RETURN          reduce using rule 23 (statement_local -> return SEMI .)
    BREAK           reduce using rule 23 (statement_local -> return SEMI .)
    CONTINUE        reduce using rule 23 (statement_local -> return SEMI .)
    STRUCT          reduce using rule 23 (statement_local -> return SEMI .)
    INC             reduce using rule 23 (statement_local -> return SEMI .)
    DEC             reduce using rule 23 (statement_local -> return SEMI .)
    INT             reduce using rule 23 (statement_local -> return SEMI .)
    FLOAT           reduce using rule 23 (statement_local -> return SEMI .)
    BOOL            reduce using rule 23 (statement_local -> return SEMI .)
    FLOAT16         reduce using rule 23 (statement_local -> return SEMI .)
    DOUBLE          reduce using rule 23 (statement_local -> return SEMI .)
    VOID            reduce using rule 23 (statement_local -> return SEMI .)
    STRINGLIT       reduce using rule 23 (statement_local -> return SEMI .)
    LSBRACKET       reduce using rule 23 (statement_local -> return SEMI .)
    LBRACKET        reduce using rule 23 (statement_local -> return SEMI .)
    MINUS           reduce using rule 23 (statement_local -> return SEMI .)
    NOT             reduce using rule 23 (statement_local -> return SEMI .)
    NEW             reduce using rule 23 (statement_local -> return SEMI .)
    UNIFORM         reduce using rule 23 (statement_local -> return SEMI .)
    ATTRIBUTE       reduce using rule 23 (statement_local -> return SEMI .)
    VARYING         reduce using rule 23 (statement_local -> return SEMI .)
    INPUT           reduce using rule 23 (statement_local -> return SEMI .)
    OUTPUT          reduce using rule 23 (statement_local -> return SEMI .)
    HIGHP           reduce using rule 23 (statement_local -> return SEMI .)
    MEDIUMP         reduce using rule 23 (statement_local -> return SEMI .)
    LOWP            reduce using rule 23 (statement_local -> return SEMI .)
    $end            reduce using rule 23 (statement_local -> return SEMI .)
    RBRACKET        reduce using rule 23 (statement_local -> return SEMI .)


state 179

    (49) var_basic -> type_decl ID . arr_decl
    (50) var_basic -> type_decl ID .
    (45) arr_decl -> . LSBRACKET NUMBER RSBRACKET
    (46) arr_decl -> . LSBRACKET RSBRACKET
    (47) arr_decl -> . arr_decl LSBRACKET NUMBER RSBRACKET
    (48) arr_decl -> . arr_decl LSBRACKET RSBRACKET

    SEMI            reduce using rule 50 (var_basic -> type_decl ID .)
    ASSIGN          reduce using rule 50 (var_basic -> type_decl ID .)
    LSBRACKET       shift and go to state 227

    arr_decl                       shift and go to state 225

state 180

    (24) statement_local -> break SEMI .

    SEMI            reduce using rule 24 (statement_local -> break SEMI .)
    IF              reduce using rule 24 (statement_local -> break SEMI .)
    BUILTIN         reduce using rule 24 (statement_local -> break SEMI .)
    ELSE            reduce using rule 24 (statement_local -> break SEMI .)
    FOR             reduce using rule 24 (statement_local -> break SEMI .)
    NUMBER          reduce using rule 24 (statement_local -> break SEMI .)
    TRUE            reduce using rule 24 (statement_local -> break SEMI .)
    FALSE           reduce using rule 24 (statement_local -> break SEMI .)
    ID              reduce using rule 24 (statement_local -> break SEMI .)
    LPAREN          reduce using rule 24 (statement_local -> break SEMI .)
    RETURN          reduce using rule 24 (statement_local -> break SEMI .)
    BREAK           reduce using rule 24 (statement_local -> break SEMI .)
    CONTINUE        reduce using rule 24 (statement_local -> break SEMI .)
    STRUCT          reduce using rule 24 (statement_local -> break SEMI .)
    INC             reduce using rule 24 (statement_local -> break SEMI .)
    DEC             reduce using rule 24 (statement_local -> break SEMI .)
    INT             reduce using rule 24 (statement_local -> break SEMI .)
    FLOAT           reduce using rule 24 (statement_local -> break SEMI .)
    BOOL            reduce using rule 24 (statement_local -> break SEMI .)
    FLOAT16         reduce using rule 24 (statement_local -> break SEMI .)
    DOUBLE          reduce using rule 24 (statement_local -> break SEMI .)
    VOID            reduce using rule 24 (statement_local -> break SEMI .)
    STRINGLIT       reduce using rule 24 (statement_local -> break SEMI .)
    LSBRACKET       reduce using rule 24 (statement_local -> break SEMI .)
    LBRACKET        reduce using rule 24 (statement_local -> break SEMI .)
    MINUS           reduce using rule 24 (statement_local -> break SEMI .)
    NOT             reduce using rule 24 (statement_local -> break SEMI .)
    NEW             reduce using rule 24 (statement_local -> break SEMI .)
    UNIFORM         reduce using rule 24 (statement_local -> break SEMI .)
    ATTRIBUTE       reduce using rule 24 (statement_local -> break SEMI .)
    VARYING         reduce using rule 24 (statement_local -> break SEMI .)
    INPUT           reduce using rule 24 (statement_local -> break SEMI .)
    OUTPUT          reduce using rule 24 (statement_local -> break SEMI .)
    HIGHP           reduce using rule 24 (statement_local -> break SEMI .)
    MEDIUMP         reduce using rule 24 (statement_local -> break SEMI .)
    LOWP            reduce using rule 24 (statement_local -> break SEMI .)
    $end            reduce using rule 24 (statement_local -> break SEMI .)
    RBRACKET        reduce using rule 24 (statement_local -> break SEMI .)


state 181

    (26) statement_local -> var_decl SEMI .

    SEMI            reduce using rule 26 (statement_local -> var_decl SEMI .)
    IF              reduce using rule 26 (statement_local -> var_decl SEMI .)
    BUILTIN         reduce using rule 26 (statement_local -> var_decl SEMI .)
    ELSE            reduce using rule 26 (statement_local -> var_decl SEMI .)
    FOR             reduce using rule 26 (statement_local -> var_decl SEMI .)
    NUMBER          reduce using rule 26 (statement_local -> var_decl SEMI .)
    TRUE            reduce using rule 26 (statement_local -> var_decl SEMI .)
    FALSE           reduce using rule 26 (statement_local -> var_decl SEMI .)
    ID              reduce using rule 26 (statement_local -> var_decl SEMI .)
    LPAREN          reduce using rule 26 (statement_local -> var_decl SEMI .)
    RETURN          reduce using rule 26 (statement_local -> var_decl SEMI .)
    BREAK           reduce using rule 26 (statement_local -> var_decl SEMI .)
    CONTINUE        reduce using rule 26 (statement_local -> var_decl SEMI .)
    STRUCT          reduce using rule 26 (statement_local -> var_decl SEMI .)
    INC             reduce using rule 26 (statement_local -> var_decl SEMI .)
    DEC             reduce using rule 26 (statement_local -> var_decl SEMI .)
    INT             reduce using rule 26 (statement_local -> var_decl SEMI .)
    FLOAT           reduce using rule 26 (statement_local -> var_decl SEMI .)
    BOOL            reduce using rule 26 (statement_local -> var_decl SEMI .)
    FLOAT16         reduce using rule 26 (statement_local -> var_decl SEMI .)
    DOUBLE          reduce using rule 26 (statement_local -> var_decl SEMI .)
    VOID            reduce using rule 26 (statement_local -> var_decl SEMI .)
    STRINGLIT       reduce using rule 26 (statement_local -> var_decl SEMI .)
    LSBRACKET       reduce using rule 26 (statement_local -> var_decl SEMI .)
    LBRACKET        reduce using rule 26 (statement_local -> var_decl SEMI .)
    MINUS           reduce using rule 26 (statement_local -> var_decl SEMI .)
    NOT             reduce using rule 26 (statement_local -> var_decl SEMI .)
    NEW             reduce using rule 26 (statement_local -> var_decl SEMI .)
    UNIFORM         reduce using rule 26 (statement_local -> var_decl SEMI .)
    ATTRIBUTE       reduce using rule 26 (statement_local -> var_decl SEMI .)
    VARYING         reduce using rule 26 (statement_local -> var_decl SEMI .)
    INPUT           reduce using rule 26 (statement_local -> var_decl SEMI .)
    OUTPUT          reduce using rule 26 (statement_local -> var_decl SEMI .)
    HIGHP           reduce using rule 26 (statement_local -> var_decl SEMI .)
    MEDIUMP         reduce using rule 26 (statement_local -> var_decl SEMI .)
    LOWP            reduce using rule 26 (statement_local -> var_decl SEMI .)
    $end            reduce using rule 26 (statement_local -> var_decl SEMI .)
    RBRACKET        reduce using rule 26 (statement_local -> var_decl SEMI .)


state 182

    (138) expr -> expr TIMES expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 138 (expr -> expr TIMES expr .)
    LOR             reduce using rule 138 (expr -> expr TIMES expr .)
    BOR             reduce using rule 138 (expr -> expr TIMES expr .)
    BXOR            reduce using rule 138 (expr -> expr TIMES expr .)
    BAND            reduce using rule 138 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 138 (expr -> expr TIMES expr .)
    NOTEQUAL        reduce using rule 138 (expr -> expr TIMES expr .)
    GTHAN           reduce using rule 138 (expr -> expr TIMES expr .)
    GTHANEQ         reduce using rule 138 (expr -> expr TIMES expr .)
    LTHAN           reduce using rule 138 (expr -> expr TIMES expr .)
    LTHANEQ         reduce using rule 138 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 138 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 138 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 138 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 138 (expr -> expr TIMES expr .)
    QEST            reduce using rule 138 (expr -> expr TIMES expr .)
    SEMI            reduce using rule 138 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 138 (expr -> expr TIMES expr .)
    RSBRACKET       reduce using rule 138 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 138 (expr -> expr TIMES expr .)
    COLON           reduce using rule 138 (expr -> expr TIMES expr .)
    ASSIGNPLUS      reduce using rule 138 (expr -> expr TIMES expr .)
    ASSIGNMINUS     reduce using rule 138 (expr -> expr TIMES expr .)
    ASSIGNDIVIDE    reduce using rule 138 (expr -> expr TIMES expr .)
    ASSIGNTIMES     reduce using rule 138 (expr -> expr TIMES expr .)
    ASSIGNBOR       reduce using rule 138 (expr -> expr TIMES expr .)
    ASSIGNBAND      reduce using rule 138 (expr -> expr TIMES expr .)
    ASSIGNBXOR      reduce using rule 138 (expr -> expr TIMES expr .)
    ASSIGN          reduce using rule 138 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 138 (expr -> expr TIMES expr .)
    DOT             shift and go to state 94
    MOD             shift and go to state 88
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 138 (expr -> expr TIMES expr .) ]
  ! MOD             [ reduce using rule 138 (expr -> expr TIMES expr .) ]
  ! LSBRACKET       [ reduce using rule 138 (expr -> expr TIMES expr .) ]
  ! INC             [ reduce using rule 138 (expr -> expr TIMES expr .) ]
  ! DEC             [ reduce using rule 138 (expr -> expr TIMES expr .) ]
  ! LPAREN          [ reduce using rule 138 (expr -> expr TIMES expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 90 ]
  ! MINUS           [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 86 ]
  ! TIMES           [ shift and go to state 85 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 183

    (137) expr -> expr DIVIDE expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 137 (expr -> expr DIVIDE expr .)
    LOR             reduce using rule 137 (expr -> expr DIVIDE expr .)
    BOR             reduce using rule 137 (expr -> expr DIVIDE expr .)
    BXOR            reduce using rule 137 (expr -> expr DIVIDE expr .)
    BAND            reduce using rule 137 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 137 (expr -> expr DIVIDE expr .)
    NOTEQUAL        reduce using rule 137 (expr -> expr DIVIDE expr .)
    GTHAN           reduce using rule 137 (expr -> expr DIVIDE expr .)
    GTHANEQ         reduce using rule 137 (expr -> expr DIVIDE expr .)
    LTHAN           reduce using rule 137 (expr -> expr DIVIDE expr .)
    LTHANEQ         reduce using rule 137 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 137 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 137 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 137 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 137 (expr -> expr DIVIDE expr .)
    QEST            reduce using rule 137 (expr -> expr DIVIDE expr .)
    SEMI            reduce using rule 137 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 137 (expr -> expr DIVIDE expr .)
    RSBRACKET       reduce using rule 137 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 137 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 137 (expr -> expr DIVIDE expr .)
    ASSIGNPLUS      reduce using rule 137 (expr -> expr DIVIDE expr .)
    ASSIGNMINUS     reduce using rule 137 (expr -> expr DIVIDE expr .)
    ASSIGNDIVIDE    reduce using rule 137 (expr -> expr DIVIDE expr .)
    ASSIGNTIMES     reduce using rule 137 (expr -> expr DIVIDE expr .)
    ASSIGNBOR       reduce using rule 137 (expr -> expr DIVIDE expr .)
    ASSIGNBAND      reduce using rule 137 (expr -> expr DIVIDE expr .)
    ASSIGNBXOR      reduce using rule 137 (expr -> expr DIVIDE expr .)
    ASSIGN          reduce using rule 137 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 137 (expr -> expr DIVIDE expr .)
    DOT             shift and go to state 94
    MOD             shift and go to state 88
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 137 (expr -> expr DIVIDE expr .) ]
  ! MOD             [ reduce using rule 137 (expr -> expr DIVIDE expr .) ]
  ! LSBRACKET       [ reduce using rule 137 (expr -> expr DIVIDE expr .) ]
  ! INC             [ reduce using rule 137 (expr -> expr DIVIDE expr .) ]
  ! DEC             [ reduce using rule 137 (expr -> expr DIVIDE expr .) ]
  ! LPAREN          [ reduce using rule 137 (expr -> expr DIVIDE expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 90 ]
  ! MINUS           [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 86 ]
  ! TIMES           [ shift and go to state 85 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 184

    (133) expr -> expr MOD expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 133 (expr -> expr MOD expr .)
    LOR             reduce using rule 133 (expr -> expr MOD expr .)
    BOR             reduce using rule 133 (expr -> expr MOD expr .)
    BXOR            reduce using rule 133 (expr -> expr MOD expr .)
    BAND            reduce using rule 133 (expr -> expr MOD expr .)
    EQUAL           reduce using rule 133 (expr -> expr MOD expr .)
    NOTEQUAL        reduce using rule 133 (expr -> expr MOD expr .)
    GTHAN           reduce using rule 133 (expr -> expr MOD expr .)
    GTHANEQ         reduce using rule 133 (expr -> expr MOD expr .)
    LTHAN           reduce using rule 133 (expr -> expr MOD expr .)
    MOD             reduce using rule 133 (expr -> expr MOD expr .)
    LTHANEQ         reduce using rule 133 (expr -> expr MOD expr .)
    PLUS            reduce using rule 133 (expr -> expr MOD expr .)
    MINUS           reduce using rule 133 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 133 (expr -> expr MOD expr .)
    TIMES           reduce using rule 133 (expr -> expr MOD expr .)
    QEST            reduce using rule 133 (expr -> expr MOD expr .)
    SEMI            reduce using rule 133 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 133 (expr -> expr MOD expr .)
    RSBRACKET       reduce using rule 133 (expr -> expr MOD expr .)
    COMMA           reduce using rule 133 (expr -> expr MOD expr .)
    COLON           reduce using rule 133 (expr -> expr MOD expr .)
    ASSIGNPLUS      reduce using rule 133 (expr -> expr MOD expr .)
    ASSIGNMINUS     reduce using rule 133 (expr -> expr MOD expr .)
    ASSIGNDIVIDE    reduce using rule 133 (expr -> expr MOD expr .)
    ASSIGNTIMES     reduce using rule 133 (expr -> expr MOD expr .)
    ASSIGNBOR       reduce using rule 133 (expr -> expr MOD expr .)
    ASSIGNBAND      reduce using rule 133 (expr -> expr MOD expr .)
    ASSIGNBXOR      reduce using rule 133 (expr -> expr MOD expr .)
    ASSIGN          reduce using rule 133 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 133 (expr -> expr MOD expr .)
    DOT             shift and go to state 94
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 133 (expr -> expr MOD expr .) ]
  ! LSBRACKET       [ reduce using rule 133 (expr -> expr MOD expr .) ]
  ! INC             [ reduce using rule 133 (expr -> expr MOD expr .) ]
  ! DEC             [ reduce using rule 133 (expr -> expr MOD expr .) ]
  ! LPAREN          [ reduce using rule 133 (expr -> expr MOD expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! MOD             [ shift and go to state 88 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 90 ]
  ! MINUS           [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 86 ]
  ! TIMES           [ shift and go to state 85 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 185

    (79) func_call -> LPAREN RPAREN .

    RPAREN          reduce using rule 79 (func_call -> LPAREN RPAREN .)
    DOT             reduce using rule 79 (func_call -> LPAREN RPAREN .)
    LAND            reduce using rule 79 (func_call -> LPAREN RPAREN .)
    LOR             reduce using rule 79 (func_call -> LPAREN RPAREN .)
    BOR             reduce using rule 79 (func_call -> LPAREN RPAREN .)
    BXOR            reduce using rule 79 (func_call -> LPAREN RPAREN .)
    BAND            reduce using rule 79 (func_call -> LPAREN RPAREN .)
    EQUAL           reduce using rule 79 (func_call -> LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 79 (func_call -> LPAREN RPAREN .)
    GTHAN           reduce using rule 79 (func_call -> LPAREN RPAREN .)
    GTHANEQ         reduce using rule 79 (func_call -> LPAREN RPAREN .)
    LTHAN           reduce using rule 79 (func_call -> LPAREN RPAREN .)
    MOD             reduce using rule 79 (func_call -> LPAREN RPAREN .)
    LTHANEQ         reduce using rule 79 (func_call -> LPAREN RPAREN .)
    PLUS            reduce using rule 79 (func_call -> LPAREN RPAREN .)
    MINUS           reduce using rule 79 (func_call -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 79 (func_call -> LPAREN RPAREN .)
    TIMES           reduce using rule 79 (func_call -> LPAREN RPAREN .)
    LSBRACKET       reduce using rule 79 (func_call -> LPAREN RPAREN .)
    QEST            reduce using rule 79 (func_call -> LPAREN RPAREN .)
    INC             reduce using rule 79 (func_call -> LPAREN RPAREN .)
    DEC             reduce using rule 79 (func_call -> LPAREN RPAREN .)
    LPAREN          reduce using rule 79 (func_call -> LPAREN RPAREN .)
    SEMI            reduce using rule 79 (func_call -> LPAREN RPAREN .)
    RSBRACKET       reduce using rule 79 (func_call -> LPAREN RPAREN .)
    COMMA           reduce using rule 79 (func_call -> LPAREN RPAREN .)
    COLON           reduce using rule 79 (func_call -> LPAREN RPAREN .)
    ASSIGNPLUS      reduce using rule 79 (func_call -> LPAREN RPAREN .)
    ASSIGNMINUS     reduce using rule 79 (func_call -> LPAREN RPAREN .)
    ASSIGNDIVIDE    reduce using rule 79 (func_call -> LPAREN RPAREN .)
    ASSIGNTIMES     reduce using rule 79 (func_call -> LPAREN RPAREN .)
    ASSIGNBOR       reduce using rule 79 (func_call -> LPAREN RPAREN .)
    ASSIGNBAND      reduce using rule 79 (func_call -> LPAREN RPAREN .)
    ASSIGNBXOR      reduce using rule 79 (func_call -> LPAREN RPAREN .)
    ASSIGN          reduce using rule 79 (func_call -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 79 (func_call -> LPAREN RPAREN .)


state 186

    (78) func_call -> LPAREN exprlist . RPAREN
    (76) exprlist -> exprlist . COMMA expr
    (77) exprlist -> exprlist . COMMA ID ASSIGN expr

    RPAREN          shift and go to state 240
    COMMA           shift and go to state 223


state 187

    (135) expr -> expr PLUS expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 135 (expr -> expr PLUS expr .)
    LOR             reduce using rule 135 (expr -> expr PLUS expr .)
    BOR             reduce using rule 135 (expr -> expr PLUS expr .)
    BXOR            reduce using rule 135 (expr -> expr PLUS expr .)
    BAND            reduce using rule 135 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 135 (expr -> expr PLUS expr .)
    NOTEQUAL        reduce using rule 135 (expr -> expr PLUS expr .)
    GTHAN           reduce using rule 135 (expr -> expr PLUS expr .)
    GTHANEQ         reduce using rule 135 (expr -> expr PLUS expr .)
    LTHAN           reduce using rule 135 (expr -> expr PLUS expr .)
    LTHANEQ         reduce using rule 135 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 135 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 135 (expr -> expr PLUS expr .)
    QEST            reduce using rule 135 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 135 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 135 (expr -> expr PLUS expr .)
    RSBRACKET       reduce using rule 135 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 135 (expr -> expr PLUS expr .)
    COLON           reduce using rule 135 (expr -> expr PLUS expr .)
    ASSIGNPLUS      reduce using rule 135 (expr -> expr PLUS expr .)
    ASSIGNMINUS     reduce using rule 135 (expr -> expr PLUS expr .)
    ASSIGNDIVIDE    reduce using rule 135 (expr -> expr PLUS expr .)
    ASSIGNTIMES     reduce using rule 135 (expr -> expr PLUS expr .)
    ASSIGNBOR       reduce using rule 135 (expr -> expr PLUS expr .)
    ASSIGNBAND      reduce using rule 135 (expr -> expr PLUS expr .)
    ASSIGNBXOR      reduce using rule 135 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 135 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 135 (expr -> expr PLUS expr .)
    DOT             shift and go to state 94
    MOD             shift and go to state 88
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 135 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 135 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 135 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 135 (expr -> expr PLUS expr .) ]
  ! LSBRACKET       [ reduce using rule 135 (expr -> expr PLUS expr .) ]
  ! INC             [ reduce using rule 135 (expr -> expr PLUS expr .) ]
  ! DEC             [ reduce using rule 135 (expr -> expr PLUS expr .) ]
  ! LPAREN          [ reduce using rule 135 (expr -> expr PLUS expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 90 ]
  ! MINUS           [ shift and go to state 99 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 188

    (131) expr -> expr GTHANEQ expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 131 (expr -> expr GTHANEQ expr .)
    LOR             reduce using rule 131 (expr -> expr GTHANEQ expr .)
    BOR             reduce using rule 131 (expr -> expr GTHANEQ expr .)
    BXOR            reduce using rule 131 (expr -> expr GTHANEQ expr .)
    BAND            reduce using rule 131 (expr -> expr GTHANEQ expr .)
    EQUAL           reduce using rule 131 (expr -> expr GTHANEQ expr .)
    NOTEQUAL        reduce using rule 131 (expr -> expr GTHANEQ expr .)
    GTHAN           reduce using rule 131 (expr -> expr GTHANEQ expr .)
    GTHANEQ         reduce using rule 131 (expr -> expr GTHANEQ expr .)
    LTHAN           reduce using rule 131 (expr -> expr GTHANEQ expr .)
    LTHANEQ         reduce using rule 131 (expr -> expr GTHANEQ expr .)
    QEST            reduce using rule 131 (expr -> expr GTHANEQ expr .)
    SEMI            reduce using rule 131 (expr -> expr GTHANEQ expr .)
    RPAREN          reduce using rule 131 (expr -> expr GTHANEQ expr .)
    RSBRACKET       reduce using rule 131 (expr -> expr GTHANEQ expr .)
    COMMA           reduce using rule 131 (expr -> expr GTHANEQ expr .)
    COLON           reduce using rule 131 (expr -> expr GTHANEQ expr .)
    ASSIGNPLUS      reduce using rule 131 (expr -> expr GTHANEQ expr .)
    ASSIGNMINUS     reduce using rule 131 (expr -> expr GTHANEQ expr .)
    ASSIGNDIVIDE    reduce using rule 131 (expr -> expr GTHANEQ expr .)
    ASSIGNTIMES     reduce using rule 131 (expr -> expr GTHANEQ expr .)
    ASSIGNBOR       reduce using rule 131 (expr -> expr GTHANEQ expr .)
    ASSIGNBAND      reduce using rule 131 (expr -> expr GTHANEQ expr .)
    ASSIGNBXOR      reduce using rule 131 (expr -> expr GTHANEQ expr .)
    ASSIGN          reduce using rule 131 (expr -> expr GTHANEQ expr .)
    RBRACKET        reduce using rule 131 (expr -> expr GTHANEQ expr .)
    DOT             shift and go to state 94
    MOD             shift and go to state 88
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 131 (expr -> expr GTHANEQ expr .) ]
  ! MOD             [ reduce using rule 131 (expr -> expr GTHANEQ expr .) ]
  ! PLUS            [ reduce using rule 131 (expr -> expr GTHANEQ expr .) ]
  ! MINUS           [ reduce using rule 131 (expr -> expr GTHANEQ expr .) ]
  ! DIVIDE          [ reduce using rule 131 (expr -> expr GTHANEQ expr .) ]
  ! TIMES           [ reduce using rule 131 (expr -> expr GTHANEQ expr .) ]
  ! LSBRACKET       [ reduce using rule 131 (expr -> expr GTHANEQ expr .) ]
  ! INC             [ reduce using rule 131 (expr -> expr GTHANEQ expr .) ]
  ! DEC             [ reduce using rule 131 (expr -> expr GTHANEQ expr .) ]
  ! LPAREN          [ reduce using rule 131 (expr -> expr GTHANEQ expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 189

    (123) expr -> expr LAND expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 123 (expr -> expr LAND expr .)
    LOR             reduce using rule 123 (expr -> expr LAND expr .)
    BOR             reduce using rule 123 (expr -> expr LAND expr .)
    BXOR            reduce using rule 123 (expr -> expr LAND expr .)
    BAND            reduce using rule 123 (expr -> expr LAND expr .)
    QEST            reduce using rule 123 (expr -> expr LAND expr .)
    SEMI            reduce using rule 123 (expr -> expr LAND expr .)
    RPAREN          reduce using rule 123 (expr -> expr LAND expr .)
    RSBRACKET       reduce using rule 123 (expr -> expr LAND expr .)
    COMMA           reduce using rule 123 (expr -> expr LAND expr .)
    COLON           reduce using rule 123 (expr -> expr LAND expr .)
    ASSIGNPLUS      reduce using rule 123 (expr -> expr LAND expr .)
    ASSIGNMINUS     reduce using rule 123 (expr -> expr LAND expr .)
    ASSIGNDIVIDE    reduce using rule 123 (expr -> expr LAND expr .)
    ASSIGNTIMES     reduce using rule 123 (expr -> expr LAND expr .)
    ASSIGNBOR       reduce using rule 123 (expr -> expr LAND expr .)
    ASSIGNBAND      reduce using rule 123 (expr -> expr LAND expr .)
    ASSIGNBXOR      reduce using rule 123 (expr -> expr LAND expr .)
    ASSIGN          reduce using rule 123 (expr -> expr LAND expr .)
    RBRACKET        reduce using rule 123 (expr -> expr LAND expr .)
    DOT             shift and go to state 94
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! EQUAL           [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! NOTEQUAL        [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! GTHAN           [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! GTHANEQ         [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! LTHAN           [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! MOD             [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! LTHANEQ         [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! PLUS            [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! MINUS           [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! DIVIDE          [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! TIMES           [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! LSBRACKET       [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! INC             [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! DEC             [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! LPAREN          [ reduce using rule 123 (expr -> expr LAND expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 190

    (122) expr -> expr DOT expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    DOT             reduce using rule 122 (expr -> expr DOT expr .)
    LAND            reduce using rule 122 (expr -> expr DOT expr .)
    LOR             reduce using rule 122 (expr -> expr DOT expr .)
    BOR             reduce using rule 122 (expr -> expr DOT expr .)
    BXOR            reduce using rule 122 (expr -> expr DOT expr .)
    BAND            reduce using rule 122 (expr -> expr DOT expr .)
    EQUAL           reduce using rule 122 (expr -> expr DOT expr .)
    NOTEQUAL        reduce using rule 122 (expr -> expr DOT expr .)
    GTHAN           reduce using rule 122 (expr -> expr DOT expr .)
    GTHANEQ         reduce using rule 122 (expr -> expr DOT expr .)
    LTHAN           reduce using rule 122 (expr -> expr DOT expr .)
    MOD             reduce using rule 122 (expr -> expr DOT expr .)
    LTHANEQ         reduce using rule 122 (expr -> expr DOT expr .)
    PLUS            reduce using rule 122 (expr -> expr DOT expr .)
    MINUS           reduce using rule 122 (expr -> expr DOT expr .)
    DIVIDE          reduce using rule 122 (expr -> expr DOT expr .)
    TIMES           reduce using rule 122 (expr -> expr DOT expr .)
    LSBRACKET       reduce using rule 122 (expr -> expr DOT expr .)
    QEST            reduce using rule 122 (expr -> expr DOT expr .)
    INC             reduce using rule 122 (expr -> expr DOT expr .)
    DEC             reduce using rule 122 (expr -> expr DOT expr .)
    LPAREN          reduce using rule 122 (expr -> expr DOT expr .)
    SEMI            reduce using rule 122 (expr -> expr DOT expr .)
    RPAREN          reduce using rule 122 (expr -> expr DOT expr .)
    RSBRACKET       reduce using rule 122 (expr -> expr DOT expr .)
    COMMA           reduce using rule 122 (expr -> expr DOT expr .)
    COLON           reduce using rule 122 (expr -> expr DOT expr .)
    ASSIGNPLUS      reduce using rule 122 (expr -> expr DOT expr .)
    ASSIGNMINUS     reduce using rule 122 (expr -> expr DOT expr .)
    ASSIGNDIVIDE    reduce using rule 122 (expr -> expr DOT expr .)
    ASSIGNTIMES     reduce using rule 122 (expr -> expr DOT expr .)
    ASSIGNBOR       reduce using rule 122 (expr -> expr DOT expr .)
    ASSIGNBAND      reduce using rule 122 (expr -> expr DOT expr .)
    ASSIGNBXOR      reduce using rule 122 (expr -> expr DOT expr .)
    ASSIGN          reduce using rule 122 (expr -> expr DOT expr .)
    RBRACKET        reduce using rule 122 (expr -> expr DOT expr .)

  ! DOT             [ shift and go to state 94 ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! MOD             [ shift and go to state 88 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 90 ]
  ! MINUS           [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 86 ]
  ! TIMES           [ shift and go to state 85 ]
  ! LSBRACKET       [ shift and go to state 106 ]
  ! QEST            [ shift and go to state 96 ]
  ! INC             [ shift and go to state 87 ]
  ! DEC             [ shift and go to state 84 ]
  ! LPAREN          [ shift and go to state 89 ]

    func_call                      shift and go to state 97

state 191

    (132) expr -> expr LTHAN expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 132 (expr -> expr LTHAN expr .)
    LOR             reduce using rule 132 (expr -> expr LTHAN expr .)
    BOR             reduce using rule 132 (expr -> expr LTHAN expr .)
    BXOR            reduce using rule 132 (expr -> expr LTHAN expr .)
    BAND            reduce using rule 132 (expr -> expr LTHAN expr .)
    EQUAL           reduce using rule 132 (expr -> expr LTHAN expr .)
    NOTEQUAL        reduce using rule 132 (expr -> expr LTHAN expr .)
    GTHAN           reduce using rule 132 (expr -> expr LTHAN expr .)
    GTHANEQ         reduce using rule 132 (expr -> expr LTHAN expr .)
    LTHAN           reduce using rule 132 (expr -> expr LTHAN expr .)
    LTHANEQ         reduce using rule 132 (expr -> expr LTHAN expr .)
    QEST            reduce using rule 132 (expr -> expr LTHAN expr .)
    SEMI            reduce using rule 132 (expr -> expr LTHAN expr .)
    RPAREN          reduce using rule 132 (expr -> expr LTHAN expr .)
    RSBRACKET       reduce using rule 132 (expr -> expr LTHAN expr .)
    COMMA           reduce using rule 132 (expr -> expr LTHAN expr .)
    COLON           reduce using rule 132 (expr -> expr LTHAN expr .)
    ASSIGNPLUS      reduce using rule 132 (expr -> expr LTHAN expr .)
    ASSIGNMINUS     reduce using rule 132 (expr -> expr LTHAN expr .)
    ASSIGNDIVIDE    reduce using rule 132 (expr -> expr LTHAN expr .)
    ASSIGNTIMES     reduce using rule 132 (expr -> expr LTHAN expr .)
    ASSIGNBOR       reduce using rule 132 (expr -> expr LTHAN expr .)
    ASSIGNBAND      reduce using rule 132 (expr -> expr LTHAN expr .)
    ASSIGNBXOR      reduce using rule 132 (expr -> expr LTHAN expr .)
    ASSIGN          reduce using rule 132 (expr -> expr LTHAN expr .)
    RBRACKET        reduce using rule 132 (expr -> expr LTHAN expr .)
    DOT             shift and go to state 94
    MOD             shift and go to state 88
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 132 (expr -> expr LTHAN expr .) ]
  ! MOD             [ reduce using rule 132 (expr -> expr LTHAN expr .) ]
  ! PLUS            [ reduce using rule 132 (expr -> expr LTHAN expr .) ]
  ! MINUS           [ reduce using rule 132 (expr -> expr LTHAN expr .) ]
  ! DIVIDE          [ reduce using rule 132 (expr -> expr LTHAN expr .) ]
  ! TIMES           [ reduce using rule 132 (expr -> expr LTHAN expr .) ]
  ! LSBRACKET       [ reduce using rule 132 (expr -> expr LTHAN expr .) ]
  ! INC             [ reduce using rule 132 (expr -> expr LTHAN expr .) ]
  ! DEC             [ reduce using rule 132 (expr -> expr LTHAN expr .) ]
  ! LPAREN          [ reduce using rule 132 (expr -> expr LTHAN expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 192

    (142) expr -> expr QEST expr . COLON expr
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    COLON           shift and go to state 241
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 193

    (126) expr -> expr BXOR expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    BOR             reduce using rule 126 (expr -> expr BXOR expr .)
    BXOR            reduce using rule 126 (expr -> expr BXOR expr .)
    BAND            reduce using rule 126 (expr -> expr BXOR expr .)
    QEST            reduce using rule 126 (expr -> expr BXOR expr .)
    SEMI            reduce using rule 126 (expr -> expr BXOR expr .)
    RPAREN          reduce using rule 126 (expr -> expr BXOR expr .)
    RSBRACKET       reduce using rule 126 (expr -> expr BXOR expr .)
    COMMA           reduce using rule 126 (expr -> expr BXOR expr .)
    COLON           reduce using rule 126 (expr -> expr BXOR expr .)
    ASSIGNPLUS      reduce using rule 126 (expr -> expr BXOR expr .)
    ASSIGNMINUS     reduce using rule 126 (expr -> expr BXOR expr .)
    ASSIGNDIVIDE    reduce using rule 126 (expr -> expr BXOR expr .)
    ASSIGNTIMES     reduce using rule 126 (expr -> expr BXOR expr .)
    ASSIGNBOR       reduce using rule 126 (expr -> expr BXOR expr .)
    ASSIGNBAND      reduce using rule 126 (expr -> expr BXOR expr .)
    ASSIGNBXOR      reduce using rule 126 (expr -> expr BXOR expr .)
    ASSIGN          reduce using rule 126 (expr -> expr BXOR expr .)
    RBRACKET        reduce using rule 126 (expr -> expr BXOR expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! LAND            [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! LOR             [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! EQUAL           [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! NOTEQUAL        [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! GTHAN           [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! GTHANEQ         [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! LTHAN           [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! MOD             [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! LTHANEQ         [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! PLUS            [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! MINUS           [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! DIVIDE          [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! TIMES           [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! LSBRACKET       [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! INC             [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! DEC             [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! LPAREN          [ reduce using rule 126 (expr -> expr BXOR expr .) ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 194

    (136) expr -> expr MINUS expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 136 (expr -> expr MINUS expr .)
    LOR             reduce using rule 136 (expr -> expr MINUS expr .)
    BOR             reduce using rule 136 (expr -> expr MINUS expr .)
    BXOR            reduce using rule 136 (expr -> expr MINUS expr .)
    BAND            reduce using rule 136 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 136 (expr -> expr MINUS expr .)
    NOTEQUAL        reduce using rule 136 (expr -> expr MINUS expr .)
    GTHAN           reduce using rule 136 (expr -> expr MINUS expr .)
    GTHANEQ         reduce using rule 136 (expr -> expr MINUS expr .)
    LTHAN           reduce using rule 136 (expr -> expr MINUS expr .)
    LTHANEQ         reduce using rule 136 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 136 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 136 (expr -> expr MINUS expr .)
    QEST            reduce using rule 136 (expr -> expr MINUS expr .)
    SEMI            reduce using rule 136 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 136 (expr -> expr MINUS expr .)
    RSBRACKET       reduce using rule 136 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 136 (expr -> expr MINUS expr .)
    COLON           reduce using rule 136 (expr -> expr MINUS expr .)
    ASSIGNPLUS      reduce using rule 136 (expr -> expr MINUS expr .)
    ASSIGNMINUS     reduce using rule 136 (expr -> expr MINUS expr .)
    ASSIGNDIVIDE    reduce using rule 136 (expr -> expr MINUS expr .)
    ASSIGNTIMES     reduce using rule 136 (expr -> expr MINUS expr .)
    ASSIGNBOR       reduce using rule 136 (expr -> expr MINUS expr .)
    ASSIGNBAND      reduce using rule 136 (expr -> expr MINUS expr .)
    ASSIGNBXOR      reduce using rule 136 (expr -> expr MINUS expr .)
    ASSIGN          reduce using rule 136 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 136 (expr -> expr MINUS expr .)
    DOT             shift and go to state 94
    MOD             shift and go to state 88
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 136 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 136 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 136 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 136 (expr -> expr MINUS expr .) ]
  ! LSBRACKET       [ reduce using rule 136 (expr -> expr MINUS expr .) ]
  ! INC             [ reduce using rule 136 (expr -> expr MINUS expr .) ]
  ! DEC             [ reduce using rule 136 (expr -> expr MINUS expr .) ]
  ! LPAREN          [ reduce using rule 136 (expr -> expr MINUS expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! PLUS            [ shift and go to state 90 ]
  ! MINUS           [ shift and go to state 99 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 195

    (125) expr -> expr BOR expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    BOR             reduce using rule 125 (expr -> expr BOR expr .)
    BXOR            reduce using rule 125 (expr -> expr BOR expr .)
    BAND            reduce using rule 125 (expr -> expr BOR expr .)
    QEST            reduce using rule 125 (expr -> expr BOR expr .)
    SEMI            reduce using rule 125 (expr -> expr BOR expr .)
    RPAREN          reduce using rule 125 (expr -> expr BOR expr .)
    RSBRACKET       reduce using rule 125 (expr -> expr BOR expr .)
    COMMA           reduce using rule 125 (expr -> expr BOR expr .)
    COLON           reduce using rule 125 (expr -> expr BOR expr .)
    ASSIGNPLUS      reduce using rule 125 (expr -> expr BOR expr .)
    ASSIGNMINUS     reduce using rule 125 (expr -> expr BOR expr .)
    ASSIGNDIVIDE    reduce using rule 125 (expr -> expr BOR expr .)
    ASSIGNTIMES     reduce using rule 125 (expr -> expr BOR expr .)
    ASSIGNBOR       reduce using rule 125 (expr -> expr BOR expr .)
    ASSIGNBAND      reduce using rule 125 (expr -> expr BOR expr .)
    ASSIGNBXOR      reduce using rule 125 (expr -> expr BOR expr .)
    ASSIGN          reduce using rule 125 (expr -> expr BOR expr .)
    RBRACKET        reduce using rule 125 (expr -> expr BOR expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! LAND            [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! LOR             [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! EQUAL           [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! NOTEQUAL        [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! GTHAN           [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! GTHANEQ         [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! LTHAN           [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! MOD             [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! LTHANEQ         [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! PLUS            [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! MINUS           [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! DIVIDE          [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! TIMES           [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! LSBRACKET       [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! INC             [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! DEC             [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! LPAREN          [ reduce using rule 125 (expr -> expr BOR expr .) ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 196

    (124) expr -> expr LOR expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 124 (expr -> expr LOR expr .)
    LOR             reduce using rule 124 (expr -> expr LOR expr .)
    BOR             reduce using rule 124 (expr -> expr LOR expr .)
    BXOR            reduce using rule 124 (expr -> expr LOR expr .)
    BAND            reduce using rule 124 (expr -> expr LOR expr .)
    QEST            reduce using rule 124 (expr -> expr LOR expr .)
    SEMI            reduce using rule 124 (expr -> expr LOR expr .)
    RPAREN          reduce using rule 124 (expr -> expr LOR expr .)
    RSBRACKET       reduce using rule 124 (expr -> expr LOR expr .)
    COMMA           reduce using rule 124 (expr -> expr LOR expr .)
    COLON           reduce using rule 124 (expr -> expr LOR expr .)
    ASSIGNPLUS      reduce using rule 124 (expr -> expr LOR expr .)
    ASSIGNMINUS     reduce using rule 124 (expr -> expr LOR expr .)
    ASSIGNDIVIDE    reduce using rule 124 (expr -> expr LOR expr .)
    ASSIGNTIMES     reduce using rule 124 (expr -> expr LOR expr .)
    ASSIGNBOR       reduce using rule 124 (expr -> expr LOR expr .)
    ASSIGNBAND      reduce using rule 124 (expr -> expr LOR expr .)
    ASSIGNBXOR      reduce using rule 124 (expr -> expr LOR expr .)
    ASSIGN          reduce using rule 124 (expr -> expr LOR expr .)
    RBRACKET        reduce using rule 124 (expr -> expr LOR expr .)
    DOT             shift and go to state 94
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! EQUAL           [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! NOTEQUAL        [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! GTHAN           [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! GTHANEQ         [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! LTHAN           [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! MOD             [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! LTHANEQ         [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! PLUS            [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! MINUS           [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! DIVIDE          [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! TIMES           [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! LSBRACKET       [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! INC             [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! DEC             [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! LPAREN          [ reduce using rule 124 (expr -> expr LOR expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 197

    (127) expr -> expr BAND expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    BOR             reduce using rule 127 (expr -> expr BAND expr .)
    BXOR            reduce using rule 127 (expr -> expr BAND expr .)
    BAND            reduce using rule 127 (expr -> expr BAND expr .)
    QEST            reduce using rule 127 (expr -> expr BAND expr .)
    SEMI            reduce using rule 127 (expr -> expr BAND expr .)
    RPAREN          reduce using rule 127 (expr -> expr BAND expr .)
    RSBRACKET       reduce using rule 127 (expr -> expr BAND expr .)
    COMMA           reduce using rule 127 (expr -> expr BAND expr .)
    COLON           reduce using rule 127 (expr -> expr BAND expr .)
    ASSIGNPLUS      reduce using rule 127 (expr -> expr BAND expr .)
    ASSIGNMINUS     reduce using rule 127 (expr -> expr BAND expr .)
    ASSIGNDIVIDE    reduce using rule 127 (expr -> expr BAND expr .)
    ASSIGNTIMES     reduce using rule 127 (expr -> expr BAND expr .)
    ASSIGNBOR       reduce using rule 127 (expr -> expr BAND expr .)
    ASSIGNBAND      reduce using rule 127 (expr -> expr BAND expr .)
    ASSIGNBXOR      reduce using rule 127 (expr -> expr BAND expr .)
    ASSIGN          reduce using rule 127 (expr -> expr BAND expr .)
    RBRACKET        reduce using rule 127 (expr -> expr BAND expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! LAND            [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! LOR             [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! EQUAL           [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! NOTEQUAL        [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! GTHAN           [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! GTHANEQ         [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! LTHAN           [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! MOD             [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! LTHANEQ         [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! PLUS            [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! MINUS           [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! DIVIDE          [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! TIMES           [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! LSBRACKET       [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! INC             [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! DEC             [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! LPAREN          [ reduce using rule 127 (expr -> expr BAND expr .) ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 198

    (130) expr -> expr GTHAN expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 130 (expr -> expr GTHAN expr .)
    LOR             reduce using rule 130 (expr -> expr GTHAN expr .)
    BOR             reduce using rule 130 (expr -> expr GTHAN expr .)
    BXOR            reduce using rule 130 (expr -> expr GTHAN expr .)
    BAND            reduce using rule 130 (expr -> expr GTHAN expr .)
    EQUAL           reduce using rule 130 (expr -> expr GTHAN expr .)
    NOTEQUAL        reduce using rule 130 (expr -> expr GTHAN expr .)
    GTHAN           reduce using rule 130 (expr -> expr GTHAN expr .)
    GTHANEQ         reduce using rule 130 (expr -> expr GTHAN expr .)
    LTHAN           reduce using rule 130 (expr -> expr GTHAN expr .)
    LTHANEQ         reduce using rule 130 (expr -> expr GTHAN expr .)
    QEST            reduce using rule 130 (expr -> expr GTHAN expr .)
    SEMI            reduce using rule 130 (expr -> expr GTHAN expr .)
    RPAREN          reduce using rule 130 (expr -> expr GTHAN expr .)
    RSBRACKET       reduce using rule 130 (expr -> expr GTHAN expr .)
    COMMA           reduce using rule 130 (expr -> expr GTHAN expr .)
    COLON           reduce using rule 130 (expr -> expr GTHAN expr .)
    ASSIGNPLUS      reduce using rule 130 (expr -> expr GTHAN expr .)
    ASSIGNMINUS     reduce using rule 130 (expr -> expr GTHAN expr .)
    ASSIGNDIVIDE    reduce using rule 130 (expr -> expr GTHAN expr .)
    ASSIGNTIMES     reduce using rule 130 (expr -> expr GTHAN expr .)
    ASSIGNBOR       reduce using rule 130 (expr -> expr GTHAN expr .)
    ASSIGNBAND      reduce using rule 130 (expr -> expr GTHAN expr .)
    ASSIGNBXOR      reduce using rule 130 (expr -> expr GTHAN expr .)
    ASSIGN          reduce using rule 130 (expr -> expr GTHAN expr .)
    RBRACKET        reduce using rule 130 (expr -> expr GTHAN expr .)
    DOT             shift and go to state 94
    MOD             shift and go to state 88
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 130 (expr -> expr GTHAN expr .) ]
  ! MOD             [ reduce using rule 130 (expr -> expr GTHAN expr .) ]
  ! PLUS            [ reduce using rule 130 (expr -> expr GTHAN expr .) ]
  ! MINUS           [ reduce using rule 130 (expr -> expr GTHAN expr .) ]
  ! DIVIDE          [ reduce using rule 130 (expr -> expr GTHAN expr .) ]
  ! TIMES           [ reduce using rule 130 (expr -> expr GTHAN expr .) ]
  ! LSBRACKET       [ reduce using rule 130 (expr -> expr GTHAN expr .) ]
  ! INC             [ reduce using rule 130 (expr -> expr GTHAN expr .) ]
  ! DEC             [ reduce using rule 130 (expr -> expr GTHAN expr .) ]
  ! LPAREN          [ reduce using rule 130 (expr -> expr GTHAN expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 199

    (134) expr -> expr LTHANEQ expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 134 (expr -> expr LTHANEQ expr .)
    LOR             reduce using rule 134 (expr -> expr LTHANEQ expr .)
    BOR             reduce using rule 134 (expr -> expr LTHANEQ expr .)
    BXOR            reduce using rule 134 (expr -> expr LTHANEQ expr .)
    BAND            reduce using rule 134 (expr -> expr LTHANEQ expr .)
    EQUAL           reduce using rule 134 (expr -> expr LTHANEQ expr .)
    NOTEQUAL        reduce using rule 134 (expr -> expr LTHANEQ expr .)
    GTHAN           reduce using rule 134 (expr -> expr LTHANEQ expr .)
    GTHANEQ         reduce using rule 134 (expr -> expr LTHANEQ expr .)
    LTHAN           reduce using rule 134 (expr -> expr LTHANEQ expr .)
    LTHANEQ         reduce using rule 134 (expr -> expr LTHANEQ expr .)
    QEST            reduce using rule 134 (expr -> expr LTHANEQ expr .)
    SEMI            reduce using rule 134 (expr -> expr LTHANEQ expr .)
    RPAREN          reduce using rule 134 (expr -> expr LTHANEQ expr .)
    RSBRACKET       reduce using rule 134 (expr -> expr LTHANEQ expr .)
    COMMA           reduce using rule 134 (expr -> expr LTHANEQ expr .)
    COLON           reduce using rule 134 (expr -> expr LTHANEQ expr .)
    ASSIGNPLUS      reduce using rule 134 (expr -> expr LTHANEQ expr .)
    ASSIGNMINUS     reduce using rule 134 (expr -> expr LTHANEQ expr .)
    ASSIGNDIVIDE    reduce using rule 134 (expr -> expr LTHANEQ expr .)
    ASSIGNTIMES     reduce using rule 134 (expr -> expr LTHANEQ expr .)
    ASSIGNBOR       reduce using rule 134 (expr -> expr LTHANEQ expr .)
    ASSIGNBAND      reduce using rule 134 (expr -> expr LTHANEQ expr .)
    ASSIGNBXOR      reduce using rule 134 (expr -> expr LTHANEQ expr .)
    ASSIGN          reduce using rule 134 (expr -> expr LTHANEQ expr .)
    RBRACKET        reduce using rule 134 (expr -> expr LTHANEQ expr .)
    DOT             shift and go to state 94
    MOD             shift and go to state 88
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 134 (expr -> expr LTHANEQ expr .) ]
  ! MOD             [ reduce using rule 134 (expr -> expr LTHANEQ expr .) ]
  ! PLUS            [ reduce using rule 134 (expr -> expr LTHANEQ expr .) ]
  ! MINUS           [ reduce using rule 134 (expr -> expr LTHANEQ expr .) ]
  ! DIVIDE          [ reduce using rule 134 (expr -> expr LTHANEQ expr .) ]
  ! TIMES           [ reduce using rule 134 (expr -> expr LTHANEQ expr .) ]
  ! LSBRACKET       [ reduce using rule 134 (expr -> expr LTHANEQ expr .) ]
  ! INC             [ reduce using rule 134 (expr -> expr LTHANEQ expr .) ]
  ! DEC             [ reduce using rule 134 (expr -> expr LTHANEQ expr .) ]
  ! LPAREN          [ reduce using rule 134 (expr -> expr LTHANEQ expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 200

    (129) expr -> expr NOTEQUAL expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    LOR             reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    BOR             reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    BXOR            reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    BAND            reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    EQUAL           reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    NOTEQUAL        reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    GTHAN           reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    GTHANEQ         reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    LTHAN           reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    LTHANEQ         reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    QEST            reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    SEMI            reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    RPAREN          reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    RSBRACKET       reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    COMMA           reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    COLON           reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    ASSIGNPLUS      reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    ASSIGNMINUS     reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    ASSIGNDIVIDE    reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    ASSIGNTIMES     reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    ASSIGNBOR       reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    ASSIGNBAND      reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    ASSIGNBXOR      reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    ASSIGN          reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    RBRACKET        reduce using rule 129 (expr -> expr NOTEQUAL expr .)
    DOT             shift and go to state 94
    MOD             shift and go to state 88
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 129 (expr -> expr NOTEQUAL expr .) ]
  ! MOD             [ reduce using rule 129 (expr -> expr NOTEQUAL expr .) ]
  ! PLUS            [ reduce using rule 129 (expr -> expr NOTEQUAL expr .) ]
  ! MINUS           [ reduce using rule 129 (expr -> expr NOTEQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 129 (expr -> expr NOTEQUAL expr .) ]
  ! TIMES           [ reduce using rule 129 (expr -> expr NOTEQUAL expr .) ]
  ! LSBRACKET       [ reduce using rule 129 (expr -> expr NOTEQUAL expr .) ]
  ! INC             [ reduce using rule 129 (expr -> expr NOTEQUAL expr .) ]
  ! DEC             [ reduce using rule 129 (expr -> expr NOTEQUAL expr .) ]
  ! LPAREN          [ reduce using rule 129 (expr -> expr NOTEQUAL expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 201

    (141) expr -> expr LSBRACKET expr . RSBRACKET
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    RSBRACKET       shift and go to state 242
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 202

    (128) expr -> expr EQUAL expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    LAND            reduce using rule 128 (expr -> expr EQUAL expr .)
    LOR             reduce using rule 128 (expr -> expr EQUAL expr .)
    BOR             reduce using rule 128 (expr -> expr EQUAL expr .)
    BXOR            reduce using rule 128 (expr -> expr EQUAL expr .)
    BAND            reduce using rule 128 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 128 (expr -> expr EQUAL expr .)
    NOTEQUAL        reduce using rule 128 (expr -> expr EQUAL expr .)
    GTHAN           reduce using rule 128 (expr -> expr EQUAL expr .)
    GTHANEQ         reduce using rule 128 (expr -> expr EQUAL expr .)
    LTHAN           reduce using rule 128 (expr -> expr EQUAL expr .)
    LTHANEQ         reduce using rule 128 (expr -> expr EQUAL expr .)
    QEST            reduce using rule 128 (expr -> expr EQUAL expr .)
    SEMI            reduce using rule 128 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 128 (expr -> expr EQUAL expr .)
    RSBRACKET       reduce using rule 128 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 128 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 128 (expr -> expr EQUAL expr .)
    ASSIGNPLUS      reduce using rule 128 (expr -> expr EQUAL expr .)
    ASSIGNMINUS     reduce using rule 128 (expr -> expr EQUAL expr .)
    ASSIGNDIVIDE    reduce using rule 128 (expr -> expr EQUAL expr .)
    ASSIGNTIMES     reduce using rule 128 (expr -> expr EQUAL expr .)
    ASSIGNBOR       reduce using rule 128 (expr -> expr EQUAL expr .)
    ASSIGNBAND      reduce using rule 128 (expr -> expr EQUAL expr .)
    ASSIGNBXOR      reduce using rule 128 (expr -> expr EQUAL expr .)
    ASSIGN          reduce using rule 128 (expr -> expr EQUAL expr .)
    RBRACKET        reduce using rule 128 (expr -> expr EQUAL expr .)
    DOT             shift and go to state 94
    MOD             shift and go to state 88
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 128 (expr -> expr EQUAL expr .) ]
  ! MOD             [ reduce using rule 128 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 128 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 128 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 128 (expr -> expr EQUAL expr .) ]
  ! TIMES           [ reduce using rule 128 (expr -> expr EQUAL expr .) ]
  ! LSBRACKET       [ reduce using rule 128 (expr -> expr EQUAL expr .) ]
  ! INC             [ reduce using rule 128 (expr -> expr EQUAL expr .) ]
  ! DEC             [ reduce using rule 128 (expr -> expr EQUAL expr .) ]
  ! LPAREN          [ reduce using rule 128 (expr -> expr EQUAL expr .) ]
  ! LAND            [ shift and go to state 93 ]
  ! LOR             [ shift and go to state 101 ]
  ! BOR             [ shift and go to state 100 ]
  ! BXOR            [ shift and go to state 98 ]
  ! BAND            [ shift and go to state 102 ]
  ! EQUAL           [ shift and go to state 107 ]
  ! NOTEQUAL        [ shift and go to state 105 ]
  ! GTHAN           [ shift and go to state 103 ]
  ! GTHANEQ         [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 95 ]
  ! LTHANEQ         [ shift and go to state 104 ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 203

    (89) struct -> STRUCT LBRACKET structlist . RBRACKET ID
    (86) structlist -> structlist . var_basic SEMI
    (87) structlist -> structlist . struct
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    RBRACKET        shift and go to state 243
    STRUCT          shift and go to state 11
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    ID              shift and go to state 156
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    struct                         shift and go to state 245
    modifier                       shift and go to state 51
    type_decl                      shift and go to state 77
    var_basic                      shift and go to state 244

state 204

    (84) structlist -> var_basic . SEMI

    SEMI            shift and go to state 246


state 205

    (85) structlist -> struct .

    RBRACKET        reduce using rule 85 (structlist -> struct .)
    STRUCT          reduce using rule 85 (structlist -> struct .)
    INT             reduce using rule 85 (structlist -> struct .)
    FLOAT           reduce using rule 85 (structlist -> struct .)
    BOOL            reduce using rule 85 (structlist -> struct .)
    FLOAT16         reduce using rule 85 (structlist -> struct .)
    DOUBLE          reduce using rule 85 (structlist -> struct .)
    VOID            reduce using rule 85 (structlist -> struct .)
    ID              reduce using rule 85 (structlist -> struct .)
    UNIFORM         reduce using rule 85 (structlist -> struct .)
    ATTRIBUTE       reduce using rule 85 (structlist -> struct .)
    VARYING         reduce using rule 85 (structlist -> struct .)
    INPUT           reduce using rule 85 (structlist -> struct .)
    OUTPUT          reduce using rule 85 (structlist -> struct .)
    HIGHP           reduce using rule 85 (structlist -> struct .)
    MEDIUMP         reduce using rule 85 (structlist -> struct .)
    LOWP            reduce using rule 85 (structlist -> struct .)


state 206

    (88) struct -> STRUCT ID LBRACKET . structlist RBRACKET
    (84) structlist -> . var_basic SEMI
    (85) structlist -> . struct
    (86) structlist -> . structlist var_basic SEMI
    (87) structlist -> . structlist struct
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    STRUCT          shift and go to state 11
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    ID              shift and go to state 156
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    struct                         shift and go to state 205
    modifier                       shift and go to state 51
    type_decl                      shift and go to state 77
    structlist                     shift and go to state 247
    var_basic                      shift and go to state 204

state 207

    (66) assign_expr -> INC assign_expr .
    (62) assign_expr -> assign_expr . DOT assign_expr
    (63) assign_expr -> assign_expr . LSBRACKET expr RSBRACKET
    (64) assign_expr -> assign_expr . INC
    (65) assign_expr -> assign_expr . DEC

    LSBRACKET       reduce using rule 66 (assign_expr -> INC assign_expr .)
    INC             reduce using rule 66 (assign_expr -> INC assign_expr .)
    DEC             reduce using rule 66 (assign_expr -> INC assign_expr .)
    SEMI            reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNPLUS      reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNMINUS     reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNDIVIDE    reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNTIMES     reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNBOR       reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNBAND      reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGNBXOR      reduce using rule 66 (assign_expr -> INC assign_expr .)
    ASSIGN          reduce using rule 66 (assign_expr -> INC assign_expr .)
    RPAREN          reduce using rule 66 (assign_expr -> INC assign_expr .)
    DOT             shift and go to state 118

  ! DOT             [ reduce using rule 66 (assign_expr -> INC assign_expr .) ]
  ! LSBRACKET       [ shift and go to state 130 ]
  ! INC             [ shift and go to state 210 ]
  ! DEC             [ shift and go to state 209 ]


state 208

    (67) assign_expr -> DEC assign_expr .
    (62) assign_expr -> assign_expr . DOT assign_expr
    (63) assign_expr -> assign_expr . LSBRACKET expr RSBRACKET
    (64) assign_expr -> assign_expr . INC
    (65) assign_expr -> assign_expr . DEC

    LSBRACKET       reduce using rule 67 (assign_expr -> DEC assign_expr .)
    INC             reduce using rule 67 (assign_expr -> DEC assign_expr .)
    DEC             reduce using rule 67 (assign_expr -> DEC assign_expr .)
    SEMI            reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNPLUS      reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNMINUS     reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNDIVIDE    reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNTIMES     reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNBOR       reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNBAND      reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGNBXOR      reduce using rule 67 (assign_expr -> DEC assign_expr .)
    ASSIGN          reduce using rule 67 (assign_expr -> DEC assign_expr .)
    RPAREN          reduce using rule 67 (assign_expr -> DEC assign_expr .)
    DOT             shift and go to state 118

  ! DOT             [ reduce using rule 67 (assign_expr -> DEC assign_expr .) ]
  ! LSBRACKET       [ shift and go to state 130 ]
  ! INC             [ shift and go to state 210 ]
  ! DEC             [ shift and go to state 209 ]


state 209

    (65) assign_expr -> assign_expr DEC .

    DOT             reduce using rule 65 (assign_expr -> assign_expr DEC .)
    LSBRACKET       reduce using rule 65 (assign_expr -> assign_expr DEC .)
    INC             reduce using rule 65 (assign_expr -> assign_expr DEC .)
    DEC             reduce using rule 65 (assign_expr -> assign_expr DEC .)
    SEMI            reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNPLUS      reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNMINUS     reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNDIVIDE    reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNTIMES     reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNBOR       reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNBAND      reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGNBXOR      reduce using rule 65 (assign_expr -> assign_expr DEC .)
    ASSIGN          reduce using rule 65 (assign_expr -> assign_expr DEC .)
    RPAREN          reduce using rule 65 (assign_expr -> assign_expr DEC .)


state 210

    (64) assign_expr -> assign_expr INC .

    DOT             reduce using rule 64 (assign_expr -> assign_expr INC .)
    LSBRACKET       reduce using rule 64 (assign_expr -> assign_expr INC .)
    INC             reduce using rule 64 (assign_expr -> assign_expr INC .)
    DEC             reduce using rule 64 (assign_expr -> assign_expr INC .)
    SEMI            reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNPLUS      reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNMINUS     reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNDIVIDE    reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNTIMES     reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNBOR       reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNBAND      reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGNBXOR      reduce using rule 64 (assign_expr -> assign_expr INC .)
    ASSIGN          reduce using rule 64 (assign_expr -> assign_expr INC .)
    RPAREN          reduce using rule 64 (assign_expr -> assign_expr INC .)


state 211

    (62) assign_expr -> assign_expr DOT assign_expr .
    (62) assign_expr -> assign_expr . DOT assign_expr
    (63) assign_expr -> assign_expr . LSBRACKET expr RSBRACKET
    (64) assign_expr -> assign_expr . INC
    (65) assign_expr -> assign_expr . DEC

    INC             reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    DEC             reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    DOT             reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    LSBRACKET       reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    ASSIGNPLUS      reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    ASSIGNMINUS     reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    ASSIGNDIVIDE    reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    ASSIGNTIMES     reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    ASSIGNBOR       reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    ASSIGNBAND      reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    ASSIGNBXOR      reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    ASSIGN          reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    SEMI            reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)
    RPAREN          reduce using rule 62 (assign_expr -> assign_expr DOT assign_expr .)

  ! DOT             [ shift and go to state 118 ]
  ! LSBRACKET       [ shift and go to state 130 ]
  ! INC             [ shift and go to state 210 ]
  ! DEC             [ shift and go to state 209 ]


state 212

    (68) assign -> assign_expr cmplx_assign expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    SEMI            reduce using rule 68 (assign -> assign_expr cmplx_assign expr .)
    ASSIGNPLUS      reduce using rule 68 (assign -> assign_expr cmplx_assign expr .)
    ASSIGNMINUS     reduce using rule 68 (assign -> assign_expr cmplx_assign expr .)
    ASSIGNDIVIDE    reduce using rule 68 (assign -> assign_expr cmplx_assign expr .)
    ASSIGNTIMES     reduce using rule 68 (assign -> assign_expr cmplx_assign expr .)
    ASSIGNBOR       reduce using rule 68 (assign -> assign_expr cmplx_assign expr .)
    ASSIGNBAND      reduce using rule 68 (assign -> assign_expr cmplx_assign expr .)
    ASSIGNBXOR      reduce using rule 68 (assign -> assign_expr cmplx_assign expr .)
    ASSIGN          reduce using rule 68 (assign -> assign_expr cmplx_assign expr .)
    RPAREN          reduce using rule 68 (assign -> assign_expr cmplx_assign expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 213

    (63) assign_expr -> assign_expr LSBRACKET expr . RSBRACKET
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    RSBRACKET       shift and go to state 248
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 214

    (149) assign_expr2 -> ID .
    (119) expr -> ID .

  ! reduce/reduce conflict for DOT resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LAND resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LOR resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for BOR resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for BXOR resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for BAND resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for EQUAL resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for GTHAN resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for GTHANEQ resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LTHAN resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LTHANEQ resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for QEST resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for INC resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for DEC resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LPAREN resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for SEMI resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for RSBRACKET resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNPLUS resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNMINUS resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNDIVIDE resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNTIMES resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNBOR resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNBAND resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGNBXOR resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 119 (expr -> ID .)
    DOT             reduce using rule 119 (expr -> ID .)
    LAND            reduce using rule 119 (expr -> ID .)
    LOR             reduce using rule 119 (expr -> ID .)
    BOR             reduce using rule 119 (expr -> ID .)
    BXOR            reduce using rule 119 (expr -> ID .)
    BAND            reduce using rule 119 (expr -> ID .)
    EQUAL           reduce using rule 119 (expr -> ID .)
    NOTEQUAL        reduce using rule 119 (expr -> ID .)
    GTHAN           reduce using rule 119 (expr -> ID .)
    GTHANEQ         reduce using rule 119 (expr -> ID .)
    LTHAN           reduce using rule 119 (expr -> ID .)
    MOD             reduce using rule 119 (expr -> ID .)
    LTHANEQ         reduce using rule 119 (expr -> ID .)
    PLUS            reduce using rule 119 (expr -> ID .)
    MINUS           reduce using rule 119 (expr -> ID .)
    DIVIDE          reduce using rule 119 (expr -> ID .)
    TIMES           reduce using rule 119 (expr -> ID .)
    LSBRACKET       reduce using rule 119 (expr -> ID .)
    QEST            reduce using rule 119 (expr -> ID .)
    INC             reduce using rule 119 (expr -> ID .)
    DEC             reduce using rule 119 (expr -> ID .)
    LPAREN          reduce using rule 119 (expr -> ID .)
    SEMI            reduce using rule 119 (expr -> ID .)
    RPAREN          reduce using rule 119 (expr -> ID .)
    RSBRACKET       reduce using rule 119 (expr -> ID .)
    COMMA           reduce using rule 119 (expr -> ID .)
    COLON           reduce using rule 119 (expr -> ID .)
    ASSIGNPLUS      reduce using rule 119 (expr -> ID .)
    ASSIGNMINUS     reduce using rule 119 (expr -> ID .)
    ASSIGNDIVIDE    reduce using rule 119 (expr -> ID .)
    ASSIGNTIMES     reduce using rule 119 (expr -> ID .)
    ASSIGNBOR       reduce using rule 119 (expr -> ID .)
    ASSIGNBAND      reduce using rule 119 (expr -> ID .)
    ASSIGNBXOR      reduce using rule 119 (expr -> ID .)
    ASSIGN          reduce using rule 119 (expr -> ID .)
    RBRACKET        reduce using rule 119 (expr -> ID .)

  ! DOT             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LSBRACKET       [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! INC             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DEC             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNPLUS      [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNMINUS     [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNTIMES     [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNBOR       [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNBAND      [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGNBXOR      [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGN          [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LAND            [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LOR             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! BOR             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! BXOR            [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! BAND            [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! EQUAL           [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! NOTEQUAL        [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! GTHAN           [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! GTHANEQ         [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LTHAN           [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! MOD             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LTHANEQ         [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! PLUS            [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! MINUS           [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DIVIDE          [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! TIMES           [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! QEST            [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LPAREN          [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! SEMI            [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! RPAREN          [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! RSBRACKET       [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! COMMA           [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! COLON           [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! RBRACKET        [ reduce using rule 149 (assign_expr2 -> ID .) ]


state 215

    (104) obj_lit_list -> ID COLON . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 249
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 216

    (105) obj_lit_list -> obj_lit_list COMMA . ID COLON expr

    ID              shift and go to state 250


state 217

    (106) obj_literal -> LBRACKET obj_lit_list RBRACKET .

    DOT             reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    LAND            reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    LOR             reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    BOR             reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    BXOR            reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    BAND            reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    EQUAL           reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    NOTEQUAL        reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    GTHAN           reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    GTHANEQ         reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    LTHAN           reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    MOD             reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    LTHANEQ         reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    PLUS            reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    MINUS           reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    DIVIDE          reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    TIMES           reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    LSBRACKET       reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    QEST            reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    INC             reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    DEC             reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    LPAREN          reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    SEMI            reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    RPAREN          reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    RSBRACKET       reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    COMMA           reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    COLON           reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    ASSIGNPLUS      reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    ASSIGNMINUS     reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    ASSIGNDIVIDE    reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    ASSIGNTIMES     reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    ASSIGNBOR       reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    ASSIGNBAND      reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    ASSIGNBXOR      reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    ASSIGN          reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)
    RBRACKET        reduce using rule 106 (obj_literal -> LBRACKET obj_lit_list RBRACKET .)


state 218

    (153) assign2 -> assign2 cmplx_assign expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for QEST resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    SEMI            reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    RPAREN          reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    RSBRACKET       reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    COMMA           reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    COLON           reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    ASSIGNPLUS      reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    ASSIGNMINUS     reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    ASSIGNDIVIDE    reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    ASSIGNTIMES     reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    ASSIGNBOR       reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    ASSIGNBAND      reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    ASSIGNBXOR      reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    ASSIGN          reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    RBRACKET        reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! LAND            [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! LOR             [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! BOR             [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! BXOR            [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! BAND            [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! EQUAL           [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! NOTEQUAL        [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! GTHAN           [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! GTHANEQ         [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! LTHAN           [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! MOD             [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! LTHANEQ         [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! PLUS            [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! MINUS           [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! DIVIDE          [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! TIMES           [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! LSBRACKET       [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! QEST            [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! INC             [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! DEC             [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]
  ! LPAREN          [ reduce using rule 153 (assign2 -> assign2 cmplx_assign expr .) ]

    func_call                      shift and go to state 97

state 219

    (139) expr -> LPAREN expr RPAREN .

    DOT             reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    LAND            reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    LOR             reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    BOR             reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    BXOR            reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    BAND            reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    NOTEQUAL        reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    GTHAN           reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    GTHANEQ         reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    LTHAN           reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    LTHANEQ         reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    LSBRACKET       reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    QEST            reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    INC             reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    DEC             reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    RSBRACKET       reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    ASSIGNPLUS      reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    ASSIGNMINUS     reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    ASSIGNDIVIDE    reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    ASSIGNTIMES     reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    ASSIGNBOR       reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    ASSIGNBAND      reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    ASSIGNBXOR      reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    ASSIGN          reduce using rule 139 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 139 (expr -> LPAREN expr RPAREN .)


state 220

    (69) assign -> assign cmplx_assign expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    SEMI            reduce using rule 69 (assign -> assign cmplx_assign expr .)
    ASSIGNPLUS      reduce using rule 69 (assign -> assign cmplx_assign expr .)
    ASSIGNMINUS     reduce using rule 69 (assign -> assign cmplx_assign expr .)
    ASSIGNDIVIDE    reduce using rule 69 (assign -> assign cmplx_assign expr .)
    ASSIGNTIMES     reduce using rule 69 (assign -> assign cmplx_assign expr .)
    ASSIGNBOR       reduce using rule 69 (assign -> assign cmplx_assign expr .)
    ASSIGNBAND      reduce using rule 69 (assign -> assign cmplx_assign expr .)
    ASSIGNBXOR      reduce using rule 69 (assign -> assign cmplx_assign expr .)
    ASSIGN          reduce using rule 69 (assign -> assign cmplx_assign expr .)
    RPAREN          reduce using rule 69 (assign -> assign cmplx_assign expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 221

    (52) var_decl -> var_basic ASSIGN expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    SEMI            reduce using rule 52 (var_decl -> var_basic ASSIGN expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 222

    (75) exprlist -> ID ASSIGN . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 251
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 223

    (76) exprlist -> exprlist COMMA . expr
    (77) exprlist -> exprlist COMMA . ID ASSIGN expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    ID              shift and go to state 253
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 252
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 224

    (102) array_literal -> LSBRACKET exprlist RSBRACKET .

    DOT             reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LAND            reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LOR             reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BOR             reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BXOR            reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BAND            reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    EQUAL           reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    NOTEQUAL        reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    GTHAN           reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    GTHANEQ         reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LTHAN           reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    MOD             reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LTHANEQ         reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    PLUS            reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    MINUS           reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DIVIDE          reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    TIMES           reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LSBRACKET       reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    QEST            reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    INC             reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DEC             reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LPAREN          reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    SEMI            reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RPAREN          reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RSBRACKET       reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    COMMA           reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    COLON           reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNPLUS      reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNMINUS     reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNTIMES     reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNBOR       reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNBAND      reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNBXOR      reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGN          reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RBRACKET        reduce using rule 102 (array_literal -> LSBRACKET exprlist RSBRACKET .)


state 225

    (49) var_basic -> type_decl ID arr_decl .
    (47) arr_decl -> arr_decl . LSBRACKET NUMBER RSBRACKET
    (48) arr_decl -> arr_decl . LSBRACKET RSBRACKET

    ASSIGN          reduce using rule 49 (var_basic -> type_decl ID arr_decl .)
    SEMI            reduce using rule 49 (var_basic -> type_decl ID arr_decl .)
    LSBRACKET       shift and go to state 254


state 226

    (90) function -> type_decl ID LPAREN . funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> type_decl ID LPAREN . RPAREN LBRACKET statementlist RBRACKET
    (92) function -> type_decl ID LPAREN . funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> type_decl ID LPAREN . RPAREN COLON ID LBRACKET statementlist RBRACKET
    (80) funcdeflist -> . type_decl ID
    (81) funcdeflist -> . type_decl ID arr_decl
    (82) funcdeflist -> . funcdeflist COMMA type_decl ID arr_decl
    (83) funcdeflist -> . funcdeflist COMMA type_decl ID
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    RPAREN          shift and go to state 257
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    ID              shift and go to state 156
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    type_decl                      shift and go to state 256
    funcdeflist                    shift and go to state 255
    modifier                       shift and go to state 51

state 227

    (45) arr_decl -> LSBRACKET . NUMBER RSBRACKET
    (46) arr_decl -> LSBRACKET . RSBRACKET

    NUMBER          shift and go to state 258
    RSBRACKET       shift and go to state 259


state 228

    (160) paren_expr -> LPAREN RPAREN .

    LBRACKET        reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    SEMI            reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    INC             reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    DEC             reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    IF              reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    ELSE            reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    FOR             reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    RETURN          reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    BREAK           reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    STRUCT          reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    ID              reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    INT             reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    FLOAT           reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    BOOL            reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    FLOAT16         reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    DOUBLE          reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    VOID            reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    UNIFORM         reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    ATTRIBUTE       reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    VARYING         reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    INPUT           reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    OUTPUT          reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    HIGHP           reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    MEDIUMP         reduce using rule 160 (paren_expr -> LPAREN RPAREN .)
    LOWP            reduce using rule 160 (paren_expr -> LPAREN RPAREN .)


state 229

    (159) paren_expr -> LPAREN expr . RPAREN
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    RPAREN          shift and go to state 260
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 230

    (165) if -> IF paren_expr LBRACKET . statementlist RBRACKET
    (1) statementlist -> . statement
    (2) statementlist -> . statement_local
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    statementlist                  shift and go to state 261
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 55
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 65
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 231

    (164) if -> IF paren_expr statement_local .

    SEMI            reduce using rule 164 (if -> IF paren_expr statement_local .)
    IF              reduce using rule 164 (if -> IF paren_expr statement_local .)
    BUILTIN         reduce using rule 164 (if -> IF paren_expr statement_local .)
    ELSE            reduce using rule 164 (if -> IF paren_expr statement_local .)
    FOR             reduce using rule 164 (if -> IF paren_expr statement_local .)
    NUMBER          reduce using rule 164 (if -> IF paren_expr statement_local .)
    TRUE            reduce using rule 164 (if -> IF paren_expr statement_local .)
    FALSE           reduce using rule 164 (if -> IF paren_expr statement_local .)
    ID              reduce using rule 164 (if -> IF paren_expr statement_local .)
    LPAREN          reduce using rule 164 (if -> IF paren_expr statement_local .)
    RETURN          reduce using rule 164 (if -> IF paren_expr statement_local .)
    BREAK           reduce using rule 164 (if -> IF paren_expr statement_local .)
    CONTINUE        reduce using rule 164 (if -> IF paren_expr statement_local .)
    STRUCT          reduce using rule 164 (if -> IF paren_expr statement_local .)
    INC             reduce using rule 164 (if -> IF paren_expr statement_local .)
    DEC             reduce using rule 164 (if -> IF paren_expr statement_local .)
    INT             reduce using rule 164 (if -> IF paren_expr statement_local .)
    FLOAT           reduce using rule 164 (if -> IF paren_expr statement_local .)
    BOOL            reduce using rule 164 (if -> IF paren_expr statement_local .)
    FLOAT16         reduce using rule 164 (if -> IF paren_expr statement_local .)
    DOUBLE          reduce using rule 164 (if -> IF paren_expr statement_local .)
    VOID            reduce using rule 164 (if -> IF paren_expr statement_local .)
    STRINGLIT       reduce using rule 164 (if -> IF paren_expr statement_local .)
    LSBRACKET       reduce using rule 164 (if -> IF paren_expr statement_local .)
    LBRACKET        reduce using rule 164 (if -> IF paren_expr statement_local .)
    MINUS           reduce using rule 164 (if -> IF paren_expr statement_local .)
    NOT             reduce using rule 164 (if -> IF paren_expr statement_local .)
    NEW             reduce using rule 164 (if -> IF paren_expr statement_local .)
    UNIFORM         reduce using rule 164 (if -> IF paren_expr statement_local .)
    ATTRIBUTE       reduce using rule 164 (if -> IF paren_expr statement_local .)
    VARYING         reduce using rule 164 (if -> IF paren_expr statement_local .)
    INPUT           reduce using rule 164 (if -> IF paren_expr statement_local .)
    OUTPUT          reduce using rule 164 (if -> IF paren_expr statement_local .)
    HIGHP           reduce using rule 164 (if -> IF paren_expr statement_local .)
    MEDIUMP         reduce using rule 164 (if -> IF paren_expr statement_local .)
    LOWP            reduce using rule 164 (if -> IF paren_expr statement_local .)
    $end            reduce using rule 164 (if -> IF paren_expr statement_local .)
    RBRACKET        reduce using rule 164 (if -> IF paren_expr statement_local .)


state 232

    (98) builtin_func -> BUILTIN type_decl ID . ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> BUILTIN type_decl ID . ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> BUILTIN type_decl ID . arr_decl
    (101) builtin_global -> BUILTIN type_decl ID .
    (45) arr_decl -> . LSBRACKET NUMBER RSBRACKET
    (46) arr_decl -> . LSBRACKET RSBRACKET
    (47) arr_decl -> . arr_decl LSBRACKET NUMBER RSBRACKET
    (48) arr_decl -> . arr_decl LSBRACKET RSBRACKET

    ASSIGN          shift and go to state 263
    SEMI            reduce using rule 101 (builtin_global -> BUILTIN type_decl ID .)
    LSBRACKET       shift and go to state 227

    arr_decl                       shift and go to state 262

state 233

    (162) for -> FOR LPAREN for_decl . RPAREN statement_local
    (163) for -> FOR LPAREN for_decl . RPAREN LBRACKET statementlist RBRACKET

    RPAREN          shift and go to state 264


state 234

    (161) for_decl -> var_decl . SEMI expr SEMI assign

    SEMI            shift and go to state 265


state 235

    (150) assign_expr2 -> assign_expr2 DOT assign_expr2 .
    (150) assign_expr2 -> assign_expr2 . DOT assign_expr2
    (151) assign_expr2 -> assign_expr2 . LSBRACKET expr RSBRACKET

    INC             reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    DEC             reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    DOT             reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    LSBRACKET       reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    ASSIGNPLUS      reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    ASSIGNMINUS     reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    ASSIGNDIVIDE    reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    ASSIGNTIMES     reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    ASSIGNBOR       reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    ASSIGNBAND      reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    ASSIGNBXOR      reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    ASSIGN          reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    LAND            reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    LOR             reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    BOR             reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    BXOR            reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    BAND            reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    EQUAL           reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    NOTEQUAL        reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    GTHAN           reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    GTHANEQ         reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    LTHAN           reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    MOD             reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    LTHANEQ         reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    PLUS            reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    MINUS           reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    DIVIDE          reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    TIMES           reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    QEST            reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    LPAREN          reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    SEMI            reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    RPAREN          reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    RSBRACKET       reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    COMMA           reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    COLON           reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)
    RBRACKET        reduce using rule 150 (assign_expr2 -> assign_expr2 DOT assign_expr2 .)

  ! DOT             [ shift and go to state 166 ]
  ! LSBRACKET       [ shift and go to state 170 ]


state 236

    (149) assign_expr2 -> ID .

    DOT             reduce using rule 149 (assign_expr2 -> ID .)
    LSBRACKET       reduce using rule 149 (assign_expr2 -> ID .)
    INC             reduce using rule 149 (assign_expr2 -> ID .)
    DEC             reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNPLUS      reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNMINUS     reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNDIVIDE    reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNTIMES     reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNBOR       reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNBAND      reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNBXOR      reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGN          reduce using rule 149 (assign_expr2 -> ID .)
    SEMI            reduce using rule 149 (assign_expr2 -> ID .)
    LAND            reduce using rule 149 (assign_expr2 -> ID .)
    LOR             reduce using rule 149 (assign_expr2 -> ID .)
    BOR             reduce using rule 149 (assign_expr2 -> ID .)
    BXOR            reduce using rule 149 (assign_expr2 -> ID .)
    BAND            reduce using rule 149 (assign_expr2 -> ID .)
    EQUAL           reduce using rule 149 (assign_expr2 -> ID .)
    NOTEQUAL        reduce using rule 149 (assign_expr2 -> ID .)
    GTHAN           reduce using rule 149 (assign_expr2 -> ID .)
    GTHANEQ         reduce using rule 149 (assign_expr2 -> ID .)
    LTHAN           reduce using rule 149 (assign_expr2 -> ID .)
    MOD             reduce using rule 149 (assign_expr2 -> ID .)
    LTHANEQ         reduce using rule 149 (assign_expr2 -> ID .)
    PLUS            reduce using rule 149 (assign_expr2 -> ID .)
    MINUS           reduce using rule 149 (assign_expr2 -> ID .)
    DIVIDE          reduce using rule 149 (assign_expr2 -> ID .)
    TIMES           reduce using rule 149 (assign_expr2 -> ID .)
    QEST            reduce using rule 149 (assign_expr2 -> ID .)
    LPAREN          reduce using rule 149 (assign_expr2 -> ID .)
    RPAREN          reduce using rule 149 (assign_expr2 -> ID .)
    RSBRACKET       reduce using rule 149 (assign_expr2 -> ID .)
    COMMA           reduce using rule 149 (assign_expr2 -> ID .)
    COLON           reduce using rule 149 (assign_expr2 -> ID .)
    RBRACKET        reduce using rule 149 (assign_expr2 -> ID .)


state 237

    (152) assign2 -> assign_expr2 cmplx_assign expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for QEST resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    SEMI            reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    RPAREN          reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    RSBRACKET       reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    COMMA           reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    COLON           reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    ASSIGNPLUS      reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    ASSIGNMINUS     reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    ASSIGNDIVIDE    reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    ASSIGNTIMES     reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    ASSIGNBOR       reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    ASSIGNBAND      reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    ASSIGNBXOR      reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    ASSIGN          reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    RBRACKET        reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! LAND            [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! LOR             [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! BOR             [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! BXOR            [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! BAND            [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! EQUAL           [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! NOTEQUAL        [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! GTHAN           [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! GTHANEQ         [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! LTHAN           [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! MOD             [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! LTHANEQ         [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! PLUS            [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! MINUS           [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! DIVIDE          [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! TIMES           [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! LSBRACKET       [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! QEST            [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! INC             [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! DEC             [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]
  ! LPAREN          [ reduce using rule 152 (assign2 -> assign_expr2 cmplx_assign expr .) ]

    func_call                      shift and go to state 97

state 238

    (151) assign_expr2 -> assign_expr2 LSBRACKET expr . RSBRACKET
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    RSBRACKET       shift and go to state 266
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 239

    (167) else -> ELSE LBRACKET statementlist RBRACKET .

    SEMI            reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    BUILTIN         reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    TRUE            reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    FALSE           reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    STRUCT          reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    INT             reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    FLOAT           reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    BOOL            reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    FLOAT16         reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    DOUBLE          reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    VOID            reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    UNIFORM         reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    ATTRIBUTE       reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    VARYING         reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    INPUT           reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    OUTPUT          reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    HIGHP           reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    MEDIUMP         reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    LOWP            reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)
    RBRACKET        reduce using rule 167 (else -> ELSE LBRACKET statementlist RBRACKET .)


state 240

    (78) func_call -> LPAREN exprlist RPAREN .

    RPAREN          reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    DOT             reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    LAND            reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    LOR             reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    BOR             reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    BXOR            reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    BAND            reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    EQUAL           reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    NOTEQUAL        reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    GTHAN           reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    GTHANEQ         reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    LTHAN           reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    MOD             reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    LTHANEQ         reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    PLUS            reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    LSBRACKET       reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    QEST            reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    INC             reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    DEC             reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    LPAREN          reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    SEMI            reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    RSBRACKET       reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    COLON           reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    ASSIGNPLUS      reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    ASSIGNMINUS     reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    ASSIGNDIVIDE    reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    ASSIGNTIMES     reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    ASSIGNBOR       reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    ASSIGNBAND      reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    ASSIGNBXOR      reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    ASSIGN          reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 78 (func_call -> LPAREN exprlist RPAREN .)


state 241

    (142) expr -> expr QEST expr COLON . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 267
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 242

    (141) expr -> expr LSBRACKET expr RSBRACKET .

    DOT             reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    LAND            reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    LOR             reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    BOR             reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    BXOR            reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    BAND            reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    EQUAL           reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    NOTEQUAL        reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    GTHAN           reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    GTHANEQ         reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    LTHAN           reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    MOD             reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    LTHANEQ         reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    PLUS            reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    MINUS           reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    DIVIDE          reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    TIMES           reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    LSBRACKET       reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    QEST            reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    INC             reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    DEC             reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    LPAREN          reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    SEMI            reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    RPAREN          reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    RSBRACKET       reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    COMMA           reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    COLON           reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    ASSIGNPLUS      reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    ASSIGNMINUS     reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    ASSIGNTIMES     reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    ASSIGNBOR       reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    ASSIGNBAND      reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    ASSIGNBXOR      reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    ASSIGN          reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)
    RBRACKET        reduce using rule 141 (expr -> expr LSBRACKET expr RSBRACKET .)


state 243

    (89) struct -> STRUCT LBRACKET structlist RBRACKET . ID

    ID              shift and go to state 268


state 244

    (86) structlist -> structlist var_basic . SEMI

    SEMI            shift and go to state 269


state 245

    (87) structlist -> structlist struct .

    RBRACKET        reduce using rule 87 (structlist -> structlist struct .)
    STRUCT          reduce using rule 87 (structlist -> structlist struct .)
    INT             reduce using rule 87 (structlist -> structlist struct .)
    FLOAT           reduce using rule 87 (structlist -> structlist struct .)
    BOOL            reduce using rule 87 (structlist -> structlist struct .)
    FLOAT16         reduce using rule 87 (structlist -> structlist struct .)
    DOUBLE          reduce using rule 87 (structlist -> structlist struct .)
    VOID            reduce using rule 87 (structlist -> structlist struct .)
    ID              reduce using rule 87 (structlist -> structlist struct .)
    UNIFORM         reduce using rule 87 (structlist -> structlist struct .)
    ATTRIBUTE       reduce using rule 87 (structlist -> structlist struct .)
    VARYING         reduce using rule 87 (structlist -> structlist struct .)
    INPUT           reduce using rule 87 (structlist -> structlist struct .)
    OUTPUT          reduce using rule 87 (structlist -> structlist struct .)
    HIGHP           reduce using rule 87 (structlist -> structlist struct .)
    MEDIUMP         reduce using rule 87 (structlist -> structlist struct .)
    LOWP            reduce using rule 87 (structlist -> structlist struct .)


state 246

    (84) structlist -> var_basic SEMI .

    RBRACKET        reduce using rule 84 (structlist -> var_basic SEMI .)
    STRUCT          reduce using rule 84 (structlist -> var_basic SEMI .)
    INT             reduce using rule 84 (structlist -> var_basic SEMI .)
    FLOAT           reduce using rule 84 (structlist -> var_basic SEMI .)
    BOOL            reduce using rule 84 (structlist -> var_basic SEMI .)
    FLOAT16         reduce using rule 84 (structlist -> var_basic SEMI .)
    DOUBLE          reduce using rule 84 (structlist -> var_basic SEMI .)
    VOID            reduce using rule 84 (structlist -> var_basic SEMI .)
    ID              reduce using rule 84 (structlist -> var_basic SEMI .)
    UNIFORM         reduce using rule 84 (structlist -> var_basic SEMI .)
    ATTRIBUTE       reduce using rule 84 (structlist -> var_basic SEMI .)
    VARYING         reduce using rule 84 (structlist -> var_basic SEMI .)
    INPUT           reduce using rule 84 (structlist -> var_basic SEMI .)
    OUTPUT          reduce using rule 84 (structlist -> var_basic SEMI .)
    HIGHP           reduce using rule 84 (structlist -> var_basic SEMI .)
    MEDIUMP         reduce using rule 84 (structlist -> var_basic SEMI .)
    LOWP            reduce using rule 84 (structlist -> var_basic SEMI .)


state 247

    (88) struct -> STRUCT ID LBRACKET structlist . RBRACKET
    (86) structlist -> structlist . var_basic SEMI
    (87) structlist -> structlist . struct
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    RBRACKET        shift and go to state 270
    STRUCT          shift and go to state 11
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    ID              shift and go to state 156
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    struct                         shift and go to state 245
    modifier                       shift and go to state 51
    type_decl                      shift and go to state 77
    var_basic                      shift and go to state 244

state 248

    (63) assign_expr -> assign_expr LSBRACKET expr RSBRACKET .

    INC             reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    DEC             reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    DOT             reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    LSBRACKET       reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    ASSIGNPLUS      reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    ASSIGNMINUS     reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    ASSIGNTIMES     reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    ASSIGNBOR       reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    ASSIGNBAND      reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    ASSIGNBXOR      reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    ASSIGN          reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    SEMI            reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)
    RPAREN          reduce using rule 63 (assign_expr -> assign_expr LSBRACKET expr RSBRACKET .)


state 249

    (104) obj_lit_list -> ID COLON expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    RBRACKET        reduce using rule 104 (obj_lit_list -> ID COLON expr .)
    COMMA           reduce using rule 104 (obj_lit_list -> ID COLON expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 250

    (105) obj_lit_list -> obj_lit_list COMMA ID . COLON expr

    COLON           shift and go to state 271


state 251

    (75) exprlist -> ID ASSIGN expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    RSBRACKET       reduce using rule 75 (exprlist -> ID ASSIGN expr .)
    COMMA           reduce using rule 75 (exprlist -> ID ASSIGN expr .)
    RPAREN          reduce using rule 75 (exprlist -> ID ASSIGN expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 252

    (76) exprlist -> exprlist COMMA expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    RSBRACKET       reduce using rule 76 (exprlist -> exprlist COMMA expr .)
    COMMA           reduce using rule 76 (exprlist -> exprlist COMMA expr .)
    RPAREN          reduce using rule 76 (exprlist -> exprlist COMMA expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 253

    (77) exprlist -> exprlist COMMA ID . ASSIGN expr
    (119) expr -> ID .
    (149) assign_expr2 -> ID .

  ! reduce/reduce conflict for INC resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for DEC resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for DOT resolved using rule 119 (expr -> ID .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 119 (expr -> ID .)
  ! shift/reduce conflict for ASSIGN resolved as shift
    ASSIGN          shift and go to state 272
    DOT             reduce using rule 119 (expr -> ID .)
    LAND            reduce using rule 119 (expr -> ID .)
    LOR             reduce using rule 119 (expr -> ID .)
    BOR             reduce using rule 119 (expr -> ID .)
    BXOR            reduce using rule 119 (expr -> ID .)
    BAND            reduce using rule 119 (expr -> ID .)
    EQUAL           reduce using rule 119 (expr -> ID .)
    NOTEQUAL        reduce using rule 119 (expr -> ID .)
    GTHAN           reduce using rule 119 (expr -> ID .)
    GTHANEQ         reduce using rule 119 (expr -> ID .)
    LTHAN           reduce using rule 119 (expr -> ID .)
    MOD             reduce using rule 119 (expr -> ID .)
    LTHANEQ         reduce using rule 119 (expr -> ID .)
    PLUS            reduce using rule 119 (expr -> ID .)
    MINUS           reduce using rule 119 (expr -> ID .)
    DIVIDE          reduce using rule 119 (expr -> ID .)
    TIMES           reduce using rule 119 (expr -> ID .)
    LSBRACKET       reduce using rule 119 (expr -> ID .)
    QEST            reduce using rule 119 (expr -> ID .)
    INC             reduce using rule 119 (expr -> ID .)
    DEC             reduce using rule 119 (expr -> ID .)
    LPAREN          reduce using rule 119 (expr -> ID .)
    RSBRACKET       reduce using rule 119 (expr -> ID .)
    COMMA           reduce using rule 119 (expr -> ID .)
    RPAREN          reduce using rule 119 (expr -> ID .)
    ASSIGNPLUS      reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNMINUS     reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNDIVIDE    reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNTIMES     reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNBOR       reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNBAND      reduce using rule 149 (assign_expr2 -> ID .)
    ASSIGNBXOR      reduce using rule 149 (assign_expr2 -> ID .)

  ! INC             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DEC             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! DOT             [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! LSBRACKET       [ reduce using rule 149 (assign_expr2 -> ID .) ]
  ! ASSIGN          [ reduce using rule 149 (assign_expr2 -> ID .) ]


state 254

    (47) arr_decl -> arr_decl LSBRACKET . NUMBER RSBRACKET
    (48) arr_decl -> arr_decl LSBRACKET . RSBRACKET

    NUMBER          shift and go to state 273
    RSBRACKET       shift and go to state 274


state 255

    (90) function -> type_decl ID LPAREN funcdeflist . RPAREN LBRACKET statementlist RBRACKET
    (92) function -> type_decl ID LPAREN funcdeflist . RPAREN COLON ID LBRACKET statementlist RBRACKET
    (82) funcdeflist -> funcdeflist . COMMA type_decl ID arr_decl
    (83) funcdeflist -> funcdeflist . COMMA type_decl ID

    RPAREN          shift and go to state 275
    COMMA           shift and go to state 276


state 256

    (80) funcdeflist -> type_decl . ID
    (81) funcdeflist -> type_decl . ID arr_decl

    ID              shift and go to state 277


state 257

    (91) function -> type_decl ID LPAREN RPAREN . LBRACKET statementlist RBRACKET
    (93) function -> type_decl ID LPAREN RPAREN . COLON ID LBRACKET statementlist RBRACKET

    LBRACKET        shift and go to state 278
    COLON           shift and go to state 279


state 258

    (45) arr_decl -> LSBRACKET NUMBER . RSBRACKET

    RSBRACKET       shift and go to state 280


state 259

    (46) arr_decl -> LSBRACKET RSBRACKET .

    LSBRACKET       reduce using rule 46 (arr_decl -> LSBRACKET RSBRACKET .)
    SEMI            reduce using rule 46 (arr_decl -> LSBRACKET RSBRACKET .)
    ASSIGN          reduce using rule 46 (arr_decl -> LSBRACKET RSBRACKET .)
    RPAREN          reduce using rule 46 (arr_decl -> LSBRACKET RSBRACKET .)
    COMMA           reduce using rule 46 (arr_decl -> LSBRACKET RSBRACKET .)


state 260

    (159) paren_expr -> LPAREN expr RPAREN .

    LBRACKET        reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    INC             reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    DEC             reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    FOR             reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    STRUCT          reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    ID              reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    INT             reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    FLOAT           reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    BOOL            reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    FLOAT16         reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    DOUBLE          reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    VOID            reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    UNIFORM         reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    ATTRIBUTE       reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    VARYING         reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    INPUT           reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    OUTPUT          reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    HIGHP           reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    MEDIUMP         reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)
    LOWP            reduce using rule 159 (paren_expr -> LPAREN expr RPAREN .)


state 261

    (165) if -> IF paren_expr LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    RBRACKET        shift and go to state 281
    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 139
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 140
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 262

    (100) builtin_global -> BUILTIN type_decl ID arr_decl .
    (47) arr_decl -> arr_decl . LSBRACKET NUMBER RSBRACKET
    (48) arr_decl -> arr_decl . LSBRACKET RSBRACKET

    SEMI            reduce using rule 100 (builtin_global -> BUILTIN type_decl ID arr_decl .)
    LSBRACKET       shift and go to state 254


state 263

    (98) builtin_func -> BUILTIN type_decl ID ASSIGN . builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> BUILTIN type_decl ID ASSIGN . builtin_id LPAREN RPAREN
    (94) builtin_id -> . ID
    (95) builtin_id -> . FLOAT
    (96) builtin_id -> . INT
    (97) builtin_id -> . BOOL

    ID              shift and go to state 283
    FLOAT           shift and go to state 286
    INT             shift and go to state 285
    BOOL            shift and go to state 282

    builtin_id                     shift and go to state 284

state 264

    (162) for -> FOR LPAREN for_decl RPAREN . statement_local
    (163) for -> FOR LPAREN for_decl RPAREN . LBRACKET statementlist RBRACKET
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    LBRACKET        shift and go to state 288
    SEMI            shift and go to state 80
    INC             shift and go to state 78
    DEC             shift and go to state 75
    IF              shift and go to state 54
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    ID              shift and go to state 73
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    return                         shift and go to state 76
    else                           shift and go to state 67
    continue                       shift and go to state 71
    assign                         shift and go to state 70
    if                             shift and go to state 79
    break                          shift and go to state 81
    for                            shift and go to state 72
    struct                         shift and go to state 69
    modifier                       shift and go to state 51
    type_decl                      shift and go to state 77
    statement_local                shift and go to state 287
    assign_expr                    shift and go to state 20
    var_basic                      shift and go to state 45
    var_decl                       shift and go to state 82

state 265

    (161) for_decl -> var_decl SEMI . expr SEMI assign
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    new                            shift and go to state 50
    expr                           shift and go to state 289
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    inc                            shift and go to state 28
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 266

    (151) assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .

    INC             reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    DEC             reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    DOT             reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    LSBRACKET       reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    ASSIGNPLUS      reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    ASSIGNMINUS     reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    ASSIGNTIMES     reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    ASSIGNBOR       reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    ASSIGNBAND      reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    ASSIGNBXOR      reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    ASSIGN          reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    LAND            reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    LOR             reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    BOR             reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    BXOR            reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    BAND            reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    EQUAL           reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    NOTEQUAL        reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    GTHAN           reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    GTHANEQ         reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    LTHAN           reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    MOD             reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    LTHANEQ         reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    PLUS            reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    MINUS           reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    DIVIDE          reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    TIMES           reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    QEST            reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    LPAREN          reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    SEMI            reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    RPAREN          reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    RSBRACKET       reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    COMMA           reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    COLON           reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)
    RBRACKET        reduce using rule 151 (assign_expr2 -> assign_expr2 LSBRACKET expr RSBRACKET .)


state 267

    (142) expr -> expr QEST expr COLON expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    QEST            reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    SEMI            reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    RPAREN          reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    RSBRACKET       reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    COMMA           reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    COLON           reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    ASSIGNPLUS      reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    ASSIGNMINUS     reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    ASSIGNDIVIDE    reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    ASSIGNTIMES     reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    ASSIGNBOR       reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    ASSIGNBAND      reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    ASSIGNBXOR      reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    ASSIGN          reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    RBRACKET        reduce using rule 142 (expr -> expr QEST expr COLON expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

  ! DOT             [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! LAND            [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! LOR             [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! BOR             [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! BXOR            [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! BAND            [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! EQUAL           [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! NOTEQUAL        [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! GTHAN           [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! GTHANEQ         [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! LTHAN           [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! MOD             [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! LTHANEQ         [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! PLUS            [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! MINUS           [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! TIMES           [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! LSBRACKET       [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! INC             [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! DEC             [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! LPAREN          [ reduce using rule 142 (expr -> expr QEST expr COLON expr .) ]
  ! QEST            [ shift and go to state 96 ]

    func_call                      shift and go to state 97

state 268

    (89) struct -> STRUCT LBRACKET structlist RBRACKET ID .

    SEMI            reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    RBRACKET        reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    STRUCT          reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    INT             reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    FLOAT           reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    BOOL            reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    FLOAT16         reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    DOUBLE          reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    VOID            reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    ID              reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    UNIFORM         reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    ATTRIBUTE       reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    VARYING         reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    INPUT           reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    OUTPUT          reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    HIGHP           reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    MEDIUMP         reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)
    LOWP            reduce using rule 89 (struct -> STRUCT LBRACKET structlist RBRACKET ID .)


state 269

    (86) structlist -> structlist var_basic SEMI .

    RBRACKET        reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    STRUCT          reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    INT             reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    FLOAT           reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    BOOL            reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    FLOAT16         reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    DOUBLE          reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    VOID            reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    ID              reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    UNIFORM         reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    ATTRIBUTE       reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    VARYING         reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    INPUT           reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    OUTPUT          reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    HIGHP           reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    MEDIUMP         reduce using rule 86 (structlist -> structlist var_basic SEMI .)
    LOWP            reduce using rule 86 (structlist -> structlist var_basic SEMI .)


state 270

    (88) struct -> STRUCT ID LBRACKET structlist RBRACKET .

    SEMI            reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    RBRACKET        reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    STRUCT          reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    INT             reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    FLOAT           reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    BOOL            reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    FLOAT16         reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    DOUBLE          reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    VOID            reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    ID              reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    UNIFORM         reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    ATTRIBUTE       reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    VARYING         reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    INPUT           reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    OUTPUT          reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    HIGHP           reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    MEDIUMP         reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)
    LOWP            reduce using rule 88 (struct -> STRUCT ID LBRACKET structlist RBRACKET .)


state 271

    (105) obj_lit_list -> obj_lit_list COMMA ID COLON . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 290
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 272

    (77) exprlist -> exprlist COMMA ID ASSIGN . expr
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 135
    LPAREN          shift and go to state 38
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    INC             shift and go to state 132
    DEC             shift and go to state 134
    NOT             shift and go to state 56
    NEW             shift and go to state 44

    array_literal                  shift and go to state 8
    dec                            shift and go to state 41
    inc                            shift and go to state 28
    new                            shift and go to state 50
    expr                           shift and go to state 291
    assign2                        shift and go to state 35
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    not                            shift and go to state 9
    strlit                         shift and go to state 62
    obj_literal                    shift and go to state 24

state 273

    (47) arr_decl -> arr_decl LSBRACKET NUMBER . RSBRACKET

    RSBRACKET       shift and go to state 292


state 274

    (48) arr_decl -> arr_decl LSBRACKET RSBRACKET .

    LSBRACKET       reduce using rule 48 (arr_decl -> arr_decl LSBRACKET RSBRACKET .)
    SEMI            reduce using rule 48 (arr_decl -> arr_decl LSBRACKET RSBRACKET .)
    ASSIGN          reduce using rule 48 (arr_decl -> arr_decl LSBRACKET RSBRACKET .)
    RPAREN          reduce using rule 48 (arr_decl -> arr_decl LSBRACKET RSBRACKET .)
    COMMA           reduce using rule 48 (arr_decl -> arr_decl LSBRACKET RSBRACKET .)


state 275

    (90) function -> type_decl ID LPAREN funcdeflist RPAREN . LBRACKET statementlist RBRACKET
    (92) function -> type_decl ID LPAREN funcdeflist RPAREN . COLON ID LBRACKET statementlist RBRACKET

    LBRACKET        shift and go to state 293
    COLON           shift and go to state 294


state 276

    (82) funcdeflist -> funcdeflist COMMA . type_decl ID arr_decl
    (83) funcdeflist -> funcdeflist COMMA . type_decl ID
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    ID              shift and go to state 156
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    type_decl                      shift and go to state 295
    modifier                       shift and go to state 51

state 277

    (80) funcdeflist -> type_decl ID .
    (81) funcdeflist -> type_decl ID . arr_decl
    (45) arr_decl -> . LSBRACKET NUMBER RSBRACKET
    (46) arr_decl -> . LSBRACKET RSBRACKET
    (47) arr_decl -> . arr_decl LSBRACKET NUMBER RSBRACKET
    (48) arr_decl -> . arr_decl LSBRACKET RSBRACKET

    RPAREN          reduce using rule 80 (funcdeflist -> type_decl ID .)
    COMMA           reduce using rule 80 (funcdeflist -> type_decl ID .)
    LSBRACKET       shift and go to state 227

    arr_decl                       shift and go to state 296

state 278

    (91) function -> type_decl ID LPAREN RPAREN LBRACKET . statementlist RBRACKET
    (1) statementlist -> . statement
    (2) statementlist -> . statement_local
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    statementlist                  shift and go to state 297
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 55
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 65
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 279

    (93) function -> type_decl ID LPAREN RPAREN COLON . ID LBRACKET statementlist RBRACKET

    ID              shift and go to state 298


state 280

    (45) arr_decl -> LSBRACKET NUMBER RSBRACKET .

    LSBRACKET       reduce using rule 45 (arr_decl -> LSBRACKET NUMBER RSBRACKET .)
    SEMI            reduce using rule 45 (arr_decl -> LSBRACKET NUMBER RSBRACKET .)
    ASSIGN          reduce using rule 45 (arr_decl -> LSBRACKET NUMBER RSBRACKET .)
    RPAREN          reduce using rule 45 (arr_decl -> LSBRACKET NUMBER RSBRACKET .)
    COMMA           reduce using rule 45 (arr_decl -> LSBRACKET NUMBER RSBRACKET .)


state 281

    (165) if -> IF paren_expr LBRACKET statementlist RBRACKET .

    SEMI            reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    BUILTIN         reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    TRUE            reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    FALSE           reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    STRUCT          reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    INT             reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    FLOAT           reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    BOOL            reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    FLOAT16         reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    DOUBLE          reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    VOID            reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    UNIFORM         reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    ATTRIBUTE       reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    VARYING         reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    INPUT           reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    OUTPUT          reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    HIGHP           reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    MEDIUMP         reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    LOWP            reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)
    RBRACKET        reduce using rule 165 (if -> IF paren_expr LBRACKET statementlist RBRACKET .)


state 282

    (97) builtin_id -> BOOL .

    LPAREN          reduce using rule 97 (builtin_id -> BOOL .)


state 283

    (94) builtin_id -> ID .

    LPAREN          reduce using rule 94 (builtin_id -> ID .)


state 284

    (98) builtin_func -> BUILTIN type_decl ID ASSIGN builtin_id . LPAREN funcdeflist RPAREN
    (99) builtin_func -> BUILTIN type_decl ID ASSIGN builtin_id . LPAREN RPAREN

    LPAREN          shift and go to state 299


state 285

    (96) builtin_id -> INT .

    LPAREN          reduce using rule 96 (builtin_id -> INT .)


state 286

    (95) builtin_id -> FLOAT .

    LPAREN          reduce using rule 95 (builtin_id -> FLOAT .)


state 287

    (162) for -> FOR LPAREN for_decl RPAREN statement_local .

    SEMI            reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    IF              reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    BUILTIN         reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    ELSE            reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    FOR             reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    NUMBER          reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    TRUE            reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    FALSE           reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    ID              reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    LPAREN          reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    RETURN          reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    BREAK           reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    CONTINUE        reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    STRUCT          reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    INC             reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    DEC             reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    INT             reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    FLOAT           reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    BOOL            reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    FLOAT16         reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    DOUBLE          reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    VOID            reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    STRINGLIT       reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    LSBRACKET       reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    LBRACKET        reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    MINUS           reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    NOT             reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    NEW             reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    UNIFORM         reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    ATTRIBUTE       reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    VARYING         reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    INPUT           reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    OUTPUT          reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    HIGHP           reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    MEDIUMP         reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    LOWP            reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    $end            reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)
    RBRACKET        reduce using rule 162 (for -> FOR LPAREN for_decl RPAREN statement_local .)


state 288

    (163) for -> FOR LPAREN for_decl RPAREN LBRACKET . statementlist RBRACKET
    (1) statementlist -> . statement
    (2) statementlist -> . statement_local
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    return                         shift and go to state 16
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 55
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    statementlist                  shift and go to state 300
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 65
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 289

    (161) for_decl -> var_decl SEMI expr . SEMI assign
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    SEMI            shift and go to state 301
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 290

    (105) obj_lit_list -> obj_lit_list COMMA ID COLON expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    RBRACKET        reduce using rule 105 (obj_lit_list -> obj_lit_list COMMA ID COLON expr .)
    COMMA           reduce using rule 105 (obj_lit_list -> obj_lit_list COMMA ID COLON expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 291

    (77) exprlist -> exprlist COMMA ID ASSIGN expr .
    (122) expr -> expr . DOT expr
    (123) expr -> expr . LAND expr
    (124) expr -> expr . LOR expr
    (125) expr -> expr . BOR expr
    (126) expr -> expr . BXOR expr
    (127) expr -> expr . BAND expr
    (128) expr -> expr . EQUAL expr
    (129) expr -> expr . NOTEQUAL expr
    (130) expr -> expr . GTHAN expr
    (131) expr -> expr . GTHANEQ expr
    (132) expr -> expr . LTHAN expr
    (133) expr -> expr . MOD expr
    (134) expr -> expr . LTHANEQ expr
    (135) expr -> expr . PLUS expr
    (136) expr -> expr . MINUS expr
    (137) expr -> expr . DIVIDE expr
    (138) expr -> expr . TIMES expr
    (140) expr -> expr . func_call
    (141) expr -> expr . LSBRACKET expr RSBRACKET
    (142) expr -> expr . QEST expr COLON expr
    (109) inc -> expr . INC
    (111) dec -> expr . DEC
    (78) func_call -> . LPAREN exprlist RPAREN
    (79) func_call -> . LPAREN RPAREN

    RSBRACKET       reduce using rule 77 (exprlist -> exprlist COMMA ID ASSIGN expr .)
    COMMA           reduce using rule 77 (exprlist -> exprlist COMMA ID ASSIGN expr .)
    RPAREN          reduce using rule 77 (exprlist -> exprlist COMMA ID ASSIGN expr .)
    DOT             shift and go to state 94
    LAND            shift and go to state 93
    LOR             shift and go to state 101
    BOR             shift and go to state 100
    BXOR            shift and go to state 98
    BAND            shift and go to state 102
    EQUAL           shift and go to state 107
    NOTEQUAL        shift and go to state 105
    GTHAN           shift and go to state 103
    GTHANEQ         shift and go to state 91
    LTHAN           shift and go to state 95
    MOD             shift and go to state 88
    LTHANEQ         shift and go to state 104
    PLUS            shift and go to state 90
    MINUS           shift and go to state 99
    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 85
    LSBRACKET       shift and go to state 106
    QEST            shift and go to state 96
    INC             shift and go to state 87
    DEC             shift and go to state 84
    LPAREN          shift and go to state 89

    func_call                      shift and go to state 97

state 292

    (47) arr_decl -> arr_decl LSBRACKET NUMBER RSBRACKET .

    LSBRACKET       reduce using rule 47 (arr_decl -> arr_decl LSBRACKET NUMBER RSBRACKET .)
    SEMI            reduce using rule 47 (arr_decl -> arr_decl LSBRACKET NUMBER RSBRACKET .)
    ASSIGN          reduce using rule 47 (arr_decl -> arr_decl LSBRACKET NUMBER RSBRACKET .)
    RPAREN          reduce using rule 47 (arr_decl -> arr_decl LSBRACKET NUMBER RSBRACKET .)
    COMMA           reduce using rule 47 (arr_decl -> arr_decl LSBRACKET NUMBER RSBRACKET .)


state 293

    (90) function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET . statementlist RBRACKET
    (1) statementlist -> . statement
    (2) statementlist -> . statement_local
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    statementlist                  shift and go to state 302
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 55
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 65
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 294

    (92) function -> type_decl ID LPAREN funcdeflist RPAREN COLON . ID LBRACKET statementlist RBRACKET

    ID              shift and go to state 303


state 295

    (82) funcdeflist -> funcdeflist COMMA type_decl . ID arr_decl
    (83) funcdeflist -> funcdeflist COMMA type_decl . ID

    ID              shift and go to state 304


state 296

    (81) funcdeflist -> type_decl ID arr_decl .
    (47) arr_decl -> arr_decl . LSBRACKET NUMBER RSBRACKET
    (48) arr_decl -> arr_decl . LSBRACKET RSBRACKET

    RPAREN          reduce using rule 81 (funcdeflist -> type_decl ID arr_decl .)
    COMMA           reduce using rule 81 (funcdeflist -> type_decl ID arr_decl .)
    LSBRACKET       shift and go to state 254


state 297

    (91) function -> type_decl ID LPAREN RPAREN LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    RBRACKET        shift and go to state 305
    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 139
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 140
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 298

    (93) function -> type_decl ID LPAREN RPAREN COLON ID . LBRACKET statementlist RBRACKET

    LBRACKET        shift and go to state 306


state 299

    (98) builtin_func -> BUILTIN type_decl ID ASSIGN builtin_id LPAREN . funcdeflist RPAREN
    (99) builtin_func -> BUILTIN type_decl ID ASSIGN builtin_id LPAREN . RPAREN
    (80) funcdeflist -> . type_decl ID
    (81) funcdeflist -> . type_decl ID arr_decl
    (82) funcdeflist -> . funcdeflist COMMA type_decl ID arr_decl
    (83) funcdeflist -> . funcdeflist COMMA type_decl ID
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP

    RPAREN          shift and go to state 308
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    ID              shift and go to state 156
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    type_decl                      shift and go to state 256
    funcdeflist                    shift and go to state 307
    modifier                       shift and go to state 51

state 300

    (163) for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    RBRACKET        shift and go to state 309
    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    return                         shift and go to state 16
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 139
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 140
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 301

    (161) for_decl -> var_decl SEMI expr SEMI . assign
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr

    INC             shift and go to state 78
    DEC             shift and go to state 75
    ID              shift and go to state 177

    assign                         shift and go to state 310
    assign_expr                    shift and go to state 20

state 302

    (90) function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    RBRACKET        shift and go to state 311
    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 139
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 140
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 303

    (92) function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID . LBRACKET statementlist RBRACKET

    LBRACKET        shift and go to state 312


state 304

    (82) funcdeflist -> funcdeflist COMMA type_decl ID . arr_decl
    (83) funcdeflist -> funcdeflist COMMA type_decl ID .
    (45) arr_decl -> . LSBRACKET NUMBER RSBRACKET
    (46) arr_decl -> . LSBRACKET RSBRACKET
    (47) arr_decl -> . arr_decl LSBRACKET NUMBER RSBRACKET
    (48) arr_decl -> . arr_decl LSBRACKET RSBRACKET

    RPAREN          reduce using rule 83 (funcdeflist -> funcdeflist COMMA type_decl ID .)
    COMMA           reduce using rule 83 (funcdeflist -> funcdeflist COMMA type_decl ID .)
    LSBRACKET       shift and go to state 227

    arr_decl                       shift and go to state 313

state 305

    (91) function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .

    RBRACKET        reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    SEMI            reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    BUILTIN         reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    TRUE            reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    FALSE           reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    STRUCT          reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    INT             reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    FLOAT           reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    BOOL            reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    FLOAT16         reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    DOUBLE          reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    VOID            reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    UNIFORM         reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    ATTRIBUTE       reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    VARYING         reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    INPUT           reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    OUTPUT          reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    HIGHP           reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    MEDIUMP         reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    LOWP            reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 91 (function -> type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET .)


state 306

    (93) function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET . statementlist RBRACKET
    (1) statementlist -> . statement
    (2) statementlist -> . statement_local
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    statementlist                  shift and go to state 314
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 55
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 65
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 307

    (98) builtin_func -> BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist . RPAREN
    (82) funcdeflist -> funcdeflist . COMMA type_decl ID arr_decl
    (83) funcdeflist -> funcdeflist . COMMA type_decl ID

    RPAREN          shift and go to state 315
    COMMA           shift and go to state 276


state 308

    (99) builtin_func -> BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN .

    SEMI            reduce using rule 99 (builtin_func -> BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN .)


state 309

    (163) for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .

    SEMI            reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    BUILTIN         reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    TRUE            reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    FALSE           reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    STRUCT          reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    INT             reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    FLOAT           reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    BOOL            reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    FLOAT16         reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    DOUBLE          reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    VOID            reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    UNIFORM         reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    ATTRIBUTE       reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    VARYING         reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    INPUT           reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    OUTPUT          reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    HIGHP           reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    MEDIUMP         reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    LOWP            reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)
    RBRACKET        reduce using rule 163 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET .)


state 310

    (161) for_decl -> var_decl SEMI expr SEMI assign .
    (69) assign -> assign . cmplx_assign expr
    (53) cmplx_assign -> . ASSIGNPLUS
    (54) cmplx_assign -> . ASSIGNMINUS
    (55) cmplx_assign -> . ASSIGNDIVIDE
    (56) cmplx_assign -> . ASSIGNTIMES
    (57) cmplx_assign -> . ASSIGNBOR
    (58) cmplx_assign -> . ASSIGNBAND
    (59) cmplx_assign -> . ASSIGNBXOR
    (60) cmplx_assign -> . ASSIGN

    RPAREN          reduce using rule 161 (for_decl -> var_decl SEMI expr SEMI assign .)
    ASSIGNPLUS      shift and go to state 122
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 124
    ASSIGNTIMES     shift and go to state 123
    ASSIGNBOR       shift and go to state 125
    ASSIGNBAND      shift and go to state 128
    ASSIGNBXOR      shift and go to state 129
    ASSIGN          shift and go to state 121

    cmplx_assign                   shift and go to state 146

state 311

    (90) function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .

    RBRACKET        reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    SEMI            reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    BUILTIN         reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    TRUE            reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    FALSE           reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    STRUCT          reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    INT             reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    FLOAT           reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    BOOL            reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    FLOAT16         reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    DOUBLE          reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    VOID            reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    UNIFORM         reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    ATTRIBUTE       reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    VARYING         reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    INPUT           reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    OUTPUT          reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    HIGHP           reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    MEDIUMP         reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    LOWP            reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 90 (function -> type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET .)


state 312

    (92) function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET . statementlist RBRACKET
    (1) statementlist -> . statement
    (2) statementlist -> . statement_local
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    statementlist                  shift and go to state 316
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 55
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 65
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 313

    (82) funcdeflist -> funcdeflist COMMA type_decl ID arr_decl .
    (47) arr_decl -> arr_decl . LSBRACKET NUMBER RSBRACKET
    (48) arr_decl -> arr_decl . LSBRACKET RSBRACKET

    RPAREN          reduce using rule 82 (funcdeflist -> funcdeflist COMMA type_decl ID arr_decl .)
    COMMA           reduce using rule 82 (funcdeflist -> funcdeflist COMMA type_decl ID arr_decl .)
    LSBRACKET       shift and go to state 254


state 314

    (93) function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    RBRACKET        shift and go to state 317
    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 139
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 140
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 315

    (98) builtin_func -> BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN .

    SEMI            reduce using rule 98 (builtin_func -> BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN .)


state 316

    (92) function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_local
    (5) statement -> . if
    (6) statement -> . function
    (7) statement -> . builtin_func SEMI
    (8) statement -> . builtin_global SEMI
    (9) statement -> . else
    (10) statement -> . for
    (11) statement -> . expr SEMI
    (12) statement -> . return SEMI
    (13) statement -> . break SEMI
    (14) statement -> . continue SEMI
    (15) statement -> . struct SEMI
    (16) statement -> . assign SEMI
    (17) statement -> . var_decl SEMI
    (18) statement -> . SEMI
    (19) statement_local -> . assign SEMI
    (20) statement_local -> . if
    (21) statement_local -> . else
    (22) statement_local -> . for
    (23) statement_local -> . return SEMI
    (24) statement_local -> . break SEMI
    (25) statement_local -> . continue SEMI
    (26) statement_local -> . var_decl SEMI
    (27) statement_local -> . struct SEMI
    (28) statement_local -> . SEMI
    (164) if -> . IF paren_expr statement_local
    (165) if -> . IF paren_expr LBRACKET statementlist RBRACKET
    (90) function -> . type_decl ID LPAREN funcdeflist RPAREN LBRACKET statementlist RBRACKET
    (91) function -> . type_decl ID LPAREN RPAREN LBRACKET statementlist RBRACKET
    (92) function -> . type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET
    (93) function -> . type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET
    (98) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN funcdeflist RPAREN
    (99) builtin_func -> . BUILTIN type_decl ID ASSIGN builtin_id LPAREN RPAREN
    (100) builtin_global -> . BUILTIN type_decl ID arr_decl
    (101) builtin_global -> . BUILTIN type_decl ID
    (166) else -> . ELSE statement_local
    (167) else -> . ELSE LBRACKET statementlist RBRACKET
    (162) for -> . FOR LPAREN for_decl RPAREN statement_local
    (163) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist RBRACKET
    (115) expr -> . NUMBER
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (118) expr -> . strlit
    (119) expr -> . ID
    (120) expr -> . array_literal
    (121) expr -> . obj_literal
    (122) expr -> . expr DOT expr
    (123) expr -> . expr LAND expr
    (124) expr -> . expr LOR expr
    (125) expr -> . expr BOR expr
    (126) expr -> . expr BXOR expr
    (127) expr -> . expr BAND expr
    (128) expr -> . expr EQUAL expr
    (129) expr -> . expr NOTEQUAL expr
    (130) expr -> . expr GTHAN expr
    (131) expr -> . expr GTHANEQ expr
    (132) expr -> . expr LTHAN expr
    (133) expr -> . expr MOD expr
    (134) expr -> . expr LTHANEQ expr
    (135) expr -> . expr PLUS expr
    (136) expr -> . expr MINUS expr
    (137) expr -> . expr DIVIDE expr
    (138) expr -> . expr TIMES expr
    (139) expr -> . LPAREN expr RPAREN
    (140) expr -> . expr func_call
    (141) expr -> . expr LSBRACKET expr RSBRACKET
    (142) expr -> . expr QEST expr COLON expr
    (143) expr -> . expr_uminus
    (144) expr -> . assign2
    (145) expr -> . not
    (146) expr -> . new
    (147) expr -> . inc
    (148) expr -> . dec
    (170) return -> . RETURN expr
    (171) return -> . RETURN
    (168) break -> . BREAK
    (169) continue -> . CONTINUE
    (88) struct -> . STRUCT ID LBRACKET structlist RBRACKET
    (89) struct -> . STRUCT LBRACKET structlist RBRACKET ID
    (68) assign -> . assign_expr cmplx_assign expr
    (69) assign -> . assign cmplx_assign expr
    (70) assign -> . INC assign_expr
    (71) assign -> . DEC assign_expr
    (72) assign -> . assign_expr INC
    (73) assign -> . assign_expr DEC
    (51) var_decl -> . var_basic
    (52) var_decl -> . var_basic ASSIGN expr
    (37) type_decl -> . INT
    (38) type_decl -> . FLOAT
    (39) type_decl -> . BOOL
    (40) type_decl -> . FLOAT16
    (41) type_decl -> . DOUBLE
    (42) type_decl -> . VOID
    (43) type_decl -> . ID
    (44) type_decl -> . modifier type_decl
    (114) strlit -> . STRINGLIT
    (102) array_literal -> . LSBRACKET exprlist RSBRACKET
    (103) array_literal -> . LSBRACKET RSBRACKET
    (106) obj_literal -> . LBRACKET obj_lit_list RBRACKET
    (107) obj_literal -> . LBRACKET RBRACKET
    (158) expr_uminus -> . MINUS expr
    (152) assign2 -> . assign_expr2 cmplx_assign expr
    (153) assign2 -> . assign2 cmplx_assign expr
    (154) assign2 -> . INC assign_expr2
    (155) assign2 -> . DEC assign_expr2
    (156) assign2 -> . assign_expr2 INC
    (157) assign2 -> . assign_expr2 DEC
    (113) not -> . NOT expr
    (108) new -> . NEW expr
    (109) inc -> . expr INC
    (110) inc -> . INC expr
    (111) dec -> . expr DEC
    (112) dec -> . DEC expr
    (61) assign_expr -> . ID
    (62) assign_expr -> . assign_expr DOT assign_expr
    (63) assign_expr -> . assign_expr LSBRACKET expr RSBRACKET
    (64) assign_expr -> . assign_expr INC
    (65) assign_expr -> . assign_expr DEC
    (66) assign_expr -> . INC assign_expr
    (67) assign_expr -> . DEC assign_expr
    (49) var_basic -> . type_decl ID arr_decl
    (50) var_basic -> . type_decl ID
    (29) modifier -> . UNIFORM
    (30) modifier -> . ATTRIBUTE
    (31) modifier -> . VARYING
    (32) modifier -> . INPUT
    (33) modifier -> . OUTPUT
    (34) modifier -> . HIGHP
    (35) modifier -> . MEDIUMP
    (36) modifier -> . LOWP
    (149) assign_expr2 -> . ID
    (150) assign_expr2 -> . assign_expr2 DOT assign_expr2
    (151) assign_expr2 -> . assign_expr2 LSBRACKET expr RSBRACKET

    RBRACKET        shift and go to state 318
    SEMI            shift and go to state 22
    IF              shift and go to state 54
    BUILTIN         shift and go to state 57
    ELSE            shift and go to state 2
    FOR             shift and go to state 60
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 23
    FALSE           shift and go to state 31
    ID              shift and go to state 58
    LPAREN          shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 33
    STRUCT          shift and go to state 11
    INC             shift and go to state 53
    DEC             shift and go to state 15
    INT             shift and go to state 59
    FLOAT           shift and go to state 49
    BOOL            shift and go to state 14
    FLOAT16         shift and go to state 61
    DOUBLE          shift and go to state 12
    VOID            shift and go to state 64
    STRINGLIT       shift and go to state 1
    LSBRACKET       shift and go to state 48
    LBRACKET        shift and go to state 30
    MINUS           shift and go to state 26
    NOT             shift and go to state 56
    NEW             shift and go to state 44
    UNIFORM         shift and go to state 29
    ATTRIBUTE       shift and go to state 6
    VARYING         shift and go to state 63
    INPUT           shift and go to state 21
    OUTPUT          shift and go to state 40
    HIGHP           shift and go to state 7
    MEDIUMP         shift and go to state 17
    LOWP            shift and go to state 42

    else                           shift and go to state 37
    assign_expr                    shift and go to state 20
    continue                       shift and go to state 3
    statement                      shift and go to state 139
    if                             shift and go to state 18
    assign2                        shift and go to state 35
    builtin_func                   shift and go to state 36
    break                          shift and go to state 25
    dec                            shift and go to state 41
    return                         shift and go to state 16
    obj_literal                    shift and go to state 24
    array_literal                  shift and go to state 8
    function                       shift and go to state 27
    new                            shift and go to state 50
    modifier                       shift and go to state 51
    assign                         shift and go to state 43
    strlit                         shift and go to state 62
    not                            shift and go to state 9
    builtin_global                 shift and go to state 34
    expr                           shift and go to state 4
    statement_local                shift and go to state 140
    var_basic                      shift and go to state 45
    for                            shift and go to state 10
    struct                         shift and go to state 46
    expr_uminus                    shift and go to state 47
    assign_expr2                   shift and go to state 66
    type_decl                      shift and go to state 52
    inc                            shift and go to state 28
    var_decl                       shift and go to state 13

state 317

    (93) function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .

    RBRACKET        reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    SEMI            reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    BUILTIN         reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    TRUE            reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    FALSE           reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    STRUCT          reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    INT             reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    FLOAT           reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    BOOL            reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    FLOAT16         reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    DOUBLE          reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    VOID            reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    UNIFORM         reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    ATTRIBUTE       reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    VARYING         reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    INPUT           reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    OUTPUT          reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    HIGHP           reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    MEDIUMP         reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    LOWP            reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 93 (function -> type_decl ID LPAREN RPAREN COLON ID LBRACKET statementlist RBRACKET .)


state 318

    (92) function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .

    RBRACKET        reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    SEMI            reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    BUILTIN         reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    TRUE            reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    FALSE           reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    STRUCT          reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    INT             reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    FLOAT           reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    BOOL            reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    FLOAT16         reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    DOUBLE          reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    VOID            reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    UNIFORM         reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    ATTRIBUTE       reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    VARYING         reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    INPUT           reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    OUTPUT          reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    HIGHP           reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    MEDIUMP         reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    LOWP            reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 92 (function -> type_decl ID LPAREN funcdeflist RPAREN COLON ID LBRACKET statementlist RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASSIGNPLUS in state 35 resolved as shift
WARNING: shift/reduce conflict for ASSIGNMINUS in state 35 resolved as shift
WARNING: shift/reduce conflict for ASSIGNDIVIDE in state 35 resolved as shift
WARNING: shift/reduce conflict for ASSIGNTIMES in state 35 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBOR in state 35 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBAND in state 35 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBXOR in state 35 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 35 resolved as shift
WARNING: shift/reduce conflict for DOT in state 148 resolved as shift
WARNING: shift/reduce conflict for LAND in state 148 resolved as shift
WARNING: shift/reduce conflict for LOR in state 148 resolved as shift
WARNING: shift/reduce conflict for BOR in state 148 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 148 resolved as shift
WARNING: shift/reduce conflict for BAND in state 148 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 148 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 148 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 148 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 148 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 148 resolved as shift
WARNING: shift/reduce conflict for MOD in state 148 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 148 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 148 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 148 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 148 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 148 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 148 resolved as shift
WARNING: shift/reduce conflict for QEST in state 148 resolved as shift
WARNING: shift/reduce conflict for INC in state 148 resolved as shift
WARNING: shift/reduce conflict for DEC in state 148 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 148 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 153 resolved as shift
WARNING: shift/reduce conflict for DOT in state 218 resolved as shift
WARNING: shift/reduce conflict for LAND in state 218 resolved as shift
WARNING: shift/reduce conflict for LOR in state 218 resolved as shift
WARNING: shift/reduce conflict for BOR in state 218 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 218 resolved as shift
WARNING: shift/reduce conflict for BAND in state 218 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 218 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 218 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 218 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 218 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 218 resolved as shift
WARNING: shift/reduce conflict for MOD in state 218 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 218 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 218 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 218 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 218 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 218 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 218 resolved as shift
WARNING: shift/reduce conflict for QEST in state 218 resolved as shift
WARNING: shift/reduce conflict for INC in state 218 resolved as shift
WARNING: shift/reduce conflict for DEC in state 218 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 218 resolved as shift
WARNING: shift/reduce conflict for DOT in state 237 resolved as shift
WARNING: shift/reduce conflict for LAND in state 237 resolved as shift
WARNING: shift/reduce conflict for LOR in state 237 resolved as shift
WARNING: shift/reduce conflict for BOR in state 237 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 237 resolved as shift
WARNING: shift/reduce conflict for BAND in state 237 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 237 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 237 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 237 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 237 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 237 resolved as shift
WARNING: shift/reduce conflict for MOD in state 237 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 237 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 237 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 237 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 237 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 237 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 237 resolved as shift
WARNING: shift/reduce conflict for QEST in state 237 resolved as shift
WARNING: shift/reduce conflict for INC in state 237 resolved as shift
WARNING: shift/reduce conflict for DEC in state 237 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 237 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 253 resolved as shift
WARNING: reduce/reduce conflict in state 10 resolved using rule (statement -> for)
WARNING: rejected rule (statement_local -> for) in state 10
WARNING: reduce/reduce conflict in state 18 resolved using rule (statement -> if)
WARNING: rejected rule (statement_local -> if) in state 18
WARNING: reduce/reduce conflict in state 22 resolved using rule (statement -> SEMI)
WARNING: rejected rule (statement_local -> SEMI) in state 22
WARNING: reduce/reduce conflict in state 37 resolved using rule (statement -> else)
WARNING: rejected rule (statement_local -> else) in state 37
WARNING: reduce/reduce conflict in state 58 resolved using rule (assign_expr -> ID)
WARNING: rejected rule (expr -> ID) in state 58
WARNING: reduce/reduce conflict in state 58 resolved using rule (assign_expr -> ID)
WARNING: rejected rule (assign_expr2 -> ID) in state 58
WARNING: reduce/reduce conflict in state 83 resolved using rule (statement -> continue SEMI)
WARNING: rejected rule (statement_local -> continue SEMI) in state 83
WARNING: reduce/reduce conflict in state 110 resolved using rule (statement -> var_decl SEMI)
WARNING: rejected rule (statement_local -> var_decl SEMI) in state 110
WARNING: reduce/reduce conflict in state 113 resolved using rule (assign_expr -> ID)
WARNING: rejected rule (assign_expr2 -> ID) in state 113
WARNING: reduce/reduce conflict in state 113 resolved using rule (assign_expr -> ID)
WARNING: rejected rule (expr -> ID) in state 113
WARNING: reduce/reduce conflict in state 113 resolved using rule (expr -> ID)
WARNING: rejected rule (assign_expr2 -> ID) in state 113
WARNING: reduce/reduce conflict in state 115 resolved using rule (assign_expr -> DEC assign_expr)
WARNING: rejected rule (assign -> DEC assign_expr) in state 115
WARNING: reduce/reduce conflict in state 117 resolved using rule (statement -> return SEMI)
WARNING: rejected rule (statement_local -> return SEMI) in state 117
WARNING: reduce/reduce conflict in state 119 resolved using rule (assign_expr -> assign_expr DEC)
WARNING: rejected rule (assign -> assign_expr DEC) in state 119
WARNING: reduce/reduce conflict in state 127 resolved using rule (assign_expr -> assign_expr INC)
WARNING: rejected rule (assign -> assign_expr INC) in state 127
WARNING: reduce/reduce conflict in state 131 resolved using rule (statement -> break SEMI)
WARNING: rejected rule (statement_local -> break SEMI) in state 131
WARNING: reduce/reduce conflict in state 135 resolved using rule (expr -> ID)
WARNING: rejected rule (assign_expr2 -> ID) in state 135
WARNING: reduce/reduce conflict in state 147 resolved using rule (statement -> assign SEMI)
WARNING: rejected rule (statement_local -> assign SEMI) in state 147
WARNING: reduce/reduce conflict in state 150 resolved using rule (statement -> struct SEMI)
WARNING: rejected rule (statement_local -> struct SEMI) in state 150
WARNING: reduce/reduce conflict in state 153 resolved using rule (expr -> ID)
WARNING: rejected rule (assign_expr2 -> ID) in state 153
WARNING: reduce/reduce conflict in state 159 resolved using rule (assign_expr -> INC assign_expr)
WARNING: rejected rule (assign -> INC assign_expr) in state 159
WARNING: reduce/reduce conflict in state 214 resolved using rule (expr -> ID)
WARNING: rejected rule (assign_expr2 -> ID) in state 214
WARNING: reduce/reduce conflict in state 253 resolved using rule (expr -> ID)
WARNING: rejected rule (assign_expr2 -> ID) in state 253
