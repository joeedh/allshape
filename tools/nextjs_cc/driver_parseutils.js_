/*
	Python PLY-like driver for JS/CC generated parsers
	
*/

##LABELS##

##HEADER##

var ##PREFIX##_dbg_withparsetree	= __dbg_withparsetree;
var ##PREFIX##_dbg_withtrace		= __dbg_withtrace;
var ##PREFIX##_dbg_withstepbystep	= __dbg_withstepbystep;

function __##PREFIX##dbg_print( text )
{
	console.log( text );
}

function __##PREFIX##dbg_wait()
{
   //var v = read_line();
}

function __##PREFIX##parse( src, final_stack, err_off, err_la )
{
  var lex = TheLexer;
  lex.input(src);
  
	var		sstack			= new Array();
	var		vstack			= new Array();
  var   tstack      = new Array();
	var 	err_cnt			= 0;
	var		act;
	var		go;
	var		la, last_la;
	var		rval;
	var 	parseinfo		= new Function( "", "var offset; var src; var att; var symbolmap;" );
	var		info			= new parseinfo();
	
  info.symbolmap = symbolmap;
  
	//Visual parse tree generation
	var 	treenode		= new Function( "", "var sym; var att; var child;" );
	var		treenodes		= new Array();
	var		tree			= new Array();
	var		tmptree			= null;
  var last_value = undefined;
  
##TABLES##
	
	info.offset = 0;
	info.src = src;
	info.att = new String();
	
	if( !err_off )
		err_off	= new Array();
	if( !err_la )
	err_la = new Array();
  
  tstack.push( 0 );
	sstack.push( 0 );
	vstack.push( 0 );
	
	la = last_la = to_la(info, lex, ##EOF##);
			
	while( true )
	{
		act = ##ERROR##;
		for( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 )
		{
			if( act_tab[sstack[sstack.length-1]][i] == la.match )
			{
				act = act_tab[sstack[sstack.length-1]][i+1];
				break;
			}
		}

		/*
		_print( "state " + sstack[sstack.length-1] + " la.match = " + la.match + " info.att = >" +
				info.att + "< act = " + act + " src = >" + info.src.substr( info.offset, 30 ) + "..." + "<" +
					" sstack = " + sstack.join() );
		*/
		
		if( ##PREFIX##_dbg_withtrace && sstack.length > 0 )
		{
			__##PREFIX##dbg_print( "\nState " + sstack[sstack.length-1] + "\n" +
							"\tLookahead: " + labels[la.match] + " (\"" + info.att + "\")\n" +
							"\tAction: " + act + "\n" + 
							"\tSource: \"" + info.src.substr( info.offset, 30 ) + ( ( info.offset + 30 < info.src.length ) ?
									"..." : "" ) + "\"\n" +
							"\tStack: " + tostr(sstack) + "\n" +
							"\tValue stack: " + tostr(vstack) + "\n" );
			
			if( ##PREFIX##_dbg_withstepbystep )
				__##PREFIX##dbg_wait();
		}
		
			
		//Panic-mode: Try recovery when parse-error occurs!
		if( act == ##ERROR## )
		{
			if( ##PREFIX##_dbg_withtrace )
				__##PREFIX##dbg_print( "Error detected: There is no reduce or shift on the symbol " + labels[la.match] );
			
			err_cnt++;
			err_off.push( info.offset - info.att.length );			
      err_la.push(last_la != undefined ? last_la.tok : undefined);
      err_la.push(la != undefined ? la.tok : undefined);
			/*err_la.push( new Array() );
			for( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 )
				err_la[err_la.length-1].push( labels[act_tab[sstack[sstack.length-1]][i]] );
			*/
      
			//Remember the original stack!
			var rsstack = new Array();
			var rvstack = new Array();
			for( var i = 0; i < sstack.length; i++ )
			{
				rsstack[i] = sstack[i];
				rvstack[i] = vstack[i];
			}
			
			while( act == ##ERROR## && la.match != ##EOF## )
			{
				if( ##PREFIX##_dbg_withtrace )
					__##PREFIX##dbg_print( "\tError recovery\n" +
									"Current lookahead: " + labels[la.match] + " (" + info.att + ")\n" +
									"Action: " + act + "\n\n" );
				if( la.match == -1 )
					info.offset++;
					
				while( act == ##ERROR## && sstack.length > 0 )
				{
					sstack.pop();
					vstack.pop();
					
					if( sstack.length == 0 )
						break;
						
					act = ##ERROR##;
					for( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 )
					{
						if( act_tab[sstack[sstack.length-1]][i] == la.match)
						{
							act = act_tab[sstack[sstack.length-1]][i+1];
              
              if( ##PREFIX##_dbg_withtrace )
                __##PREFIX##dbg_print("switching to act " + act);
							break;
						}
					}
				}
        
        break;
				
				if( act != ##ERROR## )
					break;
				
				for( var i = 0; i < rsstack.length; i++ )
				{
					sstack.push( rsstack[i] );
					vstack.push( rvstack[i] );
				}
				
        last_la = la;
        la = to_la(info, lex, ##EOF##);
			}
			
			if( act == ##ERROR## )
			{
				if( ##PREFIX##_dbg_withtrace )
					__##PREFIX##dbg_print( "\tError recovery failed, terminating parse process..." );
				break;
			}


			if( ##PREFIX##_dbg_withtrace )
				__##PREFIX##dbg_print( "\tError recovery succeeded, continuing" );
		}
		
		/*
		if( act == ##ERROR## )
			break;
		*/
		
		
		//Shift
		if( act > 0 )
		{
			//Parse tree generation
			if( ##PREFIX##_dbg_withparsetree )
			{
				var node = new treenode();
				node.sym = labels[ la.match ];
				node.att = info.att;
				node.child = new Array();
				tree.push( treenodes.length );
				treenodes.push( node );
			}
			
			if( ##PREFIX##_dbg_withtrace )
				__##PREFIX##dbg_print( "Shifting symbol: " + labels[la.match] + " (" + info.att + ")" );
		
			sstack.push( act );
			vstack.push( info.att );
			
      last_la = la;
      la = to_la(info, lex, ##EOF##);
			
			if( ##PREFIX##_dbg_withtrace )
				__##PREFIX##dbg_print( "\tNew lookahead symbol: " + labels[la.match] + " (" + info.att + ")" );
		}
		//Reduce
		else
		{		
			act *= -1;
			
			if( ##PREFIX##_dbg_withtrace )
				__##PREFIX##dbg_print( "Reducing by producution: " + act );
			
			rval = void(0);
			
			if( ##PREFIX##_dbg_withtrace )
				__##PREFIX##dbg_print( "\tPerforming semantic action..." );
			
##ACTIONS##
      
      last_value = rval;
      
			if( ##PREFIX##_dbg_withparsetree )
				tmptree = new Array();

			if( ##PREFIX##_dbg_withtrace )
				__##PREFIX##dbg_print( "\tPopping " + pop_tab[act][1] + " off the stack..." );
				
			for( var i = 0; i < pop_tab[act][1]; i++ )
			{
				if( ##PREFIX##_dbg_withparsetree )
					tmptree.push( tree.pop() );
					
				sstack.pop();
				vstack.pop();
			}
									
			go = -1;
			for( var i = 0; i < goto_tab[sstack[sstack.length-1]].length; i+=2 )
			{
				if( goto_tab[sstack[sstack.length-1]][i] == pop_tab[act][0] )
				{
					go = goto_tab[sstack[sstack.length-1]][i+1];
					break;
				}
			}
			
			if( ##PREFIX##_dbg_withparsetree )
			{
				var node = new treenode();
				node.sym = labels[ pop_tab[act][0] ];
				node.att = new String();
				node.child = tmptree.reverse();
				tree.push( treenodes.length );
				treenodes.push( node );
			}
			
			if( act == 0 )
				break;
				
			if( _dbg_withtrace ) {
				__##PREFIX##dbg_print( "\tPushing non-terminal " + labels[ pop_tab[act][0] ] );
      }
      
			sstack.push( go );
			vstack.push( rval );			
      
			if( _dbg_withtrace ) {
        __##PREFIX##dbg_print(" \trval: " + tostr(rval));
        __##PREFIX##dbg_print(" \tValue Stack: " + tostr(vstack));
      }
		}
	}

	if( ##PREFIX##_dbg_withtrace )
		__##PREFIX##dbg_print( "\nParse complete." );

	if( ##PREFIX##_dbg_withparsetree )
	{
		if( err_cnt == 0 )
		{
			__##PREFIX##dbg_print( "\n\n--- Parse tree ---" );
			__##PREFIX##dbg_parsetree( 0, treenodes, tree );
		}
		else
		{
			__##PREFIX##dbg_print( "\n\nParse tree cannot be viewed. There where parse errors." );
		}
	}
	
  if (err_cnt == 0 && last_value != undefined) {
    final_stack.push(last_value);
  }
  
	return err_cnt;
}


function __##PREFIX##dbg_parsetree( indent, nodes, tree )
{
	var str = new String();
	for( var i = 0; i < tree.length; i++ )
	{
		str = "";
		for( var j = indent; j > 0; j-- )
			str += "\t";
		
		str += nodes[ tree[i] ].sym;
		if( nodes[ tree[i] ].att != "" )
			str += " >" + nodes[ tree[i] ].att + "<" ;
			
		__##PREFIX##dbg_print( str );
		if( nodes[ tree[i] ].child.length > 0 )
			__##PREFIX##dbg_parsetree( indent + 1, nodes, nodes[ tree[i] ].child );
	}
}

##FOOTER##
