Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    EMPTYLINE
    MLSTRLIT
    OPENCOM
    THEN
    BACKSLASH
    BNEGATE
    ALL
    TEMPLATE
    CLOSECOM
    newline
    VARIABLE
    STRUCT
    SLASHR

Grammar

Rule 0     S' -> statementlist
Rule 1     statementlist -> statement
Rule 2     statementlist -> statement_nonctrl
Rule 3     statementlist -> statementlist statement
Rule 4     statementlist -> statementlist statement_nonctrl
Rule 5     statementlist -> <empty>
Rule 6     push_scope -> <empty>
Rule 7     pop_scope -> <empty>
Rule 8     opt_colon_type -> COLON var_type
Rule 9     opt_colon_type -> <empty>
Rule 10    assign_statement -> assign COLON var_type
Rule 11    assign_statement -> <empty>
Rule 12    statement -> function
Rule 13    statement -> if
Rule 14    statement -> else
Rule 15    statement -> while
Rule 16    statement -> with
Rule 17    statement -> dowhile
Rule 18    statement -> for
Rule 19    statement -> return SEMI
Rule 20    statement -> yield SEMI
Rule 21    statement -> break SEMI
Rule 22    statement -> continue SEMI
Rule 23    statement -> throw SEMI
Rule 24    statement -> try
Rule 25    statement -> catch
Rule 26    statement -> switch
Rule 27    statement -> func_native SEMI
Rule 28    statement_nonctrl -> expr SEMI
Rule 29    statement_nonctrl -> var_decl SEMI
Rule 30    statement_nonctrl -> funcref SEMI
Rule 31    statement_nonctrl -> SEMI
Rule 32    statement_nonctrl -> if
Rule 33    statement_nonctrl -> else
Rule 34    statement_nonctrl -> for
Rule 35    statement_nonctrl -> dowhile
Rule 36    statement_nonctrl -> while
Rule 37    statement_nonctrl -> return SEMI
Rule 38    statement_nonctrl -> yield SEMI
Rule 39    statement_nonctrl -> break SEMI
Rule 40    statement_nonctrl -> continue SEMI
Rule 41    statement_nonctrl -> throw SEMI
Rule 42    statement_nonctrl -> try
Rule 43    statement_nonctrl -> catch
Rule 44    statement_nonctrl -> delete SEMI
Rule 45    var_decl_or_type -> var_decl
Rule 46    var_decl_or_type -> var_type
Rule 47    templatedeflist -> var_type
Rule 48    templatedeflist -> var_type ASSIGN var_type
Rule 49    templatedeflist -> templatedeflist COMMA var_type
Rule 50    templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type
Rule 51    template -> lthan_restrict templatedeflist gthan_restrict
Rule 52    type_modifiers -> type_modifiers UNSIGNED
Rule 53    type_modifiers -> type_modifiers SIGNED
Rule 54    type_modifiers -> type_modifiers CONST
Rule 55    type_modifiers -> GLOBAL
Rule 56    type_modifiers -> VAR
Rule 57    left_id -> ID
Rule 58    id_opt -> ID
Rule 59    id_opt -> <empty>
Rule 60    template_ref -> lthan_restrict simple_templatedeflist gthan_restrict
Rule 61    template_ref_validate -> lthan_restrict simple_templatedeflist gthan_restrict
Rule 62    template_validate -> template
Rule 63    template_validate -> template_ref_validate
Rule 64    lthan_restrict -> TLTHAN
Rule 65    gthan_restrict -> TGTHAN
Rule 66    id_1 -> ID
Rule 67    var_decl_no_list -> var_type
Rule 68    var_decl_no_list -> type_modifiers var_decl_no_list
Rule 69    var_decl_no_list -> var_decl_no_list ASSIGN expr
Rule 70    var_decl -> type_modifiers var_type
Rule 71    var_decl -> var_decl ASSIGN expr
Rule 72    var_decl -> var_decl COMMA ID
Rule 73    var_decl -> var_decl COMMA ID ASSIGN expr
Rule 74    id_var_type -> ID
Rule 75    id_var_decl -> ID
Rule 76    empty -> empty
Rule 77    empty -> <empty>
Rule 78    var_type -> var_type id_var_type
Rule 79    var_type -> id_var_type
Rule 80    var_type -> INT
Rule 81    var_type -> SHORT
Rule 82    var_type -> FLOAT
Rule 83    var_type -> DOUBLE
Rule 84    var_type -> CHAR
Rule 85    var_type -> BYTE
Rule 86    var_type -> INFERRED
Rule 87    var_type -> var_type template_ref
Rule 88    typeof_opt -> TYPEOF
Rule 89    typeof_opt -> <empty>
Rule 90    simple_templatedeflist -> typeof_opt var_type
Rule 91    simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type
Rule 92    simple_var_decl -> VAR ID
Rule 93    simple_var_decl -> ID
Rule 94    cmplx_assign -> ASSIGNPLUS
Rule 95    cmplx_assign -> ASSIGNMINUS
Rule 96    cmplx_assign -> ASSIGNDIVIDE
Rule 97    cmplx_assign -> ASSIGNTIMES
Rule 98    cmplx_assign -> ASSIGNBOR
Rule 99    cmplx_assign -> ASSIGNBAND
Rule 100   cmplx_assign -> ASSIGNBXOR
Rule 101   cmplx_assign -> ASSIGN
Rule 102   throw -> THROW expr
Rule 103   assign -> expr cmplx_assign expr
Rule 104   assign -> assign cmplx_assign expr
Rule 105   assign -> expr
Rule 106   exprlist -> expr
Rule 107   exprlist -> exprlist COMMA expr
Rule 108   template_ref_opt -> template_ref
Rule 109   template_ref_opt -> <empty>
Rule 110   func_call -> template_ref_opt LPAREN exprlist RPAREN
Rule 111   func_call -> template_ref_opt LPAREN RPAREN
Rule 112   funcdeflist -> var_decl_no_list
Rule 113   funcdeflist -> funcdeflist COMMA var_decl_no_list
Rule 114   funcdeflist -> <empty>
Rule 115   template_opt -> template
Rule 116   template_opt -> <empty>
Rule 117   func_type_opt -> COLON var_type_opt
Rule 118   func_type_opt -> <empty>
Rule 119   funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
Rule 120   func_native -> NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
Rule 121   function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
Rule 122   lbracket_restrict -> LBRACKET
Rule 123   rbracket_restrict -> RBRACKET
Rule 124   var_type_opt -> var_type
Rule 125   var_type_opt -> <empty>
Rule 126   colon_opt -> COLON
Rule 127   colon_opt -> <empty>
Rule 128   exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
Rule 129   exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
Rule 130   array_literal -> LSBRACKET exprlist RSBRACKET
Rule 131   array_literal -> LSBRACKET RSBRACKET
Rule 132   id_str_or_num -> ID
Rule 133   id_str_or_num -> NUMBER
Rule 134   id_str_or_num -> STRINGLIT
Rule 135   typeof -> TYPEOF expr
Rule 136   obj_lit_list -> id_str_or_num COLON expr
Rule 137   obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON expr
Rule 138   obj_lit_list -> obj_lit_list COMMA
Rule 139   obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict
Rule 140   obj_literal -> lbracket_restrict rbracket_restrict
Rule 141   delete -> DELETE expr
Rule 142   new -> NEW expr
Rule 143   inc -> expr INC
Rule 144   inc -> INC expr
Rule 145   dec -> expr DEC
Rule 146   dec -> DEC expr
Rule 147   not -> NOT expr
Rule 148   bitinv -> BITINV expr
Rule 149   strlit -> STRINGLIT
Rule 150   lparen_restrict -> LPAREN
Rule 151   rparen_restrict -> RPAREN
Rule 152   lsbracket_restrict -> LSBRACKET
Rule 153   rsbracket_restrict -> RSBRACKET
Rule 154   expr -> NUMBER
Rule 155   expr -> strlit
Rule 156   expr -> ID
Rule 157   expr -> ID template_ref
Rule 158   expr -> template_ref
Rule 159   expr -> array_literal
Rule 160   expr -> exprfunction
Rule 161   expr -> obj_literal
Rule 162   expr -> expr cmplx_assign expr
Rule 163   expr -> expr cmplx_assign expr COLON var_type SEMI
Rule 164   expr -> expr RSHIFT expr
Rule 165   expr -> expr LSHIFT expr
Rule 166   expr -> expr LLSHIFT expr
Rule 167   expr -> expr RRSHIFT expr
Rule 168   expr -> expr DOT expr
Rule 169   expr -> expr LAND expr
Rule 170   expr -> expr LOR expr
Rule 171   expr -> expr BOR expr
Rule 172   expr -> expr INSTANCEOF expr
Rule 173   expr -> expr BXOR expr
Rule 174   expr -> expr BAND expr
Rule 175   expr -> expr EQUAL expr
Rule 176   expr -> expr EQUAL_STRICT expr
Rule 177   expr -> expr NOTEQUAL_STRICT expr
Rule 178   expr -> expr GTHAN expr
Rule 179   expr -> expr GTHANEQ expr
Rule 180   expr -> expr LTHAN expr
Rule 181   expr -> expr MOD expr
Rule 182   expr -> expr LTHANEQ expr
Rule 183   expr -> expr NOTEQUAL expr
Rule 184   expr -> expr PLUS expr
Rule 185   expr -> expr MINUS expr
Rule 186   expr -> expr DIVIDE expr
Rule 187   expr -> expr TIMES expr
Rule 188   expr -> expr IN expr
Rule 189   expr -> lparen_restrict expr rparen_restrict
Rule 190   expr -> expr func_call
Rule 191   expr -> expr lsbracket_restrict expr rsbracket_restrict
Rule 192   expr -> expr QEST expr COLON expr
Rule 193   expr -> expr_uminus
Rule 194   expr -> not
Rule 195   expr -> bitinv
Rule 196   expr -> new
Rule 197   expr -> inc
Rule 198   expr -> dec
Rule 199   expr -> typeof
Rule 200   expr -> re_lit
Rule 201   expr -> expr COMMA expr
Rule 202   expr_uminus -> MINUS expr
Rule 203   paren_expr -> LPAREN expr RPAREN
Rule 204   paren_expr -> LPAREN RPAREN
Rule 205   assign_opt -> assign
Rule 206   assign_opt -> <empty>
Rule 207   expr_opt -> expr
Rule 208   expr_opt -> <empty>
Rule 209   re_lit -> REGEXPR
Rule 210   for_var_decl -> ID
Rule 211   for_var_decl -> ID ASSIGN expr
Rule 212   for_var_decl -> var_decl
Rule 213   for_decl -> for_var_decl SEMI expr_opt SEMI expr_opt
Rule 214   for_decl -> for_var_decl IN expr
Rule 215   for -> FOR LPAREN for_decl RPAREN statement_nonctrl
Rule 216   for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
Rule 217   ctrl_statement -> statement_nonctrl
Rule 218   ctrl_statement -> LBRACKET statementlist_opt RBRACKET
Rule 219   ctrl_statement -> SEMI
Rule 220   dowhile -> DO ctrl_statement WHILE paren_expr
Rule 221   while -> WHILE paren_expr statement_nonctrl
Rule 222   while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET
Rule 223   default_case -> DEFAULT COLON statementlist
Rule 224   statementlist_opt -> statementlist
Rule 225   statementlist_opt -> <empty>
Rule 226   case_clause -> CASE expr COLON statementlist_opt
Rule 227   case_clauses -> case_clause
Rule 228   case_clauses -> case_clauses case_clause
Rule 229   case_clauses_opt -> case_clauses
Rule 230   case_clauses_opt -> <empty>
Rule 231   case_block -> case_clauses
Rule 232   case_block -> case_clauses_opt default_case case_clauses_opt
Rule 233   switch -> SWITCH paren_expr LBRACKET case_block RBRACKET
Rule 234   with -> WITH paren_expr ctrl_statement
Rule 235   if -> IF paren_expr ctrl_statement
Rule 236   try -> TRY statement_nonctrl
Rule 237   try -> TRY LBRACKET statementlist RBRACKET
Rule 238   try -> TRY LBRACKET RBRACKET
Rule 239   catch -> CATCH paren_expr statement_nonctrl
Rule 240   catch -> CATCH paren_expr LBRACKET statementlist RBRACKET
Rule 241   else -> ELSE ctrl_statement
Rule 242   break -> BREAK
Rule 243   continue -> CONTINUE
Rule 244   return -> RETURN expr
Rule 245   return -> RETURN
Rule 246   yield -> YIELD expr
Rule 247   yield -> YIELD

Terminals, with rules where they appear

ALL                  : 
ASSIGN               : 48 50 69 71 73 101 211
ASSIGNBAND           : 99
ASSIGNBOR            : 98
ASSIGNBXOR           : 100
ASSIGNDIVIDE         : 96
ASSIGNMINUS          : 95
ASSIGNPLUS           : 94
ASSIGNTIMES          : 97
BACKSLASH            : 
BAND                 : 174
BITINV               : 148
BNEGATE              : 
BOR                  : 171
BREAK                : 242
BXOR                 : 173
BYTE                 : 85
CASE                 : 226
CATCH                : 239 240
CHAR                 : 84
CLOSECOM             : 
COLON                : 8 10 117 126 136 137 163 192 223 226
COMMA                : 49 50 72 73 91 107 113 137 138 201
COMMENT              : 
CONST                : 54
CONTINUE             : 243
DEC                  : 145 146
DEFAULT              : 223
DELETE               : 141
DIVIDE               : 186
DO                   : 220
DOT                  : 168
DOUBLE               : 83
ELSE                 : 241
EMPTYLINE            : 
EQUAL                : 175
EQUAL_STRICT         : 176
FLOAT                : 82
FOR                  : 215 216
FUNCTION             : 119 120 121 128 129
GLOBAL               : 55
GTHAN                : 178
GTHANEQ              : 179
ID                   : 57 58 66 72 73 74 75 92 93 119 120 121 132 156 157 210 211
IF                   : 235
IN                   : 188 214
INC                  : 143 144
INFERRED             : 86
INSTANCEOF           : 172
INT                  : 80
LAND                 : 169
LBRACKET             : 121 122 216 218 222 233 237 238 240
LLSHIFT              : 166
LOR                  : 170
LPAREN               : 110 111 119 120 121 128 129 150 203 204 215 216
LSBRACKET            : 130 131 152
LSHIFT               : 165
LTHAN                : 180
LTHANEQ              : 182
MINUS                : 185 202
MLSTRLIT             : 
MOD                  : 181
NATIVE               : 120
NEW                  : 142
NOT                  : 147
NOTEQUAL             : 183
NOTEQUAL_STRICT      : 177
NUMBER               : 133 154
OPENCOM              : 
PLUS                 : 184
QEST                 : 192
RBRACKET             : 121 123 216 218 222 233 237 238 240
REGEXPR              : 209
RETURN               : 244 245
RPAREN               : 110 111 119 120 121 128 129 151 203 204 215 216
RRSHIFT              : 167
RSBRACKET            : 130 131 153
RSHIFT               : 164
SEMI                 : 19 20 21 22 23 27 28 29 30 31 37 38 39 40 41 44 163 213 213 219
SHORT                : 81
SIGNED               : 53
SLASHR               : 
STRINGLIT            : 134 149
STRUCT               : 
SWITCH               : 233
TEMPLATE             : 
TGTHAN               : 65
THEN                 : 
THROW                : 102
TIMES                : 187
TLTHAN               : 64
TRY                  : 236 237 238
TYPEOF               : 88 135
UNSIGNED             : 52
VAR                  : 56 92
VARIABLE             : 
WHILE                : 220 221 222
WITH                 : 234
YIELD                : 246 247
error                : 
newline              : 

Nonterminals, with rules where they appear

array_literal        : 159
assign               : 10 104 205
assign_opt           : 
assign_statement     : 
bitinv               : 195
break                : 21 39
case_block           : 233
case_clause          : 227 228
case_clauses         : 228 229 231
case_clauses_opt     : 232 232
catch                : 25 43
cmplx_assign         : 103 104 162 163
colon_opt            : 128 129
continue             : 22 40
ctrl_statement       : 220 234 235 241
dec                  : 198
default_case         : 232
delete               : 44
dowhile              : 17 35
else                 : 14 33
empty                : 76
expr                 : 28 69 71 73 102 103 103 104 105 106 107 135 136 137 141 142 143 144 145 146 147 148 162 162 163 163 164 164 165 165 166 166 167 167 168 168 169 169 170 170 171 171 172 172 173 173 174 174 175 175 176 176 177 177 178 178 179 179 180 180 181 181 182 182 183 183 184 184 185 185 186 186 187 187 188 188 189 190 191 191 192 192 192 201 201 202 203 207 211 214 226 244 246
expr_opt             : 213 213
expr_uminus          : 193
exprfunction         : 160
exprlist             : 107 110 130
for                  : 18 34
for_decl             : 215 216
for_var_decl         : 213 214
func_call            : 190
func_native          : 27
func_type_opt        : 119 120 121
funcdeflist          : 113 119 120 121 128
funcref              : 30
function             : 12
gthan_restrict       : 51 60 61
id_1                 : 
id_opt               : 
id_str_or_num        : 136 137
id_var_decl          : 
id_var_type          : 78 79
if                   : 13 32
inc                  : 197
lbracket_restrict    : 128 129 139 140
left_id              : 
lparen_restrict      : 189
lsbracket_restrict   : 191
lthan_restrict       : 51 60 61
new                  : 196
not                  : 194
obj_lit_list         : 137 138 139
obj_literal          : 161
opt_colon_type       : 
paren_expr           : 220 221 222 233 234 235 239 240
pop_scope            : 
push_scope           : 119 120 121 128 129 139
rbracket_restrict    : 128 129 139 140
re_lit               : 200
return               : 19 37
rparen_restrict      : 189
rsbracket_restrict   : 191
simple_templatedeflist : 60 61 91
simple_var_decl      : 
statement            : 1 3
statement_nonctrl    : 2 4 215 217 221 236 239
statementlist        : 3 4 223 224 237 240 0
statementlist_opt    : 121 128 129 216 218 222 226
strlit               : 155
switch               : 26
template             : 62 115
template_opt         : 119 120 121 128 129
template_ref         : 87 108 157 158
template_ref_opt     : 110 111
template_ref_validate : 63
template_validate    : 
templatedeflist      : 49 50 51
throw                : 23 41
try                  : 24 42
type_modifiers       : 52 53 54 68 70
typeof               : 199
typeof_opt           : 90 91
var_decl             : 29 45 71 72 73 212
var_decl_no_list     : 68 69 112 113
var_decl_or_type     : 
var_type             : 8 10 46 47 48 48 49 50 50 67 70 78 87 90 91 124 163
var_type_opt         : 117 128 129
while                : 15 36
with                 : 16
yield                : 20 38

Parsing method: LALR

state 0

    (0) S' -> . statementlist
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    $end            reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    statementlist                  shift and go to state 2
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 15
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 46
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 49
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 1

    (130) array_literal -> LSBRACKET . exprlist RSBRACKET
    (131) array_literal -> LSBRACKET . RSBRACKET
    (106) exprlist -> . expr
    (107) exprlist -> . exprlist COMMA expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    RSBRACKET       shift and go to state 79
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    exprlist                       shift and go to state 76
    bitinv                         shift and go to state 36
    expr                           shift and go to state 78
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 2

    (0) S' -> statementlist .
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 15
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 80
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 81
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 3

    (149) strlit -> STRINGLIT .

    RSHIFT          reduce using rule 149 (strlit -> STRINGLIT .)
    LSHIFT          reduce using rule 149 (strlit -> STRINGLIT .)
    LLSHIFT         reduce using rule 149 (strlit -> STRINGLIT .)
    RRSHIFT         reduce using rule 149 (strlit -> STRINGLIT .)
    DOT             reduce using rule 149 (strlit -> STRINGLIT .)
    LAND            reduce using rule 149 (strlit -> STRINGLIT .)
    LOR             reduce using rule 149 (strlit -> STRINGLIT .)
    BOR             reduce using rule 149 (strlit -> STRINGLIT .)
    INSTANCEOF      reduce using rule 149 (strlit -> STRINGLIT .)
    BXOR            reduce using rule 149 (strlit -> STRINGLIT .)
    BAND            reduce using rule 149 (strlit -> STRINGLIT .)
    EQUAL           reduce using rule 149 (strlit -> STRINGLIT .)
    EQUAL_STRICT    reduce using rule 149 (strlit -> STRINGLIT .)
    NOTEQUAL_STRICT reduce using rule 149 (strlit -> STRINGLIT .)
    GTHAN           reduce using rule 149 (strlit -> STRINGLIT .)
    GTHANEQ         reduce using rule 149 (strlit -> STRINGLIT .)
    LTHAN           reduce using rule 149 (strlit -> STRINGLIT .)
    MOD             reduce using rule 149 (strlit -> STRINGLIT .)
    LTHANEQ         reduce using rule 149 (strlit -> STRINGLIT .)
    NOTEQUAL        reduce using rule 149 (strlit -> STRINGLIT .)
    PLUS            reduce using rule 149 (strlit -> STRINGLIT .)
    MINUS           reduce using rule 149 (strlit -> STRINGLIT .)
    DIVIDE          reduce using rule 149 (strlit -> STRINGLIT .)
    TIMES           reduce using rule 149 (strlit -> STRINGLIT .)
    IN              reduce using rule 149 (strlit -> STRINGLIT .)
    QEST            reduce using rule 149 (strlit -> STRINGLIT .)
    COMMA           reduce using rule 149 (strlit -> STRINGLIT .)
    INC             reduce using rule 149 (strlit -> STRINGLIT .)
    DEC             reduce using rule 149 (strlit -> STRINGLIT .)
    ASSIGNPLUS      reduce using rule 149 (strlit -> STRINGLIT .)
    ASSIGNMINUS     reduce using rule 149 (strlit -> STRINGLIT .)
    ASSIGNDIVIDE    reduce using rule 149 (strlit -> STRINGLIT .)
    ASSIGNTIMES     reduce using rule 149 (strlit -> STRINGLIT .)
    ASSIGNBOR       reduce using rule 149 (strlit -> STRINGLIT .)
    ASSIGNBAND      reduce using rule 149 (strlit -> STRINGLIT .)
    ASSIGNBXOR      reduce using rule 149 (strlit -> STRINGLIT .)
    ASSIGN          reduce using rule 149 (strlit -> STRINGLIT .)
    LSBRACKET       reduce using rule 149 (strlit -> STRINGLIT .)
    TLTHAN          reduce using rule 149 (strlit -> STRINGLIT .)
    LPAREN          reduce using rule 149 (strlit -> STRINGLIT .)
    SEMI            reduce using rule 149 (strlit -> STRINGLIT .)
    RSBRACKET       reduce using rule 149 (strlit -> STRINGLIT .)
    RPAREN          reduce using rule 149 (strlit -> STRINGLIT .)
    COLON           reduce using rule 149 (strlit -> STRINGLIT .)
    RBRACKET        reduce using rule 149 (strlit -> STRINGLIT .)


state 4

    (122) lbracket_restrict -> LBRACKET .

    RBRACKET        reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    ID              reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    NUMBER          reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    STRINGLIT       reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    SEMI            reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    FUNCTION        reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    IF              reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    ELSE            reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    WHILE           reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    WITH            reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    DO              reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    FOR             reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    RETURN          reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    YIELD           reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    BREAK           reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    CONTINUE        reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    THROW           reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    TRY             reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    CATCH           reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    SWITCH          reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    NATIVE          reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    DELETE          reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    LSBRACKET       reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    LPAREN          reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    MINUS           reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    NOT             reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    BITINV          reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    NEW             reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    INC             reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    DEC             reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    TYPEOF          reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    REGEXPR         reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    GLOBAL          reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    VAR             reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    TLTHAN          reduce using rule 122 (lbracket_restrict -> LBRACKET .)
    LBRACKET        reduce using rule 122 (lbracket_restrict -> LBRACKET .)


state 5

    (56) type_modifiers -> VAR .

    UNSIGNED        reduce using rule 56 (type_modifiers -> VAR .)
    SIGNED          reduce using rule 56 (type_modifiers -> VAR .)
    CONST           reduce using rule 56 (type_modifiers -> VAR .)
    INT             reduce using rule 56 (type_modifiers -> VAR .)
    SHORT           reduce using rule 56 (type_modifiers -> VAR .)
    FLOAT           reduce using rule 56 (type_modifiers -> VAR .)
    DOUBLE          reduce using rule 56 (type_modifiers -> VAR .)
    CHAR            reduce using rule 56 (type_modifiers -> VAR .)
    BYTE            reduce using rule 56 (type_modifiers -> VAR .)
    INFERRED        reduce using rule 56 (type_modifiers -> VAR .)
    ID              reduce using rule 56 (type_modifiers -> VAR .)
    GLOBAL          reduce using rule 56 (type_modifiers -> VAR .)
    VAR             reduce using rule 56 (type_modifiers -> VAR .)


state 6

    (60) template_ref -> lthan_restrict . simple_templatedeflist gthan_restrict
    (90) simple_templatedeflist -> . typeof_opt var_type
    (91) simple_templatedeflist -> . simple_templatedeflist COMMA typeof_opt var_type
    (88) typeof_opt -> . TYPEOF
    (89) typeof_opt -> .

    TYPEOF          shift and go to state 84
    INT             reduce using rule 89 (typeof_opt -> .)
    SHORT           reduce using rule 89 (typeof_opt -> .)
    FLOAT           reduce using rule 89 (typeof_opt -> .)
    DOUBLE          reduce using rule 89 (typeof_opt -> .)
    CHAR            reduce using rule 89 (typeof_opt -> .)
    BYTE            reduce using rule 89 (typeof_opt -> .)
    INFERRED        reduce using rule 89 (typeof_opt -> .)
    ID              reduce using rule 89 (typeof_opt -> .)

    typeof_opt                     shift and go to state 82
    simple_templatedeflist         shift and go to state 83

state 7

    (30) statement_nonctrl -> funcref . SEMI

    SEMI            shift and go to state 85


state 8

    (234) with -> WITH . paren_expr ctrl_statement
    (203) paren_expr -> . LPAREN expr RPAREN
    (204) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 86

    paren_expr                     shift and go to state 87

state 9

    (202) expr_uminus -> MINUS . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 88
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 10

    (209) re_lit -> REGEXPR .

    COLON           reduce using rule 209 (re_lit -> REGEXPR .)
    RSHIFT          reduce using rule 209 (re_lit -> REGEXPR .)
    LSHIFT          reduce using rule 209 (re_lit -> REGEXPR .)
    LLSHIFT         reduce using rule 209 (re_lit -> REGEXPR .)
    RRSHIFT         reduce using rule 209 (re_lit -> REGEXPR .)
    DOT             reduce using rule 209 (re_lit -> REGEXPR .)
    LAND            reduce using rule 209 (re_lit -> REGEXPR .)
    LOR             reduce using rule 209 (re_lit -> REGEXPR .)
    BOR             reduce using rule 209 (re_lit -> REGEXPR .)
    INSTANCEOF      reduce using rule 209 (re_lit -> REGEXPR .)
    BXOR            reduce using rule 209 (re_lit -> REGEXPR .)
    BAND            reduce using rule 209 (re_lit -> REGEXPR .)
    EQUAL           reduce using rule 209 (re_lit -> REGEXPR .)
    EQUAL_STRICT    reduce using rule 209 (re_lit -> REGEXPR .)
    NOTEQUAL_STRICT reduce using rule 209 (re_lit -> REGEXPR .)
    GTHAN           reduce using rule 209 (re_lit -> REGEXPR .)
    GTHANEQ         reduce using rule 209 (re_lit -> REGEXPR .)
    LTHAN           reduce using rule 209 (re_lit -> REGEXPR .)
    MOD             reduce using rule 209 (re_lit -> REGEXPR .)
    LTHANEQ         reduce using rule 209 (re_lit -> REGEXPR .)
    NOTEQUAL        reduce using rule 209 (re_lit -> REGEXPR .)
    PLUS            reduce using rule 209 (re_lit -> REGEXPR .)
    MINUS           reduce using rule 209 (re_lit -> REGEXPR .)
    DIVIDE          reduce using rule 209 (re_lit -> REGEXPR .)
    TIMES           reduce using rule 209 (re_lit -> REGEXPR .)
    IN              reduce using rule 209 (re_lit -> REGEXPR .)
    QEST            reduce using rule 209 (re_lit -> REGEXPR .)
    COMMA           reduce using rule 209 (re_lit -> REGEXPR .)
    INC             reduce using rule 209 (re_lit -> REGEXPR .)
    DEC             reduce using rule 209 (re_lit -> REGEXPR .)
    ASSIGNPLUS      reduce using rule 209 (re_lit -> REGEXPR .)
    ASSIGNMINUS     reduce using rule 209 (re_lit -> REGEXPR .)
    ASSIGNDIVIDE    reduce using rule 209 (re_lit -> REGEXPR .)
    ASSIGNTIMES     reduce using rule 209 (re_lit -> REGEXPR .)
    ASSIGNBOR       reduce using rule 209 (re_lit -> REGEXPR .)
    ASSIGNBAND      reduce using rule 209 (re_lit -> REGEXPR .)
    ASSIGNBXOR      reduce using rule 209 (re_lit -> REGEXPR .)
    ASSIGN          reduce using rule 209 (re_lit -> REGEXPR .)
    LSBRACKET       reduce using rule 209 (re_lit -> REGEXPR .)
    TLTHAN          reduce using rule 209 (re_lit -> REGEXPR .)
    LPAREN          reduce using rule 209 (re_lit -> REGEXPR .)
    SEMI            reduce using rule 209 (re_lit -> REGEXPR .)
    RSBRACKET       reduce using rule 209 (re_lit -> REGEXPR .)
    RPAREN          reduce using rule 209 (re_lit -> REGEXPR .)
    RBRACKET        reduce using rule 209 (re_lit -> REGEXPR .)


state 11

    (55) type_modifiers -> GLOBAL .

    UNSIGNED        reduce using rule 55 (type_modifiers -> GLOBAL .)
    SIGNED          reduce using rule 55 (type_modifiers -> GLOBAL .)
    CONST           reduce using rule 55 (type_modifiers -> GLOBAL .)
    INT             reduce using rule 55 (type_modifiers -> GLOBAL .)
    SHORT           reduce using rule 55 (type_modifiers -> GLOBAL .)
    FLOAT           reduce using rule 55 (type_modifiers -> GLOBAL .)
    DOUBLE          reduce using rule 55 (type_modifiers -> GLOBAL .)
    CHAR            reduce using rule 55 (type_modifiers -> GLOBAL .)
    BYTE            reduce using rule 55 (type_modifiers -> GLOBAL .)
    INFERRED        reduce using rule 55 (type_modifiers -> GLOBAL .)
    ID              reduce using rule 55 (type_modifiers -> GLOBAL .)
    GLOBAL          reduce using rule 55 (type_modifiers -> GLOBAL .)
    VAR             reduce using rule 55 (type_modifiers -> GLOBAL .)


state 12

    (19) statement -> return . SEMI
    (37) statement_nonctrl -> return . SEMI

    SEMI            shift and go to state 89


state 13

    (21) statement -> break . SEMI
    (39) statement_nonctrl -> break . SEMI

    SEMI            shift and go to state 90


state 14

    (194) expr -> not .

    SEMI            reduce using rule 194 (expr -> not .)
    RSHIFT          reduce using rule 194 (expr -> not .)
    LSHIFT          reduce using rule 194 (expr -> not .)
    LLSHIFT         reduce using rule 194 (expr -> not .)
    RRSHIFT         reduce using rule 194 (expr -> not .)
    DOT             reduce using rule 194 (expr -> not .)
    LAND            reduce using rule 194 (expr -> not .)
    LOR             reduce using rule 194 (expr -> not .)
    BOR             reduce using rule 194 (expr -> not .)
    INSTANCEOF      reduce using rule 194 (expr -> not .)
    BXOR            reduce using rule 194 (expr -> not .)
    BAND            reduce using rule 194 (expr -> not .)
    EQUAL           reduce using rule 194 (expr -> not .)
    EQUAL_STRICT    reduce using rule 194 (expr -> not .)
    NOTEQUAL_STRICT reduce using rule 194 (expr -> not .)
    GTHAN           reduce using rule 194 (expr -> not .)
    GTHANEQ         reduce using rule 194 (expr -> not .)
    LTHAN           reduce using rule 194 (expr -> not .)
    MOD             reduce using rule 194 (expr -> not .)
    LTHANEQ         reduce using rule 194 (expr -> not .)
    NOTEQUAL        reduce using rule 194 (expr -> not .)
    PLUS            reduce using rule 194 (expr -> not .)
    MINUS           reduce using rule 194 (expr -> not .)
    DIVIDE          reduce using rule 194 (expr -> not .)
    TIMES           reduce using rule 194 (expr -> not .)
    IN              reduce using rule 194 (expr -> not .)
    QEST            reduce using rule 194 (expr -> not .)
    COMMA           reduce using rule 194 (expr -> not .)
    INC             reduce using rule 194 (expr -> not .)
    DEC             reduce using rule 194 (expr -> not .)
    ASSIGNPLUS      reduce using rule 194 (expr -> not .)
    ASSIGNMINUS     reduce using rule 194 (expr -> not .)
    ASSIGNDIVIDE    reduce using rule 194 (expr -> not .)
    ASSIGNTIMES     reduce using rule 194 (expr -> not .)
    ASSIGNBOR       reduce using rule 194 (expr -> not .)
    ASSIGNBAND      reduce using rule 194 (expr -> not .)
    ASSIGNBXOR      reduce using rule 194 (expr -> not .)
    ASSIGN          reduce using rule 194 (expr -> not .)
    LSBRACKET       reduce using rule 194 (expr -> not .)
    TLTHAN          reduce using rule 194 (expr -> not .)
    LPAREN          reduce using rule 194 (expr -> not .)
    RSBRACKET       reduce using rule 194 (expr -> not .)
    RPAREN          reduce using rule 194 (expr -> not .)
    COLON           reduce using rule 194 (expr -> not .)
    RBRACKET        reduce using rule 194 (expr -> not .)


state 15

    (20) statement -> yield . SEMI
    (38) statement_nonctrl -> yield . SEMI

    SEMI            shift and go to state 91


state 16

    (24) statement -> try .
    (42) statement_nonctrl -> try .

  ! reduce/reduce conflict for RBRACKET resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for SEMI resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for IF resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for ELSE resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for WHILE resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for WITH resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for DO resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for FOR resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for RETURN resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for YIELD resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for BREAK resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for THROW resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for TRY resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for CATCH resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for SWITCH resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for NATIVE resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for NUMBER resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for ID resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for DELETE resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for LPAREN resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for MINUS resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for NOT resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for BITINV resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for NEW resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for INC resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for DEC resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for VAR resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for $end resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for CASE resolved using rule 24 (statement -> try .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 24 (statement -> try .)
    RBRACKET        reduce using rule 24 (statement -> try .)
    SEMI            reduce using rule 24 (statement -> try .)
    FUNCTION        reduce using rule 24 (statement -> try .)
    IF              reduce using rule 24 (statement -> try .)
    ELSE            reduce using rule 24 (statement -> try .)
    WHILE           reduce using rule 24 (statement -> try .)
    WITH            reduce using rule 24 (statement -> try .)
    DO              reduce using rule 24 (statement -> try .)
    FOR             reduce using rule 24 (statement -> try .)
    RETURN          reduce using rule 24 (statement -> try .)
    YIELD           reduce using rule 24 (statement -> try .)
    BREAK           reduce using rule 24 (statement -> try .)
    CONTINUE        reduce using rule 24 (statement -> try .)
    THROW           reduce using rule 24 (statement -> try .)
    TRY             reduce using rule 24 (statement -> try .)
    CATCH           reduce using rule 24 (statement -> try .)
    SWITCH          reduce using rule 24 (statement -> try .)
    NATIVE          reduce using rule 24 (statement -> try .)
    NUMBER          reduce using rule 24 (statement -> try .)
    ID              reduce using rule 24 (statement -> try .)
    DELETE          reduce using rule 24 (statement -> try .)
    STRINGLIT       reduce using rule 24 (statement -> try .)
    LSBRACKET       reduce using rule 24 (statement -> try .)
    LPAREN          reduce using rule 24 (statement -> try .)
    MINUS           reduce using rule 24 (statement -> try .)
    NOT             reduce using rule 24 (statement -> try .)
    BITINV          reduce using rule 24 (statement -> try .)
    NEW             reduce using rule 24 (statement -> try .)
    INC             reduce using rule 24 (statement -> try .)
    DEC             reduce using rule 24 (statement -> try .)
    TYPEOF          reduce using rule 24 (statement -> try .)
    REGEXPR         reduce using rule 24 (statement -> try .)
    GLOBAL          reduce using rule 24 (statement -> try .)
    VAR             reduce using rule 24 (statement -> try .)
    TLTHAN          reduce using rule 24 (statement -> try .)
    LBRACKET        reduce using rule 24 (statement -> try .)
    $end            reduce using rule 24 (statement -> try .)
    CASE            reduce using rule 24 (statement -> try .)
    DEFAULT         reduce using rule 24 (statement -> try .)

  ! RBRACKET        [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! SEMI            [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! FUNCTION        [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! IF              [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! ELSE            [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! WHILE           [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! WITH            [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! DO              [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! FOR             [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! RETURN          [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! YIELD           [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! BREAK           [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! CONTINUE        [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! THROW           [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! TRY             [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! CATCH           [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! SWITCH          [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! NATIVE          [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! NUMBER          [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! ID              [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! DELETE          [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! STRINGLIT       [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! LSBRACKET       [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! LPAREN          [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! MINUS           [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! NOT             [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! BITINV          [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! NEW             [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! INC             [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! DEC             [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! TYPEOF          [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! REGEXPR         [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! GLOBAL          [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! VAR             [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! TLTHAN          [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! LBRACKET        [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! $end            [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! CASE            [ reduce using rule 42 (statement_nonctrl -> try .) ]
  ! DEFAULT         [ reduce using rule 42 (statement_nonctrl -> try .) ]


state 17

    (22) statement -> continue . SEMI
    (40) statement_nonctrl -> continue . SEMI

    SEMI            shift and go to state 92


state 18

    (135) typeof -> TYPEOF . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 93
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 19

    (141) delete -> DELETE . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 94
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 20

    (244) return -> RETURN . expr
    (245) return -> RETURN .
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    SEMI            reduce using rule 245 (return -> RETURN .)
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 95
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 21

    (189) expr -> lparen_restrict . expr rparen_restrict
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 96
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 22

    (160) expr -> exprfunction .

    SEMI            reduce using rule 160 (expr -> exprfunction .)
    RSHIFT          reduce using rule 160 (expr -> exprfunction .)
    LSHIFT          reduce using rule 160 (expr -> exprfunction .)
    LLSHIFT         reduce using rule 160 (expr -> exprfunction .)
    RRSHIFT         reduce using rule 160 (expr -> exprfunction .)
    DOT             reduce using rule 160 (expr -> exprfunction .)
    LAND            reduce using rule 160 (expr -> exprfunction .)
    LOR             reduce using rule 160 (expr -> exprfunction .)
    BOR             reduce using rule 160 (expr -> exprfunction .)
    INSTANCEOF      reduce using rule 160 (expr -> exprfunction .)
    BXOR            reduce using rule 160 (expr -> exprfunction .)
    BAND            reduce using rule 160 (expr -> exprfunction .)
    EQUAL           reduce using rule 160 (expr -> exprfunction .)
    EQUAL_STRICT    reduce using rule 160 (expr -> exprfunction .)
    NOTEQUAL_STRICT reduce using rule 160 (expr -> exprfunction .)
    GTHAN           reduce using rule 160 (expr -> exprfunction .)
    GTHANEQ         reduce using rule 160 (expr -> exprfunction .)
    LTHAN           reduce using rule 160 (expr -> exprfunction .)
    MOD             reduce using rule 160 (expr -> exprfunction .)
    LTHANEQ         reduce using rule 160 (expr -> exprfunction .)
    NOTEQUAL        reduce using rule 160 (expr -> exprfunction .)
    PLUS            reduce using rule 160 (expr -> exprfunction .)
    MINUS           reduce using rule 160 (expr -> exprfunction .)
    DIVIDE          reduce using rule 160 (expr -> exprfunction .)
    TIMES           reduce using rule 160 (expr -> exprfunction .)
    IN              reduce using rule 160 (expr -> exprfunction .)
    QEST            reduce using rule 160 (expr -> exprfunction .)
    COMMA           reduce using rule 160 (expr -> exprfunction .)
    INC             reduce using rule 160 (expr -> exprfunction .)
    DEC             reduce using rule 160 (expr -> exprfunction .)
    ASSIGNPLUS      reduce using rule 160 (expr -> exprfunction .)
    ASSIGNMINUS     reduce using rule 160 (expr -> exprfunction .)
    ASSIGNDIVIDE    reduce using rule 160 (expr -> exprfunction .)
    ASSIGNTIMES     reduce using rule 160 (expr -> exprfunction .)
    ASSIGNBOR       reduce using rule 160 (expr -> exprfunction .)
    ASSIGNBAND      reduce using rule 160 (expr -> exprfunction .)
    ASSIGNBXOR      reduce using rule 160 (expr -> exprfunction .)
    ASSIGN          reduce using rule 160 (expr -> exprfunction .)
    LSBRACKET       reduce using rule 160 (expr -> exprfunction .)
    TLTHAN          reduce using rule 160 (expr -> exprfunction .)
    LPAREN          reduce using rule 160 (expr -> exprfunction .)
    RSBRACKET       reduce using rule 160 (expr -> exprfunction .)
    RPAREN          reduce using rule 160 (expr -> exprfunction .)
    COLON           reduce using rule 160 (expr -> exprfunction .)
    RBRACKET        reduce using rule 160 (expr -> exprfunction .)


state 23

    (146) dec -> DEC . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 97
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 24

    (155) expr -> strlit .

    SEMI            reduce using rule 155 (expr -> strlit .)
    RSHIFT          reduce using rule 155 (expr -> strlit .)
    LSHIFT          reduce using rule 155 (expr -> strlit .)
    LLSHIFT         reduce using rule 155 (expr -> strlit .)
    RRSHIFT         reduce using rule 155 (expr -> strlit .)
    DOT             reduce using rule 155 (expr -> strlit .)
    LAND            reduce using rule 155 (expr -> strlit .)
    LOR             reduce using rule 155 (expr -> strlit .)
    BOR             reduce using rule 155 (expr -> strlit .)
    INSTANCEOF      reduce using rule 155 (expr -> strlit .)
    BXOR            reduce using rule 155 (expr -> strlit .)
    BAND            reduce using rule 155 (expr -> strlit .)
    EQUAL           reduce using rule 155 (expr -> strlit .)
    EQUAL_STRICT    reduce using rule 155 (expr -> strlit .)
    NOTEQUAL_STRICT reduce using rule 155 (expr -> strlit .)
    GTHAN           reduce using rule 155 (expr -> strlit .)
    GTHANEQ         reduce using rule 155 (expr -> strlit .)
    LTHAN           reduce using rule 155 (expr -> strlit .)
    MOD             reduce using rule 155 (expr -> strlit .)
    LTHANEQ         reduce using rule 155 (expr -> strlit .)
    NOTEQUAL        reduce using rule 155 (expr -> strlit .)
    PLUS            reduce using rule 155 (expr -> strlit .)
    MINUS           reduce using rule 155 (expr -> strlit .)
    DIVIDE          reduce using rule 155 (expr -> strlit .)
    TIMES           reduce using rule 155 (expr -> strlit .)
    IN              reduce using rule 155 (expr -> strlit .)
    QEST            reduce using rule 155 (expr -> strlit .)
    COMMA           reduce using rule 155 (expr -> strlit .)
    INC             reduce using rule 155 (expr -> strlit .)
    DEC             reduce using rule 155 (expr -> strlit .)
    ASSIGNPLUS      reduce using rule 155 (expr -> strlit .)
    ASSIGNMINUS     reduce using rule 155 (expr -> strlit .)
    ASSIGNDIVIDE    reduce using rule 155 (expr -> strlit .)
    ASSIGNTIMES     reduce using rule 155 (expr -> strlit .)
    ASSIGNBOR       reduce using rule 155 (expr -> strlit .)
    ASSIGNBAND      reduce using rule 155 (expr -> strlit .)
    ASSIGNBXOR      reduce using rule 155 (expr -> strlit .)
    ASSIGN          reduce using rule 155 (expr -> strlit .)
    LSBRACKET       reduce using rule 155 (expr -> strlit .)
    TLTHAN          reduce using rule 155 (expr -> strlit .)
    LPAREN          reduce using rule 155 (expr -> strlit .)
    RSBRACKET       reduce using rule 155 (expr -> strlit .)
    RPAREN          reduce using rule 155 (expr -> strlit .)
    COLON           reduce using rule 155 (expr -> strlit .)
    RBRACKET        reduce using rule 155 (expr -> strlit .)


state 25

    (18) statement -> for .
    (34) statement_nonctrl -> for .

  ! reduce/reduce conflict for RBRACKET resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for SEMI resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for IF resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for ELSE resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for WHILE resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for WITH resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for DO resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for FOR resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for RETURN resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for YIELD resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for BREAK resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for THROW resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for TRY resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for CATCH resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for SWITCH resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for NATIVE resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for NUMBER resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for ID resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for DELETE resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for LPAREN resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for MINUS resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for NOT resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for BITINV resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for NEW resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for INC resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for DEC resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for VAR resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for $end resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for CASE resolved using rule 18 (statement -> for .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 18 (statement -> for .)
    RBRACKET        reduce using rule 18 (statement -> for .)
    SEMI            reduce using rule 18 (statement -> for .)
    FUNCTION        reduce using rule 18 (statement -> for .)
    IF              reduce using rule 18 (statement -> for .)
    ELSE            reduce using rule 18 (statement -> for .)
    WHILE           reduce using rule 18 (statement -> for .)
    WITH            reduce using rule 18 (statement -> for .)
    DO              reduce using rule 18 (statement -> for .)
    FOR             reduce using rule 18 (statement -> for .)
    RETURN          reduce using rule 18 (statement -> for .)
    YIELD           reduce using rule 18 (statement -> for .)
    BREAK           reduce using rule 18 (statement -> for .)
    CONTINUE        reduce using rule 18 (statement -> for .)
    THROW           reduce using rule 18 (statement -> for .)
    TRY             reduce using rule 18 (statement -> for .)
    CATCH           reduce using rule 18 (statement -> for .)
    SWITCH          reduce using rule 18 (statement -> for .)
    NATIVE          reduce using rule 18 (statement -> for .)
    NUMBER          reduce using rule 18 (statement -> for .)
    ID              reduce using rule 18 (statement -> for .)
    DELETE          reduce using rule 18 (statement -> for .)
    STRINGLIT       reduce using rule 18 (statement -> for .)
    LSBRACKET       reduce using rule 18 (statement -> for .)
    LPAREN          reduce using rule 18 (statement -> for .)
    MINUS           reduce using rule 18 (statement -> for .)
    NOT             reduce using rule 18 (statement -> for .)
    BITINV          reduce using rule 18 (statement -> for .)
    NEW             reduce using rule 18 (statement -> for .)
    INC             reduce using rule 18 (statement -> for .)
    DEC             reduce using rule 18 (statement -> for .)
    TYPEOF          reduce using rule 18 (statement -> for .)
    REGEXPR         reduce using rule 18 (statement -> for .)
    GLOBAL          reduce using rule 18 (statement -> for .)
    VAR             reduce using rule 18 (statement -> for .)
    TLTHAN          reduce using rule 18 (statement -> for .)
    LBRACKET        reduce using rule 18 (statement -> for .)
    $end            reduce using rule 18 (statement -> for .)
    CASE            reduce using rule 18 (statement -> for .)
    DEFAULT         reduce using rule 18 (statement -> for .)

  ! RBRACKET        [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! SEMI            [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! FUNCTION        [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! IF              [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! ELSE            [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! WHILE           [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! WITH            [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! DO              [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! FOR             [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! RETURN          [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! YIELD           [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! BREAK           [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! CONTINUE        [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! THROW           [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! TRY             [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! CATCH           [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! SWITCH          [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! NATIVE          [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! NUMBER          [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! ID              [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! DELETE          [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! STRINGLIT       [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! LSBRACKET       [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! LPAREN          [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! MINUS           [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! NOT             [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! BITINV          [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! NEW             [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! INC             [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! DEC             [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! TYPEOF          [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! REGEXPR         [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! GLOBAL          [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! VAR             [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! TLTHAN          [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! LBRACKET        [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! $end            [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! CASE            [ reduce using rule 34 (statement_nonctrl -> for .) ]
  ! DEFAULT         [ reduce using rule 34 (statement_nonctrl -> for .) ]


state 26

    (148) bitinv -> BITINV . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 98
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 27

    (161) expr -> obj_literal .

    SEMI            reduce using rule 161 (expr -> obj_literal .)
    RSHIFT          reduce using rule 161 (expr -> obj_literal .)
    LSHIFT          reduce using rule 161 (expr -> obj_literal .)
    LLSHIFT         reduce using rule 161 (expr -> obj_literal .)
    RRSHIFT         reduce using rule 161 (expr -> obj_literal .)
    DOT             reduce using rule 161 (expr -> obj_literal .)
    LAND            reduce using rule 161 (expr -> obj_literal .)
    LOR             reduce using rule 161 (expr -> obj_literal .)
    BOR             reduce using rule 161 (expr -> obj_literal .)
    INSTANCEOF      reduce using rule 161 (expr -> obj_literal .)
    BXOR            reduce using rule 161 (expr -> obj_literal .)
    BAND            reduce using rule 161 (expr -> obj_literal .)
    EQUAL           reduce using rule 161 (expr -> obj_literal .)
    EQUAL_STRICT    reduce using rule 161 (expr -> obj_literal .)
    NOTEQUAL_STRICT reduce using rule 161 (expr -> obj_literal .)
    GTHAN           reduce using rule 161 (expr -> obj_literal .)
    GTHANEQ         reduce using rule 161 (expr -> obj_literal .)
    LTHAN           reduce using rule 161 (expr -> obj_literal .)
    MOD             reduce using rule 161 (expr -> obj_literal .)
    LTHANEQ         reduce using rule 161 (expr -> obj_literal .)
    NOTEQUAL        reduce using rule 161 (expr -> obj_literal .)
    PLUS            reduce using rule 161 (expr -> obj_literal .)
    MINUS           reduce using rule 161 (expr -> obj_literal .)
    DIVIDE          reduce using rule 161 (expr -> obj_literal .)
    TIMES           reduce using rule 161 (expr -> obj_literal .)
    IN              reduce using rule 161 (expr -> obj_literal .)
    QEST            reduce using rule 161 (expr -> obj_literal .)
    COMMA           reduce using rule 161 (expr -> obj_literal .)
    INC             reduce using rule 161 (expr -> obj_literal .)
    DEC             reduce using rule 161 (expr -> obj_literal .)
    ASSIGNPLUS      reduce using rule 161 (expr -> obj_literal .)
    ASSIGNMINUS     reduce using rule 161 (expr -> obj_literal .)
    ASSIGNDIVIDE    reduce using rule 161 (expr -> obj_literal .)
    ASSIGNTIMES     reduce using rule 161 (expr -> obj_literal .)
    ASSIGNBOR       reduce using rule 161 (expr -> obj_literal .)
    ASSIGNBAND      reduce using rule 161 (expr -> obj_literal .)
    ASSIGNBXOR      reduce using rule 161 (expr -> obj_literal .)
    ASSIGN          reduce using rule 161 (expr -> obj_literal .)
    LSBRACKET       reduce using rule 161 (expr -> obj_literal .)
    TLTHAN          reduce using rule 161 (expr -> obj_literal .)
    LPAREN          reduce using rule 161 (expr -> obj_literal .)
    RSBRACKET       reduce using rule 161 (expr -> obj_literal .)
    RPAREN          reduce using rule 161 (expr -> obj_literal .)
    COLON           reduce using rule 161 (expr -> obj_literal .)
    RBRACKET        reduce using rule 161 (expr -> obj_literal .)


state 28

    (70) var_decl -> type_modifiers . var_type
    (52) type_modifiers -> type_modifiers . UNSIGNED
    (53) type_modifiers -> type_modifiers . SIGNED
    (54) type_modifiers -> type_modifiers . CONST
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (74) id_var_type -> . ID

    UNSIGNED        shift and go to state 105
    SIGNED          shift and go to state 106
    CONST           shift and go to state 100
    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    ID              shift and go to state 110

    var_type                       shift and go to state 101
    id_var_type                    shift and go to state 111

state 29

    (196) expr -> new .

    SEMI            reduce using rule 196 (expr -> new .)
    RSHIFT          reduce using rule 196 (expr -> new .)
    LSHIFT          reduce using rule 196 (expr -> new .)
    LLSHIFT         reduce using rule 196 (expr -> new .)
    RRSHIFT         reduce using rule 196 (expr -> new .)
    DOT             reduce using rule 196 (expr -> new .)
    LAND            reduce using rule 196 (expr -> new .)
    LOR             reduce using rule 196 (expr -> new .)
    BOR             reduce using rule 196 (expr -> new .)
    INSTANCEOF      reduce using rule 196 (expr -> new .)
    BXOR            reduce using rule 196 (expr -> new .)
    BAND            reduce using rule 196 (expr -> new .)
    EQUAL           reduce using rule 196 (expr -> new .)
    EQUAL_STRICT    reduce using rule 196 (expr -> new .)
    NOTEQUAL_STRICT reduce using rule 196 (expr -> new .)
    GTHAN           reduce using rule 196 (expr -> new .)
    GTHANEQ         reduce using rule 196 (expr -> new .)
    LTHAN           reduce using rule 196 (expr -> new .)
    MOD             reduce using rule 196 (expr -> new .)
    LTHANEQ         reduce using rule 196 (expr -> new .)
    NOTEQUAL        reduce using rule 196 (expr -> new .)
    PLUS            reduce using rule 196 (expr -> new .)
    MINUS           reduce using rule 196 (expr -> new .)
    DIVIDE          reduce using rule 196 (expr -> new .)
    TIMES           reduce using rule 196 (expr -> new .)
    IN              reduce using rule 196 (expr -> new .)
    QEST            reduce using rule 196 (expr -> new .)
    COMMA           reduce using rule 196 (expr -> new .)
    INC             reduce using rule 196 (expr -> new .)
    DEC             reduce using rule 196 (expr -> new .)
    ASSIGNPLUS      reduce using rule 196 (expr -> new .)
    ASSIGNMINUS     reduce using rule 196 (expr -> new .)
    ASSIGNDIVIDE    reduce using rule 196 (expr -> new .)
    ASSIGNTIMES     reduce using rule 196 (expr -> new .)
    ASSIGNBOR       reduce using rule 196 (expr -> new .)
    ASSIGNBAND      reduce using rule 196 (expr -> new .)
    ASSIGNBXOR      reduce using rule 196 (expr -> new .)
    ASSIGN          reduce using rule 196 (expr -> new .)
    LSBRACKET       reduce using rule 196 (expr -> new .)
    TLTHAN          reduce using rule 196 (expr -> new .)
    LPAREN          reduce using rule 196 (expr -> new .)
    RSBRACKET       reduce using rule 196 (expr -> new .)
    RPAREN          reduce using rule 196 (expr -> new .)
    COLON           reduce using rule 196 (expr -> new .)
    RBRACKET        reduce using rule 196 (expr -> new .)


state 30

    (158) expr -> template_ref .

    SEMI            reduce using rule 158 (expr -> template_ref .)
    RSHIFT          reduce using rule 158 (expr -> template_ref .)
    LSHIFT          reduce using rule 158 (expr -> template_ref .)
    LLSHIFT         reduce using rule 158 (expr -> template_ref .)
    RRSHIFT         reduce using rule 158 (expr -> template_ref .)
    DOT             reduce using rule 158 (expr -> template_ref .)
    LAND            reduce using rule 158 (expr -> template_ref .)
    LOR             reduce using rule 158 (expr -> template_ref .)
    BOR             reduce using rule 158 (expr -> template_ref .)
    INSTANCEOF      reduce using rule 158 (expr -> template_ref .)
    BXOR            reduce using rule 158 (expr -> template_ref .)
    BAND            reduce using rule 158 (expr -> template_ref .)
    EQUAL           reduce using rule 158 (expr -> template_ref .)
    EQUAL_STRICT    reduce using rule 158 (expr -> template_ref .)
    NOTEQUAL_STRICT reduce using rule 158 (expr -> template_ref .)
    GTHAN           reduce using rule 158 (expr -> template_ref .)
    GTHANEQ         reduce using rule 158 (expr -> template_ref .)
    LTHAN           reduce using rule 158 (expr -> template_ref .)
    MOD             reduce using rule 158 (expr -> template_ref .)
    LTHANEQ         reduce using rule 158 (expr -> template_ref .)
    NOTEQUAL        reduce using rule 158 (expr -> template_ref .)
    PLUS            reduce using rule 158 (expr -> template_ref .)
    MINUS           reduce using rule 158 (expr -> template_ref .)
    DIVIDE          reduce using rule 158 (expr -> template_ref .)
    TIMES           reduce using rule 158 (expr -> template_ref .)
    IN              reduce using rule 158 (expr -> template_ref .)
    QEST            reduce using rule 158 (expr -> template_ref .)
    COMMA           reduce using rule 158 (expr -> template_ref .)
    INC             reduce using rule 158 (expr -> template_ref .)
    DEC             reduce using rule 158 (expr -> template_ref .)
    ASSIGNPLUS      reduce using rule 158 (expr -> template_ref .)
    ASSIGNMINUS     reduce using rule 158 (expr -> template_ref .)
    ASSIGNDIVIDE    reduce using rule 158 (expr -> template_ref .)
    ASSIGNTIMES     reduce using rule 158 (expr -> template_ref .)
    ASSIGNBOR       reduce using rule 158 (expr -> template_ref .)
    ASSIGNBAND      reduce using rule 158 (expr -> template_ref .)
    ASSIGNBXOR      reduce using rule 158 (expr -> template_ref .)
    ASSIGN          reduce using rule 158 (expr -> template_ref .)
    LSBRACKET       reduce using rule 158 (expr -> template_ref .)
    TLTHAN          reduce using rule 158 (expr -> template_ref .)
    LPAREN          reduce using rule 158 (expr -> template_ref .)
    RSBRACKET       reduce using rule 158 (expr -> template_ref .)
    RPAREN          reduce using rule 158 (expr -> template_ref .)
    COLON           reduce using rule 158 (expr -> template_ref .)
    RBRACKET        reduce using rule 158 (expr -> template_ref .)


state 31

    (121) function -> FUNCTION . ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (119) funcref -> FUNCTION . ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (128) exprfunction -> FUNCTION . template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> FUNCTION . template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (115) template_opt -> . template
    (116) template_opt -> .
    (51) template -> . lthan_restrict templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    ID              shift and go to state 114
    LPAREN          reduce using rule 116 (template_opt -> .)
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 113
    template_opt                   shift and go to state 112
    template                       shift and go to state 115

state 32

    (215) for -> FOR . LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> FOR . LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET

    LPAREN          shift and go to state 116


state 33

    (241) else -> ELSE . ctrl_statement
    (217) ctrl_statement -> . statement_nonctrl
    (218) ctrl_statement -> . LBRACKET statementlist_opt RBRACKET
    (219) ctrl_statement -> . SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 117
    SEMI            shift and go to state 131
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    FUNCTION        shift and go to state 124
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    FOR             shift and go to state 32
    DO              shift and go to state 59
    WHILE           shift and go to state 41
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 120
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 130
    strlit                         shift and go to state 24
    for                            shift and go to state 123
    not                            shift and go to state 14
    obj_literal                    shift and go to state 27
    dowhile                        shift and go to state 132
    new                            shift and go to state 29
    inc                            shift and go to state 62
    template_ref                   shift and go to state 30
    return                         shift and go to state 118
    else                           shift and go to state 133
    break                          shift and go to state 119
    statement_nonctrl              shift and go to state 127
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 128
    throw                          shift and go to state 125
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 121
    while                          shift and go to state 129
    continue                       shift and go to state 122
    typeof                         shift and go to state 56
    ctrl_statement                 shift and go to state 126
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 34

    (236) try -> TRY . statement_nonctrl
    (237) try -> TRY . LBRACKET statementlist RBRACKET
    (238) try -> TRY . LBRACKET RBRACKET
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 134
    SEMI            shift and go to state 63
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    FUNCTION        shift and go to state 124
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    FOR             shift and go to state 32
    DO              shift and go to state 59
    WHILE           shift and go to state 41
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    var_decl                       shift and go to state 37
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 130
    strlit                         shift and go to state 24
    for                            shift and go to state 123
    not                            shift and go to state 14
    obj_literal                    shift and go to state 27
    dowhile                        shift and go to state 132
    new                            shift and go to state 29
    inc                            shift and go to state 62
    template_ref                   shift and go to state 30
    return                         shift and go to state 118
    else                           shift and go to state 133
    break                          shift and go to state 119
    statement_nonctrl              shift and go to state 135
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 128
    throw                          shift and go to state 125
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    yield                          shift and go to state 120
    try                            shift and go to state 121
    while                          shift and go to state 129
    continue                       shift and go to state 122
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 35

    (23) statement -> throw . SEMI
    (41) statement_nonctrl -> throw . SEMI

    SEMI            shift and go to state 136


state 36

    (195) expr -> bitinv .

    SEMI            reduce using rule 195 (expr -> bitinv .)
    RSHIFT          reduce using rule 195 (expr -> bitinv .)
    LSHIFT          reduce using rule 195 (expr -> bitinv .)
    LLSHIFT         reduce using rule 195 (expr -> bitinv .)
    RRSHIFT         reduce using rule 195 (expr -> bitinv .)
    DOT             reduce using rule 195 (expr -> bitinv .)
    LAND            reduce using rule 195 (expr -> bitinv .)
    LOR             reduce using rule 195 (expr -> bitinv .)
    BOR             reduce using rule 195 (expr -> bitinv .)
    INSTANCEOF      reduce using rule 195 (expr -> bitinv .)
    BXOR            reduce using rule 195 (expr -> bitinv .)
    BAND            reduce using rule 195 (expr -> bitinv .)
    EQUAL           reduce using rule 195 (expr -> bitinv .)
    EQUAL_STRICT    reduce using rule 195 (expr -> bitinv .)
    NOTEQUAL_STRICT reduce using rule 195 (expr -> bitinv .)
    GTHAN           reduce using rule 195 (expr -> bitinv .)
    GTHANEQ         reduce using rule 195 (expr -> bitinv .)
    LTHAN           reduce using rule 195 (expr -> bitinv .)
    MOD             reduce using rule 195 (expr -> bitinv .)
    LTHANEQ         reduce using rule 195 (expr -> bitinv .)
    NOTEQUAL        reduce using rule 195 (expr -> bitinv .)
    PLUS            reduce using rule 195 (expr -> bitinv .)
    MINUS           reduce using rule 195 (expr -> bitinv .)
    DIVIDE          reduce using rule 195 (expr -> bitinv .)
    TIMES           reduce using rule 195 (expr -> bitinv .)
    IN              reduce using rule 195 (expr -> bitinv .)
    QEST            reduce using rule 195 (expr -> bitinv .)
    COMMA           reduce using rule 195 (expr -> bitinv .)
    INC             reduce using rule 195 (expr -> bitinv .)
    DEC             reduce using rule 195 (expr -> bitinv .)
    ASSIGNPLUS      reduce using rule 195 (expr -> bitinv .)
    ASSIGNMINUS     reduce using rule 195 (expr -> bitinv .)
    ASSIGNDIVIDE    reduce using rule 195 (expr -> bitinv .)
    ASSIGNTIMES     reduce using rule 195 (expr -> bitinv .)
    ASSIGNBOR       reduce using rule 195 (expr -> bitinv .)
    ASSIGNBAND      reduce using rule 195 (expr -> bitinv .)
    ASSIGNBXOR      reduce using rule 195 (expr -> bitinv .)
    ASSIGN          reduce using rule 195 (expr -> bitinv .)
    LSBRACKET       reduce using rule 195 (expr -> bitinv .)
    TLTHAN          reduce using rule 195 (expr -> bitinv .)
    LPAREN          reduce using rule 195 (expr -> bitinv .)
    RSBRACKET       reduce using rule 195 (expr -> bitinv .)
    RPAREN          reduce using rule 195 (expr -> bitinv .)
    COLON           reduce using rule 195 (expr -> bitinv .)
    RBRACKET        reduce using rule 195 (expr -> bitinv .)


state 37

    (29) statement_nonctrl -> var_decl . SEMI
    (71) var_decl -> var_decl . ASSIGN expr
    (72) var_decl -> var_decl . COMMA ID
    (73) var_decl -> var_decl . COMMA ID ASSIGN expr

    SEMI            shift and go to state 137
    ASSIGN          shift and go to state 138
    COMMA           shift and go to state 139


state 38

    (243) continue -> CONTINUE .

    SEMI            reduce using rule 243 (continue -> CONTINUE .)


state 39

    (147) not -> NOT . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 140
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 40

    (200) expr -> re_lit .

    SEMI            reduce using rule 200 (expr -> re_lit .)
    RSHIFT          reduce using rule 200 (expr -> re_lit .)
    LSHIFT          reduce using rule 200 (expr -> re_lit .)
    LLSHIFT         reduce using rule 200 (expr -> re_lit .)
    RRSHIFT         reduce using rule 200 (expr -> re_lit .)
    DOT             reduce using rule 200 (expr -> re_lit .)
    LAND            reduce using rule 200 (expr -> re_lit .)
    LOR             reduce using rule 200 (expr -> re_lit .)
    BOR             reduce using rule 200 (expr -> re_lit .)
    INSTANCEOF      reduce using rule 200 (expr -> re_lit .)
    BXOR            reduce using rule 200 (expr -> re_lit .)
    BAND            reduce using rule 200 (expr -> re_lit .)
    EQUAL           reduce using rule 200 (expr -> re_lit .)
    EQUAL_STRICT    reduce using rule 200 (expr -> re_lit .)
    NOTEQUAL_STRICT reduce using rule 200 (expr -> re_lit .)
    GTHAN           reduce using rule 200 (expr -> re_lit .)
    GTHANEQ         reduce using rule 200 (expr -> re_lit .)
    LTHAN           reduce using rule 200 (expr -> re_lit .)
    MOD             reduce using rule 200 (expr -> re_lit .)
    LTHANEQ         reduce using rule 200 (expr -> re_lit .)
    NOTEQUAL        reduce using rule 200 (expr -> re_lit .)
    PLUS            reduce using rule 200 (expr -> re_lit .)
    MINUS           reduce using rule 200 (expr -> re_lit .)
    DIVIDE          reduce using rule 200 (expr -> re_lit .)
    TIMES           reduce using rule 200 (expr -> re_lit .)
    IN              reduce using rule 200 (expr -> re_lit .)
    QEST            reduce using rule 200 (expr -> re_lit .)
    COMMA           reduce using rule 200 (expr -> re_lit .)
    INC             reduce using rule 200 (expr -> re_lit .)
    DEC             reduce using rule 200 (expr -> re_lit .)
    ASSIGNPLUS      reduce using rule 200 (expr -> re_lit .)
    ASSIGNMINUS     reduce using rule 200 (expr -> re_lit .)
    ASSIGNDIVIDE    reduce using rule 200 (expr -> re_lit .)
    ASSIGNTIMES     reduce using rule 200 (expr -> re_lit .)
    ASSIGNBOR       reduce using rule 200 (expr -> re_lit .)
    ASSIGNBAND      reduce using rule 200 (expr -> re_lit .)
    ASSIGNBXOR      reduce using rule 200 (expr -> re_lit .)
    ASSIGN          reduce using rule 200 (expr -> re_lit .)
    LSBRACKET       reduce using rule 200 (expr -> re_lit .)
    TLTHAN          reduce using rule 200 (expr -> re_lit .)
    LPAREN          reduce using rule 200 (expr -> re_lit .)
    RSBRACKET       reduce using rule 200 (expr -> re_lit .)
    RPAREN          reduce using rule 200 (expr -> re_lit .)
    COLON           reduce using rule 200 (expr -> re_lit .)
    RBRACKET        reduce using rule 200 (expr -> re_lit .)


state 41

    (221) while -> WHILE . paren_expr statement_nonctrl
    (222) while -> WHILE . paren_expr LBRACKET statementlist_opt RBRACKET
    (203) paren_expr -> . LPAREN expr RPAREN
    (204) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 86

    paren_expr                     shift and go to state 141

state 42

    (142) new -> NEW . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 142
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 43

    (120) func_native -> NATIVE . push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (6) push_scope -> .

    FUNCTION        reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 143

state 44

    (233) switch -> SWITCH . paren_expr LBRACKET case_block RBRACKET
    (203) paren_expr -> . LPAREN expr RPAREN
    (204) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 86

    paren_expr                     shift and go to state 144

state 45

    (27) statement -> func_native . SEMI

    SEMI            shift and go to state 145


state 46

    (1) statementlist -> statement .

    SEMI            reduce using rule 1 (statementlist -> statement .)
    FUNCTION        reduce using rule 1 (statementlist -> statement .)
    IF              reduce using rule 1 (statementlist -> statement .)
    ELSE            reduce using rule 1 (statementlist -> statement .)
    WHILE           reduce using rule 1 (statementlist -> statement .)
    WITH            reduce using rule 1 (statementlist -> statement .)
    DO              reduce using rule 1 (statementlist -> statement .)
    FOR             reduce using rule 1 (statementlist -> statement .)
    RETURN          reduce using rule 1 (statementlist -> statement .)
    YIELD           reduce using rule 1 (statementlist -> statement .)
    BREAK           reduce using rule 1 (statementlist -> statement .)
    CONTINUE        reduce using rule 1 (statementlist -> statement .)
    THROW           reduce using rule 1 (statementlist -> statement .)
    TRY             reduce using rule 1 (statementlist -> statement .)
    CATCH           reduce using rule 1 (statementlist -> statement .)
    SWITCH          reduce using rule 1 (statementlist -> statement .)
    NATIVE          reduce using rule 1 (statementlist -> statement .)
    NUMBER          reduce using rule 1 (statementlist -> statement .)
    ID              reduce using rule 1 (statementlist -> statement .)
    DELETE          reduce using rule 1 (statementlist -> statement .)
    STRINGLIT       reduce using rule 1 (statementlist -> statement .)
    LSBRACKET       reduce using rule 1 (statementlist -> statement .)
    LPAREN          reduce using rule 1 (statementlist -> statement .)
    MINUS           reduce using rule 1 (statementlist -> statement .)
    NOT             reduce using rule 1 (statementlist -> statement .)
    BITINV          reduce using rule 1 (statementlist -> statement .)
    NEW             reduce using rule 1 (statementlist -> statement .)
    INC             reduce using rule 1 (statementlist -> statement .)
    DEC             reduce using rule 1 (statementlist -> statement .)
    TYPEOF          reduce using rule 1 (statementlist -> statement .)
    REGEXPR         reduce using rule 1 (statementlist -> statement .)
    GLOBAL          reduce using rule 1 (statementlist -> statement .)
    VAR             reduce using rule 1 (statementlist -> statement .)
    TLTHAN          reduce using rule 1 (statementlist -> statement .)
    LBRACKET        reduce using rule 1 (statementlist -> statement .)
    RBRACKET        reduce using rule 1 (statementlist -> statement .)
    CASE            reduce using rule 1 (statementlist -> statement .)
    $end            reduce using rule 1 (statementlist -> statement .)
    DEFAULT         reduce using rule 1 (statementlist -> statement .)


state 47

    (239) catch -> CATCH . paren_expr statement_nonctrl
    (240) catch -> CATCH . paren_expr LBRACKET statementlist RBRACKET
    (203) paren_expr -> . LPAREN expr RPAREN
    (204) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 86

    paren_expr                     shift and go to state 146

state 48

    (12) statement -> function .

    RBRACKET        reduce using rule 12 (statement -> function .)
    SEMI            reduce using rule 12 (statement -> function .)
    FUNCTION        reduce using rule 12 (statement -> function .)
    IF              reduce using rule 12 (statement -> function .)
    ELSE            reduce using rule 12 (statement -> function .)
    WHILE           reduce using rule 12 (statement -> function .)
    WITH            reduce using rule 12 (statement -> function .)
    DO              reduce using rule 12 (statement -> function .)
    FOR             reduce using rule 12 (statement -> function .)
    RETURN          reduce using rule 12 (statement -> function .)
    YIELD           reduce using rule 12 (statement -> function .)
    BREAK           reduce using rule 12 (statement -> function .)
    CONTINUE        reduce using rule 12 (statement -> function .)
    THROW           reduce using rule 12 (statement -> function .)
    TRY             reduce using rule 12 (statement -> function .)
    CATCH           reduce using rule 12 (statement -> function .)
    SWITCH          reduce using rule 12 (statement -> function .)
    NATIVE          reduce using rule 12 (statement -> function .)
    NUMBER          reduce using rule 12 (statement -> function .)
    ID              reduce using rule 12 (statement -> function .)
    DELETE          reduce using rule 12 (statement -> function .)
    STRINGLIT       reduce using rule 12 (statement -> function .)
    LSBRACKET       reduce using rule 12 (statement -> function .)
    LPAREN          reduce using rule 12 (statement -> function .)
    MINUS           reduce using rule 12 (statement -> function .)
    NOT             reduce using rule 12 (statement -> function .)
    BITINV          reduce using rule 12 (statement -> function .)
    NEW             reduce using rule 12 (statement -> function .)
    INC             reduce using rule 12 (statement -> function .)
    DEC             reduce using rule 12 (statement -> function .)
    TYPEOF          reduce using rule 12 (statement -> function .)
    REGEXPR         reduce using rule 12 (statement -> function .)
    GLOBAL          reduce using rule 12 (statement -> function .)
    VAR             reduce using rule 12 (statement -> function .)
    TLTHAN          reduce using rule 12 (statement -> function .)
    LBRACKET        reduce using rule 12 (statement -> function .)
    $end            reduce using rule 12 (statement -> function .)
    CASE            reduce using rule 12 (statement -> function .)
    DEFAULT         reduce using rule 12 (statement -> function .)


state 49

    (2) statementlist -> statement_nonctrl .

    SEMI            reduce using rule 2 (statementlist -> statement_nonctrl .)
    FUNCTION        reduce using rule 2 (statementlist -> statement_nonctrl .)
    IF              reduce using rule 2 (statementlist -> statement_nonctrl .)
    ELSE            reduce using rule 2 (statementlist -> statement_nonctrl .)
    WHILE           reduce using rule 2 (statementlist -> statement_nonctrl .)
    WITH            reduce using rule 2 (statementlist -> statement_nonctrl .)
    DO              reduce using rule 2 (statementlist -> statement_nonctrl .)
    FOR             reduce using rule 2 (statementlist -> statement_nonctrl .)
    RETURN          reduce using rule 2 (statementlist -> statement_nonctrl .)
    YIELD           reduce using rule 2 (statementlist -> statement_nonctrl .)
    BREAK           reduce using rule 2 (statementlist -> statement_nonctrl .)
    CONTINUE        reduce using rule 2 (statementlist -> statement_nonctrl .)
    THROW           reduce using rule 2 (statementlist -> statement_nonctrl .)
    TRY             reduce using rule 2 (statementlist -> statement_nonctrl .)
    CATCH           reduce using rule 2 (statementlist -> statement_nonctrl .)
    SWITCH          reduce using rule 2 (statementlist -> statement_nonctrl .)
    NATIVE          reduce using rule 2 (statementlist -> statement_nonctrl .)
    NUMBER          reduce using rule 2 (statementlist -> statement_nonctrl .)
    ID              reduce using rule 2 (statementlist -> statement_nonctrl .)
    DELETE          reduce using rule 2 (statementlist -> statement_nonctrl .)
    STRINGLIT       reduce using rule 2 (statementlist -> statement_nonctrl .)
    LSBRACKET       reduce using rule 2 (statementlist -> statement_nonctrl .)
    LPAREN          reduce using rule 2 (statementlist -> statement_nonctrl .)
    MINUS           reduce using rule 2 (statementlist -> statement_nonctrl .)
    NOT             reduce using rule 2 (statementlist -> statement_nonctrl .)
    BITINV          reduce using rule 2 (statementlist -> statement_nonctrl .)
    NEW             reduce using rule 2 (statementlist -> statement_nonctrl .)
    INC             reduce using rule 2 (statementlist -> statement_nonctrl .)
    DEC             reduce using rule 2 (statementlist -> statement_nonctrl .)
    TYPEOF          reduce using rule 2 (statementlist -> statement_nonctrl .)
    REGEXPR         reduce using rule 2 (statementlist -> statement_nonctrl .)
    GLOBAL          reduce using rule 2 (statementlist -> statement_nonctrl .)
    VAR             reduce using rule 2 (statementlist -> statement_nonctrl .)
    TLTHAN          reduce using rule 2 (statementlist -> statement_nonctrl .)
    LBRACKET        reduce using rule 2 (statementlist -> statement_nonctrl .)
    RBRACKET        reduce using rule 2 (statementlist -> statement_nonctrl .)
    CASE            reduce using rule 2 (statementlist -> statement_nonctrl .)
    $end            reduce using rule 2 (statementlist -> statement_nonctrl .)
    DEFAULT         reduce using rule 2 (statementlist -> statement_nonctrl .)


state 50

    (193) expr -> expr_uminus .

    SEMI            reduce using rule 193 (expr -> expr_uminus .)
    RSHIFT          reduce using rule 193 (expr -> expr_uminus .)
    LSHIFT          reduce using rule 193 (expr -> expr_uminus .)
    LLSHIFT         reduce using rule 193 (expr -> expr_uminus .)
    RRSHIFT         reduce using rule 193 (expr -> expr_uminus .)
    DOT             reduce using rule 193 (expr -> expr_uminus .)
    LAND            reduce using rule 193 (expr -> expr_uminus .)
    LOR             reduce using rule 193 (expr -> expr_uminus .)
    BOR             reduce using rule 193 (expr -> expr_uminus .)
    INSTANCEOF      reduce using rule 193 (expr -> expr_uminus .)
    BXOR            reduce using rule 193 (expr -> expr_uminus .)
    BAND            reduce using rule 193 (expr -> expr_uminus .)
    EQUAL           reduce using rule 193 (expr -> expr_uminus .)
    EQUAL_STRICT    reduce using rule 193 (expr -> expr_uminus .)
    NOTEQUAL_STRICT reduce using rule 193 (expr -> expr_uminus .)
    GTHAN           reduce using rule 193 (expr -> expr_uminus .)
    GTHANEQ         reduce using rule 193 (expr -> expr_uminus .)
    LTHAN           reduce using rule 193 (expr -> expr_uminus .)
    MOD             reduce using rule 193 (expr -> expr_uminus .)
    LTHANEQ         reduce using rule 193 (expr -> expr_uminus .)
    NOTEQUAL        reduce using rule 193 (expr -> expr_uminus .)
    PLUS            reduce using rule 193 (expr -> expr_uminus .)
    MINUS           reduce using rule 193 (expr -> expr_uminus .)
    DIVIDE          reduce using rule 193 (expr -> expr_uminus .)
    TIMES           reduce using rule 193 (expr -> expr_uminus .)
    IN              reduce using rule 193 (expr -> expr_uminus .)
    QEST            reduce using rule 193 (expr -> expr_uminus .)
    COMMA           reduce using rule 193 (expr -> expr_uminus .)
    INC             reduce using rule 193 (expr -> expr_uminus .)
    DEC             reduce using rule 193 (expr -> expr_uminus .)
    ASSIGNPLUS      reduce using rule 193 (expr -> expr_uminus .)
    ASSIGNMINUS     reduce using rule 193 (expr -> expr_uminus .)
    ASSIGNDIVIDE    reduce using rule 193 (expr -> expr_uminus .)
    ASSIGNTIMES     reduce using rule 193 (expr -> expr_uminus .)
    ASSIGNBOR       reduce using rule 193 (expr -> expr_uminus .)
    ASSIGNBAND      reduce using rule 193 (expr -> expr_uminus .)
    ASSIGNBXOR      reduce using rule 193 (expr -> expr_uminus .)
    ASSIGN          reduce using rule 193 (expr -> expr_uminus .)
    LSBRACKET       reduce using rule 193 (expr -> expr_uminus .)
    TLTHAN          reduce using rule 193 (expr -> expr_uminus .)
    LPAREN          reduce using rule 193 (expr -> expr_uminus .)
    RSBRACKET       reduce using rule 193 (expr -> expr_uminus .)
    RPAREN          reduce using rule 193 (expr -> expr_uminus .)
    COLON           reduce using rule 193 (expr -> expr_uminus .)
    RBRACKET        reduce using rule 193 (expr -> expr_uminus .)


state 51

    (25) statement -> catch .
    (43) statement_nonctrl -> catch .

  ! reduce/reduce conflict for RBRACKET resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for SEMI resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for IF resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for ELSE resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for WITH resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for DO resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for RETURN resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for YIELD resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for BREAK resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for THROW resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for TRY resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for CATCH resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for SWITCH resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for NATIVE resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for NUMBER resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for ID resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for DELETE resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for LPAREN resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for MINUS resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for NOT resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for BITINV resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for NEW resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for INC resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for DEC resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for VAR resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for $end resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for CASE resolved using rule 25 (statement -> catch .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 25 (statement -> catch .)
    RBRACKET        reduce using rule 25 (statement -> catch .)
    SEMI            reduce using rule 25 (statement -> catch .)
    FUNCTION        reduce using rule 25 (statement -> catch .)
    IF              reduce using rule 25 (statement -> catch .)
    ELSE            reduce using rule 25 (statement -> catch .)
    WHILE           reduce using rule 25 (statement -> catch .)
    WITH            reduce using rule 25 (statement -> catch .)
    DO              reduce using rule 25 (statement -> catch .)
    FOR             reduce using rule 25 (statement -> catch .)
    RETURN          reduce using rule 25 (statement -> catch .)
    YIELD           reduce using rule 25 (statement -> catch .)
    BREAK           reduce using rule 25 (statement -> catch .)
    CONTINUE        reduce using rule 25 (statement -> catch .)
    THROW           reduce using rule 25 (statement -> catch .)
    TRY             reduce using rule 25 (statement -> catch .)
    CATCH           reduce using rule 25 (statement -> catch .)
    SWITCH          reduce using rule 25 (statement -> catch .)
    NATIVE          reduce using rule 25 (statement -> catch .)
    NUMBER          reduce using rule 25 (statement -> catch .)
    ID              reduce using rule 25 (statement -> catch .)
    DELETE          reduce using rule 25 (statement -> catch .)
    STRINGLIT       reduce using rule 25 (statement -> catch .)
    LSBRACKET       reduce using rule 25 (statement -> catch .)
    LPAREN          reduce using rule 25 (statement -> catch .)
    MINUS           reduce using rule 25 (statement -> catch .)
    NOT             reduce using rule 25 (statement -> catch .)
    BITINV          reduce using rule 25 (statement -> catch .)
    NEW             reduce using rule 25 (statement -> catch .)
    INC             reduce using rule 25 (statement -> catch .)
    DEC             reduce using rule 25 (statement -> catch .)
    TYPEOF          reduce using rule 25 (statement -> catch .)
    REGEXPR         reduce using rule 25 (statement -> catch .)
    GLOBAL          reduce using rule 25 (statement -> catch .)
    VAR             reduce using rule 25 (statement -> catch .)
    TLTHAN          reduce using rule 25 (statement -> catch .)
    LBRACKET        reduce using rule 25 (statement -> catch .)
    $end            reduce using rule 25 (statement -> catch .)
    CASE            reduce using rule 25 (statement -> catch .)
    DEFAULT         reduce using rule 25 (statement -> catch .)

  ! RBRACKET        [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! SEMI            [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! FUNCTION        [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! IF              [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! ELSE            [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! WHILE           [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! WITH            [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! DO              [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! FOR             [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! RETURN          [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! YIELD           [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! BREAK           [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! CONTINUE        [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! THROW           [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! TRY             [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! CATCH           [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! SWITCH          [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! NATIVE          [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! NUMBER          [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! ID              [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! DELETE          [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! STRINGLIT       [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! LSBRACKET       [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! LPAREN          [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! MINUS           [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! NOT             [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! BITINV          [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! NEW             [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! INC             [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! DEC             [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! TYPEOF          [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! REGEXPR         [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! GLOBAL          [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! VAR             [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! TLTHAN          [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! LBRACKET        [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! $end            [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! CASE            [ reduce using rule 43 (statement_nonctrl -> catch .) ]
  ! DEFAULT         [ reduce using rule 43 (statement_nonctrl -> catch .) ]


state 52

    (16) statement -> with .

    RBRACKET        reduce using rule 16 (statement -> with .)
    SEMI            reduce using rule 16 (statement -> with .)
    FUNCTION        reduce using rule 16 (statement -> with .)
    IF              reduce using rule 16 (statement -> with .)
    ELSE            reduce using rule 16 (statement -> with .)
    WHILE           reduce using rule 16 (statement -> with .)
    WITH            reduce using rule 16 (statement -> with .)
    DO              reduce using rule 16 (statement -> with .)
    FOR             reduce using rule 16 (statement -> with .)
    RETURN          reduce using rule 16 (statement -> with .)
    YIELD           reduce using rule 16 (statement -> with .)
    BREAK           reduce using rule 16 (statement -> with .)
    CONTINUE        reduce using rule 16 (statement -> with .)
    THROW           reduce using rule 16 (statement -> with .)
    TRY             reduce using rule 16 (statement -> with .)
    CATCH           reduce using rule 16 (statement -> with .)
    SWITCH          reduce using rule 16 (statement -> with .)
    NATIVE          reduce using rule 16 (statement -> with .)
    NUMBER          reduce using rule 16 (statement -> with .)
    ID              reduce using rule 16 (statement -> with .)
    DELETE          reduce using rule 16 (statement -> with .)
    STRINGLIT       reduce using rule 16 (statement -> with .)
    LSBRACKET       reduce using rule 16 (statement -> with .)
    LPAREN          reduce using rule 16 (statement -> with .)
    MINUS           reduce using rule 16 (statement -> with .)
    NOT             reduce using rule 16 (statement -> with .)
    BITINV          reduce using rule 16 (statement -> with .)
    NEW             reduce using rule 16 (statement -> with .)
    INC             reduce using rule 16 (statement -> with .)
    DEC             reduce using rule 16 (statement -> with .)
    TYPEOF          reduce using rule 16 (statement -> with .)
    REGEXPR         reduce using rule 16 (statement -> with .)
    GLOBAL          reduce using rule 16 (statement -> with .)
    VAR             reduce using rule 16 (statement -> with .)
    TLTHAN          reduce using rule 16 (statement -> with .)
    LBRACKET        reduce using rule 16 (statement -> with .)
    $end            reduce using rule 16 (statement -> with .)
    CASE            reduce using rule 16 (statement -> with .)
    DEFAULT         reduce using rule 16 (statement -> with .)


state 53

    (28) statement_nonctrl -> expr . SEMI
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    SEMI            shift and go to state 163
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 54

    (242) break -> BREAK .

    SEMI            reduce using rule 242 (break -> BREAK .)


state 55

    (15) statement -> while .
    (36) statement_nonctrl -> while .

  ! reduce/reduce conflict for RBRACKET resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for SEMI resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for IF resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for WITH resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for DO resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for YIELD resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for BREAK resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for THROW resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for TRY resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for CATCH resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for SWITCH resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for NATIVE resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for ID resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for DELETE resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for LPAREN resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for BITINV resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for NEW resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for INC resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for DEC resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for VAR resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for $end resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for CASE resolved using rule 15 (statement -> while .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 15 (statement -> while .)
    RBRACKET        reduce using rule 15 (statement -> while .)
    SEMI            reduce using rule 15 (statement -> while .)
    FUNCTION        reduce using rule 15 (statement -> while .)
    IF              reduce using rule 15 (statement -> while .)
    ELSE            reduce using rule 15 (statement -> while .)
    WHILE           reduce using rule 15 (statement -> while .)
    WITH            reduce using rule 15 (statement -> while .)
    DO              reduce using rule 15 (statement -> while .)
    FOR             reduce using rule 15 (statement -> while .)
    RETURN          reduce using rule 15 (statement -> while .)
    YIELD           reduce using rule 15 (statement -> while .)
    BREAK           reduce using rule 15 (statement -> while .)
    CONTINUE        reduce using rule 15 (statement -> while .)
    THROW           reduce using rule 15 (statement -> while .)
    TRY             reduce using rule 15 (statement -> while .)
    CATCH           reduce using rule 15 (statement -> while .)
    SWITCH          reduce using rule 15 (statement -> while .)
    NATIVE          reduce using rule 15 (statement -> while .)
    NUMBER          reduce using rule 15 (statement -> while .)
    ID              reduce using rule 15 (statement -> while .)
    DELETE          reduce using rule 15 (statement -> while .)
    STRINGLIT       reduce using rule 15 (statement -> while .)
    LSBRACKET       reduce using rule 15 (statement -> while .)
    LPAREN          reduce using rule 15 (statement -> while .)
    MINUS           reduce using rule 15 (statement -> while .)
    NOT             reduce using rule 15 (statement -> while .)
    BITINV          reduce using rule 15 (statement -> while .)
    NEW             reduce using rule 15 (statement -> while .)
    INC             reduce using rule 15 (statement -> while .)
    DEC             reduce using rule 15 (statement -> while .)
    TYPEOF          reduce using rule 15 (statement -> while .)
    REGEXPR         reduce using rule 15 (statement -> while .)
    GLOBAL          reduce using rule 15 (statement -> while .)
    VAR             reduce using rule 15 (statement -> while .)
    TLTHAN          reduce using rule 15 (statement -> while .)
    LBRACKET        reduce using rule 15 (statement -> while .)
    $end            reduce using rule 15 (statement -> while .)
    CASE            reduce using rule 15 (statement -> while .)
    DEFAULT         reduce using rule 15 (statement -> while .)

  ! RBRACKET        [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! SEMI            [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! FUNCTION        [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! IF              [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! ELSE            [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! WHILE           [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! WITH            [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! DO              [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! FOR             [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! RETURN          [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! YIELD           [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! BREAK           [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! CONTINUE        [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! THROW           [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! TRY             [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! CATCH           [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! SWITCH          [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! NATIVE          [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! NUMBER          [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! ID              [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! DELETE          [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! STRINGLIT       [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! LSBRACKET       [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! LPAREN          [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! MINUS           [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! NOT             [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! BITINV          [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! NEW             [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! INC             [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! DEC             [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! TYPEOF          [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! REGEXPR         [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! GLOBAL          [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! VAR             [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! TLTHAN          [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! LBRACKET        [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! $end            [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! CASE            [ reduce using rule 36 (statement_nonctrl -> while .) ]
  ! DEFAULT         [ reduce using rule 36 (statement_nonctrl -> while .) ]


state 56

    (199) expr -> typeof .

    SEMI            reduce using rule 199 (expr -> typeof .)
    RSHIFT          reduce using rule 199 (expr -> typeof .)
    LSHIFT          reduce using rule 199 (expr -> typeof .)
    LLSHIFT         reduce using rule 199 (expr -> typeof .)
    RRSHIFT         reduce using rule 199 (expr -> typeof .)
    DOT             reduce using rule 199 (expr -> typeof .)
    LAND            reduce using rule 199 (expr -> typeof .)
    LOR             reduce using rule 199 (expr -> typeof .)
    BOR             reduce using rule 199 (expr -> typeof .)
    INSTANCEOF      reduce using rule 199 (expr -> typeof .)
    BXOR            reduce using rule 199 (expr -> typeof .)
    BAND            reduce using rule 199 (expr -> typeof .)
    EQUAL           reduce using rule 199 (expr -> typeof .)
    EQUAL_STRICT    reduce using rule 199 (expr -> typeof .)
    NOTEQUAL_STRICT reduce using rule 199 (expr -> typeof .)
    GTHAN           reduce using rule 199 (expr -> typeof .)
    GTHANEQ         reduce using rule 199 (expr -> typeof .)
    LTHAN           reduce using rule 199 (expr -> typeof .)
    MOD             reduce using rule 199 (expr -> typeof .)
    LTHANEQ         reduce using rule 199 (expr -> typeof .)
    NOTEQUAL        reduce using rule 199 (expr -> typeof .)
    PLUS            reduce using rule 199 (expr -> typeof .)
    MINUS           reduce using rule 199 (expr -> typeof .)
    DIVIDE          reduce using rule 199 (expr -> typeof .)
    TIMES           reduce using rule 199 (expr -> typeof .)
    IN              reduce using rule 199 (expr -> typeof .)
    QEST            reduce using rule 199 (expr -> typeof .)
    COMMA           reduce using rule 199 (expr -> typeof .)
    INC             reduce using rule 199 (expr -> typeof .)
    DEC             reduce using rule 199 (expr -> typeof .)
    ASSIGNPLUS      reduce using rule 199 (expr -> typeof .)
    ASSIGNMINUS     reduce using rule 199 (expr -> typeof .)
    ASSIGNDIVIDE    reduce using rule 199 (expr -> typeof .)
    ASSIGNTIMES     reduce using rule 199 (expr -> typeof .)
    ASSIGNBOR       reduce using rule 199 (expr -> typeof .)
    ASSIGNBAND      reduce using rule 199 (expr -> typeof .)
    ASSIGNBXOR      reduce using rule 199 (expr -> typeof .)
    ASSIGN          reduce using rule 199 (expr -> typeof .)
    LSBRACKET       reduce using rule 199 (expr -> typeof .)
    TLTHAN          reduce using rule 199 (expr -> typeof .)
    LPAREN          reduce using rule 199 (expr -> typeof .)
    RSBRACKET       reduce using rule 199 (expr -> typeof .)
    RPAREN          reduce using rule 199 (expr -> typeof .)
    COLON           reduce using rule 199 (expr -> typeof .)
    RBRACKET        reduce using rule 199 (expr -> typeof .)


state 57

    (198) expr -> dec .

    SEMI            reduce using rule 198 (expr -> dec .)
    RSHIFT          reduce using rule 198 (expr -> dec .)
    LSHIFT          reduce using rule 198 (expr -> dec .)
    LLSHIFT         reduce using rule 198 (expr -> dec .)
    RRSHIFT         reduce using rule 198 (expr -> dec .)
    DOT             reduce using rule 198 (expr -> dec .)
    LAND            reduce using rule 198 (expr -> dec .)
    LOR             reduce using rule 198 (expr -> dec .)
    BOR             reduce using rule 198 (expr -> dec .)
    INSTANCEOF      reduce using rule 198 (expr -> dec .)
    BXOR            reduce using rule 198 (expr -> dec .)
    BAND            reduce using rule 198 (expr -> dec .)
    EQUAL           reduce using rule 198 (expr -> dec .)
    EQUAL_STRICT    reduce using rule 198 (expr -> dec .)
    NOTEQUAL_STRICT reduce using rule 198 (expr -> dec .)
    GTHAN           reduce using rule 198 (expr -> dec .)
    GTHANEQ         reduce using rule 198 (expr -> dec .)
    LTHAN           reduce using rule 198 (expr -> dec .)
    MOD             reduce using rule 198 (expr -> dec .)
    LTHANEQ         reduce using rule 198 (expr -> dec .)
    NOTEQUAL        reduce using rule 198 (expr -> dec .)
    PLUS            reduce using rule 198 (expr -> dec .)
    MINUS           reduce using rule 198 (expr -> dec .)
    DIVIDE          reduce using rule 198 (expr -> dec .)
    TIMES           reduce using rule 198 (expr -> dec .)
    IN              reduce using rule 198 (expr -> dec .)
    QEST            reduce using rule 198 (expr -> dec .)
    COMMA           reduce using rule 198 (expr -> dec .)
    INC             reduce using rule 198 (expr -> dec .)
    DEC             reduce using rule 198 (expr -> dec .)
    ASSIGNPLUS      reduce using rule 198 (expr -> dec .)
    ASSIGNMINUS     reduce using rule 198 (expr -> dec .)
    ASSIGNDIVIDE    reduce using rule 198 (expr -> dec .)
    ASSIGNTIMES     reduce using rule 198 (expr -> dec .)
    ASSIGNBOR       reduce using rule 198 (expr -> dec .)
    ASSIGNBAND      reduce using rule 198 (expr -> dec .)
    ASSIGNBXOR      reduce using rule 198 (expr -> dec .)
    ASSIGN          reduce using rule 198 (expr -> dec .)
    LSBRACKET       reduce using rule 198 (expr -> dec .)
    TLTHAN          reduce using rule 198 (expr -> dec .)
    LPAREN          reduce using rule 198 (expr -> dec .)
    RSBRACKET       reduce using rule 198 (expr -> dec .)
    RPAREN          reduce using rule 198 (expr -> dec .)
    COLON           reduce using rule 198 (expr -> dec .)
    RBRACKET        reduce using rule 198 (expr -> dec .)


state 58

    (44) statement_nonctrl -> delete . SEMI

    SEMI            shift and go to state 191


state 59

    (220) dowhile -> DO . ctrl_statement WHILE paren_expr
    (217) ctrl_statement -> . statement_nonctrl
    (218) ctrl_statement -> . LBRACKET statementlist_opt RBRACKET
    (219) ctrl_statement -> . SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 117
    SEMI            shift and go to state 131
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    FUNCTION        shift and go to state 124
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    FOR             shift and go to state 32
    DO              shift and go to state 59
    WHILE           shift and go to state 41
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 120
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 130
    strlit                         shift and go to state 24
    for                            shift and go to state 123
    not                            shift and go to state 14
    obj_literal                    shift and go to state 27
    dowhile                        shift and go to state 132
    new                            shift and go to state 29
    inc                            shift and go to state 62
    template_ref                   shift and go to state 30
    return                         shift and go to state 118
    else                           shift and go to state 133
    break                          shift and go to state 119
    statement_nonctrl              shift and go to state 127
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 128
    throw                          shift and go to state 125
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 121
    while                          shift and go to state 129
    continue                       shift and go to state 122
    typeof                         shift and go to state 56
    ctrl_statement                 shift and go to state 192
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 60

    (154) expr -> NUMBER .

    SEMI            reduce using rule 154 (expr -> NUMBER .)
    RSHIFT          reduce using rule 154 (expr -> NUMBER .)
    LSHIFT          reduce using rule 154 (expr -> NUMBER .)
    LLSHIFT         reduce using rule 154 (expr -> NUMBER .)
    RRSHIFT         reduce using rule 154 (expr -> NUMBER .)
    DOT             reduce using rule 154 (expr -> NUMBER .)
    LAND            reduce using rule 154 (expr -> NUMBER .)
    LOR             reduce using rule 154 (expr -> NUMBER .)
    BOR             reduce using rule 154 (expr -> NUMBER .)
    INSTANCEOF      reduce using rule 154 (expr -> NUMBER .)
    BXOR            reduce using rule 154 (expr -> NUMBER .)
    BAND            reduce using rule 154 (expr -> NUMBER .)
    EQUAL           reduce using rule 154 (expr -> NUMBER .)
    EQUAL_STRICT    reduce using rule 154 (expr -> NUMBER .)
    NOTEQUAL_STRICT reduce using rule 154 (expr -> NUMBER .)
    GTHAN           reduce using rule 154 (expr -> NUMBER .)
    GTHANEQ         reduce using rule 154 (expr -> NUMBER .)
    LTHAN           reduce using rule 154 (expr -> NUMBER .)
    MOD             reduce using rule 154 (expr -> NUMBER .)
    LTHANEQ         reduce using rule 154 (expr -> NUMBER .)
    NOTEQUAL        reduce using rule 154 (expr -> NUMBER .)
    PLUS            reduce using rule 154 (expr -> NUMBER .)
    MINUS           reduce using rule 154 (expr -> NUMBER .)
    DIVIDE          reduce using rule 154 (expr -> NUMBER .)
    TIMES           reduce using rule 154 (expr -> NUMBER .)
    IN              reduce using rule 154 (expr -> NUMBER .)
    QEST            reduce using rule 154 (expr -> NUMBER .)
    COMMA           reduce using rule 154 (expr -> NUMBER .)
    INC             reduce using rule 154 (expr -> NUMBER .)
    DEC             reduce using rule 154 (expr -> NUMBER .)
    ASSIGNPLUS      reduce using rule 154 (expr -> NUMBER .)
    ASSIGNMINUS     reduce using rule 154 (expr -> NUMBER .)
    ASSIGNDIVIDE    reduce using rule 154 (expr -> NUMBER .)
    ASSIGNTIMES     reduce using rule 154 (expr -> NUMBER .)
    ASSIGNBOR       reduce using rule 154 (expr -> NUMBER .)
    ASSIGNBAND      reduce using rule 154 (expr -> NUMBER .)
    ASSIGNBXOR      reduce using rule 154 (expr -> NUMBER .)
    ASSIGN          reduce using rule 154 (expr -> NUMBER .)
    LSBRACKET       reduce using rule 154 (expr -> NUMBER .)
    TLTHAN          reduce using rule 154 (expr -> NUMBER .)
    LPAREN          reduce using rule 154 (expr -> NUMBER .)
    RSBRACKET       reduce using rule 154 (expr -> NUMBER .)
    RPAREN          reduce using rule 154 (expr -> NUMBER .)
    COLON           reduce using rule 154 (expr -> NUMBER .)
    RBRACKET        reduce using rule 154 (expr -> NUMBER .)


state 61

    (13) statement -> if .
    (32) statement_nonctrl -> if .

  ! reduce/reduce conflict for RBRACKET resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for SEMI resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for IF resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for ELSE resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for WHILE resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for WITH resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for DO resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for FOR resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for RETURN resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for YIELD resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for BREAK resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for THROW resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for TRY resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for CATCH resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for SWITCH resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for NATIVE resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for NUMBER resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for ID resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for DELETE resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for LPAREN resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for MINUS resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for NOT resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for BITINV resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for NEW resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for INC resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for DEC resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for VAR resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for $end resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for CASE resolved using rule 13 (statement -> if .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 13 (statement -> if .)
    RBRACKET        reduce using rule 13 (statement -> if .)
    SEMI            reduce using rule 13 (statement -> if .)
    FUNCTION        reduce using rule 13 (statement -> if .)
    IF              reduce using rule 13 (statement -> if .)
    ELSE            reduce using rule 13 (statement -> if .)
    WHILE           reduce using rule 13 (statement -> if .)
    WITH            reduce using rule 13 (statement -> if .)
    DO              reduce using rule 13 (statement -> if .)
    FOR             reduce using rule 13 (statement -> if .)
    RETURN          reduce using rule 13 (statement -> if .)
    YIELD           reduce using rule 13 (statement -> if .)
    BREAK           reduce using rule 13 (statement -> if .)
    CONTINUE        reduce using rule 13 (statement -> if .)
    THROW           reduce using rule 13 (statement -> if .)
    TRY             reduce using rule 13 (statement -> if .)
    CATCH           reduce using rule 13 (statement -> if .)
    SWITCH          reduce using rule 13 (statement -> if .)
    NATIVE          reduce using rule 13 (statement -> if .)
    NUMBER          reduce using rule 13 (statement -> if .)
    ID              reduce using rule 13 (statement -> if .)
    DELETE          reduce using rule 13 (statement -> if .)
    STRINGLIT       reduce using rule 13 (statement -> if .)
    LSBRACKET       reduce using rule 13 (statement -> if .)
    LPAREN          reduce using rule 13 (statement -> if .)
    MINUS           reduce using rule 13 (statement -> if .)
    NOT             reduce using rule 13 (statement -> if .)
    BITINV          reduce using rule 13 (statement -> if .)
    NEW             reduce using rule 13 (statement -> if .)
    INC             reduce using rule 13 (statement -> if .)
    DEC             reduce using rule 13 (statement -> if .)
    TYPEOF          reduce using rule 13 (statement -> if .)
    REGEXPR         reduce using rule 13 (statement -> if .)
    GLOBAL          reduce using rule 13 (statement -> if .)
    VAR             reduce using rule 13 (statement -> if .)
    TLTHAN          reduce using rule 13 (statement -> if .)
    LBRACKET        reduce using rule 13 (statement -> if .)
    $end            reduce using rule 13 (statement -> if .)
    CASE            reduce using rule 13 (statement -> if .)
    DEFAULT         reduce using rule 13 (statement -> if .)

  ! RBRACKET        [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! SEMI            [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! FUNCTION        [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! IF              [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! ELSE            [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! WHILE           [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! WITH            [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! DO              [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! FOR             [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! RETURN          [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! YIELD           [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! BREAK           [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! CONTINUE        [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! THROW           [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! TRY             [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! CATCH           [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! SWITCH          [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! NATIVE          [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! NUMBER          [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! ID              [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! DELETE          [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! STRINGLIT       [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! LSBRACKET       [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! LPAREN          [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! MINUS           [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! NOT             [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! BITINV          [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! NEW             [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! INC             [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! DEC             [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! TYPEOF          [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! REGEXPR         [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! GLOBAL          [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! VAR             [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! TLTHAN          [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! LBRACKET        [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! $end            [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! CASE            [ reduce using rule 32 (statement_nonctrl -> if .) ]
  ! DEFAULT         [ reduce using rule 32 (statement_nonctrl -> if .) ]


state 62

    (197) expr -> inc .

    SEMI            reduce using rule 197 (expr -> inc .)
    RSHIFT          reduce using rule 197 (expr -> inc .)
    LSHIFT          reduce using rule 197 (expr -> inc .)
    LLSHIFT         reduce using rule 197 (expr -> inc .)
    RRSHIFT         reduce using rule 197 (expr -> inc .)
    DOT             reduce using rule 197 (expr -> inc .)
    LAND            reduce using rule 197 (expr -> inc .)
    LOR             reduce using rule 197 (expr -> inc .)
    BOR             reduce using rule 197 (expr -> inc .)
    INSTANCEOF      reduce using rule 197 (expr -> inc .)
    BXOR            reduce using rule 197 (expr -> inc .)
    BAND            reduce using rule 197 (expr -> inc .)
    EQUAL           reduce using rule 197 (expr -> inc .)
    EQUAL_STRICT    reduce using rule 197 (expr -> inc .)
    NOTEQUAL_STRICT reduce using rule 197 (expr -> inc .)
    GTHAN           reduce using rule 197 (expr -> inc .)
    GTHANEQ         reduce using rule 197 (expr -> inc .)
    LTHAN           reduce using rule 197 (expr -> inc .)
    MOD             reduce using rule 197 (expr -> inc .)
    LTHANEQ         reduce using rule 197 (expr -> inc .)
    NOTEQUAL        reduce using rule 197 (expr -> inc .)
    PLUS            reduce using rule 197 (expr -> inc .)
    MINUS           reduce using rule 197 (expr -> inc .)
    DIVIDE          reduce using rule 197 (expr -> inc .)
    TIMES           reduce using rule 197 (expr -> inc .)
    IN              reduce using rule 197 (expr -> inc .)
    QEST            reduce using rule 197 (expr -> inc .)
    COMMA           reduce using rule 197 (expr -> inc .)
    INC             reduce using rule 197 (expr -> inc .)
    DEC             reduce using rule 197 (expr -> inc .)
    ASSIGNPLUS      reduce using rule 197 (expr -> inc .)
    ASSIGNMINUS     reduce using rule 197 (expr -> inc .)
    ASSIGNDIVIDE    reduce using rule 197 (expr -> inc .)
    ASSIGNTIMES     reduce using rule 197 (expr -> inc .)
    ASSIGNBOR       reduce using rule 197 (expr -> inc .)
    ASSIGNBAND      reduce using rule 197 (expr -> inc .)
    ASSIGNBXOR      reduce using rule 197 (expr -> inc .)
    ASSIGN          reduce using rule 197 (expr -> inc .)
    LSBRACKET       reduce using rule 197 (expr -> inc .)
    TLTHAN          reduce using rule 197 (expr -> inc .)
    LPAREN          reduce using rule 197 (expr -> inc .)
    RSBRACKET       reduce using rule 197 (expr -> inc .)
    RPAREN          reduce using rule 197 (expr -> inc .)
    COLON           reduce using rule 197 (expr -> inc .)
    RBRACKET        reduce using rule 197 (expr -> inc .)


state 63

    (31) statement_nonctrl -> SEMI .

    RBRACKET        reduce using rule 31 (statement_nonctrl -> SEMI .)
    SEMI            reduce using rule 31 (statement_nonctrl -> SEMI .)
    FUNCTION        reduce using rule 31 (statement_nonctrl -> SEMI .)
    IF              reduce using rule 31 (statement_nonctrl -> SEMI .)
    ELSE            reduce using rule 31 (statement_nonctrl -> SEMI .)
    WHILE           reduce using rule 31 (statement_nonctrl -> SEMI .)
    WITH            reduce using rule 31 (statement_nonctrl -> SEMI .)
    DO              reduce using rule 31 (statement_nonctrl -> SEMI .)
    FOR             reduce using rule 31 (statement_nonctrl -> SEMI .)
    RETURN          reduce using rule 31 (statement_nonctrl -> SEMI .)
    YIELD           reduce using rule 31 (statement_nonctrl -> SEMI .)
    BREAK           reduce using rule 31 (statement_nonctrl -> SEMI .)
    CONTINUE        reduce using rule 31 (statement_nonctrl -> SEMI .)
    THROW           reduce using rule 31 (statement_nonctrl -> SEMI .)
    TRY             reduce using rule 31 (statement_nonctrl -> SEMI .)
    CATCH           reduce using rule 31 (statement_nonctrl -> SEMI .)
    SWITCH          reduce using rule 31 (statement_nonctrl -> SEMI .)
    NATIVE          reduce using rule 31 (statement_nonctrl -> SEMI .)
    NUMBER          reduce using rule 31 (statement_nonctrl -> SEMI .)
    ID              reduce using rule 31 (statement_nonctrl -> SEMI .)
    DELETE          reduce using rule 31 (statement_nonctrl -> SEMI .)
    STRINGLIT       reduce using rule 31 (statement_nonctrl -> SEMI .)
    LSBRACKET       reduce using rule 31 (statement_nonctrl -> SEMI .)
    LPAREN          reduce using rule 31 (statement_nonctrl -> SEMI .)
    MINUS           reduce using rule 31 (statement_nonctrl -> SEMI .)
    NOT             reduce using rule 31 (statement_nonctrl -> SEMI .)
    BITINV          reduce using rule 31 (statement_nonctrl -> SEMI .)
    NEW             reduce using rule 31 (statement_nonctrl -> SEMI .)
    INC             reduce using rule 31 (statement_nonctrl -> SEMI .)
    DEC             reduce using rule 31 (statement_nonctrl -> SEMI .)
    TYPEOF          reduce using rule 31 (statement_nonctrl -> SEMI .)
    REGEXPR         reduce using rule 31 (statement_nonctrl -> SEMI .)
    GLOBAL          reduce using rule 31 (statement_nonctrl -> SEMI .)
    VAR             reduce using rule 31 (statement_nonctrl -> SEMI .)
    TLTHAN          reduce using rule 31 (statement_nonctrl -> SEMI .)
    LBRACKET        reduce using rule 31 (statement_nonctrl -> SEMI .)
    $end            reduce using rule 31 (statement_nonctrl -> SEMI .)
    CASE            reduce using rule 31 (statement_nonctrl -> SEMI .)
    DEFAULT         reduce using rule 31 (statement_nonctrl -> SEMI .)


state 64

    (17) statement -> dowhile .
    (35) statement_nonctrl -> dowhile .

  ! reduce/reduce conflict for RBRACKET resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for SEMI resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for IF resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for WITH resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for DO resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for FOR resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for RETURN resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for YIELD resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for BREAK resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for THROW resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for TRY resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for CATCH resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for SWITCH resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for NATIVE resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for NUMBER resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for ID resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for DELETE resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for LPAREN resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for NOT resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for BITINV resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for NEW resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for INC resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for DEC resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for VAR resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for $end resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for CASE resolved using rule 17 (statement -> dowhile .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 17 (statement -> dowhile .)
    RBRACKET        reduce using rule 17 (statement -> dowhile .)
    SEMI            reduce using rule 17 (statement -> dowhile .)
    FUNCTION        reduce using rule 17 (statement -> dowhile .)
    IF              reduce using rule 17 (statement -> dowhile .)
    ELSE            reduce using rule 17 (statement -> dowhile .)
    WHILE           reduce using rule 17 (statement -> dowhile .)
    WITH            reduce using rule 17 (statement -> dowhile .)
    DO              reduce using rule 17 (statement -> dowhile .)
    FOR             reduce using rule 17 (statement -> dowhile .)
    RETURN          reduce using rule 17 (statement -> dowhile .)
    YIELD           reduce using rule 17 (statement -> dowhile .)
    BREAK           reduce using rule 17 (statement -> dowhile .)
    CONTINUE        reduce using rule 17 (statement -> dowhile .)
    THROW           reduce using rule 17 (statement -> dowhile .)
    TRY             reduce using rule 17 (statement -> dowhile .)
    CATCH           reduce using rule 17 (statement -> dowhile .)
    SWITCH          reduce using rule 17 (statement -> dowhile .)
    NATIVE          reduce using rule 17 (statement -> dowhile .)
    NUMBER          reduce using rule 17 (statement -> dowhile .)
    ID              reduce using rule 17 (statement -> dowhile .)
    DELETE          reduce using rule 17 (statement -> dowhile .)
    STRINGLIT       reduce using rule 17 (statement -> dowhile .)
    LSBRACKET       reduce using rule 17 (statement -> dowhile .)
    LPAREN          reduce using rule 17 (statement -> dowhile .)
    MINUS           reduce using rule 17 (statement -> dowhile .)
    NOT             reduce using rule 17 (statement -> dowhile .)
    BITINV          reduce using rule 17 (statement -> dowhile .)
    NEW             reduce using rule 17 (statement -> dowhile .)
    INC             reduce using rule 17 (statement -> dowhile .)
    DEC             reduce using rule 17 (statement -> dowhile .)
    TYPEOF          reduce using rule 17 (statement -> dowhile .)
    REGEXPR         reduce using rule 17 (statement -> dowhile .)
    GLOBAL          reduce using rule 17 (statement -> dowhile .)
    VAR             reduce using rule 17 (statement -> dowhile .)
    TLTHAN          reduce using rule 17 (statement -> dowhile .)
    LBRACKET        reduce using rule 17 (statement -> dowhile .)
    $end            reduce using rule 17 (statement -> dowhile .)
    CASE            reduce using rule 17 (statement -> dowhile .)
    DEFAULT         reduce using rule 17 (statement -> dowhile .)

  ! RBRACKET        [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! SEMI            [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! FUNCTION        [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! IF              [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! ELSE            [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! WHILE           [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! WITH            [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! DO              [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! FOR             [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! RETURN          [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! YIELD           [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! BREAK           [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! CONTINUE        [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! THROW           [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! TRY             [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! CATCH           [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! SWITCH          [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! NATIVE          [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! NUMBER          [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! ID              [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! DELETE          [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! STRINGLIT       [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! LSBRACKET       [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! LPAREN          [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! MINUS           [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! NOT             [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! BITINV          [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! NEW             [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! INC             [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! DEC             [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! TYPEOF          [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! REGEXPR         [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! GLOBAL          [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! VAR             [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! TLTHAN          [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! LBRACKET        [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! $end            [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! CASE            [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]
  ! DEFAULT         [ reduce using rule 35 (statement_nonctrl -> dowhile .) ]


state 65

    (246) yield -> YIELD . expr
    (247) yield -> YIELD .
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    SEMI            reduce using rule 247 (yield -> YIELD .)
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 193
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 66

    (159) expr -> array_literal .

    SEMI            reduce using rule 159 (expr -> array_literal .)
    RSHIFT          reduce using rule 159 (expr -> array_literal .)
    LSHIFT          reduce using rule 159 (expr -> array_literal .)
    LLSHIFT         reduce using rule 159 (expr -> array_literal .)
    RRSHIFT         reduce using rule 159 (expr -> array_literal .)
    DOT             reduce using rule 159 (expr -> array_literal .)
    LAND            reduce using rule 159 (expr -> array_literal .)
    LOR             reduce using rule 159 (expr -> array_literal .)
    BOR             reduce using rule 159 (expr -> array_literal .)
    INSTANCEOF      reduce using rule 159 (expr -> array_literal .)
    BXOR            reduce using rule 159 (expr -> array_literal .)
    BAND            reduce using rule 159 (expr -> array_literal .)
    EQUAL           reduce using rule 159 (expr -> array_literal .)
    EQUAL_STRICT    reduce using rule 159 (expr -> array_literal .)
    NOTEQUAL_STRICT reduce using rule 159 (expr -> array_literal .)
    GTHAN           reduce using rule 159 (expr -> array_literal .)
    GTHANEQ         reduce using rule 159 (expr -> array_literal .)
    LTHAN           reduce using rule 159 (expr -> array_literal .)
    MOD             reduce using rule 159 (expr -> array_literal .)
    LTHANEQ         reduce using rule 159 (expr -> array_literal .)
    NOTEQUAL        reduce using rule 159 (expr -> array_literal .)
    PLUS            reduce using rule 159 (expr -> array_literal .)
    MINUS           reduce using rule 159 (expr -> array_literal .)
    DIVIDE          reduce using rule 159 (expr -> array_literal .)
    TIMES           reduce using rule 159 (expr -> array_literal .)
    IN              reduce using rule 159 (expr -> array_literal .)
    QEST            reduce using rule 159 (expr -> array_literal .)
    COMMA           reduce using rule 159 (expr -> array_literal .)
    INC             reduce using rule 159 (expr -> array_literal .)
    DEC             reduce using rule 159 (expr -> array_literal .)
    ASSIGNPLUS      reduce using rule 159 (expr -> array_literal .)
    ASSIGNMINUS     reduce using rule 159 (expr -> array_literal .)
    ASSIGNDIVIDE    reduce using rule 159 (expr -> array_literal .)
    ASSIGNTIMES     reduce using rule 159 (expr -> array_literal .)
    ASSIGNBOR       reduce using rule 159 (expr -> array_literal .)
    ASSIGNBAND      reduce using rule 159 (expr -> array_literal .)
    ASSIGNBXOR      reduce using rule 159 (expr -> array_literal .)
    ASSIGN          reduce using rule 159 (expr -> array_literal .)
    LSBRACKET       reduce using rule 159 (expr -> array_literal .)
    TLTHAN          reduce using rule 159 (expr -> array_literal .)
    LPAREN          reduce using rule 159 (expr -> array_literal .)
    RSBRACKET       reduce using rule 159 (expr -> array_literal .)
    RPAREN          reduce using rule 159 (expr -> array_literal .)
    COLON           reduce using rule 159 (expr -> array_literal .)
    RBRACKET        reduce using rule 159 (expr -> array_literal .)


state 67

    (150) lparen_restrict -> LPAREN .

    NUMBER          reduce using rule 150 (lparen_restrict -> LPAREN .)
    ID              reduce using rule 150 (lparen_restrict -> LPAREN .)
    STRINGLIT       reduce using rule 150 (lparen_restrict -> LPAREN .)
    LSBRACKET       reduce using rule 150 (lparen_restrict -> LPAREN .)
    FUNCTION        reduce using rule 150 (lparen_restrict -> LPAREN .)
    LPAREN          reduce using rule 150 (lparen_restrict -> LPAREN .)
    MINUS           reduce using rule 150 (lparen_restrict -> LPAREN .)
    NOT             reduce using rule 150 (lparen_restrict -> LPAREN .)
    BITINV          reduce using rule 150 (lparen_restrict -> LPAREN .)
    NEW             reduce using rule 150 (lparen_restrict -> LPAREN .)
    INC             reduce using rule 150 (lparen_restrict -> LPAREN .)
    DEC             reduce using rule 150 (lparen_restrict -> LPAREN .)
    TYPEOF          reduce using rule 150 (lparen_restrict -> LPAREN .)
    REGEXPR         reduce using rule 150 (lparen_restrict -> LPAREN .)
    TLTHAN          reduce using rule 150 (lparen_restrict -> LPAREN .)
    LBRACKET        reduce using rule 150 (lparen_restrict -> LPAREN .)


state 68

    (14) statement -> else .
    (33) statement_nonctrl -> else .

  ! reduce/reduce conflict for RBRACKET resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for SEMI resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for IF resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for WHILE resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for WITH resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for DO resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for FOR resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for RETURN resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for YIELD resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for BREAK resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for THROW resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for TRY resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for CATCH resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for SWITCH resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for NATIVE resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for ID resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for DELETE resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for LPAREN resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for MINUS resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for NOT resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for BITINV resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for NEW resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for INC resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for DEC resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for VAR resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for $end resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for CASE resolved using rule 14 (statement -> else .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 14 (statement -> else .)
    RBRACKET        reduce using rule 14 (statement -> else .)
    SEMI            reduce using rule 14 (statement -> else .)
    FUNCTION        reduce using rule 14 (statement -> else .)
    IF              reduce using rule 14 (statement -> else .)
    ELSE            reduce using rule 14 (statement -> else .)
    WHILE           reduce using rule 14 (statement -> else .)
    WITH            reduce using rule 14 (statement -> else .)
    DO              reduce using rule 14 (statement -> else .)
    FOR             reduce using rule 14 (statement -> else .)
    RETURN          reduce using rule 14 (statement -> else .)
    YIELD           reduce using rule 14 (statement -> else .)
    BREAK           reduce using rule 14 (statement -> else .)
    CONTINUE        reduce using rule 14 (statement -> else .)
    THROW           reduce using rule 14 (statement -> else .)
    TRY             reduce using rule 14 (statement -> else .)
    CATCH           reduce using rule 14 (statement -> else .)
    SWITCH          reduce using rule 14 (statement -> else .)
    NATIVE          reduce using rule 14 (statement -> else .)
    NUMBER          reduce using rule 14 (statement -> else .)
    ID              reduce using rule 14 (statement -> else .)
    DELETE          reduce using rule 14 (statement -> else .)
    STRINGLIT       reduce using rule 14 (statement -> else .)
    LSBRACKET       reduce using rule 14 (statement -> else .)
    LPAREN          reduce using rule 14 (statement -> else .)
    MINUS           reduce using rule 14 (statement -> else .)
    NOT             reduce using rule 14 (statement -> else .)
    BITINV          reduce using rule 14 (statement -> else .)
    NEW             reduce using rule 14 (statement -> else .)
    INC             reduce using rule 14 (statement -> else .)
    DEC             reduce using rule 14 (statement -> else .)
    TYPEOF          reduce using rule 14 (statement -> else .)
    REGEXPR         reduce using rule 14 (statement -> else .)
    GLOBAL          reduce using rule 14 (statement -> else .)
    VAR             reduce using rule 14 (statement -> else .)
    TLTHAN          reduce using rule 14 (statement -> else .)
    LBRACKET        reduce using rule 14 (statement -> else .)
    $end            reduce using rule 14 (statement -> else .)
    CASE            reduce using rule 14 (statement -> else .)
    DEFAULT         reduce using rule 14 (statement -> else .)

  ! RBRACKET        [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! SEMI            [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! FUNCTION        [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! IF              [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! ELSE            [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! WHILE           [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! WITH            [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! DO              [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! FOR             [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! RETURN          [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! YIELD           [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! BREAK           [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! CONTINUE        [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! THROW           [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! TRY             [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! CATCH           [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! SWITCH          [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! NATIVE          [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! NUMBER          [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! ID              [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! DELETE          [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! STRINGLIT       [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! LSBRACKET       [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! LPAREN          [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! MINUS           [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! NOT             [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! BITINV          [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! NEW             [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! INC             [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! DEC             [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! TYPEOF          [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! REGEXPR         [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! GLOBAL          [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! VAR             [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! TLTHAN          [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! LBRACKET        [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! $end            [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! CASE            [ reduce using rule 33 (statement_nonctrl -> else .) ]
  ! DEFAULT         [ reduce using rule 33 (statement_nonctrl -> else .) ]


state 69

    (156) expr -> ID .
    (157) expr -> ID . template_ref
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for TLTHAN resolved as shift
    SEMI            reduce using rule 156 (expr -> ID .)
    RSHIFT          reduce using rule 156 (expr -> ID .)
    LSHIFT          reduce using rule 156 (expr -> ID .)
    LLSHIFT         reduce using rule 156 (expr -> ID .)
    RRSHIFT         reduce using rule 156 (expr -> ID .)
    DOT             reduce using rule 156 (expr -> ID .)
    LAND            reduce using rule 156 (expr -> ID .)
    LOR             reduce using rule 156 (expr -> ID .)
    BOR             reduce using rule 156 (expr -> ID .)
    INSTANCEOF      reduce using rule 156 (expr -> ID .)
    BXOR            reduce using rule 156 (expr -> ID .)
    BAND            reduce using rule 156 (expr -> ID .)
    EQUAL           reduce using rule 156 (expr -> ID .)
    EQUAL_STRICT    reduce using rule 156 (expr -> ID .)
    NOTEQUAL_STRICT reduce using rule 156 (expr -> ID .)
    GTHAN           reduce using rule 156 (expr -> ID .)
    GTHANEQ         reduce using rule 156 (expr -> ID .)
    LTHAN           reduce using rule 156 (expr -> ID .)
    MOD             reduce using rule 156 (expr -> ID .)
    LTHANEQ         reduce using rule 156 (expr -> ID .)
    NOTEQUAL        reduce using rule 156 (expr -> ID .)
    PLUS            reduce using rule 156 (expr -> ID .)
    MINUS           reduce using rule 156 (expr -> ID .)
    DIVIDE          reduce using rule 156 (expr -> ID .)
    TIMES           reduce using rule 156 (expr -> ID .)
    IN              reduce using rule 156 (expr -> ID .)
    QEST            reduce using rule 156 (expr -> ID .)
    COMMA           reduce using rule 156 (expr -> ID .)
    INC             reduce using rule 156 (expr -> ID .)
    DEC             reduce using rule 156 (expr -> ID .)
    ASSIGNPLUS      reduce using rule 156 (expr -> ID .)
    ASSIGNMINUS     reduce using rule 156 (expr -> ID .)
    ASSIGNDIVIDE    reduce using rule 156 (expr -> ID .)
    ASSIGNTIMES     reduce using rule 156 (expr -> ID .)
    ASSIGNBOR       reduce using rule 156 (expr -> ID .)
    ASSIGNBAND      reduce using rule 156 (expr -> ID .)
    ASSIGNBXOR      reduce using rule 156 (expr -> ID .)
    ASSIGN          reduce using rule 156 (expr -> ID .)
    LSBRACKET       reduce using rule 156 (expr -> ID .)
    LPAREN          reduce using rule 156 (expr -> ID .)
    RSBRACKET       reduce using rule 156 (expr -> ID .)
    RPAREN          reduce using rule 156 (expr -> ID .)
    COLON           reduce using rule 156 (expr -> ID .)
    RBRACKET        reduce using rule 156 (expr -> ID .)
    TLTHAN          shift and go to state 72

  ! TLTHAN          [ reduce using rule 156 (expr -> ID .) ]

    template_ref                   shift and go to state 194
    lthan_restrict                 shift and go to state 6

state 70

    (235) if -> IF . paren_expr ctrl_statement
    (203) paren_expr -> . LPAREN expr RPAREN
    (204) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 86

    paren_expr                     shift and go to state 195

state 71

    (139) obj_literal -> lbracket_restrict . push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> lbracket_restrict . rbracket_restrict
    (6) push_scope -> .
    (123) rbracket_restrict -> . RBRACKET

    ID              reduce using rule 6 (push_scope -> .)
    NUMBER          reduce using rule 6 (push_scope -> .)
    STRINGLIT       reduce using rule 6 (push_scope -> .)
    RBRACKET        shift and go to state 197

    rbracket_restrict              shift and go to state 196
    push_scope                     shift and go to state 198

state 72

    (64) lthan_restrict -> TLTHAN .

    TYPEOF          reduce using rule 64 (lthan_restrict -> TLTHAN .)
    INT             reduce using rule 64 (lthan_restrict -> TLTHAN .)
    SHORT           reduce using rule 64 (lthan_restrict -> TLTHAN .)
    FLOAT           reduce using rule 64 (lthan_restrict -> TLTHAN .)
    DOUBLE          reduce using rule 64 (lthan_restrict -> TLTHAN .)
    CHAR            reduce using rule 64 (lthan_restrict -> TLTHAN .)
    BYTE            reduce using rule 64 (lthan_restrict -> TLTHAN .)
    INFERRED        reduce using rule 64 (lthan_restrict -> TLTHAN .)
    ID              reduce using rule 64 (lthan_restrict -> TLTHAN .)


state 73

    (26) statement -> switch .

    RBRACKET        reduce using rule 26 (statement -> switch .)
    SEMI            reduce using rule 26 (statement -> switch .)
    FUNCTION        reduce using rule 26 (statement -> switch .)
    IF              reduce using rule 26 (statement -> switch .)
    ELSE            reduce using rule 26 (statement -> switch .)
    WHILE           reduce using rule 26 (statement -> switch .)
    WITH            reduce using rule 26 (statement -> switch .)
    DO              reduce using rule 26 (statement -> switch .)
    FOR             reduce using rule 26 (statement -> switch .)
    RETURN          reduce using rule 26 (statement -> switch .)
    YIELD           reduce using rule 26 (statement -> switch .)
    BREAK           reduce using rule 26 (statement -> switch .)
    CONTINUE        reduce using rule 26 (statement -> switch .)
    THROW           reduce using rule 26 (statement -> switch .)
    TRY             reduce using rule 26 (statement -> switch .)
    CATCH           reduce using rule 26 (statement -> switch .)
    SWITCH          reduce using rule 26 (statement -> switch .)
    NATIVE          reduce using rule 26 (statement -> switch .)
    NUMBER          reduce using rule 26 (statement -> switch .)
    ID              reduce using rule 26 (statement -> switch .)
    DELETE          reduce using rule 26 (statement -> switch .)
    STRINGLIT       reduce using rule 26 (statement -> switch .)
    LSBRACKET       reduce using rule 26 (statement -> switch .)
    LPAREN          reduce using rule 26 (statement -> switch .)
    MINUS           reduce using rule 26 (statement -> switch .)
    NOT             reduce using rule 26 (statement -> switch .)
    BITINV          reduce using rule 26 (statement -> switch .)
    NEW             reduce using rule 26 (statement -> switch .)
    INC             reduce using rule 26 (statement -> switch .)
    DEC             reduce using rule 26 (statement -> switch .)
    TYPEOF          reduce using rule 26 (statement -> switch .)
    REGEXPR         reduce using rule 26 (statement -> switch .)
    GLOBAL          reduce using rule 26 (statement -> switch .)
    VAR             reduce using rule 26 (statement -> switch .)
    TLTHAN          reduce using rule 26 (statement -> switch .)
    LBRACKET        reduce using rule 26 (statement -> switch .)
    $end            reduce using rule 26 (statement -> switch .)
    CASE            reduce using rule 26 (statement -> switch .)
    DEFAULT         reduce using rule 26 (statement -> switch .)


state 74

    (144) inc -> INC . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 199
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 75

    (102) throw -> THROW . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 200
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 76

    (130) array_literal -> LSBRACKET exprlist . RSBRACKET
    (107) exprlist -> exprlist . COMMA expr

    RSBRACKET       shift and go to state 201
    COMMA           shift and go to state 202


state 77

    (128) exprfunction -> FUNCTION . template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> FUNCTION . template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (115) template_opt -> . template
    (116) template_opt -> .
    (51) template -> . lthan_restrict templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 116 (template_opt -> .)
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 113
    template_opt                   shift and go to state 112
    template                       shift and go to state 115

state 78

    (106) exprlist -> expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 106 (exprlist -> expr .)
    RSBRACKET       reduce using rule 106 (exprlist -> expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

  ! COMMA           [ reduce using rule 106 (exprlist -> expr .) ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 79

    (131) array_literal -> LSBRACKET RSBRACKET .

    SEMI            reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    RSHIFT          reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    LSHIFT          reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    LLSHIFT         reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    RRSHIFT         reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    DOT             reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    LAND            reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    LOR             reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    BOR             reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    INSTANCEOF      reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    BXOR            reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    BAND            reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    EQUAL           reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    EQUAL_STRICT    reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    NOTEQUAL_STRICT reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    GTHAN           reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    GTHANEQ         reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    LTHAN           reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    MOD             reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    LTHANEQ         reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    NOTEQUAL        reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    PLUS            reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    MINUS           reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    DIVIDE          reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    TIMES           reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    IN              reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    QEST            reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    COMMA           reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    INC             reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    DEC             reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNPLUS      reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNMINUS     reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNTIMES     reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNBOR       reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNBAND      reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNBXOR      reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGN          reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    LSBRACKET       reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    TLTHAN          reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    LPAREN          reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    RSBRACKET       reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    RPAREN          reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    COLON           reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)
    RBRACKET        reduce using rule 131 (array_literal -> LSBRACKET RSBRACKET .)


state 80

    (3) statementlist -> statementlist statement .

    SEMI            reduce using rule 3 (statementlist -> statementlist statement .)
    FUNCTION        reduce using rule 3 (statementlist -> statementlist statement .)
    IF              reduce using rule 3 (statementlist -> statementlist statement .)
    ELSE            reduce using rule 3 (statementlist -> statementlist statement .)
    WHILE           reduce using rule 3 (statementlist -> statementlist statement .)
    WITH            reduce using rule 3 (statementlist -> statementlist statement .)
    DO              reduce using rule 3 (statementlist -> statementlist statement .)
    FOR             reduce using rule 3 (statementlist -> statementlist statement .)
    RETURN          reduce using rule 3 (statementlist -> statementlist statement .)
    YIELD           reduce using rule 3 (statementlist -> statementlist statement .)
    BREAK           reduce using rule 3 (statementlist -> statementlist statement .)
    CONTINUE        reduce using rule 3 (statementlist -> statementlist statement .)
    THROW           reduce using rule 3 (statementlist -> statementlist statement .)
    TRY             reduce using rule 3 (statementlist -> statementlist statement .)
    CATCH           reduce using rule 3 (statementlist -> statementlist statement .)
    SWITCH          reduce using rule 3 (statementlist -> statementlist statement .)
    NATIVE          reduce using rule 3 (statementlist -> statementlist statement .)
    NUMBER          reduce using rule 3 (statementlist -> statementlist statement .)
    ID              reduce using rule 3 (statementlist -> statementlist statement .)
    DELETE          reduce using rule 3 (statementlist -> statementlist statement .)
    STRINGLIT       reduce using rule 3 (statementlist -> statementlist statement .)
    LSBRACKET       reduce using rule 3 (statementlist -> statementlist statement .)
    LPAREN          reduce using rule 3 (statementlist -> statementlist statement .)
    MINUS           reduce using rule 3 (statementlist -> statementlist statement .)
    NOT             reduce using rule 3 (statementlist -> statementlist statement .)
    BITINV          reduce using rule 3 (statementlist -> statementlist statement .)
    NEW             reduce using rule 3 (statementlist -> statementlist statement .)
    INC             reduce using rule 3 (statementlist -> statementlist statement .)
    DEC             reduce using rule 3 (statementlist -> statementlist statement .)
    TYPEOF          reduce using rule 3 (statementlist -> statementlist statement .)
    REGEXPR         reduce using rule 3 (statementlist -> statementlist statement .)
    GLOBAL          reduce using rule 3 (statementlist -> statementlist statement .)
    VAR             reduce using rule 3 (statementlist -> statementlist statement .)
    TLTHAN          reduce using rule 3 (statementlist -> statementlist statement .)
    LBRACKET        reduce using rule 3 (statementlist -> statementlist statement .)
    RBRACKET        reduce using rule 3 (statementlist -> statementlist statement .)
    CASE            reduce using rule 3 (statementlist -> statementlist statement .)
    $end            reduce using rule 3 (statementlist -> statementlist statement .)
    DEFAULT         reduce using rule 3 (statementlist -> statementlist statement .)


state 81

    (4) statementlist -> statementlist statement_nonctrl .

    SEMI            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    FUNCTION        reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    IF              reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    ELSE            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    WHILE           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    WITH            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    DO              reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    FOR             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    RETURN          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    YIELD           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    BREAK           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    CONTINUE        reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    THROW           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    TRY             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    CATCH           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    SWITCH          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    NATIVE          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    NUMBER          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    ID              reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    DELETE          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    STRINGLIT       reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    LSBRACKET       reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    LPAREN          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    MINUS           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    NOT             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    BITINV          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    NEW             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    INC             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    DEC             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    TYPEOF          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    REGEXPR         reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    GLOBAL          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    VAR             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    TLTHAN          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    LBRACKET        reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    RBRACKET        reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    CASE            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    $end            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    DEFAULT         reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)


state 82

    (90) simple_templatedeflist -> typeof_opt . var_type
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (74) id_var_type -> . ID

    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    ID              shift and go to state 110

    var_type                       shift and go to state 203
    id_var_type                    shift and go to state 111

state 83

    (60) template_ref -> lthan_restrict simple_templatedeflist . gthan_restrict
    (91) simple_templatedeflist -> simple_templatedeflist . COMMA typeof_opt var_type
    (65) gthan_restrict -> . TGTHAN

    COMMA           shift and go to state 205
    TGTHAN          shift and go to state 206

    gthan_restrict                 shift and go to state 204

state 84

    (88) typeof_opt -> TYPEOF .

    INT             reduce using rule 88 (typeof_opt -> TYPEOF .)
    SHORT           reduce using rule 88 (typeof_opt -> TYPEOF .)
    FLOAT           reduce using rule 88 (typeof_opt -> TYPEOF .)
    DOUBLE          reduce using rule 88 (typeof_opt -> TYPEOF .)
    CHAR            reduce using rule 88 (typeof_opt -> TYPEOF .)
    BYTE            reduce using rule 88 (typeof_opt -> TYPEOF .)
    INFERRED        reduce using rule 88 (typeof_opt -> TYPEOF .)
    ID              reduce using rule 88 (typeof_opt -> TYPEOF .)


state 85

    (30) statement_nonctrl -> funcref SEMI .

    RBRACKET        reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    SEMI            reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    FUNCTION        reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    IF              reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    ELSE            reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    WHILE           reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    WITH            reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    DO              reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    FOR             reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    RETURN          reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    YIELD           reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    BREAK           reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    CONTINUE        reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    THROW           reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    TRY             reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    CATCH           reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    SWITCH          reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    NATIVE          reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    NUMBER          reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    ID              reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    DELETE          reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    STRINGLIT       reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    LSBRACKET       reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    LPAREN          reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    MINUS           reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    NOT             reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    BITINV          reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    NEW             reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    INC             reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    DEC             reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    TYPEOF          reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    REGEXPR         reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    GLOBAL          reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    VAR             reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    TLTHAN          reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    LBRACKET        reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    $end            reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    CASE            reduce using rule 30 (statement_nonctrl -> funcref SEMI .)
    DEFAULT         reduce using rule 30 (statement_nonctrl -> funcref SEMI .)


state 86

    (203) paren_expr -> LPAREN . expr RPAREN
    (204) paren_expr -> LPAREN . RPAREN
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    RPAREN          shift and go to state 207
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 208
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 87

    (234) with -> WITH paren_expr . ctrl_statement
    (217) ctrl_statement -> . statement_nonctrl
    (218) ctrl_statement -> . LBRACKET statementlist_opt RBRACKET
    (219) ctrl_statement -> . SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 117
    SEMI            shift and go to state 131
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    FUNCTION        shift and go to state 124
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    FOR             shift and go to state 32
    DO              shift and go to state 59
    WHILE           shift and go to state 41
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 120
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 130
    strlit                         shift and go to state 24
    for                            shift and go to state 123
    not                            shift and go to state 14
    obj_literal                    shift and go to state 27
    dowhile                        shift and go to state 132
    new                            shift and go to state 29
    inc                            shift and go to state 62
    template_ref                   shift and go to state 30
    return                         shift and go to state 118
    else                           shift and go to state 133
    break                          shift and go to state 119
    statement_nonctrl              shift and go to state 127
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 128
    throw                          shift and go to state 125
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 121
    while                          shift and go to state 129
    continue                       shift and go to state 122
    typeof                         shift and go to state 56
    ctrl_statement                 shift and go to state 209
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 88

    (202) expr_uminus -> MINUS expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    RSHIFT          reduce using rule 202 (expr_uminus -> MINUS expr .)
    LSHIFT          reduce using rule 202 (expr_uminus -> MINUS expr .)
    LLSHIFT         reduce using rule 202 (expr_uminus -> MINUS expr .)
    RRSHIFT         reduce using rule 202 (expr_uminus -> MINUS expr .)
    LAND            reduce using rule 202 (expr_uminus -> MINUS expr .)
    LOR             reduce using rule 202 (expr_uminus -> MINUS expr .)
    BOR             reduce using rule 202 (expr_uminus -> MINUS expr .)
    INSTANCEOF      reduce using rule 202 (expr_uminus -> MINUS expr .)
    BXOR            reduce using rule 202 (expr_uminus -> MINUS expr .)
    BAND            reduce using rule 202 (expr_uminus -> MINUS expr .)
    EQUAL           reduce using rule 202 (expr_uminus -> MINUS expr .)
    EQUAL_STRICT    reduce using rule 202 (expr_uminus -> MINUS expr .)
    NOTEQUAL_STRICT reduce using rule 202 (expr_uminus -> MINUS expr .)
    GTHAN           reduce using rule 202 (expr_uminus -> MINUS expr .)
    GTHANEQ         reduce using rule 202 (expr_uminus -> MINUS expr .)
    LTHAN           reduce using rule 202 (expr_uminus -> MINUS expr .)
    MOD             reduce using rule 202 (expr_uminus -> MINUS expr .)
    LTHANEQ         reduce using rule 202 (expr_uminus -> MINUS expr .)
    NOTEQUAL        reduce using rule 202 (expr_uminus -> MINUS expr .)
    PLUS            reduce using rule 202 (expr_uminus -> MINUS expr .)
    MINUS           reduce using rule 202 (expr_uminus -> MINUS expr .)
    DIVIDE          reduce using rule 202 (expr_uminus -> MINUS expr .)
    TIMES           reduce using rule 202 (expr_uminus -> MINUS expr .)
    IN              reduce using rule 202 (expr_uminus -> MINUS expr .)
    QEST            reduce using rule 202 (expr_uminus -> MINUS expr .)
    COMMA           reduce using rule 202 (expr_uminus -> MINUS expr .)
    ASSIGNPLUS      reduce using rule 202 (expr_uminus -> MINUS expr .)
    ASSIGNMINUS     reduce using rule 202 (expr_uminus -> MINUS expr .)
    ASSIGNDIVIDE    reduce using rule 202 (expr_uminus -> MINUS expr .)
    ASSIGNTIMES     reduce using rule 202 (expr_uminus -> MINUS expr .)
    ASSIGNBOR       reduce using rule 202 (expr_uminus -> MINUS expr .)
    ASSIGNBAND      reduce using rule 202 (expr_uminus -> MINUS expr .)
    ASSIGNBXOR      reduce using rule 202 (expr_uminus -> MINUS expr .)
    ASSIGN          reduce using rule 202 (expr_uminus -> MINUS expr .)
    TLTHAN          reduce using rule 202 (expr_uminus -> MINUS expr .)
    SEMI            reduce using rule 202 (expr_uminus -> MINUS expr .)
    RSBRACKET       reduce using rule 202 (expr_uminus -> MINUS expr .)
    RPAREN          reduce using rule 202 (expr_uminus -> MINUS expr .)
    COLON           reduce using rule 202 (expr_uminus -> MINUS expr .)
    RBRACKET        reduce using rule 202 (expr_uminus -> MINUS expr .)
    DOT             shift and go to state 160
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 202 (expr_uminus -> MINUS expr .) ]
  ! INC             [ reduce using rule 202 (expr_uminus -> MINUS expr .) ]
  ! DEC             [ reduce using rule 202 (expr_uminus -> MINUS expr .) ]
  ! LSBRACKET       [ reduce using rule 202 (expr_uminus -> MINUS expr .) ]
  ! LPAREN          [ reduce using rule 202 (expr_uminus -> MINUS expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! PLUS            [ shift and go to state 169 ]
  ! MINUS           [ shift and go to state 159 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! TIMES           [ shift and go to state 177 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 89

    (19) statement -> return SEMI .
    (37) statement_nonctrl -> return SEMI .

  ! reduce/reduce conflict for RBRACKET resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 19 (statement -> return SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 19 (statement -> return SEMI .)
    RBRACKET        reduce using rule 19 (statement -> return SEMI .)
    SEMI            reduce using rule 19 (statement -> return SEMI .)
    FUNCTION        reduce using rule 19 (statement -> return SEMI .)
    IF              reduce using rule 19 (statement -> return SEMI .)
    ELSE            reduce using rule 19 (statement -> return SEMI .)
    WHILE           reduce using rule 19 (statement -> return SEMI .)
    WITH            reduce using rule 19 (statement -> return SEMI .)
    DO              reduce using rule 19 (statement -> return SEMI .)
    FOR             reduce using rule 19 (statement -> return SEMI .)
    RETURN          reduce using rule 19 (statement -> return SEMI .)
    YIELD           reduce using rule 19 (statement -> return SEMI .)
    BREAK           reduce using rule 19 (statement -> return SEMI .)
    CONTINUE        reduce using rule 19 (statement -> return SEMI .)
    THROW           reduce using rule 19 (statement -> return SEMI .)
    TRY             reduce using rule 19 (statement -> return SEMI .)
    CATCH           reduce using rule 19 (statement -> return SEMI .)
    SWITCH          reduce using rule 19 (statement -> return SEMI .)
    NATIVE          reduce using rule 19 (statement -> return SEMI .)
    NUMBER          reduce using rule 19 (statement -> return SEMI .)
    ID              reduce using rule 19 (statement -> return SEMI .)
    DELETE          reduce using rule 19 (statement -> return SEMI .)
    STRINGLIT       reduce using rule 19 (statement -> return SEMI .)
    LSBRACKET       reduce using rule 19 (statement -> return SEMI .)
    LPAREN          reduce using rule 19 (statement -> return SEMI .)
    MINUS           reduce using rule 19 (statement -> return SEMI .)
    NOT             reduce using rule 19 (statement -> return SEMI .)
    BITINV          reduce using rule 19 (statement -> return SEMI .)
    NEW             reduce using rule 19 (statement -> return SEMI .)
    INC             reduce using rule 19 (statement -> return SEMI .)
    DEC             reduce using rule 19 (statement -> return SEMI .)
    TYPEOF          reduce using rule 19 (statement -> return SEMI .)
    REGEXPR         reduce using rule 19 (statement -> return SEMI .)
    GLOBAL          reduce using rule 19 (statement -> return SEMI .)
    VAR             reduce using rule 19 (statement -> return SEMI .)
    TLTHAN          reduce using rule 19 (statement -> return SEMI .)
    LBRACKET        reduce using rule 19 (statement -> return SEMI .)
    $end            reduce using rule 19 (statement -> return SEMI .)
    CASE            reduce using rule 19 (statement -> return SEMI .)
    DEFAULT         reduce using rule 19 (statement -> return SEMI .)

  ! RBRACKET        [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! SEMI            [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! FUNCTION        [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! IF              [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! ELSE            [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! WHILE           [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! WITH            [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! DO              [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! FOR             [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! RETURN          [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! YIELD           [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! BREAK           [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! CONTINUE        [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! THROW           [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! TRY             [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! CATCH           [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! SWITCH          [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! NATIVE          [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! NUMBER          [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! ID              [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! DELETE          [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! STRINGLIT       [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! LSBRACKET       [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! LPAREN          [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! MINUS           [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! NOT             [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! BITINV          [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! NEW             [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! INC             [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! DEC             [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! TYPEOF          [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! REGEXPR         [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! GLOBAL          [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! VAR             [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! TLTHAN          [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! LBRACKET        [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! $end            [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! CASE            [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]
  ! DEFAULT         [ reduce using rule 37 (statement_nonctrl -> return SEMI .) ]


state 90

    (21) statement -> break SEMI .
    (39) statement_nonctrl -> break SEMI .

  ! reduce/reduce conflict for RBRACKET resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 21 (statement -> break SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 21 (statement -> break SEMI .)
    RBRACKET        reduce using rule 21 (statement -> break SEMI .)
    SEMI            reduce using rule 21 (statement -> break SEMI .)
    FUNCTION        reduce using rule 21 (statement -> break SEMI .)
    IF              reduce using rule 21 (statement -> break SEMI .)
    ELSE            reduce using rule 21 (statement -> break SEMI .)
    WHILE           reduce using rule 21 (statement -> break SEMI .)
    WITH            reduce using rule 21 (statement -> break SEMI .)
    DO              reduce using rule 21 (statement -> break SEMI .)
    FOR             reduce using rule 21 (statement -> break SEMI .)
    RETURN          reduce using rule 21 (statement -> break SEMI .)
    YIELD           reduce using rule 21 (statement -> break SEMI .)
    BREAK           reduce using rule 21 (statement -> break SEMI .)
    CONTINUE        reduce using rule 21 (statement -> break SEMI .)
    THROW           reduce using rule 21 (statement -> break SEMI .)
    TRY             reduce using rule 21 (statement -> break SEMI .)
    CATCH           reduce using rule 21 (statement -> break SEMI .)
    SWITCH          reduce using rule 21 (statement -> break SEMI .)
    NATIVE          reduce using rule 21 (statement -> break SEMI .)
    NUMBER          reduce using rule 21 (statement -> break SEMI .)
    ID              reduce using rule 21 (statement -> break SEMI .)
    DELETE          reduce using rule 21 (statement -> break SEMI .)
    STRINGLIT       reduce using rule 21 (statement -> break SEMI .)
    LSBRACKET       reduce using rule 21 (statement -> break SEMI .)
    LPAREN          reduce using rule 21 (statement -> break SEMI .)
    MINUS           reduce using rule 21 (statement -> break SEMI .)
    NOT             reduce using rule 21 (statement -> break SEMI .)
    BITINV          reduce using rule 21 (statement -> break SEMI .)
    NEW             reduce using rule 21 (statement -> break SEMI .)
    INC             reduce using rule 21 (statement -> break SEMI .)
    DEC             reduce using rule 21 (statement -> break SEMI .)
    TYPEOF          reduce using rule 21 (statement -> break SEMI .)
    REGEXPR         reduce using rule 21 (statement -> break SEMI .)
    GLOBAL          reduce using rule 21 (statement -> break SEMI .)
    VAR             reduce using rule 21 (statement -> break SEMI .)
    TLTHAN          reduce using rule 21 (statement -> break SEMI .)
    LBRACKET        reduce using rule 21 (statement -> break SEMI .)
    $end            reduce using rule 21 (statement -> break SEMI .)
    CASE            reduce using rule 21 (statement -> break SEMI .)
    DEFAULT         reduce using rule 21 (statement -> break SEMI .)

  ! RBRACKET        [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! SEMI            [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! FUNCTION        [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! IF              [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! ELSE            [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! WHILE           [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! WITH            [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! DO              [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! FOR             [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! RETURN          [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! YIELD           [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! BREAK           [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! CONTINUE        [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! THROW           [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! TRY             [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! CATCH           [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! SWITCH          [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! NATIVE          [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! NUMBER          [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! ID              [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! DELETE          [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! STRINGLIT       [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! LSBRACKET       [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! LPAREN          [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! MINUS           [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! NOT             [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! BITINV          [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! NEW             [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! INC             [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! DEC             [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! TYPEOF          [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! REGEXPR         [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! GLOBAL          [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! VAR             [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! TLTHAN          [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! LBRACKET        [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! $end            [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! CASE            [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]
  ! DEFAULT         [ reduce using rule 39 (statement_nonctrl -> break SEMI .) ]


state 91

    (20) statement -> yield SEMI .
    (38) statement_nonctrl -> yield SEMI .

  ! reduce/reduce conflict for RBRACKET resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 20 (statement -> yield SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 20 (statement -> yield SEMI .)
    RBRACKET        reduce using rule 20 (statement -> yield SEMI .)
    SEMI            reduce using rule 20 (statement -> yield SEMI .)
    FUNCTION        reduce using rule 20 (statement -> yield SEMI .)
    IF              reduce using rule 20 (statement -> yield SEMI .)
    ELSE            reduce using rule 20 (statement -> yield SEMI .)
    WHILE           reduce using rule 20 (statement -> yield SEMI .)
    WITH            reduce using rule 20 (statement -> yield SEMI .)
    DO              reduce using rule 20 (statement -> yield SEMI .)
    FOR             reduce using rule 20 (statement -> yield SEMI .)
    RETURN          reduce using rule 20 (statement -> yield SEMI .)
    YIELD           reduce using rule 20 (statement -> yield SEMI .)
    BREAK           reduce using rule 20 (statement -> yield SEMI .)
    CONTINUE        reduce using rule 20 (statement -> yield SEMI .)
    THROW           reduce using rule 20 (statement -> yield SEMI .)
    TRY             reduce using rule 20 (statement -> yield SEMI .)
    CATCH           reduce using rule 20 (statement -> yield SEMI .)
    SWITCH          reduce using rule 20 (statement -> yield SEMI .)
    NATIVE          reduce using rule 20 (statement -> yield SEMI .)
    NUMBER          reduce using rule 20 (statement -> yield SEMI .)
    ID              reduce using rule 20 (statement -> yield SEMI .)
    DELETE          reduce using rule 20 (statement -> yield SEMI .)
    STRINGLIT       reduce using rule 20 (statement -> yield SEMI .)
    LSBRACKET       reduce using rule 20 (statement -> yield SEMI .)
    LPAREN          reduce using rule 20 (statement -> yield SEMI .)
    MINUS           reduce using rule 20 (statement -> yield SEMI .)
    NOT             reduce using rule 20 (statement -> yield SEMI .)
    BITINV          reduce using rule 20 (statement -> yield SEMI .)
    NEW             reduce using rule 20 (statement -> yield SEMI .)
    INC             reduce using rule 20 (statement -> yield SEMI .)
    DEC             reduce using rule 20 (statement -> yield SEMI .)
    TYPEOF          reduce using rule 20 (statement -> yield SEMI .)
    REGEXPR         reduce using rule 20 (statement -> yield SEMI .)
    GLOBAL          reduce using rule 20 (statement -> yield SEMI .)
    VAR             reduce using rule 20 (statement -> yield SEMI .)
    TLTHAN          reduce using rule 20 (statement -> yield SEMI .)
    LBRACKET        reduce using rule 20 (statement -> yield SEMI .)
    $end            reduce using rule 20 (statement -> yield SEMI .)
    CASE            reduce using rule 20 (statement -> yield SEMI .)
    DEFAULT         reduce using rule 20 (statement -> yield SEMI .)

  ! RBRACKET        [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! SEMI            [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! FUNCTION        [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! IF              [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! ELSE            [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! WHILE           [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! WITH            [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! DO              [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! FOR             [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! RETURN          [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! YIELD           [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! BREAK           [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! CONTINUE        [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! THROW           [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! TRY             [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! CATCH           [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! SWITCH          [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! NATIVE          [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! NUMBER          [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! ID              [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! DELETE          [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! STRINGLIT       [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! LSBRACKET       [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! LPAREN          [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! MINUS           [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! NOT             [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! BITINV          [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! NEW             [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! INC             [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! DEC             [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! TYPEOF          [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! REGEXPR         [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! GLOBAL          [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! VAR             [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! TLTHAN          [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! LBRACKET        [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! $end            [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! CASE            [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]
  ! DEFAULT         [ reduce using rule 38 (statement_nonctrl -> yield SEMI .) ]


state 92

    (22) statement -> continue SEMI .
    (40) statement_nonctrl -> continue SEMI .

  ! reduce/reduce conflict for RBRACKET resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 22 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 22 (statement -> continue SEMI .)
    RBRACKET        reduce using rule 22 (statement -> continue SEMI .)
    SEMI            reduce using rule 22 (statement -> continue SEMI .)
    FUNCTION        reduce using rule 22 (statement -> continue SEMI .)
    IF              reduce using rule 22 (statement -> continue SEMI .)
    ELSE            reduce using rule 22 (statement -> continue SEMI .)
    WHILE           reduce using rule 22 (statement -> continue SEMI .)
    WITH            reduce using rule 22 (statement -> continue SEMI .)
    DO              reduce using rule 22 (statement -> continue SEMI .)
    FOR             reduce using rule 22 (statement -> continue SEMI .)
    RETURN          reduce using rule 22 (statement -> continue SEMI .)
    YIELD           reduce using rule 22 (statement -> continue SEMI .)
    BREAK           reduce using rule 22 (statement -> continue SEMI .)
    CONTINUE        reduce using rule 22 (statement -> continue SEMI .)
    THROW           reduce using rule 22 (statement -> continue SEMI .)
    TRY             reduce using rule 22 (statement -> continue SEMI .)
    CATCH           reduce using rule 22 (statement -> continue SEMI .)
    SWITCH          reduce using rule 22 (statement -> continue SEMI .)
    NATIVE          reduce using rule 22 (statement -> continue SEMI .)
    NUMBER          reduce using rule 22 (statement -> continue SEMI .)
    ID              reduce using rule 22 (statement -> continue SEMI .)
    DELETE          reduce using rule 22 (statement -> continue SEMI .)
    STRINGLIT       reduce using rule 22 (statement -> continue SEMI .)
    LSBRACKET       reduce using rule 22 (statement -> continue SEMI .)
    LPAREN          reduce using rule 22 (statement -> continue SEMI .)
    MINUS           reduce using rule 22 (statement -> continue SEMI .)
    NOT             reduce using rule 22 (statement -> continue SEMI .)
    BITINV          reduce using rule 22 (statement -> continue SEMI .)
    NEW             reduce using rule 22 (statement -> continue SEMI .)
    INC             reduce using rule 22 (statement -> continue SEMI .)
    DEC             reduce using rule 22 (statement -> continue SEMI .)
    TYPEOF          reduce using rule 22 (statement -> continue SEMI .)
    REGEXPR         reduce using rule 22 (statement -> continue SEMI .)
    GLOBAL          reduce using rule 22 (statement -> continue SEMI .)
    VAR             reduce using rule 22 (statement -> continue SEMI .)
    TLTHAN          reduce using rule 22 (statement -> continue SEMI .)
    LBRACKET        reduce using rule 22 (statement -> continue SEMI .)
    $end            reduce using rule 22 (statement -> continue SEMI .)
    CASE            reduce using rule 22 (statement -> continue SEMI .)
    DEFAULT         reduce using rule 22 (statement -> continue SEMI .)

  ! RBRACKET        [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! SEMI            [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! FUNCTION        [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! IF              [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! ELSE            [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! WHILE           [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! WITH            [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! DO              [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! FOR             [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! RETURN          [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! YIELD           [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! BREAK           [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! CONTINUE        [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! THROW           [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! TRY             [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! CATCH           [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! SWITCH          [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! NATIVE          [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! NUMBER          [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! ID              [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! DELETE          [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! STRINGLIT       [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! LSBRACKET       [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! LPAREN          [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! MINUS           [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! NOT             [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! BITINV          [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! NEW             [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! INC             [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! DEC             [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! TYPEOF          [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! REGEXPR         [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! GLOBAL          [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! VAR             [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! TLTHAN          [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! LBRACKET        [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! $end            [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! CASE            [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]
  ! DEFAULT         [ reduce using rule 40 (statement_nonctrl -> continue SEMI .) ]


state 93

    (135) typeof -> TYPEOF expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 135 (typeof -> TYPEOF expr .)
    RSHIFT          reduce using rule 135 (typeof -> TYPEOF expr .)
    LSHIFT          reduce using rule 135 (typeof -> TYPEOF expr .)
    LLSHIFT         reduce using rule 135 (typeof -> TYPEOF expr .)
    RRSHIFT         reduce using rule 135 (typeof -> TYPEOF expr .)
    LAND            reduce using rule 135 (typeof -> TYPEOF expr .)
    LOR             reduce using rule 135 (typeof -> TYPEOF expr .)
    BOR             reduce using rule 135 (typeof -> TYPEOF expr .)
    INSTANCEOF      reduce using rule 135 (typeof -> TYPEOF expr .)
    BXOR            reduce using rule 135 (typeof -> TYPEOF expr .)
    BAND            reduce using rule 135 (typeof -> TYPEOF expr .)
    EQUAL           reduce using rule 135 (typeof -> TYPEOF expr .)
    EQUAL_STRICT    reduce using rule 135 (typeof -> TYPEOF expr .)
    NOTEQUAL_STRICT reduce using rule 135 (typeof -> TYPEOF expr .)
    GTHAN           reduce using rule 135 (typeof -> TYPEOF expr .)
    GTHANEQ         reduce using rule 135 (typeof -> TYPEOF expr .)
    LTHAN           reduce using rule 135 (typeof -> TYPEOF expr .)
    MOD             reduce using rule 135 (typeof -> TYPEOF expr .)
    LTHANEQ         reduce using rule 135 (typeof -> TYPEOF expr .)
    NOTEQUAL        reduce using rule 135 (typeof -> TYPEOF expr .)
    PLUS            reduce using rule 135 (typeof -> TYPEOF expr .)
    MINUS           reduce using rule 135 (typeof -> TYPEOF expr .)
    DIVIDE          reduce using rule 135 (typeof -> TYPEOF expr .)
    TIMES           reduce using rule 135 (typeof -> TYPEOF expr .)
    IN              reduce using rule 135 (typeof -> TYPEOF expr .)
    QEST            reduce using rule 135 (typeof -> TYPEOF expr .)
    COMMA           reduce using rule 135 (typeof -> TYPEOF expr .)
    ASSIGNPLUS      reduce using rule 135 (typeof -> TYPEOF expr .)
    ASSIGNMINUS     reduce using rule 135 (typeof -> TYPEOF expr .)
    ASSIGNDIVIDE    reduce using rule 135 (typeof -> TYPEOF expr .)
    ASSIGNTIMES     reduce using rule 135 (typeof -> TYPEOF expr .)
    ASSIGNBOR       reduce using rule 135 (typeof -> TYPEOF expr .)
    ASSIGNBAND      reduce using rule 135 (typeof -> TYPEOF expr .)
    ASSIGNBXOR      reduce using rule 135 (typeof -> TYPEOF expr .)
    ASSIGN          reduce using rule 135 (typeof -> TYPEOF expr .)
    TLTHAN          reduce using rule 135 (typeof -> TYPEOF expr .)
    RSBRACKET       reduce using rule 135 (typeof -> TYPEOF expr .)
    RPAREN          reduce using rule 135 (typeof -> TYPEOF expr .)
    COLON           reduce using rule 135 (typeof -> TYPEOF expr .)
    RBRACKET        reduce using rule 135 (typeof -> TYPEOF expr .)
    DOT             shift and go to state 160
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 135 (typeof -> TYPEOF expr .) ]
  ! INC             [ reduce using rule 135 (typeof -> TYPEOF expr .) ]
  ! DEC             [ reduce using rule 135 (typeof -> TYPEOF expr .) ]
  ! LSBRACKET       [ reduce using rule 135 (typeof -> TYPEOF expr .) ]
  ! LPAREN          [ reduce using rule 135 (typeof -> TYPEOF expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! PLUS            [ shift and go to state 169 ]
  ! MINUS           [ shift and go to state 159 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! TIMES           [ shift and go to state 177 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 94

    (141) delete -> DELETE expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 141 (delete -> DELETE expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 95

    (244) return -> RETURN expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 244 (return -> RETURN expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 96

    (189) expr -> lparen_restrict expr . rparen_restrict
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (151) rparen_restrict -> . RPAREN
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    RPAREN          shift and go to state 211
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

    func_call                      shift and go to state 173
    cmplx_assign                   shift and go to state 187
    template_ref_opt               shift and go to state 176
    rparen_restrict                shift and go to state 210
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 97

    (146) dec -> DEC expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 146 (dec -> DEC expr .)
    RSHIFT          reduce using rule 146 (dec -> DEC expr .)
    LSHIFT          reduce using rule 146 (dec -> DEC expr .)
    LLSHIFT         reduce using rule 146 (dec -> DEC expr .)
    RRSHIFT         reduce using rule 146 (dec -> DEC expr .)
    LAND            reduce using rule 146 (dec -> DEC expr .)
    LOR             reduce using rule 146 (dec -> DEC expr .)
    BOR             reduce using rule 146 (dec -> DEC expr .)
    INSTANCEOF      reduce using rule 146 (dec -> DEC expr .)
    BXOR            reduce using rule 146 (dec -> DEC expr .)
    BAND            reduce using rule 146 (dec -> DEC expr .)
    EQUAL           reduce using rule 146 (dec -> DEC expr .)
    EQUAL_STRICT    reduce using rule 146 (dec -> DEC expr .)
    NOTEQUAL_STRICT reduce using rule 146 (dec -> DEC expr .)
    GTHAN           reduce using rule 146 (dec -> DEC expr .)
    GTHANEQ         reduce using rule 146 (dec -> DEC expr .)
    LTHAN           reduce using rule 146 (dec -> DEC expr .)
    MOD             reduce using rule 146 (dec -> DEC expr .)
    LTHANEQ         reduce using rule 146 (dec -> DEC expr .)
    NOTEQUAL        reduce using rule 146 (dec -> DEC expr .)
    PLUS            reduce using rule 146 (dec -> DEC expr .)
    MINUS           reduce using rule 146 (dec -> DEC expr .)
    DIVIDE          reduce using rule 146 (dec -> DEC expr .)
    TIMES           reduce using rule 146 (dec -> DEC expr .)
    IN              reduce using rule 146 (dec -> DEC expr .)
    QEST            reduce using rule 146 (dec -> DEC expr .)
    COMMA           reduce using rule 146 (dec -> DEC expr .)
    INC             reduce using rule 146 (dec -> DEC expr .)
    DEC             reduce using rule 146 (dec -> DEC expr .)
    ASSIGNPLUS      reduce using rule 146 (dec -> DEC expr .)
    ASSIGNMINUS     reduce using rule 146 (dec -> DEC expr .)
    ASSIGNDIVIDE    reduce using rule 146 (dec -> DEC expr .)
    ASSIGNTIMES     reduce using rule 146 (dec -> DEC expr .)
    ASSIGNBOR       reduce using rule 146 (dec -> DEC expr .)
    ASSIGNBAND      reduce using rule 146 (dec -> DEC expr .)
    ASSIGNBXOR      reduce using rule 146 (dec -> DEC expr .)
    ASSIGN          reduce using rule 146 (dec -> DEC expr .)
    LSBRACKET       reduce using rule 146 (dec -> DEC expr .)
    TLTHAN          reduce using rule 146 (dec -> DEC expr .)
    RSBRACKET       reduce using rule 146 (dec -> DEC expr .)
    RPAREN          reduce using rule 146 (dec -> DEC expr .)
    COLON           reduce using rule 146 (dec -> DEC expr .)
    RBRACKET        reduce using rule 146 (dec -> DEC expr .)
    DOT             shift and go to state 160
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 146 (dec -> DEC expr .) ]
  ! LPAREN          [ reduce using rule 146 (dec -> DEC expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! PLUS            [ shift and go to state 169 ]
  ! MINUS           [ shift and go to state 159 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! TIMES           [ shift and go to state 177 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! INC             [ shift and go to state 165 ]
  ! DEC             [ shift and go to state 158 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! LSBRACKET       [ shift and go to state 150 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 98

    (148) bitinv -> BITINV expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 148 (bitinv -> BITINV expr .)
    RSHIFT          reduce using rule 148 (bitinv -> BITINV expr .)
    LSHIFT          reduce using rule 148 (bitinv -> BITINV expr .)
    LLSHIFT         reduce using rule 148 (bitinv -> BITINV expr .)
    RRSHIFT         reduce using rule 148 (bitinv -> BITINV expr .)
    LAND            reduce using rule 148 (bitinv -> BITINV expr .)
    LOR             reduce using rule 148 (bitinv -> BITINV expr .)
    BOR             reduce using rule 148 (bitinv -> BITINV expr .)
    INSTANCEOF      reduce using rule 148 (bitinv -> BITINV expr .)
    BXOR            reduce using rule 148 (bitinv -> BITINV expr .)
    BAND            reduce using rule 148 (bitinv -> BITINV expr .)
    EQUAL           reduce using rule 148 (bitinv -> BITINV expr .)
    EQUAL_STRICT    reduce using rule 148 (bitinv -> BITINV expr .)
    NOTEQUAL_STRICT reduce using rule 148 (bitinv -> BITINV expr .)
    GTHAN           reduce using rule 148 (bitinv -> BITINV expr .)
    GTHANEQ         reduce using rule 148 (bitinv -> BITINV expr .)
    LTHAN           reduce using rule 148 (bitinv -> BITINV expr .)
    MOD             reduce using rule 148 (bitinv -> BITINV expr .)
    LTHANEQ         reduce using rule 148 (bitinv -> BITINV expr .)
    NOTEQUAL        reduce using rule 148 (bitinv -> BITINV expr .)
    PLUS            reduce using rule 148 (bitinv -> BITINV expr .)
    MINUS           reduce using rule 148 (bitinv -> BITINV expr .)
    DIVIDE          reduce using rule 148 (bitinv -> BITINV expr .)
    TIMES           reduce using rule 148 (bitinv -> BITINV expr .)
    IN              reduce using rule 148 (bitinv -> BITINV expr .)
    QEST            reduce using rule 148 (bitinv -> BITINV expr .)
    COMMA           reduce using rule 148 (bitinv -> BITINV expr .)
    ASSIGNPLUS      reduce using rule 148 (bitinv -> BITINV expr .)
    ASSIGNMINUS     reduce using rule 148 (bitinv -> BITINV expr .)
    ASSIGNDIVIDE    reduce using rule 148 (bitinv -> BITINV expr .)
    ASSIGNTIMES     reduce using rule 148 (bitinv -> BITINV expr .)
    ASSIGNBOR       reduce using rule 148 (bitinv -> BITINV expr .)
    ASSIGNBAND      reduce using rule 148 (bitinv -> BITINV expr .)
    ASSIGNBXOR      reduce using rule 148 (bitinv -> BITINV expr .)
    ASSIGN          reduce using rule 148 (bitinv -> BITINV expr .)
    TLTHAN          reduce using rule 148 (bitinv -> BITINV expr .)
    RSBRACKET       reduce using rule 148 (bitinv -> BITINV expr .)
    RPAREN          reduce using rule 148 (bitinv -> BITINV expr .)
    COLON           reduce using rule 148 (bitinv -> BITINV expr .)
    RBRACKET        reduce using rule 148 (bitinv -> BITINV expr .)
    DOT             shift and go to state 160
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 148 (bitinv -> BITINV expr .) ]
  ! INC             [ reduce using rule 148 (bitinv -> BITINV expr .) ]
  ! DEC             [ reduce using rule 148 (bitinv -> BITINV expr .) ]
  ! LSBRACKET       [ reduce using rule 148 (bitinv -> BITINV expr .) ]
  ! LPAREN          [ reduce using rule 148 (bitinv -> BITINV expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! PLUS            [ shift and go to state 169 ]
  ! MINUS           [ shift and go to state 159 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! TIMES           [ shift and go to state 177 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 99

    (81) var_type -> SHORT .

    ID              reduce using rule 81 (var_type -> SHORT .)
    TLTHAN          reduce using rule 81 (var_type -> SHORT .)
    ASSIGN          reduce using rule 81 (var_type -> SHORT .)
    RPAREN          reduce using rule 81 (var_type -> SHORT .)
    COMMA           reduce using rule 81 (var_type -> SHORT .)
    TGTHAN          reduce using rule 81 (var_type -> SHORT .)
    SEMI            reduce using rule 81 (var_type -> SHORT .)
    IN              reduce using rule 81 (var_type -> SHORT .)
    LBRACKET        reduce using rule 81 (var_type -> SHORT .)


state 100

    (54) type_modifiers -> type_modifiers CONST .

    UNSIGNED        reduce using rule 54 (type_modifiers -> type_modifiers CONST .)
    SIGNED          reduce using rule 54 (type_modifiers -> type_modifiers CONST .)
    CONST           reduce using rule 54 (type_modifiers -> type_modifiers CONST .)
    INT             reduce using rule 54 (type_modifiers -> type_modifiers CONST .)
    SHORT           reduce using rule 54 (type_modifiers -> type_modifiers CONST .)
    FLOAT           reduce using rule 54 (type_modifiers -> type_modifiers CONST .)
    DOUBLE          reduce using rule 54 (type_modifiers -> type_modifiers CONST .)
    CHAR            reduce using rule 54 (type_modifiers -> type_modifiers CONST .)
    BYTE            reduce using rule 54 (type_modifiers -> type_modifiers CONST .)
    INFERRED        reduce using rule 54 (type_modifiers -> type_modifiers CONST .)
    ID              reduce using rule 54 (type_modifiers -> type_modifiers CONST .)
    GLOBAL          reduce using rule 54 (type_modifiers -> type_modifiers CONST .)
    VAR             reduce using rule 54 (type_modifiers -> type_modifiers CONST .)


state 101

    (70) var_decl -> type_modifiers var_type .
    (78) var_type -> var_type . id_var_type
    (87) var_type -> var_type . template_ref
    (74) id_var_type -> . ID
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 70 (var_decl -> type_modifiers var_type .)
    ASSIGN          reduce using rule 70 (var_decl -> type_modifiers var_type .)
    COMMA           reduce using rule 70 (var_decl -> type_modifiers var_type .)
    IN              reduce using rule 70 (var_decl -> type_modifiers var_type .)
    ID              shift and go to state 110
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 212
    id_var_type                    shift and go to state 213

state 102

    (80) var_type -> INT .

    ID              reduce using rule 80 (var_type -> INT .)
    TLTHAN          reduce using rule 80 (var_type -> INT .)
    ASSIGN          reduce using rule 80 (var_type -> INT .)
    RPAREN          reduce using rule 80 (var_type -> INT .)
    COMMA           reduce using rule 80 (var_type -> INT .)
    TGTHAN          reduce using rule 80 (var_type -> INT .)
    SEMI            reduce using rule 80 (var_type -> INT .)
    IN              reduce using rule 80 (var_type -> INT .)
    LBRACKET        reduce using rule 80 (var_type -> INT .)


state 103

    (83) var_type -> DOUBLE .

    ID              reduce using rule 83 (var_type -> DOUBLE .)
    TLTHAN          reduce using rule 83 (var_type -> DOUBLE .)
    ASSIGN          reduce using rule 83 (var_type -> DOUBLE .)
    RPAREN          reduce using rule 83 (var_type -> DOUBLE .)
    COMMA           reduce using rule 83 (var_type -> DOUBLE .)
    TGTHAN          reduce using rule 83 (var_type -> DOUBLE .)
    SEMI            reduce using rule 83 (var_type -> DOUBLE .)
    IN              reduce using rule 83 (var_type -> DOUBLE .)
    LBRACKET        reduce using rule 83 (var_type -> DOUBLE .)


state 104

    (82) var_type -> FLOAT .

    ID              reduce using rule 82 (var_type -> FLOAT .)
    TLTHAN          reduce using rule 82 (var_type -> FLOAT .)
    ASSIGN          reduce using rule 82 (var_type -> FLOAT .)
    RPAREN          reduce using rule 82 (var_type -> FLOAT .)
    COMMA           reduce using rule 82 (var_type -> FLOAT .)
    TGTHAN          reduce using rule 82 (var_type -> FLOAT .)
    SEMI            reduce using rule 82 (var_type -> FLOAT .)
    IN              reduce using rule 82 (var_type -> FLOAT .)
    LBRACKET        reduce using rule 82 (var_type -> FLOAT .)


state 105

    (52) type_modifiers -> type_modifiers UNSIGNED .

    UNSIGNED        reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)
    SIGNED          reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)
    CONST           reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)
    INT             reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)
    SHORT           reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)
    FLOAT           reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)
    DOUBLE          reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)
    CHAR            reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)
    BYTE            reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)
    INFERRED        reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)
    ID              reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)
    GLOBAL          reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)
    VAR             reduce using rule 52 (type_modifiers -> type_modifiers UNSIGNED .)


state 106

    (53) type_modifiers -> type_modifiers SIGNED .

    UNSIGNED        reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)
    SIGNED          reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)
    CONST           reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)
    INT             reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)
    SHORT           reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)
    FLOAT           reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)
    DOUBLE          reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)
    CHAR            reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)
    BYTE            reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)
    INFERRED        reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)
    ID              reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)
    GLOBAL          reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)
    VAR             reduce using rule 53 (type_modifiers -> type_modifiers SIGNED .)


state 107

    (86) var_type -> INFERRED .

    ID              reduce using rule 86 (var_type -> INFERRED .)
    TLTHAN          reduce using rule 86 (var_type -> INFERRED .)
    ASSIGN          reduce using rule 86 (var_type -> INFERRED .)
    RPAREN          reduce using rule 86 (var_type -> INFERRED .)
    COMMA           reduce using rule 86 (var_type -> INFERRED .)
    TGTHAN          reduce using rule 86 (var_type -> INFERRED .)
    SEMI            reduce using rule 86 (var_type -> INFERRED .)
    IN              reduce using rule 86 (var_type -> INFERRED .)
    LBRACKET        reduce using rule 86 (var_type -> INFERRED .)


state 108

    (84) var_type -> CHAR .

    ID              reduce using rule 84 (var_type -> CHAR .)
    TLTHAN          reduce using rule 84 (var_type -> CHAR .)
    ASSIGN          reduce using rule 84 (var_type -> CHAR .)
    RPAREN          reduce using rule 84 (var_type -> CHAR .)
    COMMA           reduce using rule 84 (var_type -> CHAR .)
    TGTHAN          reduce using rule 84 (var_type -> CHAR .)
    SEMI            reduce using rule 84 (var_type -> CHAR .)
    IN              reduce using rule 84 (var_type -> CHAR .)
    LBRACKET        reduce using rule 84 (var_type -> CHAR .)


state 109

    (85) var_type -> BYTE .

    ID              reduce using rule 85 (var_type -> BYTE .)
    TLTHAN          reduce using rule 85 (var_type -> BYTE .)
    ASSIGN          reduce using rule 85 (var_type -> BYTE .)
    RPAREN          reduce using rule 85 (var_type -> BYTE .)
    COMMA           reduce using rule 85 (var_type -> BYTE .)
    TGTHAN          reduce using rule 85 (var_type -> BYTE .)
    SEMI            reduce using rule 85 (var_type -> BYTE .)
    IN              reduce using rule 85 (var_type -> BYTE .)
    LBRACKET        reduce using rule 85 (var_type -> BYTE .)


state 110

    (74) id_var_type -> ID .

    ASSIGN          reduce using rule 74 (id_var_type -> ID .)
    ID              reduce using rule 74 (id_var_type -> ID .)
    TLTHAN          reduce using rule 74 (id_var_type -> ID .)
    COMMA           reduce using rule 74 (id_var_type -> ID .)
    TGTHAN          reduce using rule 74 (id_var_type -> ID .)
    RPAREN          reduce using rule 74 (id_var_type -> ID .)
    LBRACKET        reduce using rule 74 (id_var_type -> ID .)
    SEMI            reduce using rule 74 (id_var_type -> ID .)
    IN              reduce using rule 74 (id_var_type -> ID .)


state 111

    (79) var_type -> id_var_type .

    ID              reduce using rule 79 (var_type -> id_var_type .)
    TLTHAN          reduce using rule 79 (var_type -> id_var_type .)
    ASSIGN          reduce using rule 79 (var_type -> id_var_type .)
    RPAREN          reduce using rule 79 (var_type -> id_var_type .)
    COMMA           reduce using rule 79 (var_type -> id_var_type .)
    TGTHAN          reduce using rule 79 (var_type -> id_var_type .)
    SEMI            reduce using rule 79 (var_type -> id_var_type .)
    IN              reduce using rule 79 (var_type -> id_var_type .)
    LBRACKET        reduce using rule 79 (var_type -> id_var_type .)


state 112

    (128) exprfunction -> FUNCTION template_opt . push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> FUNCTION template_opt . push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (6) push_scope -> .

    LPAREN          reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 214

state 113

    (51) template -> lthan_restrict . templatedeflist gthan_restrict
    (47) templatedeflist -> . var_type
    (48) templatedeflist -> . var_type ASSIGN var_type
    (49) templatedeflist -> . templatedeflist COMMA var_type
    (50) templatedeflist -> . templatedeflist COMMA var_type ASSIGN var_type
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (74) id_var_type -> . ID

    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    ID              shift and go to state 110

    templatedeflist                shift and go to state 215
    var_type                       shift and go to state 216
    id_var_type                    shift and go to state 111

state 114

    (121) function -> FUNCTION ID . template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (119) funcref -> FUNCTION ID . template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (115) template_opt -> . template
    (116) template_opt -> .
    (51) template -> . lthan_restrict templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 116 (template_opt -> .)
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 113
    template_opt                   shift and go to state 217
    template                       shift and go to state 115

state 115

    (115) template_opt -> template .

    LPAREN          reduce using rule 115 (template_opt -> template .)


state 116

    (215) for -> FOR LPAREN . for_decl RPAREN statement_nonctrl
    (216) for -> FOR LPAREN . for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (213) for_decl -> . for_var_decl SEMI expr_opt SEMI expr_opt
    (214) for_decl -> . for_var_decl IN expr
    (210) for_var_decl -> . ID
    (211) for_var_decl -> . ID ASSIGN expr
    (212) for_var_decl -> . var_decl
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR

    ID              shift and go to state 220
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5

    var_decl                       shift and go to state 221
    for_var_decl                   shift and go to state 218
    for_decl                       shift and go to state 219
    type_modifiers                 shift and go to state 28

state 117

    (218) ctrl_statement -> LBRACKET . statementlist_opt RBRACKET
    (122) lbracket_restrict -> LBRACKET .
    (224) statementlist_opt -> . statementlist
    (225) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 122 (lbracket_restrict -> LBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

  ! RBRACKET        [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! RBRACKET        [ reduce using rule 225 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 223
    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    statementlist                  shift and go to state 222
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 15
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 46
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 49
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 118

    (37) statement_nonctrl -> return . SEMI

    SEMI            shift and go to state 224


state 119

    (39) statement_nonctrl -> break . SEMI

    SEMI            shift and go to state 225


state 120

    (38) statement_nonctrl -> yield . SEMI

    SEMI            shift and go to state 226


state 121

    (42) statement_nonctrl -> try .

    SEMI            reduce using rule 42 (statement_nonctrl -> try .)
    FUNCTION        reduce using rule 42 (statement_nonctrl -> try .)
    IF              reduce using rule 42 (statement_nonctrl -> try .)
    ELSE            reduce using rule 42 (statement_nonctrl -> try .)
    WHILE           reduce using rule 42 (statement_nonctrl -> try .)
    WITH            reduce using rule 42 (statement_nonctrl -> try .)
    DO              reduce using rule 42 (statement_nonctrl -> try .)
    FOR             reduce using rule 42 (statement_nonctrl -> try .)
    RETURN          reduce using rule 42 (statement_nonctrl -> try .)
    YIELD           reduce using rule 42 (statement_nonctrl -> try .)
    BREAK           reduce using rule 42 (statement_nonctrl -> try .)
    CONTINUE        reduce using rule 42 (statement_nonctrl -> try .)
    THROW           reduce using rule 42 (statement_nonctrl -> try .)
    TRY             reduce using rule 42 (statement_nonctrl -> try .)
    CATCH           reduce using rule 42 (statement_nonctrl -> try .)
    SWITCH          reduce using rule 42 (statement_nonctrl -> try .)
    NATIVE          reduce using rule 42 (statement_nonctrl -> try .)
    NUMBER          reduce using rule 42 (statement_nonctrl -> try .)
    ID              reduce using rule 42 (statement_nonctrl -> try .)
    DELETE          reduce using rule 42 (statement_nonctrl -> try .)
    STRINGLIT       reduce using rule 42 (statement_nonctrl -> try .)
    LSBRACKET       reduce using rule 42 (statement_nonctrl -> try .)
    LPAREN          reduce using rule 42 (statement_nonctrl -> try .)
    MINUS           reduce using rule 42 (statement_nonctrl -> try .)
    NOT             reduce using rule 42 (statement_nonctrl -> try .)
    BITINV          reduce using rule 42 (statement_nonctrl -> try .)
    NEW             reduce using rule 42 (statement_nonctrl -> try .)
    INC             reduce using rule 42 (statement_nonctrl -> try .)
    DEC             reduce using rule 42 (statement_nonctrl -> try .)
    TYPEOF          reduce using rule 42 (statement_nonctrl -> try .)
    REGEXPR         reduce using rule 42 (statement_nonctrl -> try .)
    GLOBAL          reduce using rule 42 (statement_nonctrl -> try .)
    VAR             reduce using rule 42 (statement_nonctrl -> try .)
    TLTHAN          reduce using rule 42 (statement_nonctrl -> try .)
    LBRACKET        reduce using rule 42 (statement_nonctrl -> try .)
    $end            reduce using rule 42 (statement_nonctrl -> try .)
    RBRACKET        reduce using rule 42 (statement_nonctrl -> try .)
    CASE            reduce using rule 42 (statement_nonctrl -> try .)
    DEFAULT         reduce using rule 42 (statement_nonctrl -> try .)


state 122

    (40) statement_nonctrl -> continue . SEMI

    SEMI            shift and go to state 227


state 123

    (34) statement_nonctrl -> for .

    SEMI            reduce using rule 34 (statement_nonctrl -> for .)
    FUNCTION        reduce using rule 34 (statement_nonctrl -> for .)
    IF              reduce using rule 34 (statement_nonctrl -> for .)
    ELSE            reduce using rule 34 (statement_nonctrl -> for .)
    WHILE           reduce using rule 34 (statement_nonctrl -> for .)
    WITH            reduce using rule 34 (statement_nonctrl -> for .)
    DO              reduce using rule 34 (statement_nonctrl -> for .)
    FOR             reduce using rule 34 (statement_nonctrl -> for .)
    RETURN          reduce using rule 34 (statement_nonctrl -> for .)
    YIELD           reduce using rule 34 (statement_nonctrl -> for .)
    BREAK           reduce using rule 34 (statement_nonctrl -> for .)
    CONTINUE        reduce using rule 34 (statement_nonctrl -> for .)
    THROW           reduce using rule 34 (statement_nonctrl -> for .)
    TRY             reduce using rule 34 (statement_nonctrl -> for .)
    CATCH           reduce using rule 34 (statement_nonctrl -> for .)
    SWITCH          reduce using rule 34 (statement_nonctrl -> for .)
    NATIVE          reduce using rule 34 (statement_nonctrl -> for .)
    NUMBER          reduce using rule 34 (statement_nonctrl -> for .)
    ID              reduce using rule 34 (statement_nonctrl -> for .)
    DELETE          reduce using rule 34 (statement_nonctrl -> for .)
    STRINGLIT       reduce using rule 34 (statement_nonctrl -> for .)
    LSBRACKET       reduce using rule 34 (statement_nonctrl -> for .)
    LPAREN          reduce using rule 34 (statement_nonctrl -> for .)
    MINUS           reduce using rule 34 (statement_nonctrl -> for .)
    NOT             reduce using rule 34 (statement_nonctrl -> for .)
    BITINV          reduce using rule 34 (statement_nonctrl -> for .)
    NEW             reduce using rule 34 (statement_nonctrl -> for .)
    INC             reduce using rule 34 (statement_nonctrl -> for .)
    DEC             reduce using rule 34 (statement_nonctrl -> for .)
    TYPEOF          reduce using rule 34 (statement_nonctrl -> for .)
    REGEXPR         reduce using rule 34 (statement_nonctrl -> for .)
    GLOBAL          reduce using rule 34 (statement_nonctrl -> for .)
    VAR             reduce using rule 34 (statement_nonctrl -> for .)
    TLTHAN          reduce using rule 34 (statement_nonctrl -> for .)
    LBRACKET        reduce using rule 34 (statement_nonctrl -> for .)
    $end            reduce using rule 34 (statement_nonctrl -> for .)
    RBRACKET        reduce using rule 34 (statement_nonctrl -> for .)
    CASE            reduce using rule 34 (statement_nonctrl -> for .)
    DEFAULT         reduce using rule 34 (statement_nonctrl -> for .)


state 124

    (119) funcref -> FUNCTION . ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (128) exprfunction -> FUNCTION . template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> FUNCTION . template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (115) template_opt -> . template
    (116) template_opt -> .
    (51) template -> . lthan_restrict templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    ID              shift and go to state 228
    LPAREN          reduce using rule 116 (template_opt -> .)
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 113
    template_opt                   shift and go to state 112
    template                       shift and go to state 115

state 125

    (41) statement_nonctrl -> throw . SEMI

    SEMI            shift and go to state 229


state 126

    (241) else -> ELSE ctrl_statement .

    SEMI            reduce using rule 241 (else -> ELSE ctrl_statement .)
    FUNCTION        reduce using rule 241 (else -> ELSE ctrl_statement .)
    IF              reduce using rule 241 (else -> ELSE ctrl_statement .)
    ELSE            reduce using rule 241 (else -> ELSE ctrl_statement .)
    WHILE           reduce using rule 241 (else -> ELSE ctrl_statement .)
    WITH            reduce using rule 241 (else -> ELSE ctrl_statement .)
    DO              reduce using rule 241 (else -> ELSE ctrl_statement .)
    FOR             reduce using rule 241 (else -> ELSE ctrl_statement .)
    RETURN          reduce using rule 241 (else -> ELSE ctrl_statement .)
    YIELD           reduce using rule 241 (else -> ELSE ctrl_statement .)
    BREAK           reduce using rule 241 (else -> ELSE ctrl_statement .)
    CONTINUE        reduce using rule 241 (else -> ELSE ctrl_statement .)
    THROW           reduce using rule 241 (else -> ELSE ctrl_statement .)
    TRY             reduce using rule 241 (else -> ELSE ctrl_statement .)
    CATCH           reduce using rule 241 (else -> ELSE ctrl_statement .)
    SWITCH          reduce using rule 241 (else -> ELSE ctrl_statement .)
    NATIVE          reduce using rule 241 (else -> ELSE ctrl_statement .)
    NUMBER          reduce using rule 241 (else -> ELSE ctrl_statement .)
    ID              reduce using rule 241 (else -> ELSE ctrl_statement .)
    DELETE          reduce using rule 241 (else -> ELSE ctrl_statement .)
    STRINGLIT       reduce using rule 241 (else -> ELSE ctrl_statement .)
    LSBRACKET       reduce using rule 241 (else -> ELSE ctrl_statement .)
    LPAREN          reduce using rule 241 (else -> ELSE ctrl_statement .)
    MINUS           reduce using rule 241 (else -> ELSE ctrl_statement .)
    NOT             reduce using rule 241 (else -> ELSE ctrl_statement .)
    BITINV          reduce using rule 241 (else -> ELSE ctrl_statement .)
    NEW             reduce using rule 241 (else -> ELSE ctrl_statement .)
    INC             reduce using rule 241 (else -> ELSE ctrl_statement .)
    DEC             reduce using rule 241 (else -> ELSE ctrl_statement .)
    TYPEOF          reduce using rule 241 (else -> ELSE ctrl_statement .)
    REGEXPR         reduce using rule 241 (else -> ELSE ctrl_statement .)
    GLOBAL          reduce using rule 241 (else -> ELSE ctrl_statement .)
    VAR             reduce using rule 241 (else -> ELSE ctrl_statement .)
    TLTHAN          reduce using rule 241 (else -> ELSE ctrl_statement .)
    LBRACKET        reduce using rule 241 (else -> ELSE ctrl_statement .)
    RBRACKET        reduce using rule 241 (else -> ELSE ctrl_statement .)
    $end            reduce using rule 241 (else -> ELSE ctrl_statement .)
    CASE            reduce using rule 241 (else -> ELSE ctrl_statement .)
    DEFAULT         reduce using rule 241 (else -> ELSE ctrl_statement .)


state 127

    (217) ctrl_statement -> statement_nonctrl .

    SEMI            reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    FUNCTION        reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    IF              reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    ELSE            reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    WHILE           reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    WITH            reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    DO              reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    FOR             reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    RETURN          reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    YIELD           reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    BREAK           reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    CONTINUE        reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    THROW           reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    TRY             reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    CATCH           reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    SWITCH          reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    NATIVE          reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    NUMBER          reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    ID              reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    DELETE          reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    STRINGLIT       reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    LSBRACKET       reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    LPAREN          reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    MINUS           reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    NOT             reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    BITINV          reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    NEW             reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    INC             reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    DEC             reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    TYPEOF          reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    REGEXPR         reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    GLOBAL          reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    VAR             reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    TLTHAN          reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    LBRACKET        reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    $end            reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    RBRACKET        reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    CASE            reduce using rule 217 (ctrl_statement -> statement_nonctrl .)
    DEFAULT         reduce using rule 217 (ctrl_statement -> statement_nonctrl .)


state 128

    (43) statement_nonctrl -> catch .

    SEMI            reduce using rule 43 (statement_nonctrl -> catch .)
    FUNCTION        reduce using rule 43 (statement_nonctrl -> catch .)
    IF              reduce using rule 43 (statement_nonctrl -> catch .)
    ELSE            reduce using rule 43 (statement_nonctrl -> catch .)
    WHILE           reduce using rule 43 (statement_nonctrl -> catch .)
    WITH            reduce using rule 43 (statement_nonctrl -> catch .)
    DO              reduce using rule 43 (statement_nonctrl -> catch .)
    FOR             reduce using rule 43 (statement_nonctrl -> catch .)
    RETURN          reduce using rule 43 (statement_nonctrl -> catch .)
    YIELD           reduce using rule 43 (statement_nonctrl -> catch .)
    BREAK           reduce using rule 43 (statement_nonctrl -> catch .)
    CONTINUE        reduce using rule 43 (statement_nonctrl -> catch .)
    THROW           reduce using rule 43 (statement_nonctrl -> catch .)
    TRY             reduce using rule 43 (statement_nonctrl -> catch .)
    CATCH           reduce using rule 43 (statement_nonctrl -> catch .)
    SWITCH          reduce using rule 43 (statement_nonctrl -> catch .)
    NATIVE          reduce using rule 43 (statement_nonctrl -> catch .)
    NUMBER          reduce using rule 43 (statement_nonctrl -> catch .)
    ID              reduce using rule 43 (statement_nonctrl -> catch .)
    DELETE          reduce using rule 43 (statement_nonctrl -> catch .)
    STRINGLIT       reduce using rule 43 (statement_nonctrl -> catch .)
    LSBRACKET       reduce using rule 43 (statement_nonctrl -> catch .)
    LPAREN          reduce using rule 43 (statement_nonctrl -> catch .)
    MINUS           reduce using rule 43 (statement_nonctrl -> catch .)
    NOT             reduce using rule 43 (statement_nonctrl -> catch .)
    BITINV          reduce using rule 43 (statement_nonctrl -> catch .)
    NEW             reduce using rule 43 (statement_nonctrl -> catch .)
    INC             reduce using rule 43 (statement_nonctrl -> catch .)
    DEC             reduce using rule 43 (statement_nonctrl -> catch .)
    TYPEOF          reduce using rule 43 (statement_nonctrl -> catch .)
    REGEXPR         reduce using rule 43 (statement_nonctrl -> catch .)
    GLOBAL          reduce using rule 43 (statement_nonctrl -> catch .)
    VAR             reduce using rule 43 (statement_nonctrl -> catch .)
    TLTHAN          reduce using rule 43 (statement_nonctrl -> catch .)
    LBRACKET        reduce using rule 43 (statement_nonctrl -> catch .)
    $end            reduce using rule 43 (statement_nonctrl -> catch .)
    RBRACKET        reduce using rule 43 (statement_nonctrl -> catch .)
    CASE            reduce using rule 43 (statement_nonctrl -> catch .)
    DEFAULT         reduce using rule 43 (statement_nonctrl -> catch .)


state 129

    (36) statement_nonctrl -> while .

    SEMI            reduce using rule 36 (statement_nonctrl -> while .)
    FUNCTION        reduce using rule 36 (statement_nonctrl -> while .)
    IF              reduce using rule 36 (statement_nonctrl -> while .)
    ELSE            reduce using rule 36 (statement_nonctrl -> while .)
    WHILE           reduce using rule 36 (statement_nonctrl -> while .)
    WITH            reduce using rule 36 (statement_nonctrl -> while .)
    DO              reduce using rule 36 (statement_nonctrl -> while .)
    FOR             reduce using rule 36 (statement_nonctrl -> while .)
    RETURN          reduce using rule 36 (statement_nonctrl -> while .)
    YIELD           reduce using rule 36 (statement_nonctrl -> while .)
    BREAK           reduce using rule 36 (statement_nonctrl -> while .)
    CONTINUE        reduce using rule 36 (statement_nonctrl -> while .)
    THROW           reduce using rule 36 (statement_nonctrl -> while .)
    TRY             reduce using rule 36 (statement_nonctrl -> while .)
    CATCH           reduce using rule 36 (statement_nonctrl -> while .)
    SWITCH          reduce using rule 36 (statement_nonctrl -> while .)
    NATIVE          reduce using rule 36 (statement_nonctrl -> while .)
    NUMBER          reduce using rule 36 (statement_nonctrl -> while .)
    ID              reduce using rule 36 (statement_nonctrl -> while .)
    DELETE          reduce using rule 36 (statement_nonctrl -> while .)
    STRINGLIT       reduce using rule 36 (statement_nonctrl -> while .)
    LSBRACKET       reduce using rule 36 (statement_nonctrl -> while .)
    LPAREN          reduce using rule 36 (statement_nonctrl -> while .)
    MINUS           reduce using rule 36 (statement_nonctrl -> while .)
    NOT             reduce using rule 36 (statement_nonctrl -> while .)
    BITINV          reduce using rule 36 (statement_nonctrl -> while .)
    NEW             reduce using rule 36 (statement_nonctrl -> while .)
    INC             reduce using rule 36 (statement_nonctrl -> while .)
    DEC             reduce using rule 36 (statement_nonctrl -> while .)
    TYPEOF          reduce using rule 36 (statement_nonctrl -> while .)
    REGEXPR         reduce using rule 36 (statement_nonctrl -> while .)
    GLOBAL          reduce using rule 36 (statement_nonctrl -> while .)
    VAR             reduce using rule 36 (statement_nonctrl -> while .)
    TLTHAN          reduce using rule 36 (statement_nonctrl -> while .)
    LBRACKET        reduce using rule 36 (statement_nonctrl -> while .)
    $end            reduce using rule 36 (statement_nonctrl -> while .)
    RBRACKET        reduce using rule 36 (statement_nonctrl -> while .)
    CASE            reduce using rule 36 (statement_nonctrl -> while .)
    DEFAULT         reduce using rule 36 (statement_nonctrl -> while .)


state 130

    (32) statement_nonctrl -> if .

    SEMI            reduce using rule 32 (statement_nonctrl -> if .)
    FUNCTION        reduce using rule 32 (statement_nonctrl -> if .)
    IF              reduce using rule 32 (statement_nonctrl -> if .)
    ELSE            reduce using rule 32 (statement_nonctrl -> if .)
    WHILE           reduce using rule 32 (statement_nonctrl -> if .)
    WITH            reduce using rule 32 (statement_nonctrl -> if .)
    DO              reduce using rule 32 (statement_nonctrl -> if .)
    FOR             reduce using rule 32 (statement_nonctrl -> if .)
    RETURN          reduce using rule 32 (statement_nonctrl -> if .)
    YIELD           reduce using rule 32 (statement_nonctrl -> if .)
    BREAK           reduce using rule 32 (statement_nonctrl -> if .)
    CONTINUE        reduce using rule 32 (statement_nonctrl -> if .)
    THROW           reduce using rule 32 (statement_nonctrl -> if .)
    TRY             reduce using rule 32 (statement_nonctrl -> if .)
    CATCH           reduce using rule 32 (statement_nonctrl -> if .)
    SWITCH          reduce using rule 32 (statement_nonctrl -> if .)
    NATIVE          reduce using rule 32 (statement_nonctrl -> if .)
    NUMBER          reduce using rule 32 (statement_nonctrl -> if .)
    ID              reduce using rule 32 (statement_nonctrl -> if .)
    DELETE          reduce using rule 32 (statement_nonctrl -> if .)
    STRINGLIT       reduce using rule 32 (statement_nonctrl -> if .)
    LSBRACKET       reduce using rule 32 (statement_nonctrl -> if .)
    LPAREN          reduce using rule 32 (statement_nonctrl -> if .)
    MINUS           reduce using rule 32 (statement_nonctrl -> if .)
    NOT             reduce using rule 32 (statement_nonctrl -> if .)
    BITINV          reduce using rule 32 (statement_nonctrl -> if .)
    NEW             reduce using rule 32 (statement_nonctrl -> if .)
    INC             reduce using rule 32 (statement_nonctrl -> if .)
    DEC             reduce using rule 32 (statement_nonctrl -> if .)
    TYPEOF          reduce using rule 32 (statement_nonctrl -> if .)
    REGEXPR         reduce using rule 32 (statement_nonctrl -> if .)
    GLOBAL          reduce using rule 32 (statement_nonctrl -> if .)
    VAR             reduce using rule 32 (statement_nonctrl -> if .)
    TLTHAN          reduce using rule 32 (statement_nonctrl -> if .)
    LBRACKET        reduce using rule 32 (statement_nonctrl -> if .)
    $end            reduce using rule 32 (statement_nonctrl -> if .)
    RBRACKET        reduce using rule 32 (statement_nonctrl -> if .)
    CASE            reduce using rule 32 (statement_nonctrl -> if .)
    DEFAULT         reduce using rule 32 (statement_nonctrl -> if .)


state 131

    (219) ctrl_statement -> SEMI .
    (31) statement_nonctrl -> SEMI .

  ! reduce/reduce conflict for WHILE resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 31 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 31 (statement_nonctrl -> SEMI .)
    WHILE           reduce using rule 31 (statement_nonctrl -> SEMI .)
    SEMI            reduce using rule 31 (statement_nonctrl -> SEMI .)
    FUNCTION        reduce using rule 31 (statement_nonctrl -> SEMI .)
    IF              reduce using rule 31 (statement_nonctrl -> SEMI .)
    ELSE            reduce using rule 31 (statement_nonctrl -> SEMI .)
    WITH            reduce using rule 31 (statement_nonctrl -> SEMI .)
    DO              reduce using rule 31 (statement_nonctrl -> SEMI .)
    FOR             reduce using rule 31 (statement_nonctrl -> SEMI .)
    RETURN          reduce using rule 31 (statement_nonctrl -> SEMI .)
    YIELD           reduce using rule 31 (statement_nonctrl -> SEMI .)
    BREAK           reduce using rule 31 (statement_nonctrl -> SEMI .)
    CONTINUE        reduce using rule 31 (statement_nonctrl -> SEMI .)
    THROW           reduce using rule 31 (statement_nonctrl -> SEMI .)
    TRY             reduce using rule 31 (statement_nonctrl -> SEMI .)
    CATCH           reduce using rule 31 (statement_nonctrl -> SEMI .)
    SWITCH          reduce using rule 31 (statement_nonctrl -> SEMI .)
    NATIVE          reduce using rule 31 (statement_nonctrl -> SEMI .)
    NUMBER          reduce using rule 31 (statement_nonctrl -> SEMI .)
    ID              reduce using rule 31 (statement_nonctrl -> SEMI .)
    DELETE          reduce using rule 31 (statement_nonctrl -> SEMI .)
    STRINGLIT       reduce using rule 31 (statement_nonctrl -> SEMI .)
    LSBRACKET       reduce using rule 31 (statement_nonctrl -> SEMI .)
    LPAREN          reduce using rule 31 (statement_nonctrl -> SEMI .)
    MINUS           reduce using rule 31 (statement_nonctrl -> SEMI .)
    NOT             reduce using rule 31 (statement_nonctrl -> SEMI .)
    BITINV          reduce using rule 31 (statement_nonctrl -> SEMI .)
    NEW             reduce using rule 31 (statement_nonctrl -> SEMI .)
    INC             reduce using rule 31 (statement_nonctrl -> SEMI .)
    DEC             reduce using rule 31 (statement_nonctrl -> SEMI .)
    TYPEOF          reduce using rule 31 (statement_nonctrl -> SEMI .)
    REGEXPR         reduce using rule 31 (statement_nonctrl -> SEMI .)
    GLOBAL          reduce using rule 31 (statement_nonctrl -> SEMI .)
    VAR             reduce using rule 31 (statement_nonctrl -> SEMI .)
    TLTHAN          reduce using rule 31 (statement_nonctrl -> SEMI .)
    LBRACKET        reduce using rule 31 (statement_nonctrl -> SEMI .)
    $end            reduce using rule 31 (statement_nonctrl -> SEMI .)
    RBRACKET        reduce using rule 31 (statement_nonctrl -> SEMI .)
    CASE            reduce using rule 31 (statement_nonctrl -> SEMI .)
    DEFAULT         reduce using rule 31 (statement_nonctrl -> SEMI .)

  ! SEMI            [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! FUNCTION        [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! IF              [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! ELSE            [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! WHILE           [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! WITH            [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! DO              [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! FOR             [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! RETURN          [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! YIELD           [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! BREAK           [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! CONTINUE        [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! THROW           [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! TRY             [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! CATCH           [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! SWITCH          [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! NATIVE          [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! NUMBER          [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! ID              [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! DELETE          [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! STRINGLIT       [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! LSBRACKET       [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! LPAREN          [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! MINUS           [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! NOT             [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! BITINV          [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! NEW             [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! INC             [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! DEC             [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! TYPEOF          [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! REGEXPR         [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! GLOBAL          [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! VAR             [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! TLTHAN          [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! LBRACKET        [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! $end            [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! RBRACKET        [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! CASE            [ reduce using rule 219 (ctrl_statement -> SEMI .) ]
  ! DEFAULT         [ reduce using rule 219 (ctrl_statement -> SEMI .) ]


state 132

    (35) statement_nonctrl -> dowhile .

    SEMI            reduce using rule 35 (statement_nonctrl -> dowhile .)
    FUNCTION        reduce using rule 35 (statement_nonctrl -> dowhile .)
    IF              reduce using rule 35 (statement_nonctrl -> dowhile .)
    ELSE            reduce using rule 35 (statement_nonctrl -> dowhile .)
    WHILE           reduce using rule 35 (statement_nonctrl -> dowhile .)
    WITH            reduce using rule 35 (statement_nonctrl -> dowhile .)
    DO              reduce using rule 35 (statement_nonctrl -> dowhile .)
    FOR             reduce using rule 35 (statement_nonctrl -> dowhile .)
    RETURN          reduce using rule 35 (statement_nonctrl -> dowhile .)
    YIELD           reduce using rule 35 (statement_nonctrl -> dowhile .)
    BREAK           reduce using rule 35 (statement_nonctrl -> dowhile .)
    CONTINUE        reduce using rule 35 (statement_nonctrl -> dowhile .)
    THROW           reduce using rule 35 (statement_nonctrl -> dowhile .)
    TRY             reduce using rule 35 (statement_nonctrl -> dowhile .)
    CATCH           reduce using rule 35 (statement_nonctrl -> dowhile .)
    SWITCH          reduce using rule 35 (statement_nonctrl -> dowhile .)
    NATIVE          reduce using rule 35 (statement_nonctrl -> dowhile .)
    NUMBER          reduce using rule 35 (statement_nonctrl -> dowhile .)
    ID              reduce using rule 35 (statement_nonctrl -> dowhile .)
    DELETE          reduce using rule 35 (statement_nonctrl -> dowhile .)
    STRINGLIT       reduce using rule 35 (statement_nonctrl -> dowhile .)
    LSBRACKET       reduce using rule 35 (statement_nonctrl -> dowhile .)
    LPAREN          reduce using rule 35 (statement_nonctrl -> dowhile .)
    MINUS           reduce using rule 35 (statement_nonctrl -> dowhile .)
    NOT             reduce using rule 35 (statement_nonctrl -> dowhile .)
    BITINV          reduce using rule 35 (statement_nonctrl -> dowhile .)
    NEW             reduce using rule 35 (statement_nonctrl -> dowhile .)
    INC             reduce using rule 35 (statement_nonctrl -> dowhile .)
    DEC             reduce using rule 35 (statement_nonctrl -> dowhile .)
    TYPEOF          reduce using rule 35 (statement_nonctrl -> dowhile .)
    REGEXPR         reduce using rule 35 (statement_nonctrl -> dowhile .)
    GLOBAL          reduce using rule 35 (statement_nonctrl -> dowhile .)
    VAR             reduce using rule 35 (statement_nonctrl -> dowhile .)
    TLTHAN          reduce using rule 35 (statement_nonctrl -> dowhile .)
    LBRACKET        reduce using rule 35 (statement_nonctrl -> dowhile .)
    $end            reduce using rule 35 (statement_nonctrl -> dowhile .)
    RBRACKET        reduce using rule 35 (statement_nonctrl -> dowhile .)
    CASE            reduce using rule 35 (statement_nonctrl -> dowhile .)
    DEFAULT         reduce using rule 35 (statement_nonctrl -> dowhile .)


state 133

    (33) statement_nonctrl -> else .

    SEMI            reduce using rule 33 (statement_nonctrl -> else .)
    FUNCTION        reduce using rule 33 (statement_nonctrl -> else .)
    IF              reduce using rule 33 (statement_nonctrl -> else .)
    ELSE            reduce using rule 33 (statement_nonctrl -> else .)
    WHILE           reduce using rule 33 (statement_nonctrl -> else .)
    WITH            reduce using rule 33 (statement_nonctrl -> else .)
    DO              reduce using rule 33 (statement_nonctrl -> else .)
    FOR             reduce using rule 33 (statement_nonctrl -> else .)
    RETURN          reduce using rule 33 (statement_nonctrl -> else .)
    YIELD           reduce using rule 33 (statement_nonctrl -> else .)
    BREAK           reduce using rule 33 (statement_nonctrl -> else .)
    CONTINUE        reduce using rule 33 (statement_nonctrl -> else .)
    THROW           reduce using rule 33 (statement_nonctrl -> else .)
    TRY             reduce using rule 33 (statement_nonctrl -> else .)
    CATCH           reduce using rule 33 (statement_nonctrl -> else .)
    SWITCH          reduce using rule 33 (statement_nonctrl -> else .)
    NATIVE          reduce using rule 33 (statement_nonctrl -> else .)
    NUMBER          reduce using rule 33 (statement_nonctrl -> else .)
    ID              reduce using rule 33 (statement_nonctrl -> else .)
    DELETE          reduce using rule 33 (statement_nonctrl -> else .)
    STRINGLIT       reduce using rule 33 (statement_nonctrl -> else .)
    LSBRACKET       reduce using rule 33 (statement_nonctrl -> else .)
    LPAREN          reduce using rule 33 (statement_nonctrl -> else .)
    MINUS           reduce using rule 33 (statement_nonctrl -> else .)
    NOT             reduce using rule 33 (statement_nonctrl -> else .)
    BITINV          reduce using rule 33 (statement_nonctrl -> else .)
    NEW             reduce using rule 33 (statement_nonctrl -> else .)
    INC             reduce using rule 33 (statement_nonctrl -> else .)
    DEC             reduce using rule 33 (statement_nonctrl -> else .)
    TYPEOF          reduce using rule 33 (statement_nonctrl -> else .)
    REGEXPR         reduce using rule 33 (statement_nonctrl -> else .)
    GLOBAL          reduce using rule 33 (statement_nonctrl -> else .)
    VAR             reduce using rule 33 (statement_nonctrl -> else .)
    TLTHAN          reduce using rule 33 (statement_nonctrl -> else .)
    LBRACKET        reduce using rule 33 (statement_nonctrl -> else .)
    $end            reduce using rule 33 (statement_nonctrl -> else .)
    RBRACKET        reduce using rule 33 (statement_nonctrl -> else .)
    CASE            reduce using rule 33 (statement_nonctrl -> else .)
    DEFAULT         reduce using rule 33 (statement_nonctrl -> else .)


state 134

    (237) try -> TRY LBRACKET . statementlist RBRACKET
    (238) try -> TRY LBRACKET . RBRACKET
    (122) lbracket_restrict -> LBRACKET .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

  ! shift/reduce conflict for RBRACKET resolved as shift
  ! shift/reduce conflict for RBRACKET resolved as shift
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        shift and go to state 231
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

  ! RBRACKET        [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! RBRACKET        [ reduce using rule 5 (statementlist -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    statementlist                  shift and go to state 230
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 15
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 46
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 49
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 135

    (236) try -> TRY statement_nonctrl .

    SEMI            reduce using rule 236 (try -> TRY statement_nonctrl .)
    FUNCTION        reduce using rule 236 (try -> TRY statement_nonctrl .)
    IF              reduce using rule 236 (try -> TRY statement_nonctrl .)
    ELSE            reduce using rule 236 (try -> TRY statement_nonctrl .)
    WHILE           reduce using rule 236 (try -> TRY statement_nonctrl .)
    WITH            reduce using rule 236 (try -> TRY statement_nonctrl .)
    DO              reduce using rule 236 (try -> TRY statement_nonctrl .)
    FOR             reduce using rule 236 (try -> TRY statement_nonctrl .)
    RETURN          reduce using rule 236 (try -> TRY statement_nonctrl .)
    YIELD           reduce using rule 236 (try -> TRY statement_nonctrl .)
    BREAK           reduce using rule 236 (try -> TRY statement_nonctrl .)
    CONTINUE        reduce using rule 236 (try -> TRY statement_nonctrl .)
    THROW           reduce using rule 236 (try -> TRY statement_nonctrl .)
    TRY             reduce using rule 236 (try -> TRY statement_nonctrl .)
    CATCH           reduce using rule 236 (try -> TRY statement_nonctrl .)
    SWITCH          reduce using rule 236 (try -> TRY statement_nonctrl .)
    NATIVE          reduce using rule 236 (try -> TRY statement_nonctrl .)
    NUMBER          reduce using rule 236 (try -> TRY statement_nonctrl .)
    ID              reduce using rule 236 (try -> TRY statement_nonctrl .)
    DELETE          reduce using rule 236 (try -> TRY statement_nonctrl .)
    STRINGLIT       reduce using rule 236 (try -> TRY statement_nonctrl .)
    LSBRACKET       reduce using rule 236 (try -> TRY statement_nonctrl .)
    LPAREN          reduce using rule 236 (try -> TRY statement_nonctrl .)
    MINUS           reduce using rule 236 (try -> TRY statement_nonctrl .)
    NOT             reduce using rule 236 (try -> TRY statement_nonctrl .)
    BITINV          reduce using rule 236 (try -> TRY statement_nonctrl .)
    NEW             reduce using rule 236 (try -> TRY statement_nonctrl .)
    INC             reduce using rule 236 (try -> TRY statement_nonctrl .)
    DEC             reduce using rule 236 (try -> TRY statement_nonctrl .)
    TYPEOF          reduce using rule 236 (try -> TRY statement_nonctrl .)
    REGEXPR         reduce using rule 236 (try -> TRY statement_nonctrl .)
    GLOBAL          reduce using rule 236 (try -> TRY statement_nonctrl .)
    VAR             reduce using rule 236 (try -> TRY statement_nonctrl .)
    TLTHAN          reduce using rule 236 (try -> TRY statement_nonctrl .)
    LBRACKET        reduce using rule 236 (try -> TRY statement_nonctrl .)
    $end            reduce using rule 236 (try -> TRY statement_nonctrl .)
    RBRACKET        reduce using rule 236 (try -> TRY statement_nonctrl .)
    CASE            reduce using rule 236 (try -> TRY statement_nonctrl .)
    DEFAULT         reduce using rule 236 (try -> TRY statement_nonctrl .)


state 136

    (23) statement -> throw SEMI .
    (41) statement_nonctrl -> throw SEMI .

  ! reduce/reduce conflict for RBRACKET resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 23 (statement -> throw SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 23 (statement -> throw SEMI .)
    RBRACKET        reduce using rule 23 (statement -> throw SEMI .)
    SEMI            reduce using rule 23 (statement -> throw SEMI .)
    FUNCTION        reduce using rule 23 (statement -> throw SEMI .)
    IF              reduce using rule 23 (statement -> throw SEMI .)
    ELSE            reduce using rule 23 (statement -> throw SEMI .)
    WHILE           reduce using rule 23 (statement -> throw SEMI .)
    WITH            reduce using rule 23 (statement -> throw SEMI .)
    DO              reduce using rule 23 (statement -> throw SEMI .)
    FOR             reduce using rule 23 (statement -> throw SEMI .)
    RETURN          reduce using rule 23 (statement -> throw SEMI .)
    YIELD           reduce using rule 23 (statement -> throw SEMI .)
    BREAK           reduce using rule 23 (statement -> throw SEMI .)
    CONTINUE        reduce using rule 23 (statement -> throw SEMI .)
    THROW           reduce using rule 23 (statement -> throw SEMI .)
    TRY             reduce using rule 23 (statement -> throw SEMI .)
    CATCH           reduce using rule 23 (statement -> throw SEMI .)
    SWITCH          reduce using rule 23 (statement -> throw SEMI .)
    NATIVE          reduce using rule 23 (statement -> throw SEMI .)
    NUMBER          reduce using rule 23 (statement -> throw SEMI .)
    ID              reduce using rule 23 (statement -> throw SEMI .)
    DELETE          reduce using rule 23 (statement -> throw SEMI .)
    STRINGLIT       reduce using rule 23 (statement -> throw SEMI .)
    LSBRACKET       reduce using rule 23 (statement -> throw SEMI .)
    LPAREN          reduce using rule 23 (statement -> throw SEMI .)
    MINUS           reduce using rule 23 (statement -> throw SEMI .)
    NOT             reduce using rule 23 (statement -> throw SEMI .)
    BITINV          reduce using rule 23 (statement -> throw SEMI .)
    NEW             reduce using rule 23 (statement -> throw SEMI .)
    INC             reduce using rule 23 (statement -> throw SEMI .)
    DEC             reduce using rule 23 (statement -> throw SEMI .)
    TYPEOF          reduce using rule 23 (statement -> throw SEMI .)
    REGEXPR         reduce using rule 23 (statement -> throw SEMI .)
    GLOBAL          reduce using rule 23 (statement -> throw SEMI .)
    VAR             reduce using rule 23 (statement -> throw SEMI .)
    TLTHAN          reduce using rule 23 (statement -> throw SEMI .)
    LBRACKET        reduce using rule 23 (statement -> throw SEMI .)
    $end            reduce using rule 23 (statement -> throw SEMI .)
    CASE            reduce using rule 23 (statement -> throw SEMI .)
    DEFAULT         reduce using rule 23 (statement -> throw SEMI .)

  ! RBRACKET        [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! SEMI            [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! FUNCTION        [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! IF              [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! ELSE            [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! WHILE           [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! WITH            [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! DO              [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! FOR             [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! RETURN          [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! YIELD           [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! BREAK           [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! CONTINUE        [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! THROW           [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! TRY             [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! CATCH           [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! SWITCH          [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! NATIVE          [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! NUMBER          [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! ID              [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! DELETE          [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! STRINGLIT       [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! LSBRACKET       [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! LPAREN          [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! MINUS           [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! NOT             [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! BITINV          [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! NEW             [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! INC             [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! DEC             [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! TYPEOF          [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! REGEXPR         [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! GLOBAL          [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! VAR             [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! TLTHAN          [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! LBRACKET        [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! $end            [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! CASE            [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]
  ! DEFAULT         [ reduce using rule 41 (statement_nonctrl -> throw SEMI .) ]


state 137

    (29) statement_nonctrl -> var_decl SEMI .

    RBRACKET        reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    SEMI            reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    FUNCTION        reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    IF              reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    ELSE            reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    WHILE           reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    WITH            reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    DO              reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    FOR             reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    RETURN          reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    YIELD           reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    BREAK           reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    CONTINUE        reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    THROW           reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    TRY             reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    CATCH           reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    SWITCH          reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    NATIVE          reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    NUMBER          reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    ID              reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    DELETE          reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    STRINGLIT       reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    LSBRACKET       reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    LPAREN          reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    MINUS           reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    NOT             reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    BITINV          reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    NEW             reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    INC             reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    DEC             reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    TYPEOF          reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    REGEXPR         reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    GLOBAL          reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    VAR             reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    TLTHAN          reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    LBRACKET        reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    $end            reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    CASE            reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)
    DEFAULT         reduce using rule 29 (statement_nonctrl -> var_decl SEMI .)


state 138

    (71) var_decl -> var_decl ASSIGN . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 232
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 139

    (72) var_decl -> var_decl COMMA . ID
    (73) var_decl -> var_decl COMMA . ID ASSIGN expr

    ID              shift and go to state 233


state 140

    (147) not -> NOT expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    RSHIFT          reduce using rule 147 (not -> NOT expr .)
    LSHIFT          reduce using rule 147 (not -> NOT expr .)
    LLSHIFT         reduce using rule 147 (not -> NOT expr .)
    RRSHIFT         reduce using rule 147 (not -> NOT expr .)
    LAND            reduce using rule 147 (not -> NOT expr .)
    LOR             reduce using rule 147 (not -> NOT expr .)
    BOR             reduce using rule 147 (not -> NOT expr .)
    INSTANCEOF      reduce using rule 147 (not -> NOT expr .)
    BXOR            reduce using rule 147 (not -> NOT expr .)
    BAND            reduce using rule 147 (not -> NOT expr .)
    EQUAL           reduce using rule 147 (not -> NOT expr .)
    EQUAL_STRICT    reduce using rule 147 (not -> NOT expr .)
    NOTEQUAL_STRICT reduce using rule 147 (not -> NOT expr .)
    GTHAN           reduce using rule 147 (not -> NOT expr .)
    GTHANEQ         reduce using rule 147 (not -> NOT expr .)
    LTHAN           reduce using rule 147 (not -> NOT expr .)
    MOD             reduce using rule 147 (not -> NOT expr .)
    LTHANEQ         reduce using rule 147 (not -> NOT expr .)
    NOTEQUAL        reduce using rule 147 (not -> NOT expr .)
    PLUS            reduce using rule 147 (not -> NOT expr .)
    MINUS           reduce using rule 147 (not -> NOT expr .)
    DIVIDE          reduce using rule 147 (not -> NOT expr .)
    TIMES           reduce using rule 147 (not -> NOT expr .)
    IN              reduce using rule 147 (not -> NOT expr .)
    QEST            reduce using rule 147 (not -> NOT expr .)
    COMMA           reduce using rule 147 (not -> NOT expr .)
    ASSIGNPLUS      reduce using rule 147 (not -> NOT expr .)
    ASSIGNMINUS     reduce using rule 147 (not -> NOT expr .)
    ASSIGNDIVIDE    reduce using rule 147 (not -> NOT expr .)
    ASSIGNTIMES     reduce using rule 147 (not -> NOT expr .)
    ASSIGNBOR       reduce using rule 147 (not -> NOT expr .)
    ASSIGNBAND      reduce using rule 147 (not -> NOT expr .)
    ASSIGNBXOR      reduce using rule 147 (not -> NOT expr .)
    ASSIGN          reduce using rule 147 (not -> NOT expr .)
    TLTHAN          reduce using rule 147 (not -> NOT expr .)
    SEMI            reduce using rule 147 (not -> NOT expr .)
    RSBRACKET       reduce using rule 147 (not -> NOT expr .)
    RPAREN          reduce using rule 147 (not -> NOT expr .)
    COLON           reduce using rule 147 (not -> NOT expr .)
    RBRACKET        reduce using rule 147 (not -> NOT expr .)
    DOT             shift and go to state 160
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 147 (not -> NOT expr .) ]
  ! INC             [ reduce using rule 147 (not -> NOT expr .) ]
  ! DEC             [ reduce using rule 147 (not -> NOT expr .) ]
  ! LSBRACKET       [ reduce using rule 147 (not -> NOT expr .) ]
  ! LPAREN          [ reduce using rule 147 (not -> NOT expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! PLUS            [ shift and go to state 169 ]
  ! MINUS           [ shift and go to state 159 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! TIMES           [ shift and go to state 177 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 141

    (221) while -> WHILE paren_expr . statement_nonctrl
    (222) while -> WHILE paren_expr . LBRACKET statementlist_opt RBRACKET
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 234
    SEMI            shift and go to state 63
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    FUNCTION        shift and go to state 124
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    FOR             shift and go to state 32
    DO              shift and go to state 59
    WHILE           shift and go to state 41
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 120
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 130
    strlit                         shift and go to state 24
    for                            shift and go to state 123
    not                            shift and go to state 14
    obj_literal                    shift and go to state 27
    dowhile                        shift and go to state 132
    new                            shift and go to state 29
    inc                            shift and go to state 62
    template_ref                   shift and go to state 30
    return                         shift and go to state 118
    else                           shift and go to state 133
    break                          shift and go to state 119
    statement_nonctrl              shift and go to state 235
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 128
    throw                          shift and go to state 125
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 121
    while                          shift and go to state 129
    continue                       shift and go to state 122
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 142

    (142) new -> NEW expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 142 (new -> NEW expr .)
    RSHIFT          reduce using rule 142 (new -> NEW expr .)
    LSHIFT          reduce using rule 142 (new -> NEW expr .)
    LLSHIFT         reduce using rule 142 (new -> NEW expr .)
    RRSHIFT         reduce using rule 142 (new -> NEW expr .)
    LAND            reduce using rule 142 (new -> NEW expr .)
    LOR             reduce using rule 142 (new -> NEW expr .)
    BOR             reduce using rule 142 (new -> NEW expr .)
    INSTANCEOF      reduce using rule 142 (new -> NEW expr .)
    BXOR            reduce using rule 142 (new -> NEW expr .)
    BAND            reduce using rule 142 (new -> NEW expr .)
    EQUAL           reduce using rule 142 (new -> NEW expr .)
    EQUAL_STRICT    reduce using rule 142 (new -> NEW expr .)
    NOTEQUAL_STRICT reduce using rule 142 (new -> NEW expr .)
    GTHAN           reduce using rule 142 (new -> NEW expr .)
    GTHANEQ         reduce using rule 142 (new -> NEW expr .)
    LTHAN           reduce using rule 142 (new -> NEW expr .)
    MOD             reduce using rule 142 (new -> NEW expr .)
    LTHANEQ         reduce using rule 142 (new -> NEW expr .)
    NOTEQUAL        reduce using rule 142 (new -> NEW expr .)
    PLUS            reduce using rule 142 (new -> NEW expr .)
    MINUS           reduce using rule 142 (new -> NEW expr .)
    DIVIDE          reduce using rule 142 (new -> NEW expr .)
    TIMES           reduce using rule 142 (new -> NEW expr .)
    IN              reduce using rule 142 (new -> NEW expr .)
    QEST            reduce using rule 142 (new -> NEW expr .)
    COMMA           reduce using rule 142 (new -> NEW expr .)
    INC             reduce using rule 142 (new -> NEW expr .)
    DEC             reduce using rule 142 (new -> NEW expr .)
    ASSIGNPLUS      reduce using rule 142 (new -> NEW expr .)
    ASSIGNMINUS     reduce using rule 142 (new -> NEW expr .)
    ASSIGNDIVIDE    reduce using rule 142 (new -> NEW expr .)
    ASSIGNTIMES     reduce using rule 142 (new -> NEW expr .)
    ASSIGNBOR       reduce using rule 142 (new -> NEW expr .)
    ASSIGNBAND      reduce using rule 142 (new -> NEW expr .)
    ASSIGNBXOR      reduce using rule 142 (new -> NEW expr .)
    ASSIGN          reduce using rule 142 (new -> NEW expr .)
    LSBRACKET       reduce using rule 142 (new -> NEW expr .)
    TLTHAN          reduce using rule 142 (new -> NEW expr .)
    RSBRACKET       reduce using rule 142 (new -> NEW expr .)
    RPAREN          reduce using rule 142 (new -> NEW expr .)
    COLON           reduce using rule 142 (new -> NEW expr .)
    RBRACKET        reduce using rule 142 (new -> NEW expr .)
    DOT             shift and go to state 160
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 142 (new -> NEW expr .) ]
  ! LPAREN          [ reduce using rule 142 (new -> NEW expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! PLUS            [ shift and go to state 169 ]
  ! MINUS           [ shift and go to state 159 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! TIMES           [ shift and go to state 177 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! INC             [ shift and go to state 165 ]
  ! DEC             [ shift and go to state 158 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! LSBRACKET       [ shift and go to state 150 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 143

    (120) func_native -> NATIVE push_scope . FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt

    FUNCTION        shift and go to state 236


state 144

    (233) switch -> SWITCH paren_expr . LBRACKET case_block RBRACKET

    LBRACKET        shift and go to state 237


state 145

    (27) statement -> func_native SEMI .

    RBRACKET        reduce using rule 27 (statement -> func_native SEMI .)
    SEMI            reduce using rule 27 (statement -> func_native SEMI .)
    FUNCTION        reduce using rule 27 (statement -> func_native SEMI .)
    IF              reduce using rule 27 (statement -> func_native SEMI .)
    ELSE            reduce using rule 27 (statement -> func_native SEMI .)
    WHILE           reduce using rule 27 (statement -> func_native SEMI .)
    WITH            reduce using rule 27 (statement -> func_native SEMI .)
    DO              reduce using rule 27 (statement -> func_native SEMI .)
    FOR             reduce using rule 27 (statement -> func_native SEMI .)
    RETURN          reduce using rule 27 (statement -> func_native SEMI .)
    YIELD           reduce using rule 27 (statement -> func_native SEMI .)
    BREAK           reduce using rule 27 (statement -> func_native SEMI .)
    CONTINUE        reduce using rule 27 (statement -> func_native SEMI .)
    THROW           reduce using rule 27 (statement -> func_native SEMI .)
    TRY             reduce using rule 27 (statement -> func_native SEMI .)
    CATCH           reduce using rule 27 (statement -> func_native SEMI .)
    SWITCH          reduce using rule 27 (statement -> func_native SEMI .)
    NATIVE          reduce using rule 27 (statement -> func_native SEMI .)
    NUMBER          reduce using rule 27 (statement -> func_native SEMI .)
    ID              reduce using rule 27 (statement -> func_native SEMI .)
    DELETE          reduce using rule 27 (statement -> func_native SEMI .)
    STRINGLIT       reduce using rule 27 (statement -> func_native SEMI .)
    LSBRACKET       reduce using rule 27 (statement -> func_native SEMI .)
    LPAREN          reduce using rule 27 (statement -> func_native SEMI .)
    MINUS           reduce using rule 27 (statement -> func_native SEMI .)
    NOT             reduce using rule 27 (statement -> func_native SEMI .)
    BITINV          reduce using rule 27 (statement -> func_native SEMI .)
    NEW             reduce using rule 27 (statement -> func_native SEMI .)
    INC             reduce using rule 27 (statement -> func_native SEMI .)
    DEC             reduce using rule 27 (statement -> func_native SEMI .)
    TYPEOF          reduce using rule 27 (statement -> func_native SEMI .)
    REGEXPR         reduce using rule 27 (statement -> func_native SEMI .)
    GLOBAL          reduce using rule 27 (statement -> func_native SEMI .)
    VAR             reduce using rule 27 (statement -> func_native SEMI .)
    TLTHAN          reduce using rule 27 (statement -> func_native SEMI .)
    LBRACKET        reduce using rule 27 (statement -> func_native SEMI .)
    $end            reduce using rule 27 (statement -> func_native SEMI .)
    CASE            reduce using rule 27 (statement -> func_native SEMI .)
    DEFAULT         reduce using rule 27 (statement -> func_native SEMI .)


state 146

    (239) catch -> CATCH paren_expr . statement_nonctrl
    (240) catch -> CATCH paren_expr . LBRACKET statementlist RBRACKET
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 238
    SEMI            shift and go to state 63
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    FUNCTION        shift and go to state 124
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    FOR             shift and go to state 32
    DO              shift and go to state 59
    WHILE           shift and go to state 41
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    var_decl                       shift and go to state 37
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 130
    strlit                         shift and go to state 24
    for                            shift and go to state 123
    not                            shift and go to state 14
    obj_literal                    shift and go to state 27
    dowhile                        shift and go to state 132
    new                            shift and go to state 29
    inc                            shift and go to state 62
    template_ref                   shift and go to state 30
    return                         shift and go to state 118
    else                           shift and go to state 133
    break                          shift and go to state 119
    statement_nonctrl              shift and go to state 239
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 128
    throw                          shift and go to state 125
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    yield                          shift and go to state 120
    try                            shift and go to state 121
    while                          shift and go to state 129
    continue                       shift and go to state 122
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 147

    (183) expr -> expr NOTEQUAL . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 240
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 148

    (166) expr -> expr LLSHIFT . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 241
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 149

    (164) expr -> expr RSHIFT . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 242
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 150

    (152) lsbracket_restrict -> LSBRACKET .

    NUMBER          reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    ID              reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    STRINGLIT       reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    LSBRACKET       reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    FUNCTION        reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    LPAREN          reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    MINUS           reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    NOT             reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    BITINV          reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    NEW             reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    INC             reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    DEC             reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    TYPEOF          reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    REGEXPR         reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    TLTHAN          reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)
    LBRACKET        reduce using rule 152 (lsbracket_restrict -> LSBRACKET .)


state 151

    (171) expr -> expr BOR . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 243
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 152

    (175) expr -> expr EQUAL . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 244
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 153

    (170) expr -> expr LOR . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 245
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 154

    (192) expr -> expr QEST . expr COLON expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 246
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 155

    (165) expr -> expr LSHIFT . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 247
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 156

    (96) cmplx_assign -> ASSIGNDIVIDE .

    NUMBER          reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    ID              reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    STRINGLIT       reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    LSBRACKET       reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    FUNCTION        reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    LPAREN          reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    MINUS           reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    NOT             reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    BITINV          reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    NEW             reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    INC             reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    DEC             reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    TYPEOF          reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    REGEXPR         reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    TLTHAN          reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)
    LBRACKET        reduce using rule 96 (cmplx_assign -> ASSIGNDIVIDE .)


state 157

    (98) cmplx_assign -> ASSIGNBOR .

    NUMBER          reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    ID              reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    STRINGLIT       reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    LSBRACKET       reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    FUNCTION        reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    LPAREN          reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    MINUS           reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    NOT             reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    BITINV          reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    NEW             reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    INC             reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    DEC             reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    TYPEOF          reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    REGEXPR         reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    TLTHAN          reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)
    LBRACKET        reduce using rule 98 (cmplx_assign -> ASSIGNBOR .)


state 158

    (145) dec -> expr DEC .

    SEMI            reduce using rule 145 (dec -> expr DEC .)
    RSHIFT          reduce using rule 145 (dec -> expr DEC .)
    LSHIFT          reduce using rule 145 (dec -> expr DEC .)
    LLSHIFT         reduce using rule 145 (dec -> expr DEC .)
    RRSHIFT         reduce using rule 145 (dec -> expr DEC .)
    DOT             reduce using rule 145 (dec -> expr DEC .)
    LAND            reduce using rule 145 (dec -> expr DEC .)
    LOR             reduce using rule 145 (dec -> expr DEC .)
    BOR             reduce using rule 145 (dec -> expr DEC .)
    INSTANCEOF      reduce using rule 145 (dec -> expr DEC .)
    BXOR            reduce using rule 145 (dec -> expr DEC .)
    BAND            reduce using rule 145 (dec -> expr DEC .)
    EQUAL           reduce using rule 145 (dec -> expr DEC .)
    EQUAL_STRICT    reduce using rule 145 (dec -> expr DEC .)
    NOTEQUAL_STRICT reduce using rule 145 (dec -> expr DEC .)
    GTHAN           reduce using rule 145 (dec -> expr DEC .)
    GTHANEQ         reduce using rule 145 (dec -> expr DEC .)
    LTHAN           reduce using rule 145 (dec -> expr DEC .)
    MOD             reduce using rule 145 (dec -> expr DEC .)
    LTHANEQ         reduce using rule 145 (dec -> expr DEC .)
    NOTEQUAL        reduce using rule 145 (dec -> expr DEC .)
    PLUS            reduce using rule 145 (dec -> expr DEC .)
    MINUS           reduce using rule 145 (dec -> expr DEC .)
    DIVIDE          reduce using rule 145 (dec -> expr DEC .)
    TIMES           reduce using rule 145 (dec -> expr DEC .)
    IN              reduce using rule 145 (dec -> expr DEC .)
    QEST            reduce using rule 145 (dec -> expr DEC .)
    COMMA           reduce using rule 145 (dec -> expr DEC .)
    INC             reduce using rule 145 (dec -> expr DEC .)
    DEC             reduce using rule 145 (dec -> expr DEC .)
    ASSIGNPLUS      reduce using rule 145 (dec -> expr DEC .)
    ASSIGNMINUS     reduce using rule 145 (dec -> expr DEC .)
    ASSIGNDIVIDE    reduce using rule 145 (dec -> expr DEC .)
    ASSIGNTIMES     reduce using rule 145 (dec -> expr DEC .)
    ASSIGNBOR       reduce using rule 145 (dec -> expr DEC .)
    ASSIGNBAND      reduce using rule 145 (dec -> expr DEC .)
    ASSIGNBXOR      reduce using rule 145 (dec -> expr DEC .)
    ASSIGN          reduce using rule 145 (dec -> expr DEC .)
    LSBRACKET       reduce using rule 145 (dec -> expr DEC .)
    TLTHAN          reduce using rule 145 (dec -> expr DEC .)
    LPAREN          reduce using rule 145 (dec -> expr DEC .)
    RSBRACKET       reduce using rule 145 (dec -> expr DEC .)
    RPAREN          reduce using rule 145 (dec -> expr DEC .)
    COLON           reduce using rule 145 (dec -> expr DEC .)
    RBRACKET        reduce using rule 145 (dec -> expr DEC .)


state 159

    (185) expr -> expr MINUS . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 248
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 160

    (168) expr -> expr DOT . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 249
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 161

    (95) cmplx_assign -> ASSIGNMINUS .

    NUMBER          reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    ID              reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    STRINGLIT       reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    LSBRACKET       reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    FUNCTION        reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    LPAREN          reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    MINUS           reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    NOT             reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    BITINV          reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    NEW             reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    INC             reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    DEC             reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    TYPEOF          reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    REGEXPR         reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    TLTHAN          reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)
    LBRACKET        reduce using rule 95 (cmplx_assign -> ASSIGNMINUS .)


state 162

    (169) expr -> expr LAND . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 250
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 163

    (28) statement_nonctrl -> expr SEMI .

    RBRACKET        reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    SEMI            reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    FUNCTION        reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    IF              reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    ELSE            reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    WHILE           reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    WITH            reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    DO              reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    FOR             reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    RETURN          reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    YIELD           reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    BREAK           reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    CONTINUE        reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    THROW           reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    TRY             reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    CATCH           reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    SWITCH          reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    NATIVE          reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    NUMBER          reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    ID              reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    DELETE          reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    STRINGLIT       reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    LSBRACKET       reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    LPAREN          reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    MINUS           reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    NOT             reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    BITINV          reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    NEW             reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    INC             reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    DEC             reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    TYPEOF          reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    REGEXPR         reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    GLOBAL          reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    VAR             reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    TLTHAN          reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    LBRACKET        reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    $end            reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    CASE            reduce using rule 28 (statement_nonctrl -> expr SEMI .)
    DEFAULT         reduce using rule 28 (statement_nonctrl -> expr SEMI .)


state 164

    (173) expr -> expr BXOR . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 251
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 165

    (143) inc -> expr INC .

    RSHIFT          reduce using rule 143 (inc -> expr INC .)
    LSHIFT          reduce using rule 143 (inc -> expr INC .)
    LLSHIFT         reduce using rule 143 (inc -> expr INC .)
    RRSHIFT         reduce using rule 143 (inc -> expr INC .)
    DOT             reduce using rule 143 (inc -> expr INC .)
    LAND            reduce using rule 143 (inc -> expr INC .)
    LOR             reduce using rule 143 (inc -> expr INC .)
    BOR             reduce using rule 143 (inc -> expr INC .)
    INSTANCEOF      reduce using rule 143 (inc -> expr INC .)
    BXOR            reduce using rule 143 (inc -> expr INC .)
    BAND            reduce using rule 143 (inc -> expr INC .)
    EQUAL           reduce using rule 143 (inc -> expr INC .)
    EQUAL_STRICT    reduce using rule 143 (inc -> expr INC .)
    NOTEQUAL_STRICT reduce using rule 143 (inc -> expr INC .)
    GTHAN           reduce using rule 143 (inc -> expr INC .)
    GTHANEQ         reduce using rule 143 (inc -> expr INC .)
    LTHAN           reduce using rule 143 (inc -> expr INC .)
    MOD             reduce using rule 143 (inc -> expr INC .)
    LTHANEQ         reduce using rule 143 (inc -> expr INC .)
    NOTEQUAL        reduce using rule 143 (inc -> expr INC .)
    PLUS            reduce using rule 143 (inc -> expr INC .)
    MINUS           reduce using rule 143 (inc -> expr INC .)
    DIVIDE          reduce using rule 143 (inc -> expr INC .)
    TIMES           reduce using rule 143 (inc -> expr INC .)
    IN              reduce using rule 143 (inc -> expr INC .)
    QEST            reduce using rule 143 (inc -> expr INC .)
    COMMA           reduce using rule 143 (inc -> expr INC .)
    INC             reduce using rule 143 (inc -> expr INC .)
    DEC             reduce using rule 143 (inc -> expr INC .)
    ASSIGNPLUS      reduce using rule 143 (inc -> expr INC .)
    ASSIGNMINUS     reduce using rule 143 (inc -> expr INC .)
    ASSIGNDIVIDE    reduce using rule 143 (inc -> expr INC .)
    ASSIGNTIMES     reduce using rule 143 (inc -> expr INC .)
    ASSIGNBOR       reduce using rule 143 (inc -> expr INC .)
    ASSIGNBAND      reduce using rule 143 (inc -> expr INC .)
    ASSIGNBXOR      reduce using rule 143 (inc -> expr INC .)
    ASSIGN          reduce using rule 143 (inc -> expr INC .)
    LSBRACKET       reduce using rule 143 (inc -> expr INC .)
    TLTHAN          reduce using rule 143 (inc -> expr INC .)
    LPAREN          reduce using rule 143 (inc -> expr INC .)
    SEMI            reduce using rule 143 (inc -> expr INC .)
    RSBRACKET       reduce using rule 143 (inc -> expr INC .)
    RPAREN          reduce using rule 143 (inc -> expr INC .)
    COLON           reduce using rule 143 (inc -> expr INC .)
    RBRACKET        reduce using rule 143 (inc -> expr INC .)


state 166

    (97) cmplx_assign -> ASSIGNTIMES .

    NUMBER          reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    ID              reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    STRINGLIT       reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    LSBRACKET       reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    FUNCTION        reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    LPAREN          reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    MINUS           reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    NOT             reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    BITINV          reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    NEW             reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    INC             reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    DEC             reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    TYPEOF          reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    REGEXPR         reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    TLTHAN          reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)
    LBRACKET        reduce using rule 97 (cmplx_assign -> ASSIGNTIMES .)


state 167

    (191) expr -> expr lsbracket_restrict . expr rsbracket_restrict
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 252
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 168

    (182) expr -> expr LTHANEQ . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 253
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 169

    (184) expr -> expr PLUS . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 254
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 170

    (179) expr -> expr GTHANEQ . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 255
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 171

    (108) template_ref_opt -> template_ref .

    LPAREN          reduce using rule 108 (template_ref_opt -> template_ref .)


state 172

    (101) cmplx_assign -> ASSIGN .

    NUMBER          reduce using rule 101 (cmplx_assign -> ASSIGN .)
    ID              reduce using rule 101 (cmplx_assign -> ASSIGN .)
    STRINGLIT       reduce using rule 101 (cmplx_assign -> ASSIGN .)
    LSBRACKET       reduce using rule 101 (cmplx_assign -> ASSIGN .)
    FUNCTION        reduce using rule 101 (cmplx_assign -> ASSIGN .)
    LPAREN          reduce using rule 101 (cmplx_assign -> ASSIGN .)
    MINUS           reduce using rule 101 (cmplx_assign -> ASSIGN .)
    NOT             reduce using rule 101 (cmplx_assign -> ASSIGN .)
    BITINV          reduce using rule 101 (cmplx_assign -> ASSIGN .)
    NEW             reduce using rule 101 (cmplx_assign -> ASSIGN .)
    INC             reduce using rule 101 (cmplx_assign -> ASSIGN .)
    DEC             reduce using rule 101 (cmplx_assign -> ASSIGN .)
    TYPEOF          reduce using rule 101 (cmplx_assign -> ASSIGN .)
    REGEXPR         reduce using rule 101 (cmplx_assign -> ASSIGN .)
    TLTHAN          reduce using rule 101 (cmplx_assign -> ASSIGN .)
    LBRACKET        reduce using rule 101 (cmplx_assign -> ASSIGN .)


state 173

    (190) expr -> expr func_call .

    SEMI            reduce using rule 190 (expr -> expr func_call .)
    RSHIFT          reduce using rule 190 (expr -> expr func_call .)
    LSHIFT          reduce using rule 190 (expr -> expr func_call .)
    LLSHIFT         reduce using rule 190 (expr -> expr func_call .)
    RRSHIFT         reduce using rule 190 (expr -> expr func_call .)
    DOT             reduce using rule 190 (expr -> expr func_call .)
    LAND            reduce using rule 190 (expr -> expr func_call .)
    LOR             reduce using rule 190 (expr -> expr func_call .)
    BOR             reduce using rule 190 (expr -> expr func_call .)
    INSTANCEOF      reduce using rule 190 (expr -> expr func_call .)
    BXOR            reduce using rule 190 (expr -> expr func_call .)
    BAND            reduce using rule 190 (expr -> expr func_call .)
    EQUAL           reduce using rule 190 (expr -> expr func_call .)
    EQUAL_STRICT    reduce using rule 190 (expr -> expr func_call .)
    NOTEQUAL_STRICT reduce using rule 190 (expr -> expr func_call .)
    GTHAN           reduce using rule 190 (expr -> expr func_call .)
    GTHANEQ         reduce using rule 190 (expr -> expr func_call .)
    LTHAN           reduce using rule 190 (expr -> expr func_call .)
    MOD             reduce using rule 190 (expr -> expr func_call .)
    LTHANEQ         reduce using rule 190 (expr -> expr func_call .)
    NOTEQUAL        reduce using rule 190 (expr -> expr func_call .)
    PLUS            reduce using rule 190 (expr -> expr func_call .)
    MINUS           reduce using rule 190 (expr -> expr func_call .)
    DIVIDE          reduce using rule 190 (expr -> expr func_call .)
    TIMES           reduce using rule 190 (expr -> expr func_call .)
    IN              reduce using rule 190 (expr -> expr func_call .)
    QEST            reduce using rule 190 (expr -> expr func_call .)
    COMMA           reduce using rule 190 (expr -> expr func_call .)
    INC             reduce using rule 190 (expr -> expr func_call .)
    DEC             reduce using rule 190 (expr -> expr func_call .)
    ASSIGNPLUS      reduce using rule 190 (expr -> expr func_call .)
    ASSIGNMINUS     reduce using rule 190 (expr -> expr func_call .)
    ASSIGNDIVIDE    reduce using rule 190 (expr -> expr func_call .)
    ASSIGNTIMES     reduce using rule 190 (expr -> expr func_call .)
    ASSIGNBOR       reduce using rule 190 (expr -> expr func_call .)
    ASSIGNBAND      reduce using rule 190 (expr -> expr func_call .)
    ASSIGNBXOR      reduce using rule 190 (expr -> expr func_call .)
    ASSIGN          reduce using rule 190 (expr -> expr func_call .)
    LSBRACKET       reduce using rule 190 (expr -> expr func_call .)
    TLTHAN          reduce using rule 190 (expr -> expr func_call .)
    LPAREN          reduce using rule 190 (expr -> expr func_call .)
    RSBRACKET       reduce using rule 190 (expr -> expr func_call .)
    RPAREN          reduce using rule 190 (expr -> expr func_call .)
    COLON           reduce using rule 190 (expr -> expr func_call .)
    RBRACKET        reduce using rule 190 (expr -> expr func_call .)


state 174

    (177) expr -> expr NOTEQUAL_STRICT . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 256
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 175

    (186) expr -> expr DIVIDE . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 257
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 176

    (110) func_call -> template_ref_opt . LPAREN exprlist RPAREN
    (111) func_call -> template_ref_opt . LPAREN RPAREN

    LPAREN          shift and go to state 258


state 177

    (187) expr -> expr TIMES . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 259
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 178

    (180) expr -> expr LTHAN . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 260
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 179

    (174) expr -> expr BAND . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 261
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 180

    (188) expr -> expr IN . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 262
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 181

    (99) cmplx_assign -> ASSIGNBAND .

    NUMBER          reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    ID              reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    STRINGLIT       reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    LSBRACKET       reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    FUNCTION        reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    LPAREN          reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    MINUS           reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    NOT             reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    BITINV          reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    NEW             reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    INC             reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    DEC             reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    TYPEOF          reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    REGEXPR         reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    TLTHAN          reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)
    LBRACKET        reduce using rule 99 (cmplx_assign -> ASSIGNBAND .)


state 182

    (167) expr -> expr RRSHIFT . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 263
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 183

    (172) expr -> expr INSTANCEOF . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 264
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 184

    (176) expr -> expr EQUAL_STRICT . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 265
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 185

    (94) cmplx_assign -> ASSIGNPLUS .

    NUMBER          reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    ID              reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    STRINGLIT       reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    LSBRACKET       reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    FUNCTION        reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    LPAREN          reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    MINUS           reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    NOT             reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    BITINV          reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    NEW             reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    INC             reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    DEC             reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    TYPEOF          reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    REGEXPR         reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    TLTHAN          reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)
    LBRACKET        reduce using rule 94 (cmplx_assign -> ASSIGNPLUS .)


state 186

    (178) expr -> expr GTHAN . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 266
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 187

    (162) expr -> expr cmplx_assign . expr
    (163) expr -> expr cmplx_assign . expr COLON var_type SEMI
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 267
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 188

    (201) expr -> expr COMMA . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 268
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 189

    (100) cmplx_assign -> ASSIGNBXOR .

    NUMBER          reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    ID              reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    STRINGLIT       reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    LSBRACKET       reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    FUNCTION        reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    LPAREN          reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    MINUS           reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    NOT             reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    BITINV          reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    NEW             reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    INC             reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    DEC             reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    TYPEOF          reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    REGEXPR         reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    TLTHAN          reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)
    LBRACKET        reduce using rule 100 (cmplx_assign -> ASSIGNBXOR .)


state 190

    (181) expr -> expr MOD . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 269
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 191

    (44) statement_nonctrl -> delete SEMI .

    RBRACKET        reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    SEMI            reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    FUNCTION        reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    IF              reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    ELSE            reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    WHILE           reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    WITH            reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    DO              reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    FOR             reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    RETURN          reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    YIELD           reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    BREAK           reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    CONTINUE        reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    THROW           reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    TRY             reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    CATCH           reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    SWITCH          reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    NATIVE          reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    NUMBER          reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    ID              reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    DELETE          reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    STRINGLIT       reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    LSBRACKET       reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    LPAREN          reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    MINUS           reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    NOT             reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    BITINV          reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    NEW             reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    INC             reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    DEC             reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    TYPEOF          reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    REGEXPR         reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    GLOBAL          reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    VAR             reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    TLTHAN          reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    LBRACKET        reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    $end            reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    CASE            reduce using rule 44 (statement_nonctrl -> delete SEMI .)
    DEFAULT         reduce using rule 44 (statement_nonctrl -> delete SEMI .)


state 192

    (220) dowhile -> DO ctrl_statement . WHILE paren_expr

    WHILE           shift and go to state 270


state 193

    (246) yield -> YIELD expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 246 (yield -> YIELD expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 194

    (157) expr -> ID template_ref .

    SEMI            reduce using rule 157 (expr -> ID template_ref .)
    RSHIFT          reduce using rule 157 (expr -> ID template_ref .)
    LSHIFT          reduce using rule 157 (expr -> ID template_ref .)
    LLSHIFT         reduce using rule 157 (expr -> ID template_ref .)
    RRSHIFT         reduce using rule 157 (expr -> ID template_ref .)
    DOT             reduce using rule 157 (expr -> ID template_ref .)
    LAND            reduce using rule 157 (expr -> ID template_ref .)
    LOR             reduce using rule 157 (expr -> ID template_ref .)
    BOR             reduce using rule 157 (expr -> ID template_ref .)
    INSTANCEOF      reduce using rule 157 (expr -> ID template_ref .)
    BXOR            reduce using rule 157 (expr -> ID template_ref .)
    BAND            reduce using rule 157 (expr -> ID template_ref .)
    EQUAL           reduce using rule 157 (expr -> ID template_ref .)
    EQUAL_STRICT    reduce using rule 157 (expr -> ID template_ref .)
    NOTEQUAL_STRICT reduce using rule 157 (expr -> ID template_ref .)
    GTHAN           reduce using rule 157 (expr -> ID template_ref .)
    GTHANEQ         reduce using rule 157 (expr -> ID template_ref .)
    LTHAN           reduce using rule 157 (expr -> ID template_ref .)
    MOD             reduce using rule 157 (expr -> ID template_ref .)
    LTHANEQ         reduce using rule 157 (expr -> ID template_ref .)
    NOTEQUAL        reduce using rule 157 (expr -> ID template_ref .)
    PLUS            reduce using rule 157 (expr -> ID template_ref .)
    MINUS           reduce using rule 157 (expr -> ID template_ref .)
    DIVIDE          reduce using rule 157 (expr -> ID template_ref .)
    TIMES           reduce using rule 157 (expr -> ID template_ref .)
    IN              reduce using rule 157 (expr -> ID template_ref .)
    QEST            reduce using rule 157 (expr -> ID template_ref .)
    COMMA           reduce using rule 157 (expr -> ID template_ref .)
    INC             reduce using rule 157 (expr -> ID template_ref .)
    DEC             reduce using rule 157 (expr -> ID template_ref .)
    ASSIGNPLUS      reduce using rule 157 (expr -> ID template_ref .)
    ASSIGNMINUS     reduce using rule 157 (expr -> ID template_ref .)
    ASSIGNDIVIDE    reduce using rule 157 (expr -> ID template_ref .)
    ASSIGNTIMES     reduce using rule 157 (expr -> ID template_ref .)
    ASSIGNBOR       reduce using rule 157 (expr -> ID template_ref .)
    ASSIGNBAND      reduce using rule 157 (expr -> ID template_ref .)
    ASSIGNBXOR      reduce using rule 157 (expr -> ID template_ref .)
    ASSIGN          reduce using rule 157 (expr -> ID template_ref .)
    LSBRACKET       reduce using rule 157 (expr -> ID template_ref .)
    TLTHAN          reduce using rule 157 (expr -> ID template_ref .)
    LPAREN          reduce using rule 157 (expr -> ID template_ref .)
    RSBRACKET       reduce using rule 157 (expr -> ID template_ref .)
    RPAREN          reduce using rule 157 (expr -> ID template_ref .)
    COLON           reduce using rule 157 (expr -> ID template_ref .)
    RBRACKET        reduce using rule 157 (expr -> ID template_ref .)


state 195

    (235) if -> IF paren_expr . ctrl_statement
    (217) ctrl_statement -> . statement_nonctrl
    (218) ctrl_statement -> . LBRACKET statementlist_opt RBRACKET
    (219) ctrl_statement -> . SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 117
    SEMI            shift and go to state 131
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    FUNCTION        shift and go to state 124
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    FOR             shift and go to state 32
    DO              shift and go to state 59
    WHILE           shift and go to state 41
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 120
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 130
    strlit                         shift and go to state 24
    for                            shift and go to state 123
    not                            shift and go to state 14
    obj_literal                    shift and go to state 27
    dowhile                        shift and go to state 132
    new                            shift and go to state 29
    inc                            shift and go to state 62
    template_ref                   shift and go to state 30
    return                         shift and go to state 118
    else                           shift and go to state 133
    break                          shift and go to state 119
    statement_nonctrl              shift and go to state 127
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 128
    throw                          shift and go to state 125
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 121
    while                          shift and go to state 129
    continue                       shift and go to state 122
    typeof                         shift and go to state 56
    ctrl_statement                 shift and go to state 271
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 196

    (140) obj_literal -> lbracket_restrict rbracket_restrict .

    SEMI            reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RSHIFT          reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LSHIFT          reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LLSHIFT         reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RRSHIFT         reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    DOT             reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LAND            reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LOR             reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    BOR             reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    INSTANCEOF      reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    BXOR            reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    BAND            reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    EQUAL           reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    EQUAL_STRICT    reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    GTHAN           reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    GTHANEQ         reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LTHAN           reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    MOD             reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LTHANEQ         reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    NOTEQUAL        reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    PLUS            reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    MINUS           reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    DIVIDE          reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    TIMES           reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    IN              reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    QEST            reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    COMMA           reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    INC             reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    DEC             reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNPLUS      reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNMINUS     reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNTIMES     reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNBOR       reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNBAND      reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNBXOR      reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGN          reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LSBRACKET       reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    TLTHAN          reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LPAREN          reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RSBRACKET       reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RPAREN          reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    COLON           reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RBRACKET        reduce using rule 140 (obj_literal -> lbracket_restrict rbracket_restrict .)


state 197

    (123) rbracket_restrict -> RBRACKET .

    SEMI            reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    RSHIFT          reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    LSHIFT          reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    LLSHIFT         reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    RRSHIFT         reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    DOT             reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    LAND            reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    LOR             reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    BOR             reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    INSTANCEOF      reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    BXOR            reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    BAND            reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    EQUAL           reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    EQUAL_STRICT    reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    NOTEQUAL_STRICT reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    GTHAN           reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    GTHANEQ         reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    LTHAN           reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    MOD             reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    LTHANEQ         reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    NOTEQUAL        reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    PLUS            reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    MINUS           reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    DIVIDE          reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    TIMES           reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    IN              reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    QEST            reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    COMMA           reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    INC             reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    DEC             reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    ASSIGNPLUS      reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    ASSIGNMINUS     reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    ASSIGNDIVIDE    reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    ASSIGNTIMES     reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    ASSIGNBOR       reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    ASSIGNBAND      reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    ASSIGNBXOR      reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    ASSIGN          reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    LSBRACKET       reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    TLTHAN          reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    LPAREN          reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    RSBRACKET       reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    RPAREN          reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    COLON           reduce using rule 123 (rbracket_restrict -> RBRACKET .)
    RBRACKET        reduce using rule 123 (rbracket_restrict -> RBRACKET .)


state 198

    (139) obj_literal -> lbracket_restrict push_scope . obj_lit_list rbracket_restrict
    (136) obj_lit_list -> . id_str_or_num COLON expr
    (137) obj_lit_list -> . obj_lit_list COMMA id_str_or_num COLON expr
    (138) obj_lit_list -> . obj_lit_list COMMA
    (132) id_str_or_num -> . ID
    (133) id_str_or_num -> . NUMBER
    (134) id_str_or_num -> . STRINGLIT

    ID              shift and go to state 276
    NUMBER          shift and go to state 273
    STRINGLIT       shift and go to state 275

    obj_lit_list                   shift and go to state 272
    id_str_or_num                  shift and go to state 274

state 199

    (144) inc -> INC expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    RSHIFT          reduce using rule 144 (inc -> INC expr .)
    LSHIFT          reduce using rule 144 (inc -> INC expr .)
    LLSHIFT         reduce using rule 144 (inc -> INC expr .)
    RRSHIFT         reduce using rule 144 (inc -> INC expr .)
    LAND            reduce using rule 144 (inc -> INC expr .)
    LOR             reduce using rule 144 (inc -> INC expr .)
    BOR             reduce using rule 144 (inc -> INC expr .)
    INSTANCEOF      reduce using rule 144 (inc -> INC expr .)
    BXOR            reduce using rule 144 (inc -> INC expr .)
    BAND            reduce using rule 144 (inc -> INC expr .)
    EQUAL           reduce using rule 144 (inc -> INC expr .)
    EQUAL_STRICT    reduce using rule 144 (inc -> INC expr .)
    NOTEQUAL_STRICT reduce using rule 144 (inc -> INC expr .)
    GTHAN           reduce using rule 144 (inc -> INC expr .)
    GTHANEQ         reduce using rule 144 (inc -> INC expr .)
    LTHAN           reduce using rule 144 (inc -> INC expr .)
    MOD             reduce using rule 144 (inc -> INC expr .)
    LTHANEQ         reduce using rule 144 (inc -> INC expr .)
    NOTEQUAL        reduce using rule 144 (inc -> INC expr .)
    PLUS            reduce using rule 144 (inc -> INC expr .)
    MINUS           reduce using rule 144 (inc -> INC expr .)
    DIVIDE          reduce using rule 144 (inc -> INC expr .)
    TIMES           reduce using rule 144 (inc -> INC expr .)
    IN              reduce using rule 144 (inc -> INC expr .)
    QEST            reduce using rule 144 (inc -> INC expr .)
    COMMA           reduce using rule 144 (inc -> INC expr .)
    INC             reduce using rule 144 (inc -> INC expr .)
    DEC             reduce using rule 144 (inc -> INC expr .)
    ASSIGNPLUS      reduce using rule 144 (inc -> INC expr .)
    ASSIGNMINUS     reduce using rule 144 (inc -> INC expr .)
    ASSIGNDIVIDE    reduce using rule 144 (inc -> INC expr .)
    ASSIGNTIMES     reduce using rule 144 (inc -> INC expr .)
    ASSIGNBOR       reduce using rule 144 (inc -> INC expr .)
    ASSIGNBAND      reduce using rule 144 (inc -> INC expr .)
    ASSIGNBXOR      reduce using rule 144 (inc -> INC expr .)
    ASSIGN          reduce using rule 144 (inc -> INC expr .)
    LSBRACKET       reduce using rule 144 (inc -> INC expr .)
    TLTHAN          reduce using rule 144 (inc -> INC expr .)
    SEMI            reduce using rule 144 (inc -> INC expr .)
    RSBRACKET       reduce using rule 144 (inc -> INC expr .)
    RPAREN          reduce using rule 144 (inc -> INC expr .)
    COLON           reduce using rule 144 (inc -> INC expr .)
    RBRACKET        reduce using rule 144 (inc -> INC expr .)
    DOT             shift and go to state 160
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 144 (inc -> INC expr .) ]
  ! LPAREN          [ reduce using rule 144 (inc -> INC expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! PLUS            [ shift and go to state 169 ]
  ! MINUS           [ shift and go to state 159 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! TIMES           [ shift and go to state 177 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! INC             [ shift and go to state 165 ]
  ! DEC             [ shift and go to state 158 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! LSBRACKET       [ shift and go to state 150 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 200

    (102) throw -> THROW expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 102 (throw -> THROW expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 201

    (130) array_literal -> LSBRACKET exprlist RSBRACKET .

    SEMI            reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RSHIFT          reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LSHIFT          reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LLSHIFT         reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RRSHIFT         reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DOT             reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LAND            reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LOR             reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BOR             reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    INSTANCEOF      reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BXOR            reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BAND            reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    EQUAL           reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    EQUAL_STRICT    reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    NOTEQUAL_STRICT reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    GTHAN           reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    GTHANEQ         reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LTHAN           reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    MOD             reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LTHANEQ         reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    NOTEQUAL        reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    PLUS            reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    MINUS           reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DIVIDE          reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    TIMES           reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    IN              reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    QEST            reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    COMMA           reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    INC             reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DEC             reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNPLUS      reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNMINUS     reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNTIMES     reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNBOR       reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNBAND      reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNBXOR      reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGN          reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LSBRACKET       reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    TLTHAN          reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LPAREN          reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RSBRACKET       reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RPAREN          reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    COLON           reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RBRACKET        reduce using rule 130 (array_literal -> LSBRACKET exprlist RSBRACKET .)


state 202

    (107) exprlist -> exprlist COMMA . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 277
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 203

    (90) simple_templatedeflist -> typeof_opt var_type .
    (78) var_type -> var_type . id_var_type
    (87) var_type -> var_type . template_ref
    (74) id_var_type -> . ID
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 90 (simple_templatedeflist -> typeof_opt var_type .)
    TGTHAN          reduce using rule 90 (simple_templatedeflist -> typeof_opt var_type .)
    ID              shift and go to state 110
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 212
    id_var_type                    shift and go to state 213

state 204

    (60) template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .

    RSHIFT          reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LSHIFT          reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LLSHIFT         reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RRSHIFT         reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    DOT             reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LAND            reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LOR             reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    BOR             reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    INSTANCEOF      reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    BXOR            reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    BAND            reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    EQUAL           reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    EQUAL_STRICT    reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    NOTEQUAL_STRICT reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    GTHAN           reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    GTHANEQ         reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LTHAN           reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    MOD             reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LTHANEQ         reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    NOTEQUAL        reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    PLUS            reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    MINUS           reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    DIVIDE          reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    TIMES           reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    IN              reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    QEST            reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    COMMA           reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    INC             reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    DEC             reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNPLUS      reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNMINUS     reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNDIVIDE    reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNTIMES     reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNBOR       reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNBAND      reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNBXOR      reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGN          reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LSBRACKET       reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    TLTHAN          reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LPAREN          reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RSBRACKET       reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RPAREN          reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    SEMI            reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    COLON           reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RBRACKET        reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ID              reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LBRACKET        reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    TGTHAN          reduce using rule 60 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)


state 205

    (91) simple_templatedeflist -> simple_templatedeflist COMMA . typeof_opt var_type
    (88) typeof_opt -> . TYPEOF
    (89) typeof_opt -> .

    TYPEOF          shift and go to state 84
    INT             reduce using rule 89 (typeof_opt -> .)
    SHORT           reduce using rule 89 (typeof_opt -> .)
    FLOAT           reduce using rule 89 (typeof_opt -> .)
    DOUBLE          reduce using rule 89 (typeof_opt -> .)
    CHAR            reduce using rule 89 (typeof_opt -> .)
    BYTE            reduce using rule 89 (typeof_opt -> .)
    INFERRED        reduce using rule 89 (typeof_opt -> .)
    ID              reduce using rule 89 (typeof_opt -> .)

    typeof_opt                     shift and go to state 278

state 206

    (65) gthan_restrict -> TGTHAN .

    SEMI            reduce using rule 65 (gthan_restrict -> TGTHAN .)
    RSHIFT          reduce using rule 65 (gthan_restrict -> TGTHAN .)
    LSHIFT          reduce using rule 65 (gthan_restrict -> TGTHAN .)
    LLSHIFT         reduce using rule 65 (gthan_restrict -> TGTHAN .)
    RRSHIFT         reduce using rule 65 (gthan_restrict -> TGTHAN .)
    DOT             reduce using rule 65 (gthan_restrict -> TGTHAN .)
    LAND            reduce using rule 65 (gthan_restrict -> TGTHAN .)
    LOR             reduce using rule 65 (gthan_restrict -> TGTHAN .)
    BOR             reduce using rule 65 (gthan_restrict -> TGTHAN .)
    INSTANCEOF      reduce using rule 65 (gthan_restrict -> TGTHAN .)
    BXOR            reduce using rule 65 (gthan_restrict -> TGTHAN .)
    BAND            reduce using rule 65 (gthan_restrict -> TGTHAN .)
    EQUAL           reduce using rule 65 (gthan_restrict -> TGTHAN .)
    EQUAL_STRICT    reduce using rule 65 (gthan_restrict -> TGTHAN .)
    NOTEQUAL_STRICT reduce using rule 65 (gthan_restrict -> TGTHAN .)
    GTHAN           reduce using rule 65 (gthan_restrict -> TGTHAN .)
    GTHANEQ         reduce using rule 65 (gthan_restrict -> TGTHAN .)
    LTHAN           reduce using rule 65 (gthan_restrict -> TGTHAN .)
    MOD             reduce using rule 65 (gthan_restrict -> TGTHAN .)
    LTHANEQ         reduce using rule 65 (gthan_restrict -> TGTHAN .)
    NOTEQUAL        reduce using rule 65 (gthan_restrict -> TGTHAN .)
    PLUS            reduce using rule 65 (gthan_restrict -> TGTHAN .)
    MINUS           reduce using rule 65 (gthan_restrict -> TGTHAN .)
    DIVIDE          reduce using rule 65 (gthan_restrict -> TGTHAN .)
    TIMES           reduce using rule 65 (gthan_restrict -> TGTHAN .)
    IN              reduce using rule 65 (gthan_restrict -> TGTHAN .)
    QEST            reduce using rule 65 (gthan_restrict -> TGTHAN .)
    COMMA           reduce using rule 65 (gthan_restrict -> TGTHAN .)
    INC             reduce using rule 65 (gthan_restrict -> TGTHAN .)
    DEC             reduce using rule 65 (gthan_restrict -> TGTHAN .)
    ASSIGNPLUS      reduce using rule 65 (gthan_restrict -> TGTHAN .)
    ASSIGNMINUS     reduce using rule 65 (gthan_restrict -> TGTHAN .)
    ASSIGNDIVIDE    reduce using rule 65 (gthan_restrict -> TGTHAN .)
    ASSIGNTIMES     reduce using rule 65 (gthan_restrict -> TGTHAN .)
    ASSIGNBOR       reduce using rule 65 (gthan_restrict -> TGTHAN .)
    ASSIGNBAND      reduce using rule 65 (gthan_restrict -> TGTHAN .)
    ASSIGNBXOR      reduce using rule 65 (gthan_restrict -> TGTHAN .)
    ASSIGN          reduce using rule 65 (gthan_restrict -> TGTHAN .)
    LSBRACKET       reduce using rule 65 (gthan_restrict -> TGTHAN .)
    TLTHAN          reduce using rule 65 (gthan_restrict -> TGTHAN .)
    LPAREN          reduce using rule 65 (gthan_restrict -> TGTHAN .)
    RSBRACKET       reduce using rule 65 (gthan_restrict -> TGTHAN .)
    RPAREN          reduce using rule 65 (gthan_restrict -> TGTHAN .)
    COLON           reduce using rule 65 (gthan_restrict -> TGTHAN .)
    RBRACKET        reduce using rule 65 (gthan_restrict -> TGTHAN .)
    ID              reduce using rule 65 (gthan_restrict -> TGTHAN .)
    TGTHAN          reduce using rule 65 (gthan_restrict -> TGTHAN .)
    LBRACKET        reduce using rule 65 (gthan_restrict -> TGTHAN .)


state 207

    (204) paren_expr -> LPAREN RPAREN .

    LBRACKET        reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    SEMI            reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    NUMBER          reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    ID              reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    IF              reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    ELSE            reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    FOR             reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    DO              reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    WHILE           reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    RETURN          reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    YIELD           reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    BREAK           reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    THROW           reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    TRY             reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    CATCH           reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    DELETE          reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    STRINGLIT       reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    LSBRACKET       reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    LPAREN          reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    MINUS           reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    NOT             reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    BITINV          reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    NEW             reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    INC             reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    DEC             reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    TYPEOF          reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    REGEXPR         reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    GLOBAL          reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    VAR             reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    TLTHAN          reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    WITH            reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    SWITCH          reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    NATIVE          reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    $end            reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    CASE            reduce using rule 204 (paren_expr -> LPAREN RPAREN .)
    DEFAULT         reduce using rule 204 (paren_expr -> LPAREN RPAREN .)


state 208

    (203) paren_expr -> LPAREN expr . RPAREN
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    RPAREN          shift and go to state 279
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 209

    (234) with -> WITH paren_expr ctrl_statement .

    RBRACKET        reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    SEMI            reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    FUNCTION        reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    IF              reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    ELSE            reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    WHILE           reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    WITH            reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    DO              reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    FOR             reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    RETURN          reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    YIELD           reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    BREAK           reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    CONTINUE        reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    THROW           reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    TRY             reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    CATCH           reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    SWITCH          reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    NATIVE          reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    NUMBER          reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    ID              reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    DELETE          reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    STRINGLIT       reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    LSBRACKET       reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    LPAREN          reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    MINUS           reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    NOT             reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    BITINV          reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    NEW             reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    INC             reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    DEC             reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    TYPEOF          reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    REGEXPR         reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    GLOBAL          reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    VAR             reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    TLTHAN          reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    LBRACKET        reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    $end            reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    CASE            reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)
    DEFAULT         reduce using rule 234 (with -> WITH paren_expr ctrl_statement .)


state 210

    (189) expr -> lparen_restrict expr rparen_restrict .

    SEMI            reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    RSHIFT          reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    LSHIFT          reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    LLSHIFT         reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    RRSHIFT         reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    DOT             reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    LAND            reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    LOR             reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    BOR             reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    INSTANCEOF      reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    BXOR            reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    BAND            reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    EQUAL           reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    EQUAL_STRICT    reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    NOTEQUAL_STRICT reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    GTHAN           reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    GTHANEQ         reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    LTHAN           reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    MOD             reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    LTHANEQ         reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    NOTEQUAL        reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    PLUS            reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    MINUS           reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    DIVIDE          reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    TIMES           reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    IN              reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    QEST            reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    COMMA           reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    INC             reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    DEC             reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNPLUS      reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNMINUS     reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNDIVIDE    reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNTIMES     reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNBOR       reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNBAND      reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNBXOR      reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGN          reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    LSBRACKET       reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    TLTHAN          reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    LPAREN          reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    RSBRACKET       reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    RPAREN          reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    COLON           reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)
    RBRACKET        reduce using rule 189 (expr -> lparen_restrict expr rparen_restrict .)


state 211

    (151) rparen_restrict -> RPAREN .

    SEMI            reduce using rule 151 (rparen_restrict -> RPAREN .)
    RSHIFT          reduce using rule 151 (rparen_restrict -> RPAREN .)
    LSHIFT          reduce using rule 151 (rparen_restrict -> RPAREN .)
    LLSHIFT         reduce using rule 151 (rparen_restrict -> RPAREN .)
    RRSHIFT         reduce using rule 151 (rparen_restrict -> RPAREN .)
    DOT             reduce using rule 151 (rparen_restrict -> RPAREN .)
    LAND            reduce using rule 151 (rparen_restrict -> RPAREN .)
    LOR             reduce using rule 151 (rparen_restrict -> RPAREN .)
    BOR             reduce using rule 151 (rparen_restrict -> RPAREN .)
    INSTANCEOF      reduce using rule 151 (rparen_restrict -> RPAREN .)
    BXOR            reduce using rule 151 (rparen_restrict -> RPAREN .)
    BAND            reduce using rule 151 (rparen_restrict -> RPAREN .)
    EQUAL           reduce using rule 151 (rparen_restrict -> RPAREN .)
    EQUAL_STRICT    reduce using rule 151 (rparen_restrict -> RPAREN .)
    NOTEQUAL_STRICT reduce using rule 151 (rparen_restrict -> RPAREN .)
    GTHAN           reduce using rule 151 (rparen_restrict -> RPAREN .)
    GTHANEQ         reduce using rule 151 (rparen_restrict -> RPAREN .)
    LTHAN           reduce using rule 151 (rparen_restrict -> RPAREN .)
    MOD             reduce using rule 151 (rparen_restrict -> RPAREN .)
    LTHANEQ         reduce using rule 151 (rparen_restrict -> RPAREN .)
    NOTEQUAL        reduce using rule 151 (rparen_restrict -> RPAREN .)
    PLUS            reduce using rule 151 (rparen_restrict -> RPAREN .)
    MINUS           reduce using rule 151 (rparen_restrict -> RPAREN .)
    DIVIDE          reduce using rule 151 (rparen_restrict -> RPAREN .)
    TIMES           reduce using rule 151 (rparen_restrict -> RPAREN .)
    IN              reduce using rule 151 (rparen_restrict -> RPAREN .)
    QEST            reduce using rule 151 (rparen_restrict -> RPAREN .)
    COMMA           reduce using rule 151 (rparen_restrict -> RPAREN .)
    INC             reduce using rule 151 (rparen_restrict -> RPAREN .)
    DEC             reduce using rule 151 (rparen_restrict -> RPAREN .)
    ASSIGNPLUS      reduce using rule 151 (rparen_restrict -> RPAREN .)
    ASSIGNMINUS     reduce using rule 151 (rparen_restrict -> RPAREN .)
    ASSIGNDIVIDE    reduce using rule 151 (rparen_restrict -> RPAREN .)
    ASSIGNTIMES     reduce using rule 151 (rparen_restrict -> RPAREN .)
    ASSIGNBOR       reduce using rule 151 (rparen_restrict -> RPAREN .)
    ASSIGNBAND      reduce using rule 151 (rparen_restrict -> RPAREN .)
    ASSIGNBXOR      reduce using rule 151 (rparen_restrict -> RPAREN .)
    ASSIGN          reduce using rule 151 (rparen_restrict -> RPAREN .)
    LSBRACKET       reduce using rule 151 (rparen_restrict -> RPAREN .)
    TLTHAN          reduce using rule 151 (rparen_restrict -> RPAREN .)
    LPAREN          reduce using rule 151 (rparen_restrict -> RPAREN .)
    RSBRACKET       reduce using rule 151 (rparen_restrict -> RPAREN .)
    RPAREN          reduce using rule 151 (rparen_restrict -> RPAREN .)
    COLON           reduce using rule 151 (rparen_restrict -> RPAREN .)
    RBRACKET        reduce using rule 151 (rparen_restrict -> RPAREN .)


state 212

    (87) var_type -> var_type template_ref .

    ID              reduce using rule 87 (var_type -> var_type template_ref .)
    TLTHAN          reduce using rule 87 (var_type -> var_type template_ref .)
    ASSIGN          reduce using rule 87 (var_type -> var_type template_ref .)
    RPAREN          reduce using rule 87 (var_type -> var_type template_ref .)
    COMMA           reduce using rule 87 (var_type -> var_type template_ref .)
    TGTHAN          reduce using rule 87 (var_type -> var_type template_ref .)
    SEMI            reduce using rule 87 (var_type -> var_type template_ref .)
    IN              reduce using rule 87 (var_type -> var_type template_ref .)
    LBRACKET        reduce using rule 87 (var_type -> var_type template_ref .)


state 213

    (78) var_type -> var_type id_var_type .

    ID              reduce using rule 78 (var_type -> var_type id_var_type .)
    TLTHAN          reduce using rule 78 (var_type -> var_type id_var_type .)
    ASSIGN          reduce using rule 78 (var_type -> var_type id_var_type .)
    RPAREN          reduce using rule 78 (var_type -> var_type id_var_type .)
    COMMA           reduce using rule 78 (var_type -> var_type id_var_type .)
    TGTHAN          reduce using rule 78 (var_type -> var_type id_var_type .)
    SEMI            reduce using rule 78 (var_type -> var_type id_var_type .)
    IN              reduce using rule 78 (var_type -> var_type id_var_type .)
    LBRACKET        reduce using rule 78 (var_type -> var_type id_var_type .)


state 214

    (128) exprfunction -> FUNCTION template_opt push_scope . LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> FUNCTION template_opt push_scope . LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict

    LPAREN          shift and go to state 280


state 215

    (51) template -> lthan_restrict templatedeflist . gthan_restrict
    (49) templatedeflist -> templatedeflist . COMMA var_type
    (50) templatedeflist -> templatedeflist . COMMA var_type ASSIGN var_type
    (65) gthan_restrict -> . TGTHAN

    COMMA           shift and go to state 282
    TGTHAN          shift and go to state 206

    gthan_restrict                 shift and go to state 281

state 216

    (47) templatedeflist -> var_type .
    (48) templatedeflist -> var_type . ASSIGN var_type
    (78) var_type -> var_type . id_var_type
    (87) var_type -> var_type . template_ref
    (74) id_var_type -> . ID
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 47 (templatedeflist -> var_type .)
    TGTHAN          reduce using rule 47 (templatedeflist -> var_type .)
    ASSIGN          shift and go to state 283
    ID              shift and go to state 110
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 212
    id_var_type                    shift and go to state 213

state 217

    (121) function -> FUNCTION ID template_opt . push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (119) funcref -> FUNCTION ID template_opt . push_scope LPAREN funcdeflist RPAREN func_type_opt
    (6) push_scope -> .

    LPAREN          reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 284

state 218

    (213) for_decl -> for_var_decl . SEMI expr_opt SEMI expr_opt
    (214) for_decl -> for_var_decl . IN expr

    SEMI            shift and go to state 285
    IN              shift and go to state 286


state 219

    (215) for -> FOR LPAREN for_decl . RPAREN statement_nonctrl
    (216) for -> FOR LPAREN for_decl . RPAREN LBRACKET statementlist_opt RBRACKET

    RPAREN          shift and go to state 287


state 220

    (210) for_var_decl -> ID .
    (211) for_var_decl -> ID . ASSIGN expr

    SEMI            reduce using rule 210 (for_var_decl -> ID .)
    IN              reduce using rule 210 (for_var_decl -> ID .)
    ASSIGN          shift and go to state 288


state 221

    (212) for_var_decl -> var_decl .
    (71) var_decl -> var_decl . ASSIGN expr
    (72) var_decl -> var_decl . COMMA ID
    (73) var_decl -> var_decl . COMMA ID ASSIGN expr

    SEMI            reduce using rule 212 (for_var_decl -> var_decl .)
    IN              reduce using rule 212 (for_var_decl -> var_decl .)
    ASSIGN          shift and go to state 138
    COMMA           shift and go to state 139


state 222

    (224) statementlist_opt -> statementlist .
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    RBRACKET        reduce using rule 224 (statementlist_opt -> statementlist .)
    CASE            reduce using rule 224 (statementlist_opt -> statementlist .)
    DEFAULT         reduce using rule 224 (statementlist_opt -> statementlist .)
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 15
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 80
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 81
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 223

    (218) ctrl_statement -> LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 289


state 224

    (37) statement_nonctrl -> return SEMI .

    SEMI            reduce using rule 37 (statement_nonctrl -> return SEMI .)
    FUNCTION        reduce using rule 37 (statement_nonctrl -> return SEMI .)
    IF              reduce using rule 37 (statement_nonctrl -> return SEMI .)
    ELSE            reduce using rule 37 (statement_nonctrl -> return SEMI .)
    WHILE           reduce using rule 37 (statement_nonctrl -> return SEMI .)
    WITH            reduce using rule 37 (statement_nonctrl -> return SEMI .)
    DO              reduce using rule 37 (statement_nonctrl -> return SEMI .)
    FOR             reduce using rule 37 (statement_nonctrl -> return SEMI .)
    RETURN          reduce using rule 37 (statement_nonctrl -> return SEMI .)
    YIELD           reduce using rule 37 (statement_nonctrl -> return SEMI .)
    BREAK           reduce using rule 37 (statement_nonctrl -> return SEMI .)
    CONTINUE        reduce using rule 37 (statement_nonctrl -> return SEMI .)
    THROW           reduce using rule 37 (statement_nonctrl -> return SEMI .)
    TRY             reduce using rule 37 (statement_nonctrl -> return SEMI .)
    CATCH           reduce using rule 37 (statement_nonctrl -> return SEMI .)
    SWITCH          reduce using rule 37 (statement_nonctrl -> return SEMI .)
    NATIVE          reduce using rule 37 (statement_nonctrl -> return SEMI .)
    NUMBER          reduce using rule 37 (statement_nonctrl -> return SEMI .)
    ID              reduce using rule 37 (statement_nonctrl -> return SEMI .)
    DELETE          reduce using rule 37 (statement_nonctrl -> return SEMI .)
    STRINGLIT       reduce using rule 37 (statement_nonctrl -> return SEMI .)
    LSBRACKET       reduce using rule 37 (statement_nonctrl -> return SEMI .)
    LPAREN          reduce using rule 37 (statement_nonctrl -> return SEMI .)
    MINUS           reduce using rule 37 (statement_nonctrl -> return SEMI .)
    NOT             reduce using rule 37 (statement_nonctrl -> return SEMI .)
    BITINV          reduce using rule 37 (statement_nonctrl -> return SEMI .)
    NEW             reduce using rule 37 (statement_nonctrl -> return SEMI .)
    INC             reduce using rule 37 (statement_nonctrl -> return SEMI .)
    DEC             reduce using rule 37 (statement_nonctrl -> return SEMI .)
    TYPEOF          reduce using rule 37 (statement_nonctrl -> return SEMI .)
    REGEXPR         reduce using rule 37 (statement_nonctrl -> return SEMI .)
    GLOBAL          reduce using rule 37 (statement_nonctrl -> return SEMI .)
    VAR             reduce using rule 37 (statement_nonctrl -> return SEMI .)
    TLTHAN          reduce using rule 37 (statement_nonctrl -> return SEMI .)
    LBRACKET        reduce using rule 37 (statement_nonctrl -> return SEMI .)
    $end            reduce using rule 37 (statement_nonctrl -> return SEMI .)
    RBRACKET        reduce using rule 37 (statement_nonctrl -> return SEMI .)
    CASE            reduce using rule 37 (statement_nonctrl -> return SEMI .)
    DEFAULT         reduce using rule 37 (statement_nonctrl -> return SEMI .)


state 225

    (39) statement_nonctrl -> break SEMI .

    SEMI            reduce using rule 39 (statement_nonctrl -> break SEMI .)
    FUNCTION        reduce using rule 39 (statement_nonctrl -> break SEMI .)
    IF              reduce using rule 39 (statement_nonctrl -> break SEMI .)
    ELSE            reduce using rule 39 (statement_nonctrl -> break SEMI .)
    WHILE           reduce using rule 39 (statement_nonctrl -> break SEMI .)
    WITH            reduce using rule 39 (statement_nonctrl -> break SEMI .)
    DO              reduce using rule 39 (statement_nonctrl -> break SEMI .)
    FOR             reduce using rule 39 (statement_nonctrl -> break SEMI .)
    RETURN          reduce using rule 39 (statement_nonctrl -> break SEMI .)
    YIELD           reduce using rule 39 (statement_nonctrl -> break SEMI .)
    BREAK           reduce using rule 39 (statement_nonctrl -> break SEMI .)
    CONTINUE        reduce using rule 39 (statement_nonctrl -> break SEMI .)
    THROW           reduce using rule 39 (statement_nonctrl -> break SEMI .)
    TRY             reduce using rule 39 (statement_nonctrl -> break SEMI .)
    CATCH           reduce using rule 39 (statement_nonctrl -> break SEMI .)
    SWITCH          reduce using rule 39 (statement_nonctrl -> break SEMI .)
    NATIVE          reduce using rule 39 (statement_nonctrl -> break SEMI .)
    NUMBER          reduce using rule 39 (statement_nonctrl -> break SEMI .)
    ID              reduce using rule 39 (statement_nonctrl -> break SEMI .)
    DELETE          reduce using rule 39 (statement_nonctrl -> break SEMI .)
    STRINGLIT       reduce using rule 39 (statement_nonctrl -> break SEMI .)
    LSBRACKET       reduce using rule 39 (statement_nonctrl -> break SEMI .)
    LPAREN          reduce using rule 39 (statement_nonctrl -> break SEMI .)
    MINUS           reduce using rule 39 (statement_nonctrl -> break SEMI .)
    NOT             reduce using rule 39 (statement_nonctrl -> break SEMI .)
    BITINV          reduce using rule 39 (statement_nonctrl -> break SEMI .)
    NEW             reduce using rule 39 (statement_nonctrl -> break SEMI .)
    INC             reduce using rule 39 (statement_nonctrl -> break SEMI .)
    DEC             reduce using rule 39 (statement_nonctrl -> break SEMI .)
    TYPEOF          reduce using rule 39 (statement_nonctrl -> break SEMI .)
    REGEXPR         reduce using rule 39 (statement_nonctrl -> break SEMI .)
    GLOBAL          reduce using rule 39 (statement_nonctrl -> break SEMI .)
    VAR             reduce using rule 39 (statement_nonctrl -> break SEMI .)
    TLTHAN          reduce using rule 39 (statement_nonctrl -> break SEMI .)
    LBRACKET        reduce using rule 39 (statement_nonctrl -> break SEMI .)
    $end            reduce using rule 39 (statement_nonctrl -> break SEMI .)
    RBRACKET        reduce using rule 39 (statement_nonctrl -> break SEMI .)
    CASE            reduce using rule 39 (statement_nonctrl -> break SEMI .)
    DEFAULT         reduce using rule 39 (statement_nonctrl -> break SEMI .)


state 226

    (38) statement_nonctrl -> yield SEMI .

    SEMI            reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    FUNCTION        reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    IF              reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    ELSE            reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    WHILE           reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    WITH            reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    DO              reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    FOR             reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    RETURN          reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    YIELD           reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    BREAK           reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    CONTINUE        reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    THROW           reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    TRY             reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    CATCH           reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    SWITCH          reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    NATIVE          reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    NUMBER          reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    ID              reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    DELETE          reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    STRINGLIT       reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    LSBRACKET       reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    LPAREN          reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    MINUS           reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    NOT             reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    BITINV          reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    NEW             reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    INC             reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    DEC             reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    TYPEOF          reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    REGEXPR         reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    GLOBAL          reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    VAR             reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    TLTHAN          reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    LBRACKET        reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    $end            reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    RBRACKET        reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    CASE            reduce using rule 38 (statement_nonctrl -> yield SEMI .)
    DEFAULT         reduce using rule 38 (statement_nonctrl -> yield SEMI .)


state 227

    (40) statement_nonctrl -> continue SEMI .

    SEMI            reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    FUNCTION        reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    IF              reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    ELSE            reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    WHILE           reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    WITH            reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    DO              reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    FOR             reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    RETURN          reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    YIELD           reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    BREAK           reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    CONTINUE        reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    THROW           reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    TRY             reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    CATCH           reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    SWITCH          reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    NATIVE          reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    NUMBER          reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    ID              reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    DELETE          reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    STRINGLIT       reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    LSBRACKET       reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    LPAREN          reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    MINUS           reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    NOT             reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    BITINV          reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    NEW             reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    INC             reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    DEC             reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    TYPEOF          reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    REGEXPR         reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    GLOBAL          reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    VAR             reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    TLTHAN          reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    LBRACKET        reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    $end            reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    RBRACKET        reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    CASE            reduce using rule 40 (statement_nonctrl -> continue SEMI .)
    DEFAULT         reduce using rule 40 (statement_nonctrl -> continue SEMI .)


state 228

    (119) funcref -> FUNCTION ID . template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (115) template_opt -> . template
    (116) template_opt -> .
    (51) template -> . lthan_restrict templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 116 (template_opt -> .)
    TLTHAN          shift and go to state 72

    template                       shift and go to state 115
    template_opt                   shift and go to state 290
    lthan_restrict                 shift and go to state 113

state 229

    (41) statement_nonctrl -> throw SEMI .

    SEMI            reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    FUNCTION        reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    IF              reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    ELSE            reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    WHILE           reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    WITH            reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    DO              reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    FOR             reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    RETURN          reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    YIELD           reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    BREAK           reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    CONTINUE        reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    THROW           reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    TRY             reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    CATCH           reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    SWITCH          reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    NATIVE          reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    NUMBER          reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    ID              reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    DELETE          reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    STRINGLIT       reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    LSBRACKET       reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    LPAREN          reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    MINUS           reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    NOT             reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    BITINV          reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    NEW             reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    INC             reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    DEC             reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    TYPEOF          reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    REGEXPR         reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    GLOBAL          reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    VAR             reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    TLTHAN          reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    LBRACKET        reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    $end            reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    RBRACKET        reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    CASE            reduce using rule 41 (statement_nonctrl -> throw SEMI .)
    DEFAULT         reduce using rule 41 (statement_nonctrl -> throw SEMI .)


state 230

    (237) try -> TRY LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    RBRACKET        shift and go to state 291
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 15
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 80
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 81
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 231

    (238) try -> TRY LBRACKET RBRACKET .

    SEMI            reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    FUNCTION        reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    IF              reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    ELSE            reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    WHILE           reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    WITH            reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    DO              reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    FOR             reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    RETURN          reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    YIELD           reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    BREAK           reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    CONTINUE        reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    THROW           reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    TRY             reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    CATCH           reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    SWITCH          reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    NATIVE          reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    NUMBER          reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    ID              reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    DELETE          reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    STRINGLIT       reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    LSBRACKET       reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    LPAREN          reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    MINUS           reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    NOT             reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    BITINV          reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    NEW             reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    INC             reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    DEC             reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    TYPEOF          reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    REGEXPR         reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    GLOBAL          reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    VAR             reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    TLTHAN          reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    $end            reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    CASE            reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)
    DEFAULT         reduce using rule 238 (try -> TRY LBRACKET RBRACKET .)


state 232

    (71) var_decl -> var_decl ASSIGN expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 71 (var_decl -> var_decl ASSIGN expr .)
    ASSIGN          reduce using rule 71 (var_decl -> var_decl ASSIGN expr .)
    COMMA           reduce using rule 71 (var_decl -> var_decl ASSIGN expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

  ! IN              [ reduce using rule 71 (var_decl -> var_decl ASSIGN expr .) ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGN          [ shift and go to state 172 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 233

    (72) var_decl -> var_decl COMMA ID .
    (73) var_decl -> var_decl COMMA ID . ASSIGN expr

  ! shift/reduce conflict for ASSIGN resolved as shift
    SEMI            reduce using rule 72 (var_decl -> var_decl COMMA ID .)
    COMMA           reduce using rule 72 (var_decl -> var_decl COMMA ID .)
    IN              reduce using rule 72 (var_decl -> var_decl COMMA ID .)
    ASSIGN          shift and go to state 292

  ! ASSIGN          [ reduce using rule 72 (var_decl -> var_decl COMMA ID .) ]


state 234

    (222) while -> WHILE paren_expr LBRACKET . statementlist_opt RBRACKET
    (122) lbracket_restrict -> LBRACKET .
    (224) statementlist_opt -> . statementlist
    (225) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 122 (lbracket_restrict -> LBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

  ! RBRACKET        [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! RBRACKET        [ reduce using rule 225 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 293
    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    statementlist                  shift and go to state 222
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    var_decl                       shift and go to state 37
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 46
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 49
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    yield                          shift and go to state 15
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 235

    (221) while -> WHILE paren_expr statement_nonctrl .

    SEMI            reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    FUNCTION        reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    IF              reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    ELSE            reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    WHILE           reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    WITH            reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    DO              reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    FOR             reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    RETURN          reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    YIELD           reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    BREAK           reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    CONTINUE        reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    THROW           reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    TRY             reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    CATCH           reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    SWITCH          reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    NATIVE          reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    NUMBER          reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    ID              reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    DELETE          reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    STRINGLIT       reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    LSBRACKET       reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    LPAREN          reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    MINUS           reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    NOT             reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    BITINV          reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    NEW             reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    INC             reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    DEC             reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    TYPEOF          reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    REGEXPR         reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    GLOBAL          reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    VAR             reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    TLTHAN          reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    LBRACKET        reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    CASE            reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    RBRACKET        reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    $end            reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)
    DEFAULT         reduce using rule 221 (while -> WHILE paren_expr statement_nonctrl .)


state 236

    (120) func_native -> NATIVE push_scope FUNCTION . ID template_opt LPAREN funcdeflist RPAREN func_type_opt

    ID              shift and go to state 294


state 237

    (233) switch -> SWITCH paren_expr LBRACKET . case_block RBRACKET
    (231) case_block -> . case_clauses
    (232) case_block -> . case_clauses_opt default_case case_clauses_opt
    (227) case_clauses -> . case_clause
    (228) case_clauses -> . case_clauses case_clause
    (229) case_clauses_opt -> . case_clauses
    (230) case_clauses_opt -> .
    (226) case_clause -> . CASE expr COLON statementlist_opt

    DEFAULT         reduce using rule 230 (case_clauses_opt -> .)
    CASE            shift and go to state 296

    case_block                     shift and go to state 295
    case_clauses                   shift and go to state 297
    case_clauses_opt               shift and go to state 298
    case_clause                    shift and go to state 299

state 238

    (240) catch -> CATCH paren_expr LBRACKET . statementlist RBRACKET
    (122) lbracket_restrict -> LBRACKET .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

  ! RBRACKET        [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    statementlist                  shift and go to state 300
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 15
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 46
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 49
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 239

    (239) catch -> CATCH paren_expr statement_nonctrl .

    RBRACKET        reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    SEMI            reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    FUNCTION        reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    IF              reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    ELSE            reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    WHILE           reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    WITH            reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    DO              reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    FOR             reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    RETURN          reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    YIELD           reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    BREAK           reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    CONTINUE        reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    THROW           reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    TRY             reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    CATCH           reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    SWITCH          reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    NATIVE          reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    NUMBER          reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    ID              reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    DELETE          reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    STRINGLIT       reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    LSBRACKET       reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    LPAREN          reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    MINUS           reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    NOT             reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    BITINV          reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    NEW             reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    INC             reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    DEC             reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    TYPEOF          reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    REGEXPR         reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    GLOBAL          reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    VAR             reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    TLTHAN          reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    LBRACKET        reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    $end            reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    CASE            reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)
    DEFAULT         reduce using rule 239 (catch -> CATCH paren_expr statement_nonctrl .)


state 240

    (183) expr -> expr NOTEQUAL expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    LAND            reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    LOR             reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    BOR             reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    BXOR            reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    BAND            reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    EQUAL           reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    EQUAL_STRICT    reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    NOTEQUAL_STRICT reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    GTHAN           reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    GTHANEQ         reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    LTHAN           reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    MOD             reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    LTHANEQ         reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    NOTEQUAL        reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    QEST            reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    COMMA           reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    ASSIGNPLUS      reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    ASSIGNMINUS     reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    ASSIGNDIVIDE    reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    ASSIGNTIMES     reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    ASSIGNBOR       reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    ASSIGNBAND      reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    ASSIGNBXOR      reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    ASSIGN          reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    TLTHAN          reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    RSBRACKET       reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    RPAREN          reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    COLON           reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    RBRACKET        reduce using rule 183 (expr -> expr NOTEQUAL expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    INSTANCEOF      shift and go to state 183
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! LLSHIFT         [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! RRSHIFT         [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! DOT             [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! PLUS            [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! MINUS           [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! TIMES           [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! IN              [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! INC             [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! DEC             [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! LSBRACKET       [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! LPAREN          [ reduce using rule 183 (expr -> expr NOTEQUAL expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 241

    (166) expr -> expr LLSHIFT expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 166 (expr -> expr LLSHIFT expr .)
    RSHIFT          reduce using rule 166 (expr -> expr LLSHIFT expr .)
    LSHIFT          reduce using rule 166 (expr -> expr LLSHIFT expr .)
    LLSHIFT         reduce using rule 166 (expr -> expr LLSHIFT expr .)
    RRSHIFT         reduce using rule 166 (expr -> expr LLSHIFT expr .)
    LAND            reduce using rule 166 (expr -> expr LLSHIFT expr .)
    LOR             reduce using rule 166 (expr -> expr LLSHIFT expr .)
    BOR             reduce using rule 166 (expr -> expr LLSHIFT expr .)
    INSTANCEOF      reduce using rule 166 (expr -> expr LLSHIFT expr .)
    BXOR            reduce using rule 166 (expr -> expr LLSHIFT expr .)
    BAND            reduce using rule 166 (expr -> expr LLSHIFT expr .)
    EQUAL           reduce using rule 166 (expr -> expr LLSHIFT expr .)
    EQUAL_STRICT    reduce using rule 166 (expr -> expr LLSHIFT expr .)
    NOTEQUAL_STRICT reduce using rule 166 (expr -> expr LLSHIFT expr .)
    GTHAN           reduce using rule 166 (expr -> expr LLSHIFT expr .)
    GTHANEQ         reduce using rule 166 (expr -> expr LLSHIFT expr .)
    LTHAN           reduce using rule 166 (expr -> expr LLSHIFT expr .)
    MOD             reduce using rule 166 (expr -> expr LLSHIFT expr .)
    LTHANEQ         reduce using rule 166 (expr -> expr LLSHIFT expr .)
    NOTEQUAL        reduce using rule 166 (expr -> expr LLSHIFT expr .)
    IN              reduce using rule 166 (expr -> expr LLSHIFT expr .)
    QEST            reduce using rule 166 (expr -> expr LLSHIFT expr .)
    COMMA           reduce using rule 166 (expr -> expr LLSHIFT expr .)
    ASSIGNPLUS      reduce using rule 166 (expr -> expr LLSHIFT expr .)
    ASSIGNMINUS     reduce using rule 166 (expr -> expr LLSHIFT expr .)
    ASSIGNDIVIDE    reduce using rule 166 (expr -> expr LLSHIFT expr .)
    ASSIGNTIMES     reduce using rule 166 (expr -> expr LLSHIFT expr .)
    ASSIGNBOR       reduce using rule 166 (expr -> expr LLSHIFT expr .)
    ASSIGNBAND      reduce using rule 166 (expr -> expr LLSHIFT expr .)
    ASSIGNBXOR      reduce using rule 166 (expr -> expr LLSHIFT expr .)
    ASSIGN          reduce using rule 166 (expr -> expr LLSHIFT expr .)
    TLTHAN          reduce using rule 166 (expr -> expr LLSHIFT expr .)
    RSBRACKET       reduce using rule 166 (expr -> expr LLSHIFT expr .)
    RPAREN          reduce using rule 166 (expr -> expr LLSHIFT expr .)
    COLON           reduce using rule 166 (expr -> expr LLSHIFT expr .)
    RBRACKET        reduce using rule 166 (expr -> expr LLSHIFT expr .)
    DOT             shift and go to state 160
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 166 (expr -> expr LLSHIFT expr .) ]
  ! PLUS            [ reduce using rule 166 (expr -> expr LLSHIFT expr .) ]
  ! MINUS           [ reduce using rule 166 (expr -> expr LLSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 166 (expr -> expr LLSHIFT expr .) ]
  ! TIMES           [ reduce using rule 166 (expr -> expr LLSHIFT expr .) ]
  ! INC             [ reduce using rule 166 (expr -> expr LLSHIFT expr .) ]
  ! DEC             [ reduce using rule 166 (expr -> expr LLSHIFT expr .) ]
  ! LSBRACKET       [ reduce using rule 166 (expr -> expr LLSHIFT expr .) ]
  ! LPAREN          [ reduce using rule 166 (expr -> expr LLSHIFT expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 242

    (164) expr -> expr RSHIFT expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 164 (expr -> expr RSHIFT expr .)
    RSHIFT          reduce using rule 164 (expr -> expr RSHIFT expr .)
    LSHIFT          reduce using rule 164 (expr -> expr RSHIFT expr .)
    LLSHIFT         reduce using rule 164 (expr -> expr RSHIFT expr .)
    RRSHIFT         reduce using rule 164 (expr -> expr RSHIFT expr .)
    LAND            reduce using rule 164 (expr -> expr RSHIFT expr .)
    LOR             reduce using rule 164 (expr -> expr RSHIFT expr .)
    BOR             reduce using rule 164 (expr -> expr RSHIFT expr .)
    INSTANCEOF      reduce using rule 164 (expr -> expr RSHIFT expr .)
    BXOR            reduce using rule 164 (expr -> expr RSHIFT expr .)
    BAND            reduce using rule 164 (expr -> expr RSHIFT expr .)
    EQUAL           reduce using rule 164 (expr -> expr RSHIFT expr .)
    EQUAL_STRICT    reduce using rule 164 (expr -> expr RSHIFT expr .)
    NOTEQUAL_STRICT reduce using rule 164 (expr -> expr RSHIFT expr .)
    GTHAN           reduce using rule 164 (expr -> expr RSHIFT expr .)
    GTHANEQ         reduce using rule 164 (expr -> expr RSHIFT expr .)
    LTHAN           reduce using rule 164 (expr -> expr RSHIFT expr .)
    MOD             reduce using rule 164 (expr -> expr RSHIFT expr .)
    LTHANEQ         reduce using rule 164 (expr -> expr RSHIFT expr .)
    NOTEQUAL        reduce using rule 164 (expr -> expr RSHIFT expr .)
    IN              reduce using rule 164 (expr -> expr RSHIFT expr .)
    QEST            reduce using rule 164 (expr -> expr RSHIFT expr .)
    COMMA           reduce using rule 164 (expr -> expr RSHIFT expr .)
    ASSIGNPLUS      reduce using rule 164 (expr -> expr RSHIFT expr .)
    ASSIGNMINUS     reduce using rule 164 (expr -> expr RSHIFT expr .)
    ASSIGNDIVIDE    reduce using rule 164 (expr -> expr RSHIFT expr .)
    ASSIGNTIMES     reduce using rule 164 (expr -> expr RSHIFT expr .)
    ASSIGNBOR       reduce using rule 164 (expr -> expr RSHIFT expr .)
    ASSIGNBAND      reduce using rule 164 (expr -> expr RSHIFT expr .)
    ASSIGNBXOR      reduce using rule 164 (expr -> expr RSHIFT expr .)
    ASSIGN          reduce using rule 164 (expr -> expr RSHIFT expr .)
    TLTHAN          reduce using rule 164 (expr -> expr RSHIFT expr .)
    RSBRACKET       reduce using rule 164 (expr -> expr RSHIFT expr .)
    RPAREN          reduce using rule 164 (expr -> expr RSHIFT expr .)
    COLON           reduce using rule 164 (expr -> expr RSHIFT expr .)
    RBRACKET        reduce using rule 164 (expr -> expr RSHIFT expr .)
    DOT             shift and go to state 160
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 164 (expr -> expr RSHIFT expr .) ]
  ! PLUS            [ reduce using rule 164 (expr -> expr RSHIFT expr .) ]
  ! MINUS           [ reduce using rule 164 (expr -> expr RSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 164 (expr -> expr RSHIFT expr .) ]
  ! TIMES           [ reduce using rule 164 (expr -> expr RSHIFT expr .) ]
  ! INC             [ reduce using rule 164 (expr -> expr RSHIFT expr .) ]
  ! DEC             [ reduce using rule 164 (expr -> expr RSHIFT expr .) ]
  ! LSBRACKET       [ reduce using rule 164 (expr -> expr RSHIFT expr .) ]
  ! LPAREN          [ reduce using rule 164 (expr -> expr RSHIFT expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 243

    (171) expr -> expr BOR expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 171 (expr -> expr BOR expr .)
    LAND            reduce using rule 171 (expr -> expr BOR expr .)
    LOR             reduce using rule 171 (expr -> expr BOR expr .)
    BOR             reduce using rule 171 (expr -> expr BOR expr .)
    BXOR            reduce using rule 171 (expr -> expr BOR expr .)
    BAND            reduce using rule 171 (expr -> expr BOR expr .)
    MOD             reduce using rule 171 (expr -> expr BOR expr .)
    QEST            reduce using rule 171 (expr -> expr BOR expr .)
    COMMA           reduce using rule 171 (expr -> expr BOR expr .)
    ASSIGNPLUS      reduce using rule 171 (expr -> expr BOR expr .)
    ASSIGNMINUS     reduce using rule 171 (expr -> expr BOR expr .)
    ASSIGNDIVIDE    reduce using rule 171 (expr -> expr BOR expr .)
    ASSIGNTIMES     reduce using rule 171 (expr -> expr BOR expr .)
    ASSIGNBOR       reduce using rule 171 (expr -> expr BOR expr .)
    ASSIGNBAND      reduce using rule 171 (expr -> expr BOR expr .)
    ASSIGNBXOR      reduce using rule 171 (expr -> expr BOR expr .)
    ASSIGN          reduce using rule 171 (expr -> expr BOR expr .)
    TLTHAN          reduce using rule 171 (expr -> expr BOR expr .)
    RSBRACKET       reduce using rule 171 (expr -> expr BOR expr .)
    RPAREN          reduce using rule 171 (expr -> expr BOR expr .)
    COLON           reduce using rule 171 (expr -> expr BOR expr .)
    RBRACKET        reduce using rule 171 (expr -> expr BOR expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    INSTANCEOF      shift and go to state 183
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! LSHIFT          [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! LLSHIFT         [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! RRSHIFT         [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! DOT             [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! EQUAL           [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! GTHAN           [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! GTHANEQ         [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! LTHAN           [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! LTHANEQ         [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! NOTEQUAL        [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! PLUS            [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! MINUS           [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! DIVIDE          [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! TIMES           [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! IN              [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! INC             [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! DEC             [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! LSBRACKET       [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! LPAREN          [ reduce using rule 171 (expr -> expr BOR expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! MOD             [ shift and go to state 190 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 244

    (175) expr -> expr EQUAL expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 175 (expr -> expr EQUAL expr .)
    LAND            reduce using rule 175 (expr -> expr EQUAL expr .)
    LOR             reduce using rule 175 (expr -> expr EQUAL expr .)
    BOR             reduce using rule 175 (expr -> expr EQUAL expr .)
    BXOR            reduce using rule 175 (expr -> expr EQUAL expr .)
    BAND            reduce using rule 175 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 175 (expr -> expr EQUAL expr .)
    EQUAL_STRICT    reduce using rule 175 (expr -> expr EQUAL expr .)
    NOTEQUAL_STRICT reduce using rule 175 (expr -> expr EQUAL expr .)
    GTHAN           reduce using rule 175 (expr -> expr EQUAL expr .)
    GTHANEQ         reduce using rule 175 (expr -> expr EQUAL expr .)
    LTHAN           reduce using rule 175 (expr -> expr EQUAL expr .)
    MOD             reduce using rule 175 (expr -> expr EQUAL expr .)
    LTHANEQ         reduce using rule 175 (expr -> expr EQUAL expr .)
    NOTEQUAL        reduce using rule 175 (expr -> expr EQUAL expr .)
    QEST            reduce using rule 175 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 175 (expr -> expr EQUAL expr .)
    ASSIGNPLUS      reduce using rule 175 (expr -> expr EQUAL expr .)
    ASSIGNMINUS     reduce using rule 175 (expr -> expr EQUAL expr .)
    ASSIGNDIVIDE    reduce using rule 175 (expr -> expr EQUAL expr .)
    ASSIGNTIMES     reduce using rule 175 (expr -> expr EQUAL expr .)
    ASSIGNBOR       reduce using rule 175 (expr -> expr EQUAL expr .)
    ASSIGNBAND      reduce using rule 175 (expr -> expr EQUAL expr .)
    ASSIGNBXOR      reduce using rule 175 (expr -> expr EQUAL expr .)
    ASSIGN          reduce using rule 175 (expr -> expr EQUAL expr .)
    TLTHAN          reduce using rule 175 (expr -> expr EQUAL expr .)
    RSBRACKET       reduce using rule 175 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 175 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 175 (expr -> expr EQUAL expr .)
    RBRACKET        reduce using rule 175 (expr -> expr EQUAL expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    INSTANCEOF      shift and go to state 183
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! LLSHIFT         [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! RRSHIFT         [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! DOT             [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! TIMES           [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! IN              [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! INC             [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! DEC             [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! LSBRACKET       [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! LPAREN          [ reduce using rule 175 (expr -> expr EQUAL expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 245

    (170) expr -> expr LOR expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 170 (expr -> expr LOR expr .)
    LAND            reduce using rule 170 (expr -> expr LOR expr .)
    LOR             reduce using rule 170 (expr -> expr LOR expr .)
    MOD             reduce using rule 170 (expr -> expr LOR expr .)
    QEST            reduce using rule 170 (expr -> expr LOR expr .)
    COMMA           reduce using rule 170 (expr -> expr LOR expr .)
    ASSIGNPLUS      reduce using rule 170 (expr -> expr LOR expr .)
    ASSIGNMINUS     reduce using rule 170 (expr -> expr LOR expr .)
    ASSIGNDIVIDE    reduce using rule 170 (expr -> expr LOR expr .)
    ASSIGNTIMES     reduce using rule 170 (expr -> expr LOR expr .)
    ASSIGNBOR       reduce using rule 170 (expr -> expr LOR expr .)
    ASSIGNBAND      reduce using rule 170 (expr -> expr LOR expr .)
    ASSIGNBXOR      reduce using rule 170 (expr -> expr LOR expr .)
    ASSIGN          reduce using rule 170 (expr -> expr LOR expr .)
    TLTHAN          reduce using rule 170 (expr -> expr LOR expr .)
    RSBRACKET       reduce using rule 170 (expr -> expr LOR expr .)
    RPAREN          reduce using rule 170 (expr -> expr LOR expr .)
    COLON           reduce using rule 170 (expr -> expr LOR expr .)
    RBRACKET        reduce using rule 170 (expr -> expr LOR expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! LSHIFT          [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! LLSHIFT         [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! RRSHIFT         [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! DOT             [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! BOR             [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! BXOR            [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! BAND            [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! EQUAL           [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! GTHAN           [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! GTHANEQ         [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! LTHAN           [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! LTHANEQ         [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! NOTEQUAL        [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! PLUS            [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! MINUS           [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! DIVIDE          [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! TIMES           [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! IN              [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! INC             [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! DEC             [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! LSBRACKET       [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! LPAREN          [ reduce using rule 170 (expr -> expr LOR expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! MOD             [ shift and go to state 190 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 246

    (192) expr -> expr QEST expr . COLON expr
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    COLON           shift and go to state 301
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 247

    (165) expr -> expr LSHIFT expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 165 (expr -> expr LSHIFT expr .)
    RSHIFT          reduce using rule 165 (expr -> expr LSHIFT expr .)
    LSHIFT          reduce using rule 165 (expr -> expr LSHIFT expr .)
    LLSHIFT         reduce using rule 165 (expr -> expr LSHIFT expr .)
    RRSHIFT         reduce using rule 165 (expr -> expr LSHIFT expr .)
    LAND            reduce using rule 165 (expr -> expr LSHIFT expr .)
    LOR             reduce using rule 165 (expr -> expr LSHIFT expr .)
    BOR             reduce using rule 165 (expr -> expr LSHIFT expr .)
    INSTANCEOF      reduce using rule 165 (expr -> expr LSHIFT expr .)
    BXOR            reduce using rule 165 (expr -> expr LSHIFT expr .)
    BAND            reduce using rule 165 (expr -> expr LSHIFT expr .)
    EQUAL           reduce using rule 165 (expr -> expr LSHIFT expr .)
    EQUAL_STRICT    reduce using rule 165 (expr -> expr LSHIFT expr .)
    NOTEQUAL_STRICT reduce using rule 165 (expr -> expr LSHIFT expr .)
    GTHAN           reduce using rule 165 (expr -> expr LSHIFT expr .)
    GTHANEQ         reduce using rule 165 (expr -> expr LSHIFT expr .)
    LTHAN           reduce using rule 165 (expr -> expr LSHIFT expr .)
    MOD             reduce using rule 165 (expr -> expr LSHIFT expr .)
    LTHANEQ         reduce using rule 165 (expr -> expr LSHIFT expr .)
    NOTEQUAL        reduce using rule 165 (expr -> expr LSHIFT expr .)
    IN              reduce using rule 165 (expr -> expr LSHIFT expr .)
    QEST            reduce using rule 165 (expr -> expr LSHIFT expr .)
    COMMA           reduce using rule 165 (expr -> expr LSHIFT expr .)
    ASSIGNPLUS      reduce using rule 165 (expr -> expr LSHIFT expr .)
    ASSIGNMINUS     reduce using rule 165 (expr -> expr LSHIFT expr .)
    ASSIGNDIVIDE    reduce using rule 165 (expr -> expr LSHIFT expr .)
    ASSIGNTIMES     reduce using rule 165 (expr -> expr LSHIFT expr .)
    ASSIGNBOR       reduce using rule 165 (expr -> expr LSHIFT expr .)
    ASSIGNBAND      reduce using rule 165 (expr -> expr LSHIFT expr .)
    ASSIGNBXOR      reduce using rule 165 (expr -> expr LSHIFT expr .)
    ASSIGN          reduce using rule 165 (expr -> expr LSHIFT expr .)
    TLTHAN          reduce using rule 165 (expr -> expr LSHIFT expr .)
    RSBRACKET       reduce using rule 165 (expr -> expr LSHIFT expr .)
    RPAREN          reduce using rule 165 (expr -> expr LSHIFT expr .)
    COLON           reduce using rule 165 (expr -> expr LSHIFT expr .)
    RBRACKET        reduce using rule 165 (expr -> expr LSHIFT expr .)
    DOT             shift and go to state 160
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 165 (expr -> expr LSHIFT expr .) ]
  ! PLUS            [ reduce using rule 165 (expr -> expr LSHIFT expr .) ]
  ! MINUS           [ reduce using rule 165 (expr -> expr LSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 165 (expr -> expr LSHIFT expr .) ]
  ! TIMES           [ reduce using rule 165 (expr -> expr LSHIFT expr .) ]
  ! INC             [ reduce using rule 165 (expr -> expr LSHIFT expr .) ]
  ! DEC             [ reduce using rule 165 (expr -> expr LSHIFT expr .) ]
  ! LSBRACKET       [ reduce using rule 165 (expr -> expr LSHIFT expr .) ]
  ! LPAREN          [ reduce using rule 165 (expr -> expr LSHIFT expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 248

    (185) expr -> expr MINUS expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 185 (expr -> expr MINUS expr .)
    RSHIFT          reduce using rule 185 (expr -> expr MINUS expr .)
    LSHIFT          reduce using rule 185 (expr -> expr MINUS expr .)
    LLSHIFT         reduce using rule 185 (expr -> expr MINUS expr .)
    RRSHIFT         reduce using rule 185 (expr -> expr MINUS expr .)
    LAND            reduce using rule 185 (expr -> expr MINUS expr .)
    LOR             reduce using rule 185 (expr -> expr MINUS expr .)
    BOR             reduce using rule 185 (expr -> expr MINUS expr .)
    INSTANCEOF      reduce using rule 185 (expr -> expr MINUS expr .)
    BXOR            reduce using rule 185 (expr -> expr MINUS expr .)
    BAND            reduce using rule 185 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 185 (expr -> expr MINUS expr .)
    EQUAL_STRICT    reduce using rule 185 (expr -> expr MINUS expr .)
    NOTEQUAL_STRICT reduce using rule 185 (expr -> expr MINUS expr .)
    GTHAN           reduce using rule 185 (expr -> expr MINUS expr .)
    GTHANEQ         reduce using rule 185 (expr -> expr MINUS expr .)
    LTHAN           reduce using rule 185 (expr -> expr MINUS expr .)
    MOD             reduce using rule 185 (expr -> expr MINUS expr .)
    LTHANEQ         reduce using rule 185 (expr -> expr MINUS expr .)
    NOTEQUAL        reduce using rule 185 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 185 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 185 (expr -> expr MINUS expr .)
    IN              reduce using rule 185 (expr -> expr MINUS expr .)
    QEST            reduce using rule 185 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 185 (expr -> expr MINUS expr .)
    ASSIGNPLUS      reduce using rule 185 (expr -> expr MINUS expr .)
    ASSIGNMINUS     reduce using rule 185 (expr -> expr MINUS expr .)
    ASSIGNDIVIDE    reduce using rule 185 (expr -> expr MINUS expr .)
    ASSIGNTIMES     reduce using rule 185 (expr -> expr MINUS expr .)
    ASSIGNBOR       reduce using rule 185 (expr -> expr MINUS expr .)
    ASSIGNBAND      reduce using rule 185 (expr -> expr MINUS expr .)
    ASSIGNBXOR      reduce using rule 185 (expr -> expr MINUS expr .)
    ASSIGN          reduce using rule 185 (expr -> expr MINUS expr .)
    TLTHAN          reduce using rule 185 (expr -> expr MINUS expr .)
    RSBRACKET       reduce using rule 185 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 185 (expr -> expr MINUS expr .)
    COLON           reduce using rule 185 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 185 (expr -> expr MINUS expr .)
    DOT             shift and go to state 160
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 185 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 185 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 185 (expr -> expr MINUS expr .) ]
  ! INC             [ reduce using rule 185 (expr -> expr MINUS expr .) ]
  ! DEC             [ reduce using rule 185 (expr -> expr MINUS expr .) ]
  ! LSBRACKET       [ reduce using rule 185 (expr -> expr MINUS expr .) ]
  ! LPAREN          [ reduce using rule 185 (expr -> expr MINUS expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! PLUS            [ shift and go to state 169 ]
  ! MINUS           [ shift and go to state 159 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 249

    (168) expr -> expr DOT expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 168 (expr -> expr DOT expr .)
    RSHIFT          reduce using rule 168 (expr -> expr DOT expr .)
    LSHIFT          reduce using rule 168 (expr -> expr DOT expr .)
    LLSHIFT         reduce using rule 168 (expr -> expr DOT expr .)
    RRSHIFT         reduce using rule 168 (expr -> expr DOT expr .)
    DOT             reduce using rule 168 (expr -> expr DOT expr .)
    LAND            reduce using rule 168 (expr -> expr DOT expr .)
    LOR             reduce using rule 168 (expr -> expr DOT expr .)
    BOR             reduce using rule 168 (expr -> expr DOT expr .)
    INSTANCEOF      reduce using rule 168 (expr -> expr DOT expr .)
    BXOR            reduce using rule 168 (expr -> expr DOT expr .)
    BAND            reduce using rule 168 (expr -> expr DOT expr .)
    EQUAL           reduce using rule 168 (expr -> expr DOT expr .)
    EQUAL_STRICT    reduce using rule 168 (expr -> expr DOT expr .)
    NOTEQUAL_STRICT reduce using rule 168 (expr -> expr DOT expr .)
    GTHAN           reduce using rule 168 (expr -> expr DOT expr .)
    GTHANEQ         reduce using rule 168 (expr -> expr DOT expr .)
    LTHAN           reduce using rule 168 (expr -> expr DOT expr .)
    MOD             reduce using rule 168 (expr -> expr DOT expr .)
    LTHANEQ         reduce using rule 168 (expr -> expr DOT expr .)
    NOTEQUAL        reduce using rule 168 (expr -> expr DOT expr .)
    PLUS            reduce using rule 168 (expr -> expr DOT expr .)
    MINUS           reduce using rule 168 (expr -> expr DOT expr .)
    DIVIDE          reduce using rule 168 (expr -> expr DOT expr .)
    TIMES           reduce using rule 168 (expr -> expr DOT expr .)
    IN              reduce using rule 168 (expr -> expr DOT expr .)
    QEST            reduce using rule 168 (expr -> expr DOT expr .)
    COMMA           reduce using rule 168 (expr -> expr DOT expr .)
    INC             reduce using rule 168 (expr -> expr DOT expr .)
    DEC             reduce using rule 168 (expr -> expr DOT expr .)
    ASSIGNPLUS      reduce using rule 168 (expr -> expr DOT expr .)
    ASSIGNMINUS     reduce using rule 168 (expr -> expr DOT expr .)
    ASSIGNDIVIDE    reduce using rule 168 (expr -> expr DOT expr .)
    ASSIGNTIMES     reduce using rule 168 (expr -> expr DOT expr .)
    ASSIGNBOR       reduce using rule 168 (expr -> expr DOT expr .)
    ASSIGNBAND      reduce using rule 168 (expr -> expr DOT expr .)
    ASSIGNBXOR      reduce using rule 168 (expr -> expr DOT expr .)
    ASSIGN          reduce using rule 168 (expr -> expr DOT expr .)
    LSBRACKET       reduce using rule 168 (expr -> expr DOT expr .)
    TLTHAN          reduce using rule 168 (expr -> expr DOT expr .)
    RSBRACKET       reduce using rule 168 (expr -> expr DOT expr .)
    RPAREN          reduce using rule 168 (expr -> expr DOT expr .)
    COLON           reduce using rule 168 (expr -> expr DOT expr .)
    RBRACKET        reduce using rule 168 (expr -> expr DOT expr .)
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! LPAREN          [ reduce using rule 168 (expr -> expr DOT expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! DOT             [ shift and go to state 160 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! PLUS            [ shift and go to state 169 ]
  ! MINUS           [ shift and go to state 159 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! TIMES           [ shift and go to state 177 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! INC             [ shift and go to state 165 ]
  ! DEC             [ shift and go to state 158 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! LSBRACKET       [ shift and go to state 150 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 250

    (169) expr -> expr LAND expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 169 (expr -> expr LAND expr .)
    LAND            reduce using rule 169 (expr -> expr LAND expr .)
    LOR             reduce using rule 169 (expr -> expr LAND expr .)
    MOD             reduce using rule 169 (expr -> expr LAND expr .)
    QEST            reduce using rule 169 (expr -> expr LAND expr .)
    COMMA           reduce using rule 169 (expr -> expr LAND expr .)
    ASSIGNPLUS      reduce using rule 169 (expr -> expr LAND expr .)
    ASSIGNMINUS     reduce using rule 169 (expr -> expr LAND expr .)
    ASSIGNDIVIDE    reduce using rule 169 (expr -> expr LAND expr .)
    ASSIGNTIMES     reduce using rule 169 (expr -> expr LAND expr .)
    ASSIGNBOR       reduce using rule 169 (expr -> expr LAND expr .)
    ASSIGNBAND      reduce using rule 169 (expr -> expr LAND expr .)
    ASSIGNBXOR      reduce using rule 169 (expr -> expr LAND expr .)
    ASSIGN          reduce using rule 169 (expr -> expr LAND expr .)
    TLTHAN          reduce using rule 169 (expr -> expr LAND expr .)
    RSBRACKET       reduce using rule 169 (expr -> expr LAND expr .)
    RPAREN          reduce using rule 169 (expr -> expr LAND expr .)
    COLON           reduce using rule 169 (expr -> expr LAND expr .)
    RBRACKET        reduce using rule 169 (expr -> expr LAND expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! LSHIFT          [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! LLSHIFT         [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! RRSHIFT         [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! DOT             [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! BOR             [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! INSTANCEOF      [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! BXOR            [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! BAND            [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! EQUAL           [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! GTHAN           [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! GTHANEQ         [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! LTHAN           [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! LTHANEQ         [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! NOTEQUAL        [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! PLUS            [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! MINUS           [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! DIVIDE          [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! TIMES           [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! IN              [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! INC             [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! DEC             [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! LSBRACKET       [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! LPAREN          [ reduce using rule 169 (expr -> expr LAND expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! MOD             [ shift and go to state 190 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 251

    (173) expr -> expr BXOR expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 173 (expr -> expr BXOR expr .)
    LAND            reduce using rule 173 (expr -> expr BXOR expr .)
    LOR             reduce using rule 173 (expr -> expr BXOR expr .)
    BOR             reduce using rule 173 (expr -> expr BXOR expr .)
    BXOR            reduce using rule 173 (expr -> expr BXOR expr .)
    BAND            reduce using rule 173 (expr -> expr BXOR expr .)
    MOD             reduce using rule 173 (expr -> expr BXOR expr .)
    QEST            reduce using rule 173 (expr -> expr BXOR expr .)
    COMMA           reduce using rule 173 (expr -> expr BXOR expr .)
    ASSIGNPLUS      reduce using rule 173 (expr -> expr BXOR expr .)
    ASSIGNMINUS     reduce using rule 173 (expr -> expr BXOR expr .)
    ASSIGNDIVIDE    reduce using rule 173 (expr -> expr BXOR expr .)
    ASSIGNTIMES     reduce using rule 173 (expr -> expr BXOR expr .)
    ASSIGNBOR       reduce using rule 173 (expr -> expr BXOR expr .)
    ASSIGNBAND      reduce using rule 173 (expr -> expr BXOR expr .)
    ASSIGNBXOR      reduce using rule 173 (expr -> expr BXOR expr .)
    ASSIGN          reduce using rule 173 (expr -> expr BXOR expr .)
    TLTHAN          reduce using rule 173 (expr -> expr BXOR expr .)
    RSBRACKET       reduce using rule 173 (expr -> expr BXOR expr .)
    RPAREN          reduce using rule 173 (expr -> expr BXOR expr .)
    COLON           reduce using rule 173 (expr -> expr BXOR expr .)
    RBRACKET        reduce using rule 173 (expr -> expr BXOR expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    INSTANCEOF      shift and go to state 183
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! LSHIFT          [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! LLSHIFT         [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! RRSHIFT         [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! DOT             [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! EQUAL           [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! GTHAN           [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! GTHANEQ         [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! LTHAN           [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! LTHANEQ         [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! NOTEQUAL        [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! PLUS            [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! MINUS           [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! DIVIDE          [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! TIMES           [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! IN              [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! INC             [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! DEC             [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! LSBRACKET       [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! LPAREN          [ reduce using rule 173 (expr -> expr BXOR expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! MOD             [ shift and go to state 190 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 252

    (191) expr -> expr lsbracket_restrict expr . rsbracket_restrict
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (153) rsbracket_restrict -> . RSBRACKET
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    RSBRACKET       shift and go to state 303
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    rsbracket_restrict             shift and go to state 302
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 253

    (182) expr -> expr LTHANEQ expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 182 (expr -> expr LTHANEQ expr .)
    LAND            reduce using rule 182 (expr -> expr LTHANEQ expr .)
    LOR             reduce using rule 182 (expr -> expr LTHANEQ expr .)
    BOR             reduce using rule 182 (expr -> expr LTHANEQ expr .)
    BXOR            reduce using rule 182 (expr -> expr LTHANEQ expr .)
    BAND            reduce using rule 182 (expr -> expr LTHANEQ expr .)
    EQUAL           reduce using rule 182 (expr -> expr LTHANEQ expr .)
    EQUAL_STRICT    reduce using rule 182 (expr -> expr LTHANEQ expr .)
    NOTEQUAL_STRICT reduce using rule 182 (expr -> expr LTHANEQ expr .)
    GTHAN           reduce using rule 182 (expr -> expr LTHANEQ expr .)
    GTHANEQ         reduce using rule 182 (expr -> expr LTHANEQ expr .)
    LTHAN           reduce using rule 182 (expr -> expr LTHANEQ expr .)
    MOD             reduce using rule 182 (expr -> expr LTHANEQ expr .)
    LTHANEQ         reduce using rule 182 (expr -> expr LTHANEQ expr .)
    NOTEQUAL        reduce using rule 182 (expr -> expr LTHANEQ expr .)
    QEST            reduce using rule 182 (expr -> expr LTHANEQ expr .)
    COMMA           reduce using rule 182 (expr -> expr LTHANEQ expr .)
    ASSIGNPLUS      reduce using rule 182 (expr -> expr LTHANEQ expr .)
    ASSIGNMINUS     reduce using rule 182 (expr -> expr LTHANEQ expr .)
    ASSIGNDIVIDE    reduce using rule 182 (expr -> expr LTHANEQ expr .)
    ASSIGNTIMES     reduce using rule 182 (expr -> expr LTHANEQ expr .)
    ASSIGNBOR       reduce using rule 182 (expr -> expr LTHANEQ expr .)
    ASSIGNBAND      reduce using rule 182 (expr -> expr LTHANEQ expr .)
    ASSIGNBXOR      reduce using rule 182 (expr -> expr LTHANEQ expr .)
    ASSIGN          reduce using rule 182 (expr -> expr LTHANEQ expr .)
    TLTHAN          reduce using rule 182 (expr -> expr LTHANEQ expr .)
    RSBRACKET       reduce using rule 182 (expr -> expr LTHANEQ expr .)
    RPAREN          reduce using rule 182 (expr -> expr LTHANEQ expr .)
    COLON           reduce using rule 182 (expr -> expr LTHANEQ expr .)
    RBRACKET        reduce using rule 182 (expr -> expr LTHANEQ expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    INSTANCEOF      shift and go to state 183
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! LSHIFT          [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! LLSHIFT         [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! RRSHIFT         [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! DOT             [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! INSTANCEOF      [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! PLUS            [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! MINUS           [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! DIVIDE          [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! TIMES           [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! IN              [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! INC             [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! DEC             [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! LSBRACKET       [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! LPAREN          [ reduce using rule 182 (expr -> expr LTHANEQ expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 254

    (184) expr -> expr PLUS expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 184 (expr -> expr PLUS expr .)
    RSHIFT          reduce using rule 184 (expr -> expr PLUS expr .)
    LSHIFT          reduce using rule 184 (expr -> expr PLUS expr .)
    LLSHIFT         reduce using rule 184 (expr -> expr PLUS expr .)
    RRSHIFT         reduce using rule 184 (expr -> expr PLUS expr .)
    LAND            reduce using rule 184 (expr -> expr PLUS expr .)
    LOR             reduce using rule 184 (expr -> expr PLUS expr .)
    BOR             reduce using rule 184 (expr -> expr PLUS expr .)
    INSTANCEOF      reduce using rule 184 (expr -> expr PLUS expr .)
    BXOR            reduce using rule 184 (expr -> expr PLUS expr .)
    BAND            reduce using rule 184 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 184 (expr -> expr PLUS expr .)
    EQUAL_STRICT    reduce using rule 184 (expr -> expr PLUS expr .)
    NOTEQUAL_STRICT reduce using rule 184 (expr -> expr PLUS expr .)
    GTHAN           reduce using rule 184 (expr -> expr PLUS expr .)
    GTHANEQ         reduce using rule 184 (expr -> expr PLUS expr .)
    LTHAN           reduce using rule 184 (expr -> expr PLUS expr .)
    MOD             reduce using rule 184 (expr -> expr PLUS expr .)
    LTHANEQ         reduce using rule 184 (expr -> expr PLUS expr .)
    NOTEQUAL        reduce using rule 184 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 184 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 184 (expr -> expr PLUS expr .)
    IN              reduce using rule 184 (expr -> expr PLUS expr .)
    QEST            reduce using rule 184 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 184 (expr -> expr PLUS expr .)
    ASSIGNPLUS      reduce using rule 184 (expr -> expr PLUS expr .)
    ASSIGNMINUS     reduce using rule 184 (expr -> expr PLUS expr .)
    ASSIGNDIVIDE    reduce using rule 184 (expr -> expr PLUS expr .)
    ASSIGNTIMES     reduce using rule 184 (expr -> expr PLUS expr .)
    ASSIGNBOR       reduce using rule 184 (expr -> expr PLUS expr .)
    ASSIGNBAND      reduce using rule 184 (expr -> expr PLUS expr .)
    ASSIGNBXOR      reduce using rule 184 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 184 (expr -> expr PLUS expr .)
    TLTHAN          reduce using rule 184 (expr -> expr PLUS expr .)
    RSBRACKET       reduce using rule 184 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 184 (expr -> expr PLUS expr .)
    COLON           reduce using rule 184 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 184 (expr -> expr PLUS expr .)
    DOT             shift and go to state 160
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 184 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 184 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 184 (expr -> expr PLUS expr .) ]
  ! INC             [ reduce using rule 184 (expr -> expr PLUS expr .) ]
  ! DEC             [ reduce using rule 184 (expr -> expr PLUS expr .) ]
  ! LSBRACKET       [ reduce using rule 184 (expr -> expr PLUS expr .) ]
  ! LPAREN          [ reduce using rule 184 (expr -> expr PLUS expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! PLUS            [ shift and go to state 169 ]
  ! MINUS           [ shift and go to state 159 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 255

    (179) expr -> expr GTHANEQ expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 179 (expr -> expr GTHANEQ expr .)
    LAND            reduce using rule 179 (expr -> expr GTHANEQ expr .)
    LOR             reduce using rule 179 (expr -> expr GTHANEQ expr .)
    BOR             reduce using rule 179 (expr -> expr GTHANEQ expr .)
    BXOR            reduce using rule 179 (expr -> expr GTHANEQ expr .)
    BAND            reduce using rule 179 (expr -> expr GTHANEQ expr .)
    EQUAL           reduce using rule 179 (expr -> expr GTHANEQ expr .)
    EQUAL_STRICT    reduce using rule 179 (expr -> expr GTHANEQ expr .)
    NOTEQUAL_STRICT reduce using rule 179 (expr -> expr GTHANEQ expr .)
    GTHAN           reduce using rule 179 (expr -> expr GTHANEQ expr .)
    GTHANEQ         reduce using rule 179 (expr -> expr GTHANEQ expr .)
    LTHAN           reduce using rule 179 (expr -> expr GTHANEQ expr .)
    MOD             reduce using rule 179 (expr -> expr GTHANEQ expr .)
    LTHANEQ         reduce using rule 179 (expr -> expr GTHANEQ expr .)
    NOTEQUAL        reduce using rule 179 (expr -> expr GTHANEQ expr .)
    QEST            reduce using rule 179 (expr -> expr GTHANEQ expr .)
    COMMA           reduce using rule 179 (expr -> expr GTHANEQ expr .)
    ASSIGNPLUS      reduce using rule 179 (expr -> expr GTHANEQ expr .)
    ASSIGNMINUS     reduce using rule 179 (expr -> expr GTHANEQ expr .)
    ASSIGNDIVIDE    reduce using rule 179 (expr -> expr GTHANEQ expr .)
    ASSIGNTIMES     reduce using rule 179 (expr -> expr GTHANEQ expr .)
    ASSIGNBOR       reduce using rule 179 (expr -> expr GTHANEQ expr .)
    ASSIGNBAND      reduce using rule 179 (expr -> expr GTHANEQ expr .)
    ASSIGNBXOR      reduce using rule 179 (expr -> expr GTHANEQ expr .)
    ASSIGN          reduce using rule 179 (expr -> expr GTHANEQ expr .)
    TLTHAN          reduce using rule 179 (expr -> expr GTHANEQ expr .)
    RSBRACKET       reduce using rule 179 (expr -> expr GTHANEQ expr .)
    RPAREN          reduce using rule 179 (expr -> expr GTHANEQ expr .)
    COLON           reduce using rule 179 (expr -> expr GTHANEQ expr .)
    RBRACKET        reduce using rule 179 (expr -> expr GTHANEQ expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    INSTANCEOF      shift and go to state 183
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! LSHIFT          [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! LLSHIFT         [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! RRSHIFT         [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! DOT             [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! INSTANCEOF      [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! PLUS            [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! MINUS           [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! DIVIDE          [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! TIMES           [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! IN              [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! INC             [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! DEC             [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! LSBRACKET       [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! LPAREN          [ reduce using rule 179 (expr -> expr GTHANEQ expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 256

    (177) expr -> expr NOTEQUAL_STRICT expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    LAND            reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    LOR             reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    BOR             reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    BXOR            reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    BAND            reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    EQUAL           reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    EQUAL_STRICT    reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    NOTEQUAL_STRICT reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    GTHAN           reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    GTHANEQ         reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    LTHAN           reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    MOD             reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    LTHANEQ         reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    NOTEQUAL        reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    QEST            reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    COMMA           reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNPLUS      reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNMINUS     reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNDIVIDE    reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNTIMES     reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNBOR       reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNBAND      reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNBXOR      reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGN          reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    TLTHAN          reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    RSBRACKET       reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    RPAREN          reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    COLON           reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    RBRACKET        reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    INSTANCEOF      shift and go to state 183
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LSHIFT          [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LLSHIFT         [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! RRSHIFT         [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! DOT             [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! INSTANCEOF      [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! PLUS            [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! MINUS           [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! DIVIDE          [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! TIMES           [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! IN              [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! INC             [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! DEC             [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LSBRACKET       [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LPAREN          [ reduce using rule 177 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 257

    (186) expr -> expr DIVIDE expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 186 (expr -> expr DIVIDE expr .)
    RSHIFT          reduce using rule 186 (expr -> expr DIVIDE expr .)
    LSHIFT          reduce using rule 186 (expr -> expr DIVIDE expr .)
    LLSHIFT         reduce using rule 186 (expr -> expr DIVIDE expr .)
    RRSHIFT         reduce using rule 186 (expr -> expr DIVIDE expr .)
    LAND            reduce using rule 186 (expr -> expr DIVIDE expr .)
    LOR             reduce using rule 186 (expr -> expr DIVIDE expr .)
    BOR             reduce using rule 186 (expr -> expr DIVIDE expr .)
    INSTANCEOF      reduce using rule 186 (expr -> expr DIVIDE expr .)
    BXOR            reduce using rule 186 (expr -> expr DIVIDE expr .)
    BAND            reduce using rule 186 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 186 (expr -> expr DIVIDE expr .)
    EQUAL_STRICT    reduce using rule 186 (expr -> expr DIVIDE expr .)
    NOTEQUAL_STRICT reduce using rule 186 (expr -> expr DIVIDE expr .)
    GTHAN           reduce using rule 186 (expr -> expr DIVIDE expr .)
    GTHANEQ         reduce using rule 186 (expr -> expr DIVIDE expr .)
    LTHAN           reduce using rule 186 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 186 (expr -> expr DIVIDE expr .)
    LTHANEQ         reduce using rule 186 (expr -> expr DIVIDE expr .)
    NOTEQUAL        reduce using rule 186 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 186 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 186 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 186 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 186 (expr -> expr DIVIDE expr .)
    IN              reduce using rule 186 (expr -> expr DIVIDE expr .)
    QEST            reduce using rule 186 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 186 (expr -> expr DIVIDE expr .)
    ASSIGNPLUS      reduce using rule 186 (expr -> expr DIVIDE expr .)
    ASSIGNMINUS     reduce using rule 186 (expr -> expr DIVIDE expr .)
    ASSIGNDIVIDE    reduce using rule 186 (expr -> expr DIVIDE expr .)
    ASSIGNTIMES     reduce using rule 186 (expr -> expr DIVIDE expr .)
    ASSIGNBOR       reduce using rule 186 (expr -> expr DIVIDE expr .)
    ASSIGNBAND      reduce using rule 186 (expr -> expr DIVIDE expr .)
    ASSIGNBXOR      reduce using rule 186 (expr -> expr DIVIDE expr .)
    ASSIGN          reduce using rule 186 (expr -> expr DIVIDE expr .)
    TLTHAN          reduce using rule 186 (expr -> expr DIVIDE expr .)
    RSBRACKET       reduce using rule 186 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 186 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 186 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 186 (expr -> expr DIVIDE expr .)
    DOT             shift and go to state 160
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 186 (expr -> expr DIVIDE expr .) ]
  ! INC             [ reduce using rule 186 (expr -> expr DIVIDE expr .) ]
  ! DEC             [ reduce using rule 186 (expr -> expr DIVIDE expr .) ]
  ! LSBRACKET       [ reduce using rule 186 (expr -> expr DIVIDE expr .) ]
  ! LPAREN          [ reduce using rule 186 (expr -> expr DIVIDE expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! PLUS            [ shift and go to state 169 ]
  ! MINUS           [ shift and go to state 159 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! TIMES           [ shift and go to state 177 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 258

    (110) func_call -> template_ref_opt LPAREN . exprlist RPAREN
    (111) func_call -> template_ref_opt LPAREN . RPAREN
    (106) exprlist -> . expr
    (107) exprlist -> . exprlist COMMA expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    RPAREN          shift and go to state 304
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    exprlist                       shift and go to state 305
    bitinv                         shift and go to state 36
    expr                           shift and go to state 78
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 259

    (187) expr -> expr TIMES expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 187 (expr -> expr TIMES expr .)
    RSHIFT          reduce using rule 187 (expr -> expr TIMES expr .)
    LSHIFT          reduce using rule 187 (expr -> expr TIMES expr .)
    LLSHIFT         reduce using rule 187 (expr -> expr TIMES expr .)
    RRSHIFT         reduce using rule 187 (expr -> expr TIMES expr .)
    LAND            reduce using rule 187 (expr -> expr TIMES expr .)
    LOR             reduce using rule 187 (expr -> expr TIMES expr .)
    BOR             reduce using rule 187 (expr -> expr TIMES expr .)
    INSTANCEOF      reduce using rule 187 (expr -> expr TIMES expr .)
    BXOR            reduce using rule 187 (expr -> expr TIMES expr .)
    BAND            reduce using rule 187 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 187 (expr -> expr TIMES expr .)
    EQUAL_STRICT    reduce using rule 187 (expr -> expr TIMES expr .)
    NOTEQUAL_STRICT reduce using rule 187 (expr -> expr TIMES expr .)
    GTHAN           reduce using rule 187 (expr -> expr TIMES expr .)
    GTHANEQ         reduce using rule 187 (expr -> expr TIMES expr .)
    LTHAN           reduce using rule 187 (expr -> expr TIMES expr .)
    MOD             reduce using rule 187 (expr -> expr TIMES expr .)
    LTHANEQ         reduce using rule 187 (expr -> expr TIMES expr .)
    NOTEQUAL        reduce using rule 187 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 187 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 187 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 187 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 187 (expr -> expr TIMES expr .)
    IN              reduce using rule 187 (expr -> expr TIMES expr .)
    QEST            reduce using rule 187 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 187 (expr -> expr TIMES expr .)
    ASSIGNPLUS      reduce using rule 187 (expr -> expr TIMES expr .)
    ASSIGNMINUS     reduce using rule 187 (expr -> expr TIMES expr .)
    ASSIGNDIVIDE    reduce using rule 187 (expr -> expr TIMES expr .)
    ASSIGNTIMES     reduce using rule 187 (expr -> expr TIMES expr .)
    ASSIGNBOR       reduce using rule 187 (expr -> expr TIMES expr .)
    ASSIGNBAND      reduce using rule 187 (expr -> expr TIMES expr .)
    ASSIGNBXOR      reduce using rule 187 (expr -> expr TIMES expr .)
    ASSIGN          reduce using rule 187 (expr -> expr TIMES expr .)
    TLTHAN          reduce using rule 187 (expr -> expr TIMES expr .)
    RSBRACKET       reduce using rule 187 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 187 (expr -> expr TIMES expr .)
    COLON           reduce using rule 187 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 187 (expr -> expr TIMES expr .)
    DOT             shift and go to state 160
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 187 (expr -> expr TIMES expr .) ]
  ! INC             [ reduce using rule 187 (expr -> expr TIMES expr .) ]
  ! DEC             [ reduce using rule 187 (expr -> expr TIMES expr .) ]
  ! LSBRACKET       [ reduce using rule 187 (expr -> expr TIMES expr .) ]
  ! LPAREN          [ reduce using rule 187 (expr -> expr TIMES expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! PLUS            [ shift and go to state 169 ]
  ! MINUS           [ shift and go to state 159 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! TIMES           [ shift and go to state 177 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 260

    (180) expr -> expr LTHAN expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 180 (expr -> expr LTHAN expr .)
    LAND            reduce using rule 180 (expr -> expr LTHAN expr .)
    LOR             reduce using rule 180 (expr -> expr LTHAN expr .)
    BOR             reduce using rule 180 (expr -> expr LTHAN expr .)
    BXOR            reduce using rule 180 (expr -> expr LTHAN expr .)
    BAND            reduce using rule 180 (expr -> expr LTHAN expr .)
    EQUAL           reduce using rule 180 (expr -> expr LTHAN expr .)
    EQUAL_STRICT    reduce using rule 180 (expr -> expr LTHAN expr .)
    NOTEQUAL_STRICT reduce using rule 180 (expr -> expr LTHAN expr .)
    GTHAN           reduce using rule 180 (expr -> expr LTHAN expr .)
    GTHANEQ         reduce using rule 180 (expr -> expr LTHAN expr .)
    LTHAN           reduce using rule 180 (expr -> expr LTHAN expr .)
    MOD             reduce using rule 180 (expr -> expr LTHAN expr .)
    LTHANEQ         reduce using rule 180 (expr -> expr LTHAN expr .)
    NOTEQUAL        reduce using rule 180 (expr -> expr LTHAN expr .)
    QEST            reduce using rule 180 (expr -> expr LTHAN expr .)
    COMMA           reduce using rule 180 (expr -> expr LTHAN expr .)
    ASSIGNPLUS      reduce using rule 180 (expr -> expr LTHAN expr .)
    ASSIGNMINUS     reduce using rule 180 (expr -> expr LTHAN expr .)
    ASSIGNDIVIDE    reduce using rule 180 (expr -> expr LTHAN expr .)
    ASSIGNTIMES     reduce using rule 180 (expr -> expr LTHAN expr .)
    ASSIGNBOR       reduce using rule 180 (expr -> expr LTHAN expr .)
    ASSIGNBAND      reduce using rule 180 (expr -> expr LTHAN expr .)
    ASSIGNBXOR      reduce using rule 180 (expr -> expr LTHAN expr .)
    ASSIGN          reduce using rule 180 (expr -> expr LTHAN expr .)
    TLTHAN          reduce using rule 180 (expr -> expr LTHAN expr .)
    RSBRACKET       reduce using rule 180 (expr -> expr LTHAN expr .)
    RPAREN          reduce using rule 180 (expr -> expr LTHAN expr .)
    COLON           reduce using rule 180 (expr -> expr LTHAN expr .)
    RBRACKET        reduce using rule 180 (expr -> expr LTHAN expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    INSTANCEOF      shift and go to state 183
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! LSHIFT          [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! LLSHIFT         [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! RRSHIFT         [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! DOT             [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! INSTANCEOF      [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! PLUS            [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! MINUS           [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! DIVIDE          [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! TIMES           [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! IN              [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! INC             [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! DEC             [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! LSBRACKET       [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! LPAREN          [ reduce using rule 180 (expr -> expr LTHAN expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 261

    (174) expr -> expr BAND expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 174 (expr -> expr BAND expr .)
    LAND            reduce using rule 174 (expr -> expr BAND expr .)
    LOR             reduce using rule 174 (expr -> expr BAND expr .)
    BOR             reduce using rule 174 (expr -> expr BAND expr .)
    BXOR            reduce using rule 174 (expr -> expr BAND expr .)
    BAND            reduce using rule 174 (expr -> expr BAND expr .)
    MOD             reduce using rule 174 (expr -> expr BAND expr .)
    QEST            reduce using rule 174 (expr -> expr BAND expr .)
    COMMA           reduce using rule 174 (expr -> expr BAND expr .)
    ASSIGNPLUS      reduce using rule 174 (expr -> expr BAND expr .)
    ASSIGNMINUS     reduce using rule 174 (expr -> expr BAND expr .)
    ASSIGNDIVIDE    reduce using rule 174 (expr -> expr BAND expr .)
    ASSIGNTIMES     reduce using rule 174 (expr -> expr BAND expr .)
    ASSIGNBOR       reduce using rule 174 (expr -> expr BAND expr .)
    ASSIGNBAND      reduce using rule 174 (expr -> expr BAND expr .)
    ASSIGNBXOR      reduce using rule 174 (expr -> expr BAND expr .)
    ASSIGN          reduce using rule 174 (expr -> expr BAND expr .)
    TLTHAN          reduce using rule 174 (expr -> expr BAND expr .)
    RSBRACKET       reduce using rule 174 (expr -> expr BAND expr .)
    RPAREN          reduce using rule 174 (expr -> expr BAND expr .)
    COLON           reduce using rule 174 (expr -> expr BAND expr .)
    RBRACKET        reduce using rule 174 (expr -> expr BAND expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    INSTANCEOF      shift and go to state 183
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! LSHIFT          [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! LLSHIFT         [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! RRSHIFT         [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! DOT             [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! INSTANCEOF      [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! EQUAL           [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! GTHAN           [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! GTHANEQ         [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! LTHAN           [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! LTHANEQ         [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! NOTEQUAL        [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! PLUS            [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! MINUS           [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! DIVIDE          [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! TIMES           [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! IN              [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! INC             [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! DEC             [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! LSBRACKET       [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! LPAREN          [ reduce using rule 174 (expr -> expr BAND expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! MOD             [ shift and go to state 190 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 262

    (188) expr -> expr IN expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 188 (expr -> expr IN expr .)
    LAND            reduce using rule 188 (expr -> expr IN expr .)
    LOR             reduce using rule 188 (expr -> expr IN expr .)
    BOR             reduce using rule 188 (expr -> expr IN expr .)
    INSTANCEOF      reduce using rule 188 (expr -> expr IN expr .)
    BXOR            reduce using rule 188 (expr -> expr IN expr .)
    BAND            reduce using rule 188 (expr -> expr IN expr .)
    EQUAL           reduce using rule 188 (expr -> expr IN expr .)
    EQUAL_STRICT    reduce using rule 188 (expr -> expr IN expr .)
    NOTEQUAL_STRICT reduce using rule 188 (expr -> expr IN expr .)
    GTHAN           reduce using rule 188 (expr -> expr IN expr .)
    GTHANEQ         reduce using rule 188 (expr -> expr IN expr .)
    LTHAN           reduce using rule 188 (expr -> expr IN expr .)
    MOD             reduce using rule 188 (expr -> expr IN expr .)
    LTHANEQ         reduce using rule 188 (expr -> expr IN expr .)
    NOTEQUAL        reduce using rule 188 (expr -> expr IN expr .)
    IN              reduce using rule 188 (expr -> expr IN expr .)
    QEST            reduce using rule 188 (expr -> expr IN expr .)
    COMMA           reduce using rule 188 (expr -> expr IN expr .)
    ASSIGNPLUS      reduce using rule 188 (expr -> expr IN expr .)
    ASSIGNMINUS     reduce using rule 188 (expr -> expr IN expr .)
    ASSIGNDIVIDE    reduce using rule 188 (expr -> expr IN expr .)
    ASSIGNTIMES     reduce using rule 188 (expr -> expr IN expr .)
    ASSIGNBOR       reduce using rule 188 (expr -> expr IN expr .)
    ASSIGNBAND      reduce using rule 188 (expr -> expr IN expr .)
    ASSIGNBXOR      reduce using rule 188 (expr -> expr IN expr .)
    ASSIGN          reduce using rule 188 (expr -> expr IN expr .)
    TLTHAN          reduce using rule 188 (expr -> expr IN expr .)
    RSBRACKET       reduce using rule 188 (expr -> expr IN expr .)
    RPAREN          reduce using rule 188 (expr -> expr IN expr .)
    COLON           reduce using rule 188 (expr -> expr IN expr .)
    RBRACKET        reduce using rule 188 (expr -> expr IN expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! LSHIFT          [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! LLSHIFT         [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! RRSHIFT         [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! DOT             [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! PLUS            [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! MINUS           [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! DIVIDE          [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! TIMES           [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! INC             [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! DEC             [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! LSBRACKET       [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! LPAREN          [ reduce using rule 188 (expr -> expr IN expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 263

    (167) expr -> expr RRSHIFT expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 167 (expr -> expr RRSHIFT expr .)
    RSHIFT          reduce using rule 167 (expr -> expr RRSHIFT expr .)
    LSHIFT          reduce using rule 167 (expr -> expr RRSHIFT expr .)
    LLSHIFT         reduce using rule 167 (expr -> expr RRSHIFT expr .)
    RRSHIFT         reduce using rule 167 (expr -> expr RRSHIFT expr .)
    LAND            reduce using rule 167 (expr -> expr RRSHIFT expr .)
    LOR             reduce using rule 167 (expr -> expr RRSHIFT expr .)
    BOR             reduce using rule 167 (expr -> expr RRSHIFT expr .)
    INSTANCEOF      reduce using rule 167 (expr -> expr RRSHIFT expr .)
    BXOR            reduce using rule 167 (expr -> expr RRSHIFT expr .)
    BAND            reduce using rule 167 (expr -> expr RRSHIFT expr .)
    EQUAL           reduce using rule 167 (expr -> expr RRSHIFT expr .)
    EQUAL_STRICT    reduce using rule 167 (expr -> expr RRSHIFT expr .)
    NOTEQUAL_STRICT reduce using rule 167 (expr -> expr RRSHIFT expr .)
    GTHAN           reduce using rule 167 (expr -> expr RRSHIFT expr .)
    GTHANEQ         reduce using rule 167 (expr -> expr RRSHIFT expr .)
    LTHAN           reduce using rule 167 (expr -> expr RRSHIFT expr .)
    MOD             reduce using rule 167 (expr -> expr RRSHIFT expr .)
    LTHANEQ         reduce using rule 167 (expr -> expr RRSHIFT expr .)
    NOTEQUAL        reduce using rule 167 (expr -> expr RRSHIFT expr .)
    IN              reduce using rule 167 (expr -> expr RRSHIFT expr .)
    QEST            reduce using rule 167 (expr -> expr RRSHIFT expr .)
    COMMA           reduce using rule 167 (expr -> expr RRSHIFT expr .)
    ASSIGNPLUS      reduce using rule 167 (expr -> expr RRSHIFT expr .)
    ASSIGNMINUS     reduce using rule 167 (expr -> expr RRSHIFT expr .)
    ASSIGNDIVIDE    reduce using rule 167 (expr -> expr RRSHIFT expr .)
    ASSIGNTIMES     reduce using rule 167 (expr -> expr RRSHIFT expr .)
    ASSIGNBOR       reduce using rule 167 (expr -> expr RRSHIFT expr .)
    ASSIGNBAND      reduce using rule 167 (expr -> expr RRSHIFT expr .)
    ASSIGNBXOR      reduce using rule 167 (expr -> expr RRSHIFT expr .)
    ASSIGN          reduce using rule 167 (expr -> expr RRSHIFT expr .)
    TLTHAN          reduce using rule 167 (expr -> expr RRSHIFT expr .)
    RSBRACKET       reduce using rule 167 (expr -> expr RRSHIFT expr .)
    RPAREN          reduce using rule 167 (expr -> expr RRSHIFT expr .)
    COLON           reduce using rule 167 (expr -> expr RRSHIFT expr .)
    RBRACKET        reduce using rule 167 (expr -> expr RRSHIFT expr .)
    DOT             shift and go to state 160
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 167 (expr -> expr RRSHIFT expr .) ]
  ! PLUS            [ reduce using rule 167 (expr -> expr RRSHIFT expr .) ]
  ! MINUS           [ reduce using rule 167 (expr -> expr RRSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 167 (expr -> expr RRSHIFT expr .) ]
  ! TIMES           [ reduce using rule 167 (expr -> expr RRSHIFT expr .) ]
  ! INC             [ reduce using rule 167 (expr -> expr RRSHIFT expr .) ]
  ! DEC             [ reduce using rule 167 (expr -> expr RRSHIFT expr .) ]
  ! LSBRACKET       [ reduce using rule 167 (expr -> expr RRSHIFT expr .) ]
  ! LPAREN          [ reduce using rule 167 (expr -> expr RRSHIFT expr .) ]
  ! RSHIFT          [ shift and go to state 149 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LLSHIFT         [ shift and go to state 148 ]
  ! RRSHIFT         [ shift and go to state 182 ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! IN              [ shift and go to state 180 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 264

    (172) expr -> expr INSTANCEOF expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    LAND            reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    LOR             reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    BOR             reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    INSTANCEOF      reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    BXOR            reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    BAND            reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    EQUAL           reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    EQUAL_STRICT    reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    NOTEQUAL_STRICT reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    GTHAN           reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    GTHANEQ         reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    LTHAN           reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    MOD             reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    LTHANEQ         reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    NOTEQUAL        reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    QEST            reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    COMMA           reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    ASSIGNPLUS      reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    ASSIGNMINUS     reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    ASSIGNDIVIDE    reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    ASSIGNTIMES     reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    ASSIGNBOR       reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    ASSIGNBAND      reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    ASSIGNBXOR      reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    ASSIGN          reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    TLTHAN          reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    RSBRACKET       reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    RPAREN          reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    COLON           reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    RBRACKET        reduce using rule 172 (expr -> expr INSTANCEOF expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! LSHIFT          [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! LLSHIFT         [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! RRSHIFT         [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! DOT             [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! PLUS            [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! MINUS           [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! DIVIDE          [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! TIMES           [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! IN              [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! INC             [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! DEC             [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! LSBRACKET       [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! LPAREN          [ reduce using rule 172 (expr -> expr INSTANCEOF expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! INSTANCEOF      [ shift and go to state 183 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 265

    (176) expr -> expr EQUAL_STRICT expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    LAND            reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    LOR             reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    BOR             reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    BXOR            reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    BAND            reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    EQUAL           reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    EQUAL_STRICT    reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    NOTEQUAL_STRICT reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    GTHAN           reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    GTHANEQ         reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    LTHAN           reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    MOD             reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    LTHANEQ         reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    NOTEQUAL        reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    QEST            reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    COMMA           reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNPLUS      reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNMINUS     reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNDIVIDE    reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNTIMES     reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNBOR       reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNBAND      reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNBXOR      reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    ASSIGN          reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    TLTHAN          reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    RSBRACKET       reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    RPAREN          reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    COLON           reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    RBRACKET        reduce using rule 176 (expr -> expr EQUAL_STRICT expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    INSTANCEOF      shift and go to state 183
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! LSHIFT          [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! LLSHIFT         [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! RRSHIFT         [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! DOT             [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! INSTANCEOF      [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! PLUS            [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! MINUS           [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! DIVIDE          [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! TIMES           [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! IN              [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! INC             [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! DEC             [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! LSBRACKET       [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! LPAREN          [ reduce using rule 176 (expr -> expr EQUAL_STRICT expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 266

    (178) expr -> expr GTHAN expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 178 (expr -> expr GTHAN expr .)
    LAND            reduce using rule 178 (expr -> expr GTHAN expr .)
    LOR             reduce using rule 178 (expr -> expr GTHAN expr .)
    BOR             reduce using rule 178 (expr -> expr GTHAN expr .)
    BXOR            reduce using rule 178 (expr -> expr GTHAN expr .)
    BAND            reduce using rule 178 (expr -> expr GTHAN expr .)
    EQUAL           reduce using rule 178 (expr -> expr GTHAN expr .)
    EQUAL_STRICT    reduce using rule 178 (expr -> expr GTHAN expr .)
    NOTEQUAL_STRICT reduce using rule 178 (expr -> expr GTHAN expr .)
    GTHAN           reduce using rule 178 (expr -> expr GTHAN expr .)
    GTHANEQ         reduce using rule 178 (expr -> expr GTHAN expr .)
    LTHAN           reduce using rule 178 (expr -> expr GTHAN expr .)
    MOD             reduce using rule 178 (expr -> expr GTHAN expr .)
    LTHANEQ         reduce using rule 178 (expr -> expr GTHAN expr .)
    NOTEQUAL        reduce using rule 178 (expr -> expr GTHAN expr .)
    QEST            reduce using rule 178 (expr -> expr GTHAN expr .)
    COMMA           reduce using rule 178 (expr -> expr GTHAN expr .)
    ASSIGNPLUS      reduce using rule 178 (expr -> expr GTHAN expr .)
    ASSIGNMINUS     reduce using rule 178 (expr -> expr GTHAN expr .)
    ASSIGNDIVIDE    reduce using rule 178 (expr -> expr GTHAN expr .)
    ASSIGNTIMES     reduce using rule 178 (expr -> expr GTHAN expr .)
    ASSIGNBOR       reduce using rule 178 (expr -> expr GTHAN expr .)
    ASSIGNBAND      reduce using rule 178 (expr -> expr GTHAN expr .)
    ASSIGNBXOR      reduce using rule 178 (expr -> expr GTHAN expr .)
    ASSIGN          reduce using rule 178 (expr -> expr GTHAN expr .)
    TLTHAN          reduce using rule 178 (expr -> expr GTHAN expr .)
    RSBRACKET       reduce using rule 178 (expr -> expr GTHAN expr .)
    RPAREN          reduce using rule 178 (expr -> expr GTHAN expr .)
    COLON           reduce using rule 178 (expr -> expr GTHAN expr .)
    RBRACKET        reduce using rule 178 (expr -> expr GTHAN expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    INSTANCEOF      shift and go to state 183
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! LSHIFT          [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! LLSHIFT         [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! RRSHIFT         [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! DOT             [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! INSTANCEOF      [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! PLUS            [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! MINUS           [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! DIVIDE          [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! TIMES           [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! IN              [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! INC             [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! DEC             [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! LSBRACKET       [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! LPAREN          [ reduce using rule 178 (expr -> expr GTHAN expr .) ]
  ! LAND            [ shift and go to state 162 ]
  ! LOR             [ shift and go to state 153 ]
  ! BOR             [ shift and go to state 151 ]
  ! BXOR            [ shift and go to state 164 ]
  ! BAND            [ shift and go to state 179 ]
  ! EQUAL           [ shift and go to state 152 ]
  ! EQUAL_STRICT    [ shift and go to state 184 ]
  ! NOTEQUAL_STRICT [ shift and go to state 174 ]
  ! GTHAN           [ shift and go to state 186 ]
  ! GTHANEQ         [ shift and go to state 170 ]
  ! LTHAN           [ shift and go to state 178 ]
  ! MOD             [ shift and go to state 190 ]
  ! LTHANEQ         [ shift and go to state 168 ]
  ! NOTEQUAL        [ shift and go to state 147 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 267

    (162) expr -> expr cmplx_assign expr .
    (163) expr -> expr cmplx_assign expr . COLON var_type SEMI
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for LLSHIFT resolved as shift
  ! shift/reduce conflict for RRSHIFT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for INSTANCEOF resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_STRICT resolved as shift
  ! shift/reduce conflict for NOTEQUAL_STRICT resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for QEST resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for ASSIGNPLUS resolved as shift
  ! shift/reduce conflict for ASSIGNMINUS resolved as shift
  ! shift/reduce conflict for ASSIGNDIVIDE resolved as shift
  ! shift/reduce conflict for ASSIGNTIMES resolved as shift
  ! shift/reduce conflict for ASSIGNBOR resolved as shift
  ! shift/reduce conflict for ASSIGNBAND resolved as shift
  ! shift/reduce conflict for ASSIGNBXOR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
  ! shift/reduce conflict for TLTHAN resolved as shift
    SEMI            reduce using rule 162 (expr -> expr cmplx_assign expr .)
    RSBRACKET       reduce using rule 162 (expr -> expr cmplx_assign expr .)
    RPAREN          reduce using rule 162 (expr -> expr cmplx_assign expr .)
    RBRACKET        reduce using rule 162 (expr -> expr cmplx_assign expr .)
    COLON           shift and go to state 306
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

  ! RSHIFT          [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! LSHIFT          [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! LLSHIFT         [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! RRSHIFT         [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! DOT             [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! LAND            [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! LOR             [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! BOR             [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! INSTANCEOF      [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! BXOR            [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! BAND            [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! EQUAL           [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! GTHAN           [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! GTHANEQ         [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! LTHAN           [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! MOD             [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! LTHANEQ         [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! NOTEQUAL        [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! PLUS            [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! MINUS           [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! DIVIDE          [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! TIMES           [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! IN              [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! QEST            [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! COMMA           [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! INC             [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! DEC             [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNPLUS      [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNBOR       [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNBAND      [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGN          [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! LSBRACKET       [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! TLTHAN          [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! LPAREN          [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]
  ! COLON           [ reduce using rule 162 (expr -> expr cmplx_assign expr .) ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 268

    (201) expr -> expr COMMA expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 201 (expr -> expr COMMA expr .)
    MOD             reduce using rule 201 (expr -> expr COMMA expr .)
    COMMA           reduce using rule 201 (expr -> expr COMMA expr .)
    TLTHAN          reduce using rule 201 (expr -> expr COMMA expr .)
    RSBRACKET       reduce using rule 201 (expr -> expr COMMA expr .)
    RPAREN          reduce using rule 201 (expr -> expr COMMA expr .)
    COLON           reduce using rule 201 (expr -> expr COMMA expr .)
    RBRACKET        reduce using rule 201 (expr -> expr COMMA expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! LSHIFT          [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! LLSHIFT         [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! RRSHIFT         [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! DOT             [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! LAND            [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! LOR             [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! BOR             [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! INSTANCEOF      [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! BXOR            [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! BAND            [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! EQUAL           [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! GTHAN           [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! GTHANEQ         [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! LTHAN           [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! LTHANEQ         [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! NOTEQUAL        [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! PLUS            [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! MINUS           [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! DIVIDE          [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! TIMES           [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! IN              [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! QEST            [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! INC             [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! DEC             [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! ASSIGNPLUS      [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! ASSIGNBOR       [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! ASSIGNBAND      [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! ASSIGN          [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! LSBRACKET       [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! LPAREN          [ reduce using rule 201 (expr -> expr COMMA expr .) ]
  ! MOD             [ shift and go to state 190 ]
  ! COMMA           [ shift and go to state 188 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 269

    (181) expr -> expr MOD expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for LLSHIFT resolved as shift
  ! shift/reduce conflict for RRSHIFT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for INSTANCEOF resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_STRICT resolved as shift
  ! shift/reduce conflict for NOTEQUAL_STRICT resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for QEST resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for ASSIGNPLUS resolved as shift
  ! shift/reduce conflict for ASSIGNMINUS resolved as shift
  ! shift/reduce conflict for ASSIGNDIVIDE resolved as shift
  ! shift/reduce conflict for ASSIGNTIMES resolved as shift
  ! shift/reduce conflict for ASSIGNBOR resolved as shift
  ! shift/reduce conflict for ASSIGNBAND resolved as shift
  ! shift/reduce conflict for ASSIGNBXOR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
  ! shift/reduce conflict for TLTHAN resolved as shift
    SEMI            reduce using rule 181 (expr -> expr MOD expr .)
    RSBRACKET       reduce using rule 181 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 181 (expr -> expr MOD expr .)
    COLON           reduce using rule 181 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 181 (expr -> expr MOD expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

  ! RSHIFT          [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! LSHIFT          [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! LLSHIFT         [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! RRSHIFT         [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! DOT             [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! LAND            [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! LOR             [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! BOR             [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! INSTANCEOF      [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! BXOR            [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! BAND            [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! EQUAL           [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! GTHAN           [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! GTHANEQ         [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! LTHAN           [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! MOD             [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! LTHANEQ         [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! NOTEQUAL        [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! PLUS            [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! MINUS           [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! DIVIDE          [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! TIMES           [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! IN              [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! QEST            [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! COMMA           [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! INC             [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! DEC             [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! ASSIGNPLUS      [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! ASSIGNBOR       [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! ASSIGNBAND      [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! ASSIGN          [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! LSBRACKET       [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! TLTHAN          [ reduce using rule 181 (expr -> expr MOD expr .) ]
  ! LPAREN          [ reduce using rule 181 (expr -> expr MOD expr .) ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 270

    (220) dowhile -> DO ctrl_statement WHILE . paren_expr
    (203) paren_expr -> . LPAREN expr RPAREN
    (204) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 86

    paren_expr                     shift and go to state 307

state 271

    (235) if -> IF paren_expr ctrl_statement .

    SEMI            reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    FUNCTION        reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    IF              reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    ELSE            reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    WHILE           reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    WITH            reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    DO              reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    FOR             reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    RETURN          reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    YIELD           reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    BREAK           reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    CONTINUE        reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    THROW           reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    TRY             reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    CATCH           reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    SWITCH          reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    NATIVE          reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    NUMBER          reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    ID              reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    DELETE          reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    STRINGLIT       reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    LSBRACKET       reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    LPAREN          reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    MINUS           reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    NOT             reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    BITINV          reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    NEW             reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    INC             reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    DEC             reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    TYPEOF          reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    REGEXPR         reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    GLOBAL          reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    VAR             reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    TLTHAN          reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    LBRACKET        reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    RBRACKET        reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    $end            reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    CASE            reduce using rule 235 (if -> IF paren_expr ctrl_statement .)
    DEFAULT         reduce using rule 235 (if -> IF paren_expr ctrl_statement .)


state 272

    (139) obj_literal -> lbracket_restrict push_scope obj_lit_list . rbracket_restrict
    (137) obj_lit_list -> obj_lit_list . COMMA id_str_or_num COLON expr
    (138) obj_lit_list -> obj_lit_list . COMMA
    (123) rbracket_restrict -> . RBRACKET

    COMMA           shift and go to state 308
    RBRACKET        shift and go to state 197

    rbracket_restrict              shift and go to state 309

state 273

    (133) id_str_or_num -> NUMBER .

    COLON           reduce using rule 133 (id_str_or_num -> NUMBER .)


state 274

    (136) obj_lit_list -> id_str_or_num . COLON expr

    COLON           shift and go to state 310


state 275

    (134) id_str_or_num -> STRINGLIT .

    COLON           reduce using rule 134 (id_str_or_num -> STRINGLIT .)


state 276

    (132) id_str_or_num -> ID .

    COLON           reduce using rule 132 (id_str_or_num -> ID .)


state 277

    (107) exprlist -> exprlist COMMA expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    RPAREN          reduce using rule 107 (exprlist -> exprlist COMMA expr .)
    COMMA           reduce using rule 107 (exprlist -> exprlist COMMA expr .)
    RSBRACKET       reduce using rule 107 (exprlist -> exprlist COMMA expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

  ! COMMA           [ shift and go to state 188 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 278

    (91) simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt . var_type
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (74) id_var_type -> . ID

    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    ID              shift and go to state 110

    var_type                       shift and go to state 311
    id_var_type                    shift and go to state 111

state 279

    (203) paren_expr -> LPAREN expr RPAREN .

    LBRACKET        reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    ID              reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    FUNCTION        reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    FOR             reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    DO              reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    YIELD           reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    THROW           reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    TRY             reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    CATCH           reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    DELETE          reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    STRINGLIT       reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    LSBRACKET       reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    NOT             reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    BITINV          reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    NEW             reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    INC             reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    DEC             reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    TYPEOF          reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    REGEXPR         reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    VAR             reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    TLTHAN          reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    WITH            reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    SWITCH          reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    NATIVE          reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    CASE            reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)
    DEFAULT         reduce using rule 203 (paren_expr -> LPAREN expr RPAREN .)


state 280

    (128) exprfunction -> FUNCTION template_opt push_scope LPAREN . funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> FUNCTION template_opt push_scope LPAREN . RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (112) funcdeflist -> . var_decl_no_list
    (113) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (114) funcdeflist -> .
    (67) var_decl_no_list -> . var_type
    (68) var_decl_no_list -> . type_modifiers var_decl_no_list
    (69) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (74) id_var_type -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 314
    COMMA           reduce using rule 114 (funcdeflist -> .)
    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    ID              shift and go to state 110

  ! RPAREN          [ reduce using rule 114 (funcdeflist -> .) ]

    var_type                       shift and go to state 312
    var_decl_no_list               shift and go to state 315
    funcdeflist                    shift and go to state 316
    type_modifiers                 shift and go to state 313
    id_var_type                    shift and go to state 111

state 281

    (51) template -> lthan_restrict templatedeflist gthan_restrict .

    LPAREN          reduce using rule 51 (template -> lthan_restrict templatedeflist gthan_restrict .)


state 282

    (49) templatedeflist -> templatedeflist COMMA . var_type
    (50) templatedeflist -> templatedeflist COMMA . var_type ASSIGN var_type
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (74) id_var_type -> . ID

    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    ID              shift and go to state 110

    var_type                       shift and go to state 317
    id_var_type                    shift and go to state 111

state 283

    (48) templatedeflist -> var_type ASSIGN . var_type
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (74) id_var_type -> . ID

    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    ID              shift and go to state 110

    var_type                       shift and go to state 318
    id_var_type                    shift and go to state 111

state 284

    (121) function -> FUNCTION ID template_opt push_scope . LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (119) funcref -> FUNCTION ID template_opt push_scope . LPAREN funcdeflist RPAREN func_type_opt

    LPAREN          shift and go to state 319


state 285

    (213) for_decl -> for_var_decl SEMI . expr_opt SEMI expr_opt
    (207) expr_opt -> . expr
    (208) expr_opt -> .
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    SEMI            reduce using rule 208 (expr_opt -> .)
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    expr_opt                       shift and go to state 320
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 321
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 286

    (214) for_decl -> for_var_decl IN . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 322
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 287

    (215) for -> FOR LPAREN for_decl RPAREN . statement_nonctrl
    (216) for -> FOR LPAREN for_decl RPAREN . LBRACKET statementlist_opt RBRACKET
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 323
    SEMI            shift and go to state 63
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    FUNCTION        shift and go to state 124
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    FOR             shift and go to state 32
    DO              shift and go to state 59
    WHILE           shift and go to state 41
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 120
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 130
    strlit                         shift and go to state 24
    for                            shift and go to state 123
    not                            shift and go to state 14
    obj_literal                    shift and go to state 27
    dowhile                        shift and go to state 132
    new                            shift and go to state 29
    inc                            shift and go to state 62
    template_ref                   shift and go to state 30
    return                         shift and go to state 118
    else                           shift and go to state 133
    break                          shift and go to state 119
    statement_nonctrl              shift and go to state 324
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 128
    throw                          shift and go to state 125
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 121
    while                          shift and go to state 129
    continue                       shift and go to state 122
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 288

    (211) for_var_decl -> ID ASSIGN . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 325
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 289

    (218) ctrl_statement -> LBRACKET statementlist_opt RBRACKET .

    SEMI            reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    WHILE           reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 218 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)


state 290

    (119) funcref -> FUNCTION ID template_opt . push_scope LPAREN funcdeflist RPAREN func_type_opt
    (6) push_scope -> .

    LPAREN          reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 326

state 291

    (237) try -> TRY LBRACKET statementlist RBRACKET .

    SEMI            reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    FUNCTION        reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    WHILE           reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    WITH            reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    DO              reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    YIELD           reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    THROW           reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    TRY             reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    CATCH           reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    SWITCH          reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    NATIVE          reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    DELETE          reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    BITINV          reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    TYPEOF          reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    REGEXPR         reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    GLOBAL          reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    VAR             reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    TLTHAN          reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    RBRACKET        reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    CASE            reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)
    DEFAULT         reduce using rule 237 (try -> TRY LBRACKET statementlist RBRACKET .)


state 292

    (73) var_decl -> var_decl COMMA ID ASSIGN . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 327
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 293

    (222) while -> WHILE paren_expr LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 328


state 294

    (120) func_native -> NATIVE push_scope FUNCTION ID . template_opt LPAREN funcdeflist RPAREN func_type_opt
    (115) template_opt -> . template
    (116) template_opt -> .
    (51) template -> . lthan_restrict templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 116 (template_opt -> .)
    TLTHAN          shift and go to state 72

    template                       shift and go to state 115
    template_opt                   shift and go to state 329
    lthan_restrict                 shift and go to state 113

state 295

    (233) switch -> SWITCH paren_expr LBRACKET case_block . RBRACKET

    RBRACKET        shift and go to state 330


state 296

    (226) case_clause -> CASE . expr COLON statementlist_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 331
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 297

    (231) case_block -> case_clauses .
    (228) case_clauses -> case_clauses . case_clause
    (229) case_clauses_opt -> case_clauses .
    (226) case_clause -> . CASE expr COLON statementlist_opt

    RBRACKET        reduce using rule 231 (case_block -> case_clauses .)
    DEFAULT         reduce using rule 229 (case_clauses_opt -> case_clauses .)
    CASE            shift and go to state 296

    case_clause                    shift and go to state 332

state 298

    (232) case_block -> case_clauses_opt . default_case case_clauses_opt
    (223) default_case -> . DEFAULT COLON statementlist

    DEFAULT         shift and go to state 333

    default_case                   shift and go to state 334

state 299

    (227) case_clauses -> case_clause .

    CASE            reduce using rule 227 (case_clauses -> case_clause .)
    RBRACKET        reduce using rule 227 (case_clauses -> case_clause .)
    DEFAULT         reduce using rule 227 (case_clauses -> case_clause .)


state 300

    (240) catch -> CATCH paren_expr LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    RBRACKET        shift and go to state 335
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 15
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 80
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 81
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 301

    (192) expr -> expr QEST expr COLON . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    lthan_restrict                 shift and go to state 6
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 336
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 302

    (191) expr -> expr lsbracket_restrict expr rsbracket_restrict .

    SEMI            reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RSHIFT          reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LSHIFT          reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LLSHIFT         reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RRSHIFT         reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    DOT             reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LAND            reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LOR             reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    BOR             reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    INSTANCEOF      reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    BXOR            reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    BAND            reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    EQUAL           reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    EQUAL_STRICT    reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    GTHAN           reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    GTHANEQ         reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LTHAN           reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    MOD             reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LTHANEQ         reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    NOTEQUAL        reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    PLUS            reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    MINUS           reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    DIVIDE          reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    TIMES           reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    IN              reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    QEST            reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    COMMA           reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    INC             reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    DEC             reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNPLUS      reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNMINUS     reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNTIMES     reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNBOR       reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNBAND      reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNBXOR      reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGN          reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LSBRACKET       reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    TLTHAN          reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LPAREN          reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RSBRACKET       reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RPAREN          reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    COLON           reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RBRACKET        reduce using rule 191 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)


state 303

    (153) rsbracket_restrict -> RSBRACKET .

    SEMI            reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    RSHIFT          reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    LSHIFT          reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    LLSHIFT         reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    RRSHIFT         reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    DOT             reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    LAND            reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    LOR             reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    BOR             reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    INSTANCEOF      reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    BXOR            reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    BAND            reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    EQUAL           reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    EQUAL_STRICT    reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    NOTEQUAL_STRICT reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    GTHAN           reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    GTHANEQ         reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    LTHAN           reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    MOD             reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    LTHANEQ         reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    NOTEQUAL        reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    PLUS            reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    MINUS           reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    DIVIDE          reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    TIMES           reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    IN              reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    QEST            reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    COMMA           reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    INC             reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    DEC             reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNPLUS      reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNMINUS     reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNTIMES     reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNBOR       reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNBAND      reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNBXOR      reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    ASSIGN          reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    LSBRACKET       reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    TLTHAN          reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    LPAREN          reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    RSBRACKET       reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    RPAREN          reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    COLON           reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)
    RBRACKET        reduce using rule 153 (rsbracket_restrict -> RSBRACKET .)


state 304

    (111) func_call -> template_ref_opt LPAREN RPAREN .

    RSHIFT          reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    LSHIFT          reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    LLSHIFT         reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    RRSHIFT         reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    DOT             reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    LAND            reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    LOR             reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    BOR             reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    INSTANCEOF      reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    BXOR            reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    BAND            reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    EQUAL           reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    EQUAL_STRICT    reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    NOTEQUAL_STRICT reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    GTHAN           reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    GTHANEQ         reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    LTHAN           reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    MOD             reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    LTHANEQ         reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    PLUS            reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    MINUS           reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    DIVIDE          reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    TIMES           reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    IN              reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    QEST            reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    COMMA           reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    INC             reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    DEC             reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNPLUS      reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNMINUS     reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNDIVIDE    reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNTIMES     reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNBOR       reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNBAND      reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNBXOR      reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGN          reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    LSBRACKET       reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    TLTHAN          reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    LPAREN          reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    RSBRACKET       reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    RPAREN          reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    SEMI            reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    COLON           reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)
    RBRACKET        reduce using rule 111 (func_call -> template_ref_opt LPAREN RPAREN .)


state 305

    (110) func_call -> template_ref_opt LPAREN exprlist . RPAREN
    (107) exprlist -> exprlist . COMMA expr

    RPAREN          shift and go to state 337
    COMMA           shift and go to state 202


state 306

    (163) expr -> expr cmplx_assign expr COLON . var_type SEMI
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (74) id_var_type -> . ID

    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    ID              shift and go to state 110

    var_type                       shift and go to state 338
    id_var_type                    shift and go to state 111

state 307

    (220) dowhile -> DO ctrl_statement WHILE paren_expr .

    SEMI            reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    FUNCTION        reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    IF              reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    ELSE            reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    WHILE           reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    WITH            reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    DO              reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    FOR             reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    RETURN          reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    YIELD           reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    BREAK           reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    CONTINUE        reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    THROW           reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    TRY             reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    CATCH           reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    SWITCH          reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    NATIVE          reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    NUMBER          reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    ID              reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    DELETE          reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    STRINGLIT       reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    LSBRACKET       reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    LPAREN          reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    MINUS           reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    NOT             reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    BITINV          reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    NEW             reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    INC             reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    DEC             reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    TYPEOF          reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    REGEXPR         reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    GLOBAL          reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    VAR             reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    TLTHAN          reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    LBRACKET        reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    $end            reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    RBRACKET        reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    CASE            reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    DEFAULT         reduce using rule 220 (dowhile -> DO ctrl_statement WHILE paren_expr .)


state 308

    (137) obj_lit_list -> obj_lit_list COMMA . id_str_or_num COLON expr
    (138) obj_lit_list -> obj_lit_list COMMA .
    (132) id_str_or_num -> . ID
    (133) id_str_or_num -> . NUMBER
    (134) id_str_or_num -> . STRINGLIT

    COMMA           reduce using rule 138 (obj_lit_list -> obj_lit_list COMMA .)
    RBRACKET        reduce using rule 138 (obj_lit_list -> obj_lit_list COMMA .)
    ID              shift and go to state 276
    NUMBER          shift and go to state 273
    STRINGLIT       shift and go to state 275

    id_str_or_num                  shift and go to state 339

state 309

    (139) obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .

    SEMI            reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RSHIFT          reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LSHIFT          reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LLSHIFT         reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RRSHIFT         reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    DOT             reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LAND            reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LOR             reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    BOR             reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    INSTANCEOF      reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    BXOR            reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    BAND            reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    EQUAL           reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    EQUAL_STRICT    reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    GTHAN           reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    GTHANEQ         reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LTHAN           reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    MOD             reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LTHANEQ         reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    NOTEQUAL        reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    PLUS            reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    MINUS           reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    DIVIDE          reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    TIMES           reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    IN              reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    QEST            reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    COMMA           reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    INC             reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    DEC             reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNPLUS      reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNMINUS     reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNTIMES     reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNBOR       reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNBAND      reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNBXOR      reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGN          reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LSBRACKET       reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    TLTHAN          reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LPAREN          reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RSBRACKET       reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RPAREN          reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    COLON           reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RBRACKET        reduce using rule 139 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)


state 310

    (136) obj_lit_list -> id_str_or_num COLON . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 340
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 311

    (91) simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type .
    (78) var_type -> var_type . id_var_type
    (87) var_type -> var_type . template_ref
    (74) id_var_type -> . ID
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 91 (simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type .)
    TGTHAN          reduce using rule 91 (simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type .)
    ID              shift and go to state 110
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 212
    id_var_type                    shift and go to state 213

state 312

    (67) var_decl_no_list -> var_type .
    (78) var_type -> var_type . id_var_type
    (87) var_type -> var_type . template_ref
    (74) id_var_type -> . ID
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    ASSIGN          reduce using rule 67 (var_decl_no_list -> var_type .)
    RPAREN          reduce using rule 67 (var_decl_no_list -> var_type .)
    COMMA           reduce using rule 67 (var_decl_no_list -> var_type .)
    ID              shift and go to state 110
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 212
    id_var_type                    shift and go to state 213

state 313

    (68) var_decl_no_list -> type_modifiers . var_decl_no_list
    (52) type_modifiers -> type_modifiers . UNSIGNED
    (53) type_modifiers -> type_modifiers . SIGNED
    (54) type_modifiers -> type_modifiers . CONST
    (67) var_decl_no_list -> . var_type
    (68) var_decl_no_list -> . type_modifiers var_decl_no_list
    (69) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (74) id_var_type -> . ID

    UNSIGNED        shift and go to state 105
    SIGNED          shift and go to state 106
    CONST           shift and go to state 100
    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    ID              shift and go to state 110

    var_type                       shift and go to state 312
    var_decl_no_list               shift and go to state 341
    type_modifiers                 shift and go to state 313
    id_var_type                    shift and go to state 111

state 314

    (129) exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN . colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (126) colon_opt -> . COLON
    (127) colon_opt -> .

    COLON           shift and go to state 343
    INT             reduce using rule 127 (colon_opt -> .)
    SHORT           reduce using rule 127 (colon_opt -> .)
    FLOAT           reduce using rule 127 (colon_opt -> .)
    DOUBLE          reduce using rule 127 (colon_opt -> .)
    CHAR            reduce using rule 127 (colon_opt -> .)
    BYTE            reduce using rule 127 (colon_opt -> .)
    INFERRED        reduce using rule 127 (colon_opt -> .)
    ID              reduce using rule 127 (colon_opt -> .)
    LBRACKET        reduce using rule 127 (colon_opt -> .)

    colon_opt                      shift and go to state 342

state 315

    (112) funcdeflist -> var_decl_no_list .
    (69) var_decl_no_list -> var_decl_no_list . ASSIGN expr

    RPAREN          reduce using rule 112 (funcdeflist -> var_decl_no_list .)
    COMMA           reduce using rule 112 (funcdeflist -> var_decl_no_list .)
    ASSIGN          shift and go to state 344


state 316

    (128) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist . RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (113) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 345
    COMMA           shift and go to state 346


state 317

    (49) templatedeflist -> templatedeflist COMMA var_type .
    (50) templatedeflist -> templatedeflist COMMA var_type . ASSIGN var_type
    (78) var_type -> var_type . id_var_type
    (87) var_type -> var_type . template_ref
    (74) id_var_type -> . ID
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 49 (templatedeflist -> templatedeflist COMMA var_type .)
    TGTHAN          reduce using rule 49 (templatedeflist -> templatedeflist COMMA var_type .)
    ASSIGN          shift and go to state 347
    ID              shift and go to state 110
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 212
    id_var_type                    shift and go to state 213

state 318

    (48) templatedeflist -> var_type ASSIGN var_type .
    (78) var_type -> var_type . id_var_type
    (87) var_type -> var_type . template_ref
    (74) id_var_type -> . ID
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 48 (templatedeflist -> var_type ASSIGN var_type .)
    TGTHAN          reduce using rule 48 (templatedeflist -> var_type ASSIGN var_type .)
    ID              shift and go to state 110
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 212
    id_var_type                    shift and go to state 213

state 319

    (121) function -> FUNCTION ID template_opt push_scope LPAREN . funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (119) funcref -> FUNCTION ID template_opt push_scope LPAREN . funcdeflist RPAREN func_type_opt
    (112) funcdeflist -> . var_decl_no_list
    (113) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (114) funcdeflist -> .
    (67) var_decl_no_list -> . var_type
    (68) var_decl_no_list -> . type_modifiers var_decl_no_list
    (69) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (74) id_var_type -> . ID

    RPAREN          reduce using rule 114 (funcdeflist -> .)
    COMMA           reduce using rule 114 (funcdeflist -> .)
    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    ID              shift and go to state 110

    var_type                       shift and go to state 312
    var_decl_no_list               shift and go to state 315
    funcdeflist                    shift and go to state 348
    type_modifiers                 shift and go to state 313
    id_var_type                    shift and go to state 111

state 320

    (213) for_decl -> for_var_decl SEMI expr_opt . SEMI expr_opt

    SEMI            shift and go to state 349


state 321

    (207) expr_opt -> expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 207 (expr_opt -> expr .)
    RPAREN          reduce using rule 207 (expr_opt -> expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 322

    (214) for_decl -> for_var_decl IN expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    RPAREN          reduce using rule 214 (for_decl -> for_var_decl IN expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 323

    (216) for -> FOR LPAREN for_decl RPAREN LBRACKET . statementlist_opt RBRACKET
    (122) lbracket_restrict -> LBRACKET .
    (224) statementlist_opt -> . statementlist
    (225) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 122 (lbracket_restrict -> LBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

  ! RBRACKET        [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 122 (lbracket_restrict -> LBRACKET .) ]
  ! RBRACKET        [ reduce using rule 225 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 350
    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    statementlist                  shift and go to state 222
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    var_decl                       shift and go to state 37
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 46
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 49
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    yield                          shift and go to state 15
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 324

    (215) for -> FOR LPAREN for_decl RPAREN statement_nonctrl .

    RBRACKET        reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    SEMI            reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    FUNCTION        reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    IF              reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    ELSE            reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    WHILE           reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    WITH            reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    DO              reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    FOR             reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    RETURN          reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    YIELD           reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    BREAK           reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    CONTINUE        reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    THROW           reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    TRY             reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    CATCH           reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    SWITCH          reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    NATIVE          reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    NUMBER          reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    ID              reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    DELETE          reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    STRINGLIT       reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    LSBRACKET       reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    LPAREN          reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    MINUS           reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    NOT             reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    BITINV          reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    NEW             reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    INC             reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    DEC             reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    TYPEOF          reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    REGEXPR         reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    GLOBAL          reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    VAR             reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    TLTHAN          reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    LBRACKET        reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    $end            reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    CASE            reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    DEFAULT         reduce using rule 215 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)


state 325

    (211) for_var_decl -> ID ASSIGN expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 211 (for_var_decl -> ID ASSIGN expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

  ! IN              [ reduce using rule 211 (for_var_decl -> ID ASSIGN expr .) ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 326

    (119) funcref -> FUNCTION ID template_opt push_scope . LPAREN funcdeflist RPAREN func_type_opt

    LPAREN          shift and go to state 351


state 327

    (73) var_decl -> var_decl COMMA ID ASSIGN expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 73 (var_decl -> var_decl COMMA ID ASSIGN expr .)
    ASSIGN          reduce using rule 73 (var_decl -> var_decl COMMA ID ASSIGN expr .)
    COMMA           reduce using rule 73 (var_decl -> var_decl COMMA ID ASSIGN expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

  ! IN              [ reduce using rule 73 (var_decl -> var_decl COMMA ID ASSIGN expr .) ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGN          [ shift and go to state 172 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 328

    (222) while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .

    SEMI            reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    WHILE           reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 222 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)


state 329

    (120) func_native -> NATIVE push_scope FUNCTION ID template_opt . LPAREN funcdeflist RPAREN func_type_opt

    LPAREN          shift and go to state 352


state 330

    (233) switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .

    SEMI            reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    FUNCTION        reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    IF              reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    ELSE            reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    WHILE           reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    WITH            reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    DO              reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    FOR             reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    RETURN          reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    YIELD           reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    BREAK           reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    CONTINUE        reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    THROW           reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    TRY             reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    CATCH           reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    SWITCH          reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    NATIVE          reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    NUMBER          reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    ID              reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    DELETE          reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    STRINGLIT       reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    LSBRACKET       reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    LPAREN          reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    MINUS           reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    NOT             reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    BITINV          reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    NEW             reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    INC             reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    DEC             reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    TYPEOF          reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    REGEXPR         reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    GLOBAL          reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    VAR             reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    TLTHAN          reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    LBRACKET        reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    RBRACKET        reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    $end            reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    CASE            reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    DEFAULT         reduce using rule 233 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)


state 331

    (226) case_clause -> CASE expr . COLON statementlist_opt
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    COLON           shift and go to state 353
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    COMMA           shift and go to state 188
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 332

    (228) case_clauses -> case_clauses case_clause .

    CASE            reduce using rule 228 (case_clauses -> case_clauses case_clause .)
    RBRACKET        reduce using rule 228 (case_clauses -> case_clauses case_clause .)
    DEFAULT         reduce using rule 228 (case_clauses -> case_clauses case_clause .)


state 333

    (223) default_case -> DEFAULT . COLON statementlist

    COLON           shift and go to state 354


state 334

    (232) case_block -> case_clauses_opt default_case . case_clauses_opt
    (229) case_clauses_opt -> . case_clauses
    (230) case_clauses_opt -> .
    (227) case_clauses -> . case_clause
    (228) case_clauses -> . case_clauses case_clause
    (226) case_clause -> . CASE expr COLON statementlist_opt

    RBRACKET        reduce using rule 230 (case_clauses_opt -> .)
    CASE            shift and go to state 296

    case_clauses                   shift and go to state 355
    case_clauses_opt               shift and go to state 356
    case_clause                    shift and go to state 299

state 335

    (240) catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .

    RBRACKET        reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    SEMI            reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    FUNCTION        reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    WHILE           reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    WITH            reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    DO              reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    YIELD           reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    THROW           reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    TRY             reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    CATCH           reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    SWITCH          reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    NATIVE          reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    DELETE          reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    BITINV          reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    TYPEOF          reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    REGEXPR         reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    GLOBAL          reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    VAR             reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    TLTHAN          reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    CASE            reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    DEFAULT         reduce using rule 240 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)


state 336

    (192) expr -> expr QEST expr COLON expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 109 (template_ref_opt -> .)
    SEMI            reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    MOD             reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    QEST            reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    COMMA           reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    ASSIGNPLUS      reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    ASSIGNMINUS     reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    ASSIGNDIVIDE    reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    ASSIGNTIMES     reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    ASSIGNBOR       reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    ASSIGNBAND      reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    ASSIGNBXOR      reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    ASSIGN          reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    TLTHAN          reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    RSBRACKET       reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    RPAREN          reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    COLON           reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    RBRACKET        reduce using rule 192 (expr -> expr QEST expr COLON expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    INC             shift and go to state 165
    DEC             shift and go to state 158
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! LSHIFT          [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! LLSHIFT         [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! RRSHIFT         [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! DOT             [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! LAND            [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! LOR             [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! BOR             [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! INSTANCEOF      [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! BXOR            [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! BAND            [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! EQUAL           [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! GTHAN           [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! GTHANEQ         [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! LTHAN           [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! LTHANEQ         [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! NOTEQUAL        [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! PLUS            [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! MINUS           [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! TIMES           [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! IN              [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! INC             [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! DEC             [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! LSBRACKET       [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! LPAREN          [ reduce using rule 192 (expr -> expr QEST expr COLON expr .) ]
  ! MOD             [ shift and go to state 190 ]
  ! QEST            [ shift and go to state 154 ]
  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGNPLUS      [ shift and go to state 185 ]
  ! ASSIGNMINUS     [ shift and go to state 161 ]
  ! ASSIGNDIVIDE    [ shift and go to state 156 ]
  ! ASSIGNTIMES     [ shift and go to state 166 ]
  ! ASSIGNBOR       [ shift and go to state 157 ]
  ! ASSIGNBAND      [ shift and go to state 181 ]
  ! ASSIGNBXOR      [ shift and go to state 189 ]
  ! ASSIGN          [ shift and go to state 172 ]
  ! TLTHAN          [ shift and go to state 72 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 337

    (110) func_call -> template_ref_opt LPAREN exprlist RPAREN .

    RSHIFT          reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LSHIFT          reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LLSHIFT         reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RRSHIFT         reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    DOT             reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LAND            reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LOR             reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    BOR             reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    INSTANCEOF      reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    BXOR            reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    BAND            reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    EQUAL           reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    EQUAL_STRICT    reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    NOTEQUAL_STRICT reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    GTHAN           reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    GTHANEQ         reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LTHAN           reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    MOD             reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LTHANEQ         reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    NOTEQUAL        reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    PLUS            reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    IN              reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    QEST            reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    INC             reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    DEC             reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNPLUS      reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNMINUS     reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNDIVIDE    reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNTIMES     reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNBOR       reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNBAND      reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNBXOR      reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGN          reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LSBRACKET       reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    TLTHAN          reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LPAREN          reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RSBRACKET       reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    SEMI            reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    COLON           reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 110 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)


state 338

    (163) expr -> expr cmplx_assign expr COLON var_type . SEMI
    (78) var_type -> var_type . id_var_type
    (87) var_type -> var_type . template_ref
    (74) id_var_type -> . ID
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    SEMI            shift and go to state 357
    ID              shift and go to state 110
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 212
    id_var_type                    shift and go to state 213

state 339

    (137) obj_lit_list -> obj_lit_list COMMA id_str_or_num . COLON expr

    COLON           shift and go to state 358


state 340

    (136) obj_lit_list -> id_str_or_num COLON expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 136 (obj_lit_list -> id_str_or_num COLON expr .)
    RBRACKET        reduce using rule 136 (obj_lit_list -> id_str_or_num COLON expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

  ! COMMA           [ shift and go to state 188 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 341

    (68) var_decl_no_list -> type_modifiers var_decl_no_list .
    (69) var_decl_no_list -> var_decl_no_list . ASSIGN expr

  ! shift/reduce conflict for ASSIGN resolved as shift
    RPAREN          reduce using rule 68 (var_decl_no_list -> type_modifiers var_decl_no_list .)
    COMMA           reduce using rule 68 (var_decl_no_list -> type_modifiers var_decl_no_list .)
    ASSIGN          shift and go to state 344

  ! ASSIGN          [ reduce using rule 68 (var_decl_no_list -> type_modifiers var_decl_no_list .) ]


state 342

    (129) exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt . var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (124) var_type_opt -> . var_type
    (125) var_type_opt -> .
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (74) id_var_type -> . ID

    LBRACKET        reduce using rule 125 (var_type_opt -> .)
    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    ID              shift and go to state 110

    var_type                       shift and go to state 359
    var_type_opt                   shift and go to state 360
    id_var_type                    shift and go to state 111

state 343

    (126) colon_opt -> COLON .

    INT             reduce using rule 126 (colon_opt -> COLON .)
    SHORT           reduce using rule 126 (colon_opt -> COLON .)
    FLOAT           reduce using rule 126 (colon_opt -> COLON .)
    DOUBLE          reduce using rule 126 (colon_opt -> COLON .)
    CHAR            reduce using rule 126 (colon_opt -> COLON .)
    BYTE            reduce using rule 126 (colon_opt -> COLON .)
    INFERRED        reduce using rule 126 (colon_opt -> COLON .)
    ID              reduce using rule 126 (colon_opt -> COLON .)
    LBRACKET        reduce using rule 126 (colon_opt -> COLON .)


state 344

    (69) var_decl_no_list -> var_decl_no_list ASSIGN . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 361
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 345

    (128) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN . colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (126) colon_opt -> . COLON
    (127) colon_opt -> .

    COLON           shift and go to state 343
    INT             reduce using rule 127 (colon_opt -> .)
    SHORT           reduce using rule 127 (colon_opt -> .)
    FLOAT           reduce using rule 127 (colon_opt -> .)
    DOUBLE          reduce using rule 127 (colon_opt -> .)
    CHAR            reduce using rule 127 (colon_opt -> .)
    BYTE            reduce using rule 127 (colon_opt -> .)
    INFERRED        reduce using rule 127 (colon_opt -> .)
    ID              reduce using rule 127 (colon_opt -> .)
    LBRACKET        reduce using rule 127 (colon_opt -> .)

    colon_opt                      shift and go to state 362

state 346

    (113) funcdeflist -> funcdeflist COMMA . var_decl_no_list
    (67) var_decl_no_list -> . var_type
    (68) var_decl_no_list -> . type_modifiers var_decl_no_list
    (69) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (74) id_var_type -> . ID

    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    ID              shift and go to state 110

    var_type                       shift and go to state 312
    var_decl_no_list               shift and go to state 363
    type_modifiers                 shift and go to state 313
    id_var_type                    shift and go to state 111

state 347

    (50) templatedeflist -> templatedeflist COMMA var_type ASSIGN . var_type
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (74) id_var_type -> . ID

    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    ID              shift and go to state 110

    var_type                       shift and go to state 364
    id_var_type                    shift and go to state 111

state 348

    (121) function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist . RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (119) funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist . RPAREN func_type_opt
    (113) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 365
    COMMA           shift and go to state 346


state 349

    (213) for_decl -> for_var_decl SEMI expr_opt SEMI . expr_opt
    (207) expr_opt -> . expr
    (208) expr_opt -> .
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    RPAREN          reduce using rule 208 (expr_opt -> .)
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    expr_opt                       shift and go to state 366
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 321
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 350

    (216) for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 367


state 351

    (119) funcref -> FUNCTION ID template_opt push_scope LPAREN . funcdeflist RPAREN func_type_opt
    (112) funcdeflist -> . var_decl_no_list
    (113) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (114) funcdeflist -> .
    (67) var_decl_no_list -> . var_type
    (68) var_decl_no_list -> . type_modifiers var_decl_no_list
    (69) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (74) id_var_type -> . ID

    RPAREN          reduce using rule 114 (funcdeflist -> .)
    COMMA           reduce using rule 114 (funcdeflist -> .)
    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    ID              shift and go to state 110

    var_type                       shift and go to state 312
    var_decl_no_list               shift and go to state 315
    funcdeflist                    shift and go to state 368
    type_modifiers                 shift and go to state 313
    id_var_type                    shift and go to state 111

state 352

    (120) func_native -> NATIVE push_scope FUNCTION ID template_opt LPAREN . funcdeflist RPAREN func_type_opt
    (112) funcdeflist -> . var_decl_no_list
    (113) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (114) funcdeflist -> .
    (67) var_decl_no_list -> . var_type
    (68) var_decl_no_list -> . type_modifiers var_decl_no_list
    (69) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (74) id_var_type -> . ID

    RPAREN          reduce using rule 114 (funcdeflist -> .)
    COMMA           reduce using rule 114 (funcdeflist -> .)
    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    ID              shift and go to state 110

    var_type                       shift and go to state 312
    var_decl_no_list               shift and go to state 315
    funcdeflist                    shift and go to state 369
    type_modifiers                 shift and go to state 313
    id_var_type                    shift and go to state 111

state 353

    (226) case_clause -> CASE expr COLON . statementlist_opt
    (224) statementlist_opt -> . statementlist
    (225) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for CASE resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CASE            reduce using rule 5 (statementlist -> .)
    RBRACKET        reduce using rule 5 (statementlist -> .)
    DEFAULT         reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

  ! CASE            [ reduce using rule 225 (statementlist_opt -> .) ]
  ! RBRACKET        [ reduce using rule 225 (statementlist_opt -> .) ]
  ! DEFAULT         [ reduce using rule 225 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 370
    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    statementlist                  shift and go to state 222
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 15
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 46
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 49
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 354

    (223) default_case -> DEFAULT COLON . statementlist
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CASE            reduce using rule 5 (statementlist -> .)
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    statementlist                  shift and go to state 371
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 15
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 46
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 49
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 355

    (229) case_clauses_opt -> case_clauses .
    (228) case_clauses -> case_clauses . case_clause
    (226) case_clause -> . CASE expr COLON statementlist_opt

    RBRACKET        reduce using rule 229 (case_clauses_opt -> case_clauses .)
    CASE            shift and go to state 296

    case_clause                    shift and go to state 332

state 356

    (232) case_block -> case_clauses_opt default_case case_clauses_opt .

    RBRACKET        reduce using rule 232 (case_block -> case_clauses_opt default_case case_clauses_opt .)


state 357

    (163) expr -> expr cmplx_assign expr COLON var_type SEMI .

    SEMI            reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RSHIFT          reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LSHIFT          reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LLSHIFT         reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RRSHIFT         reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    DOT             reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LAND            reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LOR             reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    BOR             reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    INSTANCEOF      reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    BXOR            reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    BAND            reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    EQUAL           reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    EQUAL_STRICT    reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    NOTEQUAL_STRICT reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    GTHAN           reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    GTHANEQ         reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LTHAN           reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    MOD             reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LTHANEQ         reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    NOTEQUAL        reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    PLUS            reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    MINUS           reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    DIVIDE          reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    TIMES           reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    IN              reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    QEST            reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    COMMA           reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    INC             reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    DEC             reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNPLUS      reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNMINUS     reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNDIVIDE    reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNTIMES     reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNBOR       reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNBAND      reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNBXOR      reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGN          reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LSBRACKET       reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    TLTHAN          reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LPAREN          reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RSBRACKET       reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RPAREN          reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    COLON           reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RBRACKET        reduce using rule 163 (expr -> expr cmplx_assign expr COLON var_type SEMI .)


state 358

    (137) obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON . expr
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    FUNCTION        shift and go to state 77
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    inc                            shift and go to state 62
    strlit                         shift and go to state 24
    lbracket_restrict              shift and go to state 71
    obj_literal                    shift and go to state 27
    new                            shift and go to state 29
    template_ref                   shift and go to state 30
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 50
    not                            shift and go to state 14
    bitinv                         shift and go to state 36
    expr                           shift and go to state 372
    typeof                         shift and go to state 56
    dec                            shift and go to state 57

state 359

    (124) var_type_opt -> var_type .
    (78) var_type -> var_type . id_var_type
    (87) var_type -> var_type . template_ref
    (74) id_var_type -> . ID
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    LBRACKET        reduce using rule 124 (var_type_opt -> var_type .)
    SEMI            reduce using rule 124 (var_type_opt -> var_type .)
    ID              shift and go to state 110
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 212
    id_var_type                    shift and go to state 213

state 360

    (129) exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt . lbracket_restrict statementlist_opt rbracket_restrict
    (122) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 4

    lbracket_restrict              shift and go to state 373

state 361

    (69) var_decl_no_list -> var_decl_no_list ASSIGN expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    ASSIGN          reduce using rule 69 (var_decl_no_list -> var_decl_no_list ASSIGN expr .)
    RPAREN          reduce using rule 69 (var_decl_no_list -> var_decl_no_list ASSIGN expr .)
    COMMA           reduce using rule 69 (var_decl_no_list -> var_decl_no_list ASSIGN expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

  ! COMMA           [ shift and go to state 188 ]
  ! ASSIGN          [ shift and go to state 172 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 362

    (128) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt . var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (124) var_type_opt -> . var_type
    (125) var_type_opt -> .
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (74) id_var_type -> . ID

    LBRACKET        reduce using rule 125 (var_type_opt -> .)
    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    ID              shift and go to state 110

    var_type                       shift and go to state 359
    var_type_opt                   shift and go to state 374
    id_var_type                    shift and go to state 111

state 363

    (113) funcdeflist -> funcdeflist COMMA var_decl_no_list .
    (69) var_decl_no_list -> var_decl_no_list . ASSIGN expr

    RPAREN          reduce using rule 113 (funcdeflist -> funcdeflist COMMA var_decl_no_list .)
    COMMA           reduce using rule 113 (funcdeflist -> funcdeflist COMMA var_decl_no_list .)
    ASSIGN          shift and go to state 344


state 364

    (50) templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type .
    (78) var_type -> var_type . id_var_type
    (87) var_type -> var_type . template_ref
    (74) id_var_type -> . ID
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 50 (templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type .)
    TGTHAN          reduce using rule 50 (templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type .)
    ID              shift and go to state 110
    TLTHAN          shift and go to state 72

    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 212
    id_var_type                    shift and go to state 213

state 365

    (121) function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN . func_type_opt LBRACKET statementlist_opt RBRACKET
    (119) funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN . func_type_opt
    (117) func_type_opt -> . COLON var_type_opt
    (118) func_type_opt -> .

    COLON           shift and go to state 375
    LBRACKET        reduce using rule 118 (func_type_opt -> .)
    SEMI            reduce using rule 118 (func_type_opt -> .)

    func_type_opt                  shift and go to state 376

state 366

    (213) for_decl -> for_var_decl SEMI expr_opt SEMI expr_opt .

    RPAREN          reduce using rule 213 (for_decl -> for_var_decl SEMI expr_opt SEMI expr_opt .)


state 367

    (216) for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .

    RBRACKET        reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    SEMI            reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    WHILE           reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 216 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)


state 368

    (119) funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist . RPAREN func_type_opt
    (113) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 377
    COMMA           shift and go to state 346


state 369

    (120) func_native -> NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist . RPAREN func_type_opt
    (113) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 378
    COMMA           shift and go to state 346


state 370

    (226) case_clause -> CASE expr COLON statementlist_opt .

    CASE            reduce using rule 226 (case_clause -> CASE expr COLON statementlist_opt .)
    RBRACKET        reduce using rule 226 (case_clause -> CASE expr COLON statementlist_opt .)
    DEFAULT         reduce using rule 226 (case_clause -> CASE expr COLON statementlist_opt .)


state 371

    (223) default_case -> DEFAULT COLON statementlist .
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

    CASE            reduce using rule 223 (default_case -> DEFAULT COLON statementlist .)
    RBRACKET        reduce using rule 223 (default_case -> DEFAULT COLON statementlist .)
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    yield                          shift and go to state 15
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    while                          shift and go to state 55
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 80
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 81
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    var_decl                       shift and go to state 37
    try                            shift and go to state 16
    switch                         shift and go to state 73
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 372

    (137) obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON expr .
    (162) expr -> expr . cmplx_assign expr
    (163) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (164) expr -> expr . RSHIFT expr
    (165) expr -> expr . LSHIFT expr
    (166) expr -> expr . LLSHIFT expr
    (167) expr -> expr . RRSHIFT expr
    (168) expr -> expr . DOT expr
    (169) expr -> expr . LAND expr
    (170) expr -> expr . LOR expr
    (171) expr -> expr . BOR expr
    (172) expr -> expr . INSTANCEOF expr
    (173) expr -> expr . BXOR expr
    (174) expr -> expr . BAND expr
    (175) expr -> expr . EQUAL expr
    (176) expr -> expr . EQUAL_STRICT expr
    (177) expr -> expr . NOTEQUAL_STRICT expr
    (178) expr -> expr . GTHAN expr
    (179) expr -> expr . GTHANEQ expr
    (180) expr -> expr . LTHAN expr
    (181) expr -> expr . MOD expr
    (182) expr -> expr . LTHANEQ expr
    (183) expr -> expr . NOTEQUAL expr
    (184) expr -> expr . PLUS expr
    (185) expr -> expr . MINUS expr
    (186) expr -> expr . DIVIDE expr
    (187) expr -> expr . TIMES expr
    (188) expr -> expr . IN expr
    (190) expr -> expr . func_call
    (191) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (192) expr -> expr . QEST expr COLON expr
    (201) expr -> expr . COMMA expr
    (143) inc -> expr . INC
    (145) dec -> expr . DEC
    (94) cmplx_assign -> . ASSIGNPLUS
    (95) cmplx_assign -> . ASSIGNMINUS
    (96) cmplx_assign -> . ASSIGNDIVIDE
    (97) cmplx_assign -> . ASSIGNTIMES
    (98) cmplx_assign -> . ASSIGNBOR
    (99) cmplx_assign -> . ASSIGNBAND
    (100) cmplx_assign -> . ASSIGNBXOR
    (101) cmplx_assign -> . ASSIGN
    (110) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (111) func_call -> . template_ref_opt LPAREN RPAREN
    (152) lsbracket_restrict -> . LSBRACKET
    (108) template_ref_opt -> . template_ref
    (109) template_ref_opt -> .
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (64) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 137 (obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON expr .)
    RBRACKET        reduce using rule 137 (obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON expr .)
    RSHIFT          shift and go to state 149
    LSHIFT          shift and go to state 155
    LLSHIFT         shift and go to state 148
    RRSHIFT         shift and go to state 182
    DOT             shift and go to state 160
    LAND            shift and go to state 162
    LOR             shift and go to state 153
    BOR             shift and go to state 151
    INSTANCEOF      shift and go to state 183
    BXOR            shift and go to state 164
    BAND            shift and go to state 179
    EQUAL           shift and go to state 152
    EQUAL_STRICT    shift and go to state 184
    NOTEQUAL_STRICT shift and go to state 174
    GTHAN           shift and go to state 186
    GTHANEQ         shift and go to state 170
    LTHAN           shift and go to state 178
    MOD             shift and go to state 190
    LTHANEQ         shift and go to state 168
    NOTEQUAL        shift and go to state 147
    PLUS            shift and go to state 169
    MINUS           shift and go to state 159
    DIVIDE          shift and go to state 175
    TIMES           shift and go to state 177
    IN              shift and go to state 180
    QEST            shift and go to state 154
    INC             shift and go to state 165
    DEC             shift and go to state 158
    ASSIGNPLUS      shift and go to state 185
    ASSIGNMINUS     shift and go to state 161
    ASSIGNDIVIDE    shift and go to state 156
    ASSIGNTIMES     shift and go to state 166
    ASSIGNBOR       shift and go to state 157
    ASSIGNBAND      shift and go to state 181
    ASSIGNBXOR      shift and go to state 189
    ASSIGN          shift and go to state 172
    LSBRACKET       shift and go to state 150
    LPAREN          reduce using rule 109 (template_ref_opt -> .)
    TLTHAN          shift and go to state 72

  ! COMMA           [ shift and go to state 188 ]

    func_call                      shift and go to state 173
    template_ref_opt               shift and go to state 176
    cmplx_assign                   shift and go to state 187
    lthan_restrict                 shift and go to state 6
    template_ref                   shift and go to state 171
    lsbracket_restrict             shift and go to state 167

state 373

    (129) exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict . statementlist_opt rbracket_restrict
    (224) statementlist_opt -> . statementlist
    (225) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

  ! RBRACKET        [ reduce using rule 225 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 379
    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    statementlist                  shift and go to state 222
    lparen_restrict                shift and go to state 21
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    switch                         shift and go to state 73
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 46
    new                            shift and go to state 29
    inc                            shift and go to state 62
    typeof                         shift and go to state 56
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 49
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    exprfunction                   shift and go to state 22
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    yield                          shift and go to state 15
    try                            shift and go to state 16
    while                          shift and go to state 55
    continue                       shift and go to state 17
    var_decl                       shift and go to state 37
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 374

    (128) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt . lbracket_restrict statementlist_opt rbracket_restrict
    (122) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 4

    lbracket_restrict              shift and go to state 380

state 375

    (117) func_type_opt -> COLON . var_type_opt
    (124) var_type_opt -> . var_type
    (125) var_type_opt -> .
    (78) var_type -> . var_type id_var_type
    (79) var_type -> . id_var_type
    (80) var_type -> . INT
    (81) var_type -> . SHORT
    (82) var_type -> . FLOAT
    (83) var_type -> . DOUBLE
    (84) var_type -> . CHAR
    (85) var_type -> . BYTE
    (86) var_type -> . INFERRED
    (87) var_type -> . var_type template_ref
    (74) id_var_type -> . ID

    LBRACKET        reduce using rule 125 (var_type_opt -> .)
    SEMI            reduce using rule 125 (var_type_opt -> .)
    INT             shift and go to state 102
    SHORT           shift and go to state 99
    FLOAT           shift and go to state 104
    DOUBLE          shift and go to state 103
    CHAR            shift and go to state 108
    BYTE            shift and go to state 109
    INFERRED        shift and go to state 107
    ID              shift and go to state 110

    var_type_opt                   shift and go to state 381
    var_type                       shift and go to state 359
    id_var_type                    shift and go to state 111

state 376

    (121) function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt . LBRACKET statementlist_opt RBRACKET
    (119) funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt .

    LBRACKET        shift and go to state 382
    SEMI            reduce using rule 119 (funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt .)


state 377

    (119) funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN . func_type_opt
    (117) func_type_opt -> . COLON var_type_opt
    (118) func_type_opt -> .

    COLON           shift and go to state 375
    SEMI            reduce using rule 118 (func_type_opt -> .)

    func_type_opt                  shift and go to state 383

state 378

    (120) func_native -> NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN . func_type_opt
    (117) func_type_opt -> . COLON var_type_opt
    (118) func_type_opt -> .

    COLON           shift and go to state 375
    SEMI            reduce using rule 118 (func_type_opt -> .)

    func_type_opt                  shift and go to state 384

state 379

    (129) exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt . rbracket_restrict
    (123) rbracket_restrict -> . RBRACKET

    RBRACKET        shift and go to state 197

    rbracket_restrict              shift and go to state 385

state 380

    (128) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict . statementlist_opt rbracket_restrict
    (224) statementlist_opt -> . statementlist
    (225) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

  ! RBRACKET        [ reduce using rule 225 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 386
    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    statementlist                  shift and go to state 222
    lparen_restrict                shift and go to state 21
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    switch                         shift and go to state 73
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 46
    new                            shift and go to state 29
    inc                            shift and go to state 62
    typeof                         shift and go to state 56
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 49
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    exprfunction                   shift and go to state 22
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    yield                          shift and go to state 15
    try                            shift and go to state 16
    while                          shift and go to state 55
    continue                       shift and go to state 17
    var_decl                       shift and go to state 37
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 381

    (117) func_type_opt -> COLON var_type_opt .

    SEMI            reduce using rule 117 (func_type_opt -> COLON var_type_opt .)
    LBRACKET        reduce using rule 117 (func_type_opt -> COLON var_type_opt .)


state 382

    (121) function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET . statementlist_opt RBRACKET
    (224) statementlist_opt -> . statementlist
    (225) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . if
    (14) statement -> . else
    (15) statement -> . while
    (16) statement -> . with
    (17) statement -> . dowhile
    (18) statement -> . for
    (19) statement -> . return SEMI
    (20) statement -> . yield SEMI
    (21) statement -> . break SEMI
    (22) statement -> . continue SEMI
    (23) statement -> . throw SEMI
    (24) statement -> . try
    (25) statement -> . catch
    (26) statement -> . switch
    (27) statement -> . func_native SEMI
    (28) statement_nonctrl -> . expr SEMI
    (29) statement_nonctrl -> . var_decl SEMI
    (30) statement_nonctrl -> . funcref SEMI
    (31) statement_nonctrl -> . SEMI
    (32) statement_nonctrl -> . if
    (33) statement_nonctrl -> . else
    (34) statement_nonctrl -> . for
    (35) statement_nonctrl -> . dowhile
    (36) statement_nonctrl -> . while
    (37) statement_nonctrl -> . return SEMI
    (38) statement_nonctrl -> . yield SEMI
    (39) statement_nonctrl -> . break SEMI
    (40) statement_nonctrl -> . continue SEMI
    (41) statement_nonctrl -> . throw SEMI
    (42) statement_nonctrl -> . try
    (43) statement_nonctrl -> . catch
    (44) statement_nonctrl -> . delete SEMI
    (121) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (235) if -> . IF paren_expr ctrl_statement
    (241) else -> . ELSE ctrl_statement
    (221) while -> . WHILE paren_expr statement_nonctrl
    (222) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (234) with -> . WITH paren_expr ctrl_statement
    (220) dowhile -> . DO ctrl_statement WHILE paren_expr
    (215) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (216) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (244) return -> . RETURN expr
    (245) return -> . RETURN
    (246) yield -> . YIELD expr
    (247) yield -> . YIELD
    (242) break -> . BREAK
    (243) continue -> . CONTINUE
    (102) throw -> . THROW expr
    (236) try -> . TRY statement_nonctrl
    (237) try -> . TRY LBRACKET statementlist RBRACKET
    (238) try -> . TRY LBRACKET RBRACKET
    (239) catch -> . CATCH paren_expr statement_nonctrl
    (240) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (233) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (120) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (154) expr -> . NUMBER
    (155) expr -> . strlit
    (156) expr -> . ID
    (157) expr -> . ID template_ref
    (158) expr -> . template_ref
    (159) expr -> . array_literal
    (160) expr -> . exprfunction
    (161) expr -> . obj_literal
    (162) expr -> . expr cmplx_assign expr
    (163) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (164) expr -> . expr RSHIFT expr
    (165) expr -> . expr LSHIFT expr
    (166) expr -> . expr LLSHIFT expr
    (167) expr -> . expr RRSHIFT expr
    (168) expr -> . expr DOT expr
    (169) expr -> . expr LAND expr
    (170) expr -> . expr LOR expr
    (171) expr -> . expr BOR expr
    (172) expr -> . expr INSTANCEOF expr
    (173) expr -> . expr BXOR expr
    (174) expr -> . expr BAND expr
    (175) expr -> . expr EQUAL expr
    (176) expr -> . expr EQUAL_STRICT expr
    (177) expr -> . expr NOTEQUAL_STRICT expr
    (178) expr -> . expr GTHAN expr
    (179) expr -> . expr GTHANEQ expr
    (180) expr -> . expr LTHAN expr
    (181) expr -> . expr MOD expr
    (182) expr -> . expr LTHANEQ expr
    (183) expr -> . expr NOTEQUAL expr
    (184) expr -> . expr PLUS expr
    (185) expr -> . expr MINUS expr
    (186) expr -> . expr DIVIDE expr
    (187) expr -> . expr TIMES expr
    (188) expr -> . expr IN expr
    (189) expr -> . lparen_restrict expr rparen_restrict
    (190) expr -> . expr func_call
    (191) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (192) expr -> . expr QEST expr COLON expr
    (193) expr -> . expr_uminus
    (194) expr -> . not
    (195) expr -> . bitinv
    (196) expr -> . new
    (197) expr -> . inc
    (198) expr -> . dec
    (199) expr -> . typeof
    (200) expr -> . re_lit
    (201) expr -> . expr COMMA expr
    (70) var_decl -> . type_modifiers var_type
    (71) var_decl -> . var_decl ASSIGN expr
    (72) var_decl -> . var_decl COMMA ID
    (73) var_decl -> . var_decl COMMA ID ASSIGN expr
    (119) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (141) delete -> . DELETE expr
    (149) strlit -> . STRINGLIT
    (60) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (130) array_literal -> . LSBRACKET exprlist RSBRACKET
    (131) array_literal -> . LSBRACKET RSBRACKET
    (128) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (129) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (140) obj_literal -> . lbracket_restrict rbracket_restrict
    (150) lparen_restrict -> . LPAREN
    (202) expr_uminus -> . MINUS expr
    (147) not -> . NOT expr
    (148) bitinv -> . BITINV expr
    (142) new -> . NEW expr
    (143) inc -> . expr INC
    (144) inc -> . INC expr
    (145) dec -> . expr DEC
    (146) dec -> . DEC expr
    (135) typeof -> . TYPEOF expr
    (209) re_lit -> . REGEXPR
    (52) type_modifiers -> . type_modifiers UNSIGNED
    (53) type_modifiers -> . type_modifiers SIGNED
    (54) type_modifiers -> . type_modifiers CONST
    (55) type_modifiers -> . GLOBAL
    (56) type_modifiers -> . VAR
    (64) lthan_restrict -> . TLTHAN
    (122) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 63
    FUNCTION        shift and go to state 31
    IF              shift and go to state 70
    ELSE            shift and go to state 33
    WHILE           shift and go to state 41
    WITH            shift and go to state 8
    DO              shift and go to state 59
    FOR             shift and go to state 32
    RETURN          shift and go to state 20
    YIELD           shift and go to state 65
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 38
    THROW           shift and go to state 75
    TRY             shift and go to state 34
    CATCH           shift and go to state 47
    SWITCH          shift and go to state 44
    NATIVE          shift and go to state 43
    NUMBER          shift and go to state 60
    ID              shift and go to state 69
    DELETE          shift and go to state 19
    STRINGLIT       shift and go to state 3
    LSBRACKET       shift and go to state 1
    LPAREN          shift and go to state 67
    MINUS           shift and go to state 9
    NOT             shift and go to state 39
    BITINV          shift and go to state 26
    NEW             shift and go to state 42
    INC             shift and go to state 74
    DEC             shift and go to state 23
    TYPEOF          shift and go to state 18
    REGEXPR         shift and go to state 10
    GLOBAL          shift and go to state 11
    VAR             shift and go to state 5
    TLTHAN          shift and go to state 72
    LBRACKET        shift and go to state 4

  ! RBRACKET        [ reduce using rule 225 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    statementlist_opt              shift and go to state 387
    template_ref                   shift and go to state 30
    lthan_restrict                 shift and go to state 6
    re_lit                         shift and go to state 40
    statementlist                  shift and go to state 222
    lparen_restrict                shift and go to state 21
    exprfunction                   shift and go to state 22
    var_decl                       shift and go to state 37
    funcref                        shift and go to state 7
    type_modifiers                 shift and go to state 28
    if                             shift and go to state 61
    strlit                         shift and go to state 24
    for                            shift and go to state 25
    obj_literal                    shift and go to state 27
    switch                         shift and go to state 73
    dowhile                        shift and go to state 64
    func_native                    shift and go to state 45
    statement                      shift and go to state 46
    new                            shift and go to state 29
    inc                            shift and go to state 62
    function                       shift and go to state 48
    return                         shift and go to state 12
    else                           shift and go to state 68
    break                          shift and go to state 13
    statement_nonctrl              shift and go to state 49
    array_literal                  shift and go to state 66
    not                            shift and go to state 14
    expr_uminus                    shift and go to state 50
    catch                          shift and go to state 51
    with                           shift and go to state 52
    throw                          shift and go to state 35
    lbracket_restrict              shift and go to state 71
    bitinv                         shift and go to state 36
    expr                           shift and go to state 53
    yield                          shift and go to state 15
    try                            shift and go to state 16
    while                          shift and go to state 55
    continue                       shift and go to state 17
    typeof                         shift and go to state 56
    dec                            shift and go to state 57
    delete                         shift and go to state 58

state 383

    (119) funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt .

    SEMI            reduce using rule 119 (funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt .)


state 384

    (120) func_native -> NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt .

    SEMI            reduce using rule 120 (func_native -> NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt .)


state 385

    (129) exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .

    SEMI            reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RSHIFT          reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LSHIFT          reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LLSHIFT         reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RRSHIFT         reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DOT             reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LAND            reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LOR             reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BOR             reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    INSTANCEOF      reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BXOR            reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BAND            reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EQUAL           reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EQUAL_STRICT    reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GTHAN           reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GTHANEQ         reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LTHAN           reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    MOD             reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LTHANEQ         reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOTEQUAL        reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    PLUS            reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    MINUS           reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DIVIDE          reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TIMES           reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    IN              reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    QEST            reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COMMA           reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    INC             reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DEC             reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNPLUS      reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNMINUS     reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNTIMES     reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBOR       reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBAND      reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBXOR      reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGN          reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LSBRACKET       reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TLTHAN          reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LPAREN          reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RPAREN          reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RSBRACKET       reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COLON           reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RBRACKET        reduce using rule 129 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)


state 386

    (128) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt . rbracket_restrict
    (123) rbracket_restrict -> . RBRACKET

    RBRACKET        shift and go to state 197

    rbracket_restrict              shift and go to state 388

state 387

    (121) function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 389


state 388

    (128) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .

    SEMI            reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RSHIFT          reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LSHIFT          reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LLSHIFT         reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RRSHIFT         reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DOT             reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LAND            reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LOR             reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BOR             reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    INSTANCEOF      reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BXOR            reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BAND            reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EQUAL           reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EQUAL_STRICT    reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GTHAN           reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GTHANEQ         reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LTHAN           reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    MOD             reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LTHANEQ         reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOTEQUAL        reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    PLUS            reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    MINUS           reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DIVIDE          reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TIMES           reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    IN              reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    QEST            reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COMMA           reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    INC             reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DEC             reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNPLUS      reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNMINUS     reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNTIMES     reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBOR       reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBAND      reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBXOR      reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGN          reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LSBRACKET       reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TLTHAN          reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LPAREN          reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RPAREN          reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RSBRACKET       reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COLON           reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RBRACKET        reduce using rule 128 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)


state 389

    (121) function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .

    SEMI            reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    WHILE           reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 121 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMI in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for WITH in state 0 resolved as shift
WARNING: shift/reduce conflict for DO in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 0 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 0 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 0 resolved as shift
WARNING: shift/reduce conflict for THROW in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 0 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 0 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 0 resolved as shift
WARNING: shift/reduce conflict for NEW in state 0 resolved as shift
WARNING: shift/reduce conflict for INC in state 0 resolved as shift
WARNING: shift/reduce conflict for DEC in state 0 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 0 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 0 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 69 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 78 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 117 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 117 resolved as shift
WARNING: shift/reduce conflict for IF in state 117 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 117 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 117 resolved as shift
WARNING: shift/reduce conflict for WITH in state 117 resolved as shift
WARNING: shift/reduce conflict for DO in state 117 resolved as shift
WARNING: shift/reduce conflict for FOR in state 117 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 117 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 117 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 117 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 117 resolved as shift
WARNING: shift/reduce conflict for THROW in state 117 resolved as shift
WARNING: shift/reduce conflict for TRY in state 117 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 117 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 117 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 117 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 117 resolved as shift
WARNING: shift/reduce conflict for ID in state 117 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 117 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 117 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 117 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for NOT in state 117 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 117 resolved as shift
WARNING: shift/reduce conflict for NEW in state 117 resolved as shift
WARNING: shift/reduce conflict for INC in state 117 resolved as shift
WARNING: shift/reduce conflict for DEC in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 117 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 117 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 117 resolved as shift
WARNING: shift/reduce conflict for VAR in state 117 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 117 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 117 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 134 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 134 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 134 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 134 resolved as shift
WARNING: shift/reduce conflict for IF in state 134 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 134 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 134 resolved as shift
WARNING: shift/reduce conflict for WITH in state 134 resolved as shift
WARNING: shift/reduce conflict for DO in state 134 resolved as shift
WARNING: shift/reduce conflict for FOR in state 134 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 134 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 134 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 134 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 134 resolved as shift
WARNING: shift/reduce conflict for THROW in state 134 resolved as shift
WARNING: shift/reduce conflict for TRY in state 134 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 134 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 134 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 134 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 134 resolved as shift
WARNING: shift/reduce conflict for ID in state 134 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 134 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 134 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 134 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for NOT in state 134 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 134 resolved as shift
WARNING: shift/reduce conflict for NEW in state 134 resolved as shift
WARNING: shift/reduce conflict for INC in state 134 resolved as shift
WARNING: shift/reduce conflict for DEC in state 134 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 134 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 134 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 134 resolved as shift
WARNING: shift/reduce conflict for VAR in state 134 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 134 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 134 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 233 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 234 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 234 resolved as shift
WARNING: shift/reduce conflict for IF in state 234 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 234 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 234 resolved as shift
WARNING: shift/reduce conflict for WITH in state 234 resolved as shift
WARNING: shift/reduce conflict for DO in state 234 resolved as shift
WARNING: shift/reduce conflict for FOR in state 234 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 234 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 234 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 234 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 234 resolved as shift
WARNING: shift/reduce conflict for THROW in state 234 resolved as shift
WARNING: shift/reduce conflict for TRY in state 234 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 234 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 234 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 234 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 234 resolved as shift
WARNING: shift/reduce conflict for ID in state 234 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 234 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 234 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 234 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 234 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 234 resolved as shift
WARNING: shift/reduce conflict for NOT in state 234 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 234 resolved as shift
WARNING: shift/reduce conflict for NEW in state 234 resolved as shift
WARNING: shift/reduce conflict for INC in state 234 resolved as shift
WARNING: shift/reduce conflict for DEC in state 234 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 234 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 234 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 234 resolved as shift
WARNING: shift/reduce conflict for VAR in state 234 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 234 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 234 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 238 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 238 resolved as shift
WARNING: shift/reduce conflict for IF in state 238 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 238 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 238 resolved as shift
WARNING: shift/reduce conflict for WITH in state 238 resolved as shift
WARNING: shift/reduce conflict for DO in state 238 resolved as shift
WARNING: shift/reduce conflict for FOR in state 238 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 238 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 238 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 238 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 238 resolved as shift
WARNING: shift/reduce conflict for THROW in state 238 resolved as shift
WARNING: shift/reduce conflict for TRY in state 238 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 238 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 238 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 238 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 238 resolved as shift
WARNING: shift/reduce conflict for ID in state 238 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 238 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 238 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 238 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 238 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 238 resolved as shift
WARNING: shift/reduce conflict for NOT in state 238 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 238 resolved as shift
WARNING: shift/reduce conflict for NEW in state 238 resolved as shift
WARNING: shift/reduce conflict for INC in state 238 resolved as shift
WARNING: shift/reduce conflict for DEC in state 238 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 238 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 238 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 238 resolved as shift
WARNING: shift/reduce conflict for VAR in state 238 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 238 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 238 resolved as shift
WARNING: shift/reduce conflict for COLON in state 267 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 267 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 267 resolved as shift
WARNING: shift/reduce conflict for LLSHIFT in state 267 resolved as shift
WARNING: shift/reduce conflict for RRSHIFT in state 267 resolved as shift
WARNING: shift/reduce conflict for DOT in state 267 resolved as shift
WARNING: shift/reduce conflict for LAND in state 267 resolved as shift
WARNING: shift/reduce conflict for LOR in state 267 resolved as shift
WARNING: shift/reduce conflict for BOR in state 267 resolved as shift
WARNING: shift/reduce conflict for INSTANCEOF in state 267 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 267 resolved as shift
WARNING: shift/reduce conflict for BAND in state 267 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 267 resolved as shift
WARNING: shift/reduce conflict for EQUAL_STRICT in state 267 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL_STRICT in state 267 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 267 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 267 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 267 resolved as shift
WARNING: shift/reduce conflict for MOD in state 267 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 267 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 267 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 267 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 267 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 267 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 267 resolved as shift
WARNING: shift/reduce conflict for IN in state 267 resolved as shift
WARNING: shift/reduce conflict for QEST in state 267 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 267 resolved as shift
WARNING: shift/reduce conflict for INC in state 267 resolved as shift
WARNING: shift/reduce conflict for DEC in state 267 resolved as shift
WARNING: shift/reduce conflict for ASSIGNPLUS in state 267 resolved as shift
WARNING: shift/reduce conflict for ASSIGNMINUS in state 267 resolved as shift
WARNING: shift/reduce conflict for ASSIGNDIVIDE in state 267 resolved as shift
WARNING: shift/reduce conflict for ASSIGNTIMES in state 267 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBOR in state 267 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBAND in state 267 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBXOR in state 267 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 267 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 267 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 267 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 269 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 269 resolved as shift
WARNING: shift/reduce conflict for LLSHIFT in state 269 resolved as shift
WARNING: shift/reduce conflict for RRSHIFT in state 269 resolved as shift
WARNING: shift/reduce conflict for DOT in state 269 resolved as shift
WARNING: shift/reduce conflict for LAND in state 269 resolved as shift
WARNING: shift/reduce conflict for LOR in state 269 resolved as shift
WARNING: shift/reduce conflict for BOR in state 269 resolved as shift
WARNING: shift/reduce conflict for INSTANCEOF in state 269 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 269 resolved as shift
WARNING: shift/reduce conflict for BAND in state 269 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 269 resolved as shift
WARNING: shift/reduce conflict for EQUAL_STRICT in state 269 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL_STRICT in state 269 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 269 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 269 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 269 resolved as shift
WARNING: shift/reduce conflict for MOD in state 269 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 269 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 269 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 269 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 269 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 269 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 269 resolved as shift
WARNING: shift/reduce conflict for IN in state 269 resolved as shift
WARNING: shift/reduce conflict for QEST in state 269 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 269 resolved as shift
WARNING: shift/reduce conflict for INC in state 269 resolved as shift
WARNING: shift/reduce conflict for DEC in state 269 resolved as shift
WARNING: shift/reduce conflict for ASSIGNPLUS in state 269 resolved as shift
WARNING: shift/reduce conflict for ASSIGNMINUS in state 269 resolved as shift
WARNING: shift/reduce conflict for ASSIGNDIVIDE in state 269 resolved as shift
WARNING: shift/reduce conflict for ASSIGNTIMES in state 269 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBOR in state 269 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBAND in state 269 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBXOR in state 269 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 269 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 269 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 269 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 280 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 323 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 323 resolved as shift
WARNING: shift/reduce conflict for IF in state 323 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 323 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 323 resolved as shift
WARNING: shift/reduce conflict for WITH in state 323 resolved as shift
WARNING: shift/reduce conflict for DO in state 323 resolved as shift
WARNING: shift/reduce conflict for FOR in state 323 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 323 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 323 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 323 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 323 resolved as shift
WARNING: shift/reduce conflict for THROW in state 323 resolved as shift
WARNING: shift/reduce conflict for TRY in state 323 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 323 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 323 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 323 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 323 resolved as shift
WARNING: shift/reduce conflict for ID in state 323 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 323 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 323 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 323 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 323 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 323 resolved as shift
WARNING: shift/reduce conflict for NOT in state 323 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 323 resolved as shift
WARNING: shift/reduce conflict for NEW in state 323 resolved as shift
WARNING: shift/reduce conflict for INC in state 323 resolved as shift
WARNING: shift/reduce conflict for DEC in state 323 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 323 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 323 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 323 resolved as shift
WARNING: shift/reduce conflict for VAR in state 323 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 323 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 323 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 341 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 353 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 353 resolved as shift
WARNING: shift/reduce conflict for IF in state 353 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 353 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 353 resolved as shift
WARNING: shift/reduce conflict for WITH in state 353 resolved as shift
WARNING: shift/reduce conflict for DO in state 353 resolved as shift
WARNING: shift/reduce conflict for FOR in state 353 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 353 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 353 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 353 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 353 resolved as shift
WARNING: shift/reduce conflict for THROW in state 353 resolved as shift
WARNING: shift/reduce conflict for TRY in state 353 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 353 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 353 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 353 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 353 resolved as shift
WARNING: shift/reduce conflict for ID in state 353 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 353 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 353 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 353 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 353 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 353 resolved as shift
WARNING: shift/reduce conflict for NOT in state 353 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 353 resolved as shift
WARNING: shift/reduce conflict for NEW in state 353 resolved as shift
WARNING: shift/reduce conflict for INC in state 353 resolved as shift
WARNING: shift/reduce conflict for DEC in state 353 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 353 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 353 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 353 resolved as shift
WARNING: shift/reduce conflict for VAR in state 353 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 353 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 353 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 354 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 354 resolved as shift
WARNING: shift/reduce conflict for IF in state 354 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 354 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 354 resolved as shift
WARNING: shift/reduce conflict for WITH in state 354 resolved as shift
WARNING: shift/reduce conflict for DO in state 354 resolved as shift
WARNING: shift/reduce conflict for FOR in state 354 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 354 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 354 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 354 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 354 resolved as shift
WARNING: shift/reduce conflict for THROW in state 354 resolved as shift
WARNING: shift/reduce conflict for TRY in state 354 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 354 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 354 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 354 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 354 resolved as shift
WARNING: shift/reduce conflict for ID in state 354 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 354 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 354 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 354 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 354 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 354 resolved as shift
WARNING: shift/reduce conflict for NOT in state 354 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 354 resolved as shift
WARNING: shift/reduce conflict for NEW in state 354 resolved as shift
WARNING: shift/reduce conflict for INC in state 354 resolved as shift
WARNING: shift/reduce conflict for DEC in state 354 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 354 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 354 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 354 resolved as shift
WARNING: shift/reduce conflict for VAR in state 354 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 354 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 354 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 373 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 373 resolved as shift
WARNING: shift/reduce conflict for IF in state 373 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 373 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 373 resolved as shift
WARNING: shift/reduce conflict for WITH in state 373 resolved as shift
WARNING: shift/reduce conflict for DO in state 373 resolved as shift
WARNING: shift/reduce conflict for FOR in state 373 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 373 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 373 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 373 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 373 resolved as shift
WARNING: shift/reduce conflict for THROW in state 373 resolved as shift
WARNING: shift/reduce conflict for TRY in state 373 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 373 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 373 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 373 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 373 resolved as shift
WARNING: shift/reduce conflict for ID in state 373 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 373 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 373 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 373 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 373 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 373 resolved as shift
WARNING: shift/reduce conflict for NOT in state 373 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 373 resolved as shift
WARNING: shift/reduce conflict for NEW in state 373 resolved as shift
WARNING: shift/reduce conflict for INC in state 373 resolved as shift
WARNING: shift/reduce conflict for DEC in state 373 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 373 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 373 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 373 resolved as shift
WARNING: shift/reduce conflict for VAR in state 373 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 373 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 373 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 380 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 380 resolved as shift
WARNING: shift/reduce conflict for IF in state 380 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 380 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 380 resolved as shift
WARNING: shift/reduce conflict for WITH in state 380 resolved as shift
WARNING: shift/reduce conflict for DO in state 380 resolved as shift
WARNING: shift/reduce conflict for FOR in state 380 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 380 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 380 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 380 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 380 resolved as shift
WARNING: shift/reduce conflict for THROW in state 380 resolved as shift
WARNING: shift/reduce conflict for TRY in state 380 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 380 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 380 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 380 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 380 resolved as shift
WARNING: shift/reduce conflict for ID in state 380 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 380 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 380 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 380 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 380 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 380 resolved as shift
WARNING: shift/reduce conflict for NOT in state 380 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 380 resolved as shift
WARNING: shift/reduce conflict for NEW in state 380 resolved as shift
WARNING: shift/reduce conflict for INC in state 380 resolved as shift
WARNING: shift/reduce conflict for DEC in state 380 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 380 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 380 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 380 resolved as shift
WARNING: shift/reduce conflict for VAR in state 380 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 380 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 380 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 382 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 382 resolved as shift
WARNING: shift/reduce conflict for IF in state 382 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 382 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 382 resolved as shift
WARNING: shift/reduce conflict for WITH in state 382 resolved as shift
WARNING: shift/reduce conflict for DO in state 382 resolved as shift
WARNING: shift/reduce conflict for FOR in state 382 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 382 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 382 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 382 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 382 resolved as shift
WARNING: shift/reduce conflict for THROW in state 382 resolved as shift
WARNING: shift/reduce conflict for TRY in state 382 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 382 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 382 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 382 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 382 resolved as shift
WARNING: shift/reduce conflict for ID in state 382 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 382 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 382 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 382 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 382 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 382 resolved as shift
WARNING: shift/reduce conflict for NOT in state 382 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 382 resolved as shift
WARNING: shift/reduce conflict for NEW in state 382 resolved as shift
WARNING: shift/reduce conflict for INC in state 382 resolved as shift
WARNING: shift/reduce conflict for DEC in state 382 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 382 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 382 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 382 resolved as shift
WARNING: shift/reduce conflict for VAR in state 382 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 382 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 382 resolved as shift
WARNING: reduce/reduce conflict in state 16 resolved using rule (statement -> try)
WARNING: rejected rule (statement_nonctrl -> try) in state 16
WARNING: reduce/reduce conflict in state 25 resolved using rule (statement -> for)
WARNING: rejected rule (statement_nonctrl -> for) in state 25
WARNING: reduce/reduce conflict in state 51 resolved using rule (statement -> catch)
WARNING: rejected rule (statement_nonctrl -> catch) in state 51
WARNING: reduce/reduce conflict in state 55 resolved using rule (statement -> while)
WARNING: rejected rule (statement_nonctrl -> while) in state 55
WARNING: reduce/reduce conflict in state 61 resolved using rule (statement -> if)
WARNING: rejected rule (statement_nonctrl -> if) in state 61
WARNING: reduce/reduce conflict in state 64 resolved using rule (statement -> dowhile)
WARNING: rejected rule (statement_nonctrl -> dowhile) in state 64
WARNING: reduce/reduce conflict in state 68 resolved using rule (statement -> else)
WARNING: rejected rule (statement_nonctrl -> else) in state 68
WARNING: reduce/reduce conflict in state 88 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr_uminus -> MINUS expr) in state 88
WARNING: reduce/reduce conflict in state 89 resolved using rule (statement -> return SEMI)
WARNING: rejected rule (statement_nonctrl -> return SEMI) in state 89
WARNING: reduce/reduce conflict in state 90 resolved using rule (statement -> break SEMI)
WARNING: rejected rule (statement_nonctrl -> break SEMI) in state 90
WARNING: reduce/reduce conflict in state 91 resolved using rule (statement -> yield SEMI)
WARNING: rejected rule (statement_nonctrl -> yield SEMI) in state 91
WARNING: reduce/reduce conflict in state 92 resolved using rule (statement -> continue SEMI)
WARNING: rejected rule (statement_nonctrl -> continue SEMI) in state 92
WARNING: reduce/reduce conflict in state 93 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (typeof -> TYPEOF expr) in state 93
WARNING: reduce/reduce conflict in state 97 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (dec -> DEC expr) in state 97
WARNING: reduce/reduce conflict in state 98 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (bitinv -> BITINV expr) in state 98
WARNING: reduce/reduce conflict in state 117 resolved using rule (lbracket_restrict -> LBRACKET)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 117
WARNING: reduce/reduce conflict in state 117 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 117
WARNING: reduce/reduce conflict in state 131 resolved using rule (statement_nonctrl -> SEMI)
WARNING: rejected rule (ctrl_statement -> SEMI) in state 131
WARNING: reduce/reduce conflict in state 134 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 134
WARNING: reduce/reduce conflict in state 136 resolved using rule (statement -> throw SEMI)
WARNING: rejected rule (statement_nonctrl -> throw SEMI) in state 136
WARNING: reduce/reduce conflict in state 140 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (not -> NOT expr) in state 140
WARNING: reduce/reduce conflict in state 142 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (new -> NEW expr) in state 142
WARNING: reduce/reduce conflict in state 199 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (inc -> INC expr) in state 199
WARNING: reduce/reduce conflict in state 234 resolved using rule (lbracket_restrict -> LBRACKET)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 234
WARNING: reduce/reduce conflict in state 234 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 234
WARNING: reduce/reduce conflict in state 238 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 238
WARNING: reduce/reduce conflict in state 240 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr NOTEQUAL expr) in state 240
WARNING: reduce/reduce conflict in state 241 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LLSHIFT expr) in state 241
WARNING: reduce/reduce conflict in state 242 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr RSHIFT expr) in state 242
WARNING: reduce/reduce conflict in state 243 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr BOR expr) in state 243
WARNING: reduce/reduce conflict in state 244 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr EQUAL expr) in state 244
WARNING: reduce/reduce conflict in state 245 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LOR expr) in state 245
WARNING: reduce/reduce conflict in state 247 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LSHIFT expr) in state 247
WARNING: reduce/reduce conflict in state 248 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr MINUS expr) in state 248
WARNING: reduce/reduce conflict in state 249 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr DOT expr) in state 249
WARNING: reduce/reduce conflict in state 250 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LAND expr) in state 250
WARNING: reduce/reduce conflict in state 251 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr BXOR expr) in state 251
WARNING: reduce/reduce conflict in state 253 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LTHANEQ expr) in state 253
WARNING: reduce/reduce conflict in state 254 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr PLUS expr) in state 254
WARNING: reduce/reduce conflict in state 255 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr GTHANEQ expr) in state 255
WARNING: reduce/reduce conflict in state 256 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr NOTEQUAL_STRICT expr) in state 256
WARNING: reduce/reduce conflict in state 257 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr DIVIDE expr) in state 257
WARNING: reduce/reduce conflict in state 259 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr TIMES expr) in state 259
WARNING: reduce/reduce conflict in state 260 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LTHAN expr) in state 260
WARNING: reduce/reduce conflict in state 261 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr BAND expr) in state 261
WARNING: reduce/reduce conflict in state 262 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr IN expr) in state 262
WARNING: reduce/reduce conflict in state 263 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr RRSHIFT expr) in state 263
WARNING: reduce/reduce conflict in state 264 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr INSTANCEOF expr) in state 264
WARNING: reduce/reduce conflict in state 265 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr EQUAL_STRICT expr) in state 265
WARNING: reduce/reduce conflict in state 266 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr GTHAN expr) in state 266
WARNING: reduce/reduce conflict in state 267 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr cmplx_assign expr) in state 267
WARNING: reduce/reduce conflict in state 268 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr COMMA expr) in state 268
WARNING: reduce/reduce conflict in state 269 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr MOD expr) in state 269
WARNING: reduce/reduce conflict in state 323 resolved using rule (lbracket_restrict -> LBRACKET)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 323
WARNING: reduce/reduce conflict in state 323 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 323
WARNING: reduce/reduce conflict in state 336 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr QEST expr COLON expr) in state 336
WARNING: reduce/reduce conflict in state 353 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 353
WARNING: reduce/reduce conflict in state 373 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 373
WARNING: reduce/reduce conflict in state 380 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 380
WARNING: reduce/reduce conflict in state 382 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 382
WARNING: Rule (statementlist_opt -> <empty>) is never reduced
WARNING: Rule (ctrl_statement -> SEMI) is never reduced
